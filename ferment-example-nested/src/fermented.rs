# [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unused_braces , unused_imports , unused_unsafe , unused_variables , unused_qualifications)] pub mod types { pub mod ferment_example { pub mod chain { pub mod common { pub mod chain_type { # [doc = "FFI-representation of the [`ferment_example::chain::common::chain_type::ChainType`]"] # [repr (C)] # [derive (Clone)] pub enum ferment_example_chain_common_chain_type_ChainType { MainNet , TestNet , DevNet (* mut crate :: fermented :: types :: ferment_example :: chain :: common :: chain_type :: ferment_example_chain_common_chain_type_DevnetType) } impl ferment_interfaces :: FFIConversion < ferment_example :: chain :: common :: chain_type :: ChainType > for ferment_example_chain_common_chain_type_ChainType { unsafe fn ffi_from_const (ffi : * const ferment_example_chain_common_chain_type_ChainType) -> ferment_example :: chain :: common :: chain_type :: ChainType { let ffi_ref = & * ffi ; match ffi_ref { ferment_example_chain_common_chain_type_ChainType :: MainNet => ferment_example :: chain :: common :: chain_type :: ChainType :: MainNet , ferment_example_chain_common_chain_type_ChainType :: TestNet => ferment_example :: chain :: common :: chain_type :: ChainType :: TestNet , ferment_example_chain_common_chain_type_ChainType :: DevNet (o_0) => ferment_example :: chain :: common :: chain_type :: ChainType :: DevNet (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : ferment_example :: chain :: common :: chain_type :: ChainType) -> * const ferment_example_chain_common_chain_type_ChainType { ferment_interfaces :: boxed (match obj { ferment_example :: chain :: common :: chain_type :: ChainType :: MainNet => ferment_example_chain_common_chain_type_ChainType :: MainNet , ferment_example :: chain :: common :: chain_type :: ChainType :: TestNet => ferment_example_chain_common_chain_type_ChainType :: TestNet , ferment_example :: chain :: common :: chain_type :: ChainType :: DevNet (o_0) => ferment_example_chain_common_chain_type_ChainType :: DevNet (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut ferment_example_chain_common_chain_type_ChainType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_chain_common_chain_type_ChainType { fn drop (& mut self) { unsafe { match self { ferment_example_chain_common_chain_type_ChainType :: MainNet => { } , ferment_example_chain_common_chain_type_ChainType :: TestNet => { } , ferment_example_chain_common_chain_type_ChainType :: DevNet (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_chain_common_chain_type_ChainType_MainNet_ctor () -> * mut ferment_example_chain_common_chain_type_ChainType { ferment_interfaces :: boxed (ferment_example_chain_common_chain_type_ChainType :: MainNet) } # [no_mangle] pub unsafe extern "C" fn ferment_example_chain_common_chain_type_ChainType_TestNet_ctor () -> * mut ferment_example_chain_common_chain_type_ChainType { ferment_interfaces :: boxed (ferment_example_chain_common_chain_type_ChainType :: TestNet) } # [no_mangle] pub unsafe extern "C" fn ferment_example_chain_common_chain_type_ChainType_DevNet_ctor (o_0 : * mut crate :: fermented :: types :: ferment_example :: chain :: common :: chain_type :: ferment_example_chain_common_chain_type_DevnetType) -> * mut ferment_example_chain_common_chain_type_ChainType { ferment_interfaces :: boxed (ferment_example_chain_common_chain_type_ChainType :: DevNet (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_chain_common_chain_type_ChainType_destroy (ffi : * mut ferment_example_chain_common_chain_type_ChainType) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`ferment_example::chain::common::chain_type::DevnetType::ty`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_chain_common_chain_type_DevnetType_ty () -> * mut std :: os :: raw :: c_char { let obj = < ferment_example :: chain :: common :: chain_type :: DevnetType as ferment_example :: chain :: common :: chain_type :: IHaveChainSettings > :: ty () ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`ferment_example::chain::common::chain_type::DevnetType::name`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_chain_common_chain_type_DevnetType_name (self_ : * mut ferment_example_chain_common_chain_type_IHaveChainSettings) -> * mut std :: os :: raw :: c_char { let obj = < ferment_example :: chain :: common :: chain_type :: DevnetType as ferment_example :: chain :: common :: chain_type :: IHaveChainSettings > :: name (& * ((* self_) . object as * const ferment_example :: chain :: common :: chain_type :: DevnetType)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`ferment_example::chain::common::chain_type::DevnetType::genesis_hash`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_chain_common_chain_type_DevnetType_genesis_hash (self_ : * mut ferment_example_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_HashID { let obj = < ferment_example :: chain :: common :: chain_type :: DevnetType as ferment_example :: chain :: common :: chain_type :: IHaveChainSettings > :: genesis_hash (& * ((* self_) . object as * const ferment_example :: chain :: common :: chain_type :: DevnetType)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`ferment_example::chain::common::chain_type::DevnetType::genesis_height`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_chain_common_chain_type_DevnetType_genesis_height (self_ : * mut ferment_example_chain_common_chain_type_IHaveChainSettings) -> u32 { let obj = < ferment_example :: chain :: common :: chain_type :: DevnetType as ferment_example :: chain :: common :: chain_type :: IHaveChainSettings > :: genesis_height (& * ((* self_) . object as * const ferment_example :: chain :: common :: chain_type :: DevnetType)) ; obj } # [doc = "FFI-representation of the [`ferment_example::chain::common::chain_type::DevnetType::should_process_llmq_of_type`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_chain_common_chain_type_DevnetType_should_process_llmq_of_type (self_ : * mut ferment_example_chain_common_chain_type_IHaveChainSettings , llmq_type : u16) -> bool { let obj = < ferment_example :: chain :: common :: chain_type :: DevnetType as ferment_example :: chain :: common :: chain_type :: IHaveChainSettings > :: should_process_llmq_of_type (& * ((* self_) . object as * const ferment_example :: chain :: common :: chain_type :: DevnetType) , llmq_type) ; obj } # [doc = "FFI-representation of the [`ferment_example::chain::common::chain_type::DevnetType`]"] # [repr (C)] # [derive (Clone)] pub enum ferment_example_chain_common_chain_type_DevnetType { JackDaniels = 0 , Devnet333 = 1 , Chacha = 2 , Mojito = 3 , WhiteRussian = 4 } impl ferment_interfaces :: FFIConversion < ferment_example :: chain :: common :: chain_type :: DevnetType > for ferment_example_chain_common_chain_type_DevnetType { unsafe fn ffi_from_const (ffi : * const ferment_example_chain_common_chain_type_DevnetType) -> ferment_example :: chain :: common :: chain_type :: DevnetType { let ffi_ref = & * ffi ; match ffi_ref { ferment_example_chain_common_chain_type_DevnetType :: JackDaniels => ferment_example :: chain :: common :: chain_type :: DevnetType :: JackDaniels , ferment_example_chain_common_chain_type_DevnetType :: Devnet333 => ferment_example :: chain :: common :: chain_type :: DevnetType :: Devnet333 , ferment_example_chain_common_chain_type_DevnetType :: Chacha => ferment_example :: chain :: common :: chain_type :: DevnetType :: Chacha , ferment_example_chain_common_chain_type_DevnetType :: Mojito => ferment_example :: chain :: common :: chain_type :: DevnetType :: Mojito , ferment_example_chain_common_chain_type_DevnetType :: WhiteRussian => ferment_example :: chain :: common :: chain_type :: DevnetType :: WhiteRussian } } unsafe fn ffi_to_const (obj : ferment_example :: chain :: common :: chain_type :: DevnetType) -> * const ferment_example_chain_common_chain_type_DevnetType { ferment_interfaces :: boxed (match obj { ferment_example :: chain :: common :: chain_type :: DevnetType :: JackDaniels => ferment_example_chain_common_chain_type_DevnetType :: JackDaniels , ferment_example :: chain :: common :: chain_type :: DevnetType :: Devnet333 => ferment_example_chain_common_chain_type_DevnetType :: Devnet333 , ferment_example :: chain :: common :: chain_type :: DevnetType :: Chacha => ferment_example_chain_common_chain_type_DevnetType :: Chacha , ferment_example :: chain :: common :: chain_type :: DevnetType :: Mojito => ferment_example_chain_common_chain_type_DevnetType :: Mojito , ferment_example :: chain :: common :: chain_type :: DevnetType :: WhiteRussian => ferment_example_chain_common_chain_type_DevnetType :: WhiteRussian }) } unsafe fn destroy (ffi : * mut ferment_example_chain_common_chain_type_DevnetType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_chain_common_chain_type_DevnetType { fn drop (& mut self) { unsafe { match self { ferment_example_chain_common_chain_type_DevnetType :: JackDaniels => { } , ferment_example_chain_common_chain_type_DevnetType :: Devnet333 => { } , ferment_example_chain_common_chain_type_DevnetType :: Chacha => { } , ferment_example_chain_common_chain_type_DevnetType :: Mojito => { } , ferment_example_chain_common_chain_type_DevnetType :: WhiteRussian => { } } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_chain_common_chain_type_DevnetType_JackDaniels_ctor () -> * mut ferment_example_chain_common_chain_type_DevnetType { ferment_interfaces :: boxed (ferment_example_chain_common_chain_type_DevnetType :: JackDaniels) } # [no_mangle] pub unsafe extern "C" fn ferment_example_chain_common_chain_type_DevnetType_Devnet333_ctor () -> * mut ferment_example_chain_common_chain_type_DevnetType { ferment_interfaces :: boxed (ferment_example_chain_common_chain_type_DevnetType :: Devnet333) } # [no_mangle] pub unsafe extern "C" fn ferment_example_chain_common_chain_type_DevnetType_Chacha_ctor () -> * mut ferment_example_chain_common_chain_type_DevnetType { ferment_interfaces :: boxed (ferment_example_chain_common_chain_type_DevnetType :: Chacha) } # [no_mangle] pub unsafe extern "C" fn ferment_example_chain_common_chain_type_DevnetType_Mojito_ctor () -> * mut ferment_example_chain_common_chain_type_DevnetType { ferment_interfaces :: boxed (ferment_example_chain_common_chain_type_DevnetType :: Mojito) } # [no_mangle] pub unsafe extern "C" fn ferment_example_chain_common_chain_type_DevnetType_WhiteRussian_ctor () -> * mut ferment_example_chain_common_chain_type_DevnetType { ferment_interfaces :: boxed (ferment_example_chain_common_chain_type_DevnetType :: WhiteRussian) } # [no_mangle] pub unsafe extern "C" fn ferment_example_chain_common_chain_type_DevnetType_destroy (ffi : * mut ferment_example_chain_common_chain_type_DevnetType) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct ferment_example_chain_common_chain_type_IHaveChainSettings_VTable { # [doc = "FFI-representation of the [`ferment_example::chain::common::chain_type::IHaveChainSettings::ty`]"] pub ty : unsafe extern "C" fn () -> * mut std :: os :: raw :: c_char , # [doc = "FFI-representation of the [`ferment_example::chain::common::chain_type::IHaveChainSettings::name`]"] pub name : unsafe extern "C" fn (self_ : * mut ferment_example_chain_common_chain_type_IHaveChainSettings) -> * mut std :: os :: raw :: c_char , # [doc = "FFI-representation of the [`ferment_example::chain::common::chain_type::IHaveChainSettings::genesis_hash`]"] pub genesis_hash : unsafe extern "C" fn (self_ : * mut ferment_example_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_HashID , # [doc = "FFI-representation of the [`ferment_example::chain::common::chain_type::IHaveChainSettings::genesis_height`]"] pub genesis_height : unsafe extern "C" fn (self_ : * mut ferment_example_chain_common_chain_type_IHaveChainSettings) -> u32 , # [doc = "FFI-representation of the [`ferment_example::chain::common::chain_type::IHaveChainSettings::has_genesis_hash`]"] pub has_genesis_hash : unsafe extern "C" fn (self_ : * mut ferment_example_chain_common_chain_type_IHaveChainSettings , hash : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_HashID) -> bool , # [doc = "FFI-representation of the [`ferment_example::chain::common::chain_type::IHaveChainSettings::get_hash_by_hash`]"] pub get_hash_by_hash : unsafe extern "C" fn (self_ : * mut ferment_example_chain_common_chain_type_IHaveChainSettings , hash : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_HashID) -> * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_HashID , # [doc = "FFI-representation of the [`ferment_example::chain::common::chain_type::IHaveChainSettings::should_process_llmq_of_type`]"] pub should_process_llmq_of_type : unsafe extern "C" fn (self_ : * mut ferment_example_chain_common_chain_type_IHaveChainSettings , llmq_type : u16) -> bool , # [doc = "FFI-representation of the [`ferment_example::chain::common::chain_type::IHaveChainSettings::find_masternode_list`]"] pub find_masternode_list : unsafe extern "C" fn (self_ : * mut ferment_example_chain_common_chain_type_IHaveChainSettings , cached_mn_lists : * mut crate :: fermented :: generics :: std_collections_Map_keys_ferment_example_nested_HashID_values_ferment_example_nested_HashID , unknown_mn_lists : * mut crate :: fermented :: generics :: Vec_ferment_example_nested_HashID) -> * mut crate :: fermented :: generics :: Result_ok_ferment_example_nested_HashID_err_ferment_example_nested_ProtocolError } # [repr (C)] # [derive (Clone)] pub struct ferment_example_chain_common_chain_type_IHaveChainSettings { pub object : * const () , pub vtable : * const ferment_example_chain_common_chain_type_IHaveChainSettings_VTable } # [doc = "FFI-representation of the [`ferment_example::chain::common::chain_type::ChainType::ty`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_chain_common_chain_type_ChainType_ty () -> * mut std :: os :: raw :: c_char { let obj = < ferment_example :: chain :: common :: chain_type :: ChainType as ferment_example :: chain :: common :: chain_type :: IHaveChainSettings > :: ty () ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`ferment_example::chain::common::chain_type::ChainType::name`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_chain_common_chain_type_ChainType_name (self_ : * mut ferment_example_chain_common_chain_type_IHaveChainSettings) -> * mut std :: os :: raw :: c_char { let obj = < ferment_example :: chain :: common :: chain_type :: ChainType as ferment_example :: chain :: common :: chain_type :: IHaveChainSettings > :: name (& * ((* self_) . object as * const ferment_example :: chain :: common :: chain_type :: ChainType)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`ferment_example::chain::common::chain_type::ChainType::genesis_hash`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_chain_common_chain_type_ChainType_genesis_hash (self_ : * mut ferment_example_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_HashID { let obj = < ferment_example :: chain :: common :: chain_type :: ChainType as ferment_example :: chain :: common :: chain_type :: IHaveChainSettings > :: genesis_hash (& * ((* self_) . object as * const ferment_example :: chain :: common :: chain_type :: ChainType)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`ferment_example::chain::common::chain_type::ChainType::genesis_height`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_chain_common_chain_type_ChainType_genesis_height (self_ : * mut ferment_example_chain_common_chain_type_IHaveChainSettings) -> u32 { let obj = < ferment_example :: chain :: common :: chain_type :: ChainType as ferment_example :: chain :: common :: chain_type :: IHaveChainSettings > :: genesis_height (& * ((* self_) . object as * const ferment_example :: chain :: common :: chain_type :: ChainType)) ; obj } # [doc = "FFI-representation of the [`ferment_example::chain::common::chain_type::ChainType::should_process_llmq_of_type`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_chain_common_chain_type_ChainType_should_process_llmq_of_type (self_ : * mut ferment_example_chain_common_chain_type_IHaveChainSettings , llmq_type : u16) -> bool { let obj = < ferment_example :: chain :: common :: chain_type :: ChainType as ferment_example :: chain :: common :: chain_type :: IHaveChainSettings > :: should_process_llmq_of_type (& * ((* self_) . object as * const ferment_example :: chain :: common :: chain_type :: ChainType) , llmq_type) ; obj } } } } # [doc = "FFI-representation of the [`ferment_example::RootStruct`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_RootStruct { pub name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < ferment_example :: RootStruct > for ferment_example_RootStruct { unsafe fn ffi_from_const (ffi : * const ferment_example_RootStruct) -> ferment_example :: RootStruct { let ffi_ref = & * ffi ; ferment_example :: RootStruct { name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . name) } } unsafe fn ffi_to_const (obj : ferment_example :: RootStruct) -> * const ferment_example_RootStruct { ferment_interfaces :: boxed (ferment_example_RootStruct { name : ferment_interfaces :: FFIConversion :: ffi_to (obj . name) }) } unsafe fn destroy (ffi : * mut ferment_example_RootStruct) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_RootStruct { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . name) ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_RootStruct_ctor (name : * mut std :: os :: raw :: c_char) -> * mut ferment_example_RootStruct { ferment_interfaces :: boxed (ferment_example_RootStruct { name }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_RootStruct_destroy (ffi : * mut ferment_example_RootStruct) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_RootStruct_get_name (obj : * const ferment_example_RootStruct) -> * mut std :: os :: raw :: c_char { (* obj) . name } # [no_mangle] pub unsafe extern "C" fn ferment_example_RootStruct_set_name (obj : * mut ferment_example_RootStruct , value : * mut std :: os :: raw :: c_char) { (* obj) . name = value ; } # [doc = "FFI-representation of the [`ferment_example::get_root_struct`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_get_root_struct () -> * mut crate :: fermented :: types :: ferment_example :: ferment_example_RootStruct { let obj = ferment_example :: get_root_struct () ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } pub mod identity { pub mod identity_request { # [doc = "FFI-representation of the [`ferment_example::identity::identity_request::GetIdentityResponse`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_identity_identity_request_GetIdentityResponse { pub version : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_response :: ferment_example_identity_identity_request_get_identity_response_Version } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity_request :: GetIdentityResponse > for ferment_example_identity_identity_request_GetIdentityResponse { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_request_GetIdentityResponse) -> ferment_example :: identity :: identity_request :: GetIdentityResponse { let ffi_ref = & * ffi ; ferment_example :: identity :: identity_request :: GetIdentityResponse { version : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . version) } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity_request :: GetIdentityResponse) -> * const ferment_example_identity_identity_request_GetIdentityResponse { ferment_interfaces :: boxed (ferment_example_identity_identity_request_GetIdentityResponse { version : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . version) }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_request_GetIdentityResponse) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_identity_identity_request_GetIdentityResponse { fn drop (& mut self) { unsafe { let ffi_ref = self ; if ! ffi_ref . version . is_null () { ferment_interfaces :: unbox_any (ffi_ref . version) ; } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_GetIdentityResponse_ctor (version : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_response :: ferment_example_identity_identity_request_get_identity_response_Version) -> * mut ferment_example_identity_identity_request_GetIdentityResponse { ferment_interfaces :: boxed (ferment_example_identity_identity_request_GetIdentityResponse { version }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_GetIdentityResponse_destroy (ffi : * mut ferment_example_identity_identity_request_GetIdentityResponse) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_GetIdentityResponse_get_version (obj : * const ferment_example_identity_identity_request_GetIdentityResponse) -> * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_response :: ferment_example_identity_identity_request_get_identity_response_Version { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_GetIdentityResponse_set_version (obj : * mut ferment_example_identity_identity_request_GetIdentityResponse , value : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_response :: ferment_example_identity_identity_request_get_identity_response_Version) { (* obj) . version = value ; } # [doc = "FFI-representation of the [`ferment_example::identity::identity_request::IdentityRequest`]"] # [repr (C)] # [derive (Clone)] pub enum ferment_example_identity_identity_request_IdentityRequest { GetIdentity (* mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: ferment_example_identity_identity_request_GetIdentityRequest) , GetIdentityByPublicKeyHash (* mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: ferment_example_identity_identity_request_GetIdentityByPublicKeyHashRequest) } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity_request :: IdentityRequest > for ferment_example_identity_identity_request_IdentityRequest { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_request_IdentityRequest) -> ferment_example :: identity :: identity_request :: IdentityRequest { let ffi_ref = & * ffi ; match ffi_ref { ferment_example_identity_identity_request_IdentityRequest :: GetIdentity (o_0) => ferment_example :: identity :: identity_request :: IdentityRequest :: GetIdentity (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , ferment_example_identity_identity_request_IdentityRequest :: GetIdentityByPublicKeyHash (o_0) => ferment_example :: identity :: identity_request :: IdentityRequest :: GetIdentityByPublicKeyHash (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity_request :: IdentityRequest) -> * const ferment_example_identity_identity_request_IdentityRequest { ferment_interfaces :: boxed (match obj { ferment_example :: identity :: identity_request :: IdentityRequest :: GetIdentity (o_0) => ferment_example_identity_identity_request_IdentityRequest :: GetIdentity (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , ferment_example :: identity :: identity_request :: IdentityRequest :: GetIdentityByPublicKeyHash (o_0) => ferment_example_identity_identity_request_IdentityRequest :: GetIdentityByPublicKeyHash (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_request_IdentityRequest) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_identity_identity_request_IdentityRequest { fn drop (& mut self) { unsafe { match self { ferment_example_identity_identity_request_IdentityRequest :: GetIdentity (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , ferment_example_identity_identity_request_IdentityRequest :: GetIdentityByPublicKeyHash (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_IdentityRequest_GetIdentity_ctor (o_0 : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: ferment_example_identity_identity_request_GetIdentityRequest) -> * mut ferment_example_identity_identity_request_IdentityRequest { ferment_interfaces :: boxed (ferment_example_identity_identity_request_IdentityRequest :: GetIdentity (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_IdentityRequest_GetIdentityByPublicKeyHash_ctor (o_0 : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: ferment_example_identity_identity_request_GetIdentityByPublicKeyHashRequest) -> * mut ferment_example_identity_identity_request_IdentityRequest { ferment_interfaces :: boxed (ferment_example_identity_identity_request_IdentityRequest :: GetIdentityByPublicKeyHash (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_IdentityRequest_destroy (ffi : * mut ferment_example_identity_identity_request_IdentityRequest) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`ferment_example::identity::identity_request::GetIdentityByPublicKeyHashResponse`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_identity_identity_request_GetIdentityByPublicKeyHashResponse { pub version : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_Version } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity_request :: GetIdentityByPublicKeyHashResponse > for ferment_example_identity_identity_request_GetIdentityByPublicKeyHashResponse { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_request_GetIdentityByPublicKeyHashResponse) -> ferment_example :: identity :: identity_request :: GetIdentityByPublicKeyHashResponse { let ffi_ref = & * ffi ; ferment_example :: identity :: identity_request :: GetIdentityByPublicKeyHashResponse { version : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . version) } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity_request :: GetIdentityByPublicKeyHashResponse) -> * const ferment_example_identity_identity_request_GetIdentityByPublicKeyHashResponse { ferment_interfaces :: boxed (ferment_example_identity_identity_request_GetIdentityByPublicKeyHashResponse { version : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . version) }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_request_GetIdentityByPublicKeyHashResponse) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_identity_identity_request_GetIdentityByPublicKeyHashResponse { fn drop (& mut self) { unsafe { let ffi_ref = self ; if ! ffi_ref . version . is_null () { ferment_interfaces :: unbox_any (ffi_ref . version) ; } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_GetIdentityByPublicKeyHashResponse_ctor (version : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_Version) -> * mut ferment_example_identity_identity_request_GetIdentityByPublicKeyHashResponse { ferment_interfaces :: boxed (ferment_example_identity_identity_request_GetIdentityByPublicKeyHashResponse { version }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_GetIdentityByPublicKeyHashResponse_destroy (ffi : * mut ferment_example_identity_identity_request_GetIdentityByPublicKeyHashResponse) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_GetIdentityByPublicKeyHashResponse_get_version (obj : * const ferment_example_identity_identity_request_GetIdentityByPublicKeyHashResponse) -> * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_Version { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_GetIdentityByPublicKeyHashResponse_set_version (obj : * mut ferment_example_identity_identity_request_GetIdentityByPublicKeyHashResponse , value : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_Version) { (* obj) . version = value ; } pub mod get_identity_request { # [doc = "FFI-representation of the [`ferment_example::identity::identity_request::get_identity_request::GetIdentityRequestV0`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0 { pub id : * mut crate :: fermented :: generics :: Vec_u8 , pub prove : bool } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity_request :: get_identity_request :: GetIdentityRequestV0 > for ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0 { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0) -> ferment_example :: identity :: identity_request :: get_identity_request :: GetIdentityRequestV0 { let ffi_ref = & * ffi ; ferment_example :: identity :: identity_request :: get_identity_request :: GetIdentityRequestV0 { id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . id) , prove : ffi_ref . prove } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity_request :: get_identity_request :: GetIdentityRequestV0) -> * const ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0 { ferment_interfaces :: boxed (ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0 { id : ferment_interfaces :: FFIConversion :: ffi_to (obj . id) , prove : obj . prove }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0_ctor (id : * mut crate :: fermented :: generics :: Vec_u8 , prove : bool) -> * mut ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0 { ferment_interfaces :: boxed (ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0 { id , prove }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0_destroy (ffi : * mut ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0_get_id (obj : * const ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0_get_prove (obj : * const ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0) -> bool { (* obj) . prove } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0_set_id (obj : * mut ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0 , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . id = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0_set_prove (obj : * mut ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0 , value : bool) { (* obj) . prove = value ; } # [doc = "FFI-representation of the [`ferment_example::identity::identity_request::get_identity_request::Version`]"] # [repr (C)] # [derive (Clone)] pub enum ferment_example_identity_identity_request_get_identity_request_Version { V0 (* mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_request :: ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0) } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity_request :: get_identity_request :: Version > for ferment_example_identity_identity_request_get_identity_request_Version { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_request_get_identity_request_Version) -> ferment_example :: identity :: identity_request :: get_identity_request :: Version { let ffi_ref = & * ffi ; match ffi_ref { ferment_example_identity_identity_request_get_identity_request_Version :: V0 (o_0) => ferment_example :: identity :: identity_request :: get_identity_request :: Version :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity_request :: get_identity_request :: Version) -> * const ferment_example_identity_identity_request_get_identity_request_Version { ferment_interfaces :: boxed (match obj { ferment_example :: identity :: identity_request :: get_identity_request :: Version :: V0 (o_0) => ferment_example_identity_identity_request_get_identity_request_Version :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_request_get_identity_request_Version) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_identity_identity_request_get_identity_request_Version { fn drop (& mut self) { unsafe { match self { ferment_example_identity_identity_request_get_identity_request_Version :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_request_Version_V0_ctor (o_0 : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_request :: ferment_example_identity_identity_request_get_identity_request_GetIdentityRequestV0) -> * mut ferment_example_identity_identity_request_get_identity_request_Version { ferment_interfaces :: boxed (ferment_example_identity_identity_request_get_identity_request_Version :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_request_Version_destroy (ffi : * mut ferment_example_identity_identity_request_get_identity_request_Version) { ferment_interfaces :: unbox_any (ffi) ; } } # [doc = "FFI-representation of the [`ferment_example::identity::identity_request::Proof`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_identity_identity_request_Proof { pub grovedb_proof : * mut crate :: fermented :: generics :: Vec_u8 , pub quorum_hash : * mut crate :: fermented :: generics :: Vec_u8 , pub signature : * mut crate :: fermented :: generics :: Vec_u8 , pub round : u32 , pub block_id_hash : * mut crate :: fermented :: generics :: Vec_u8 , pub quorum_type : u32 } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity_request :: Proof > for ferment_example_identity_identity_request_Proof { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_request_Proof) -> ferment_example :: identity :: identity_request :: Proof { let ffi_ref = & * ffi ; ferment_example :: identity :: identity_request :: Proof { grovedb_proof : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grovedb_proof) , quorum_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . quorum_hash) , signature : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . signature) , round : ffi_ref . round , block_id_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . block_id_hash) , quorum_type : ffi_ref . quorum_type } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity_request :: Proof) -> * const ferment_example_identity_identity_request_Proof { ferment_interfaces :: boxed (ferment_example_identity_identity_request_Proof { grovedb_proof : ferment_interfaces :: FFIConversion :: ffi_to (obj . grovedb_proof) , quorum_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . quorum_hash) , signature : ferment_interfaces :: FFIConversion :: ffi_to (obj . signature) , round : obj . round , block_id_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . block_id_hash) , quorum_type : obj . quorum_type }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_request_Proof) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_identity_identity_request_Proof { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . grovedb_proof) ; ; ferment_interfaces :: unbox_any (ffi_ref . quorum_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . block_id_hash) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_Proof_ctor (grovedb_proof : * mut crate :: fermented :: generics :: Vec_u8 , quorum_hash : * mut crate :: fermented :: generics :: Vec_u8 , signature : * mut crate :: fermented :: generics :: Vec_u8 , round : u32 , block_id_hash : * mut crate :: fermented :: generics :: Vec_u8 , quorum_type : u32) -> * mut ferment_example_identity_identity_request_Proof { ferment_interfaces :: boxed (ferment_example_identity_identity_request_Proof { grovedb_proof , quorum_hash , signature , round , block_id_hash , quorum_type }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_Proof_destroy (ffi : * mut ferment_example_identity_identity_request_Proof) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_Proof_get_grovedb_proof (obj : * const ferment_example_identity_identity_request_Proof) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . grovedb_proof } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_Proof_get_quorum_hash (obj : * const ferment_example_identity_identity_request_Proof) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . quorum_hash } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_Proof_get_signature (obj : * const ferment_example_identity_identity_request_Proof) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_Proof_get_round (obj : * const ferment_example_identity_identity_request_Proof) -> u32 { (* obj) . round } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_Proof_get_block_id_hash (obj : * const ferment_example_identity_identity_request_Proof) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . block_id_hash } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_Proof_get_quorum_type (obj : * const ferment_example_identity_identity_request_Proof) -> u32 { (* obj) . quorum_type } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_Proof_set_grovedb_proof (obj : * mut ferment_example_identity_identity_request_Proof , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . grovedb_proof = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_Proof_set_quorum_hash (obj : * mut ferment_example_identity_identity_request_Proof , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . quorum_hash = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_Proof_set_signature (obj : * mut ferment_example_identity_identity_request_Proof , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . signature = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_Proof_set_round (obj : * mut ferment_example_identity_identity_request_Proof , value : u32) { (* obj) . round = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_Proof_set_block_id_hash (obj : * mut ferment_example_identity_identity_request_Proof , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . block_id_hash = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_Proof_set_quorum_type (obj : * mut ferment_example_identity_identity_request_Proof , value : u32) { (* obj) . quorum_type = value ; } # [doc = "FFI-representation of the [`ferment_example::identity::identity_request::IdentityResponse`]"] # [repr (C)] # [derive (Clone)] pub enum ferment_example_identity_identity_request_IdentityResponse { Unknown , GetIdentity (* mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: ferment_example_identity_identity_request_GetIdentityResponse) , GetIdentityByPublicKeyHash (* mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: ferment_example_identity_identity_request_GetIdentityByPublicKeyHashResponse) } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity_request :: IdentityResponse > for ferment_example_identity_identity_request_IdentityResponse { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_request_IdentityResponse) -> ferment_example :: identity :: identity_request :: IdentityResponse { let ffi_ref = & * ffi ; match ffi_ref { ferment_example_identity_identity_request_IdentityResponse :: Unknown => ferment_example :: identity :: identity_request :: IdentityResponse :: Unknown , ferment_example_identity_identity_request_IdentityResponse :: GetIdentity (o_0) => ferment_example :: identity :: identity_request :: IdentityResponse :: GetIdentity (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , ferment_example_identity_identity_request_IdentityResponse :: GetIdentityByPublicKeyHash (o_0) => ferment_example :: identity :: identity_request :: IdentityResponse :: GetIdentityByPublicKeyHash (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity_request :: IdentityResponse) -> * const ferment_example_identity_identity_request_IdentityResponse { ferment_interfaces :: boxed (match obj { ferment_example :: identity :: identity_request :: IdentityResponse :: Unknown => ferment_example_identity_identity_request_IdentityResponse :: Unknown , ferment_example :: identity :: identity_request :: IdentityResponse :: GetIdentity (o_0) => ferment_example_identity_identity_request_IdentityResponse :: GetIdentity (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , ferment_example :: identity :: identity_request :: IdentityResponse :: GetIdentityByPublicKeyHash (o_0) => ferment_example_identity_identity_request_IdentityResponse :: GetIdentityByPublicKeyHash (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_request_IdentityResponse) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_identity_identity_request_IdentityResponse { fn drop (& mut self) { unsafe { match self { ferment_example_identity_identity_request_IdentityResponse :: Unknown => { } , ferment_example_identity_identity_request_IdentityResponse :: GetIdentity (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , ferment_example_identity_identity_request_IdentityResponse :: GetIdentityByPublicKeyHash (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_IdentityResponse_Unknown_ctor () -> * mut ferment_example_identity_identity_request_IdentityResponse { ferment_interfaces :: boxed (ferment_example_identity_identity_request_IdentityResponse :: Unknown) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_IdentityResponse_GetIdentity_ctor (o_0 : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: ferment_example_identity_identity_request_GetIdentityResponse) -> * mut ferment_example_identity_identity_request_IdentityResponse { ferment_interfaces :: boxed (ferment_example_identity_identity_request_IdentityResponse :: GetIdentity (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_IdentityResponse_GetIdentityByPublicKeyHash_ctor (o_0 : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: ferment_example_identity_identity_request_GetIdentityByPublicKeyHashResponse) -> * mut ferment_example_identity_identity_request_IdentityResponse { ferment_interfaces :: boxed (ferment_example_identity_identity_request_IdentityResponse :: GetIdentityByPublicKeyHash (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_IdentityResponse_destroy (ffi : * mut ferment_example_identity_identity_request_IdentityResponse) { ferment_interfaces :: unbox_any (ffi) ; } pub mod get_identity_response { pub mod get_identity_response_v0 { # [doc = "FFI-representation of the [`ferment_example::identity::identity_request::get_identity_response::get_identity_response_v0::Result`]"] # [repr (C)] # [derive (Clone)] pub enum ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result { Identity (* mut crate :: fermented :: generics :: Vec_u8) , Proof (* mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: ferment_example_identity_identity_request_Proof) } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity_request :: get_identity_response :: get_identity_response_v0 :: Result > for ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result) -> ferment_example :: identity :: identity_request :: get_identity_response :: get_identity_response_v0 :: Result { let ffi_ref = & * ffi ; match ffi_ref { ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result :: Identity (o_0) => ferment_example :: identity :: identity_request :: get_identity_response :: get_identity_response_v0 :: Result :: Identity (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result :: Proof (o_0) => ferment_example :: identity :: identity_request :: get_identity_response :: get_identity_response_v0 :: Result :: Proof (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity_request :: get_identity_response :: get_identity_response_v0 :: Result) -> * const ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result { ferment_interfaces :: boxed (match obj { ferment_example :: identity :: identity_request :: get_identity_response :: get_identity_response_v0 :: Result :: Identity (o_0) => ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result :: Identity (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , ferment_example :: identity :: identity_request :: get_identity_response :: get_identity_response_v0 :: Result :: Proof (o_0) => ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result :: Proof (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result { fn drop (& mut self) { unsafe { match self { ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result :: Identity (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result :: Proof (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result_Identity_ctor (o_0 : * mut crate :: fermented :: generics :: Vec_u8) -> * mut ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result { ferment_interfaces :: boxed (ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result :: Identity (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result_Proof_ctor (o_0 : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: ferment_example_identity_identity_request_Proof) -> * mut ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result { ferment_interfaces :: boxed (ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result :: Proof (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result_destroy (ffi : * mut ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result) { ferment_interfaces :: unbox_any (ffi) ; } } # [doc = "FFI-representation of the [`ferment_example::identity::identity_request::get_identity_response::GetIdentityResponseV0`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0 { pub metadata : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: ferment_example_identity_identity_request_ResponseMetadata , pub result : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_response :: get_identity_response_v0 :: ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity_request :: get_identity_response :: GetIdentityResponseV0 > for ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0 { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0) -> ferment_example :: identity :: identity_request :: get_identity_response :: GetIdentityResponseV0 { let ffi_ref = & * ffi ; ferment_example :: identity :: identity_request :: get_identity_response :: GetIdentityResponseV0 { metadata : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . metadata) , result : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . result) } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity_request :: get_identity_response :: GetIdentityResponseV0) -> * const ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0 { ferment_interfaces :: boxed (ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0 { metadata : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . metadata) , result : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . result) }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; if ! ffi_ref . metadata . is_null () { ferment_interfaces :: unbox_any (ffi_ref . metadata) ; } ; if ! ffi_ref . result . is_null () { ferment_interfaces :: unbox_any (ffi_ref . result) ; } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0_ctor (metadata : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: ferment_example_identity_identity_request_ResponseMetadata , result : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_response :: get_identity_response_v0 :: ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result) -> * mut ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0 { ferment_interfaces :: boxed (ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0 { metadata , result }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0_destroy (ffi : * mut ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0_get_metadata (obj : * const ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0) -> * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: ferment_example_identity_identity_request_ResponseMetadata { (* obj) . metadata } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0_get_result (obj : * const ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0) -> * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_response :: get_identity_response_v0 :: ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result { (* obj) . result } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0_set_metadata (obj : * mut ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0 , value : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: ferment_example_identity_identity_request_ResponseMetadata) { (* obj) . metadata = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0_set_result (obj : * mut ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0 , value : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_response :: get_identity_response_v0 :: ferment_example_identity_identity_request_get_identity_response_get_identity_response_v0_Result) { (* obj) . result = value ; } # [doc = "FFI-representation of the [`ferment_example::identity::identity_request::get_identity_response::Version`]"] # [repr (C)] # [derive (Clone)] pub enum ferment_example_identity_identity_request_get_identity_response_Version { V0 (* mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_response :: ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0) } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity_request :: get_identity_response :: Version > for ferment_example_identity_identity_request_get_identity_response_Version { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_request_get_identity_response_Version) -> ferment_example :: identity :: identity_request :: get_identity_response :: Version { let ffi_ref = & * ffi ; match ffi_ref { ferment_example_identity_identity_request_get_identity_response_Version :: V0 (o_0) => ferment_example :: identity :: identity_request :: get_identity_response :: Version :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity_request :: get_identity_response :: Version) -> * const ferment_example_identity_identity_request_get_identity_response_Version { ferment_interfaces :: boxed (match obj { ferment_example :: identity :: identity_request :: get_identity_response :: Version :: V0 (o_0) => ferment_example_identity_identity_request_get_identity_response_Version :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_request_get_identity_response_Version) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_identity_identity_request_get_identity_response_Version { fn drop (& mut self) { unsafe { match self { ferment_example_identity_identity_request_get_identity_response_Version :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_response_Version_V0_ctor (o_0 : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_response :: ferment_example_identity_identity_request_get_identity_response_GetIdentityResponseV0) -> * mut ferment_example_identity_identity_request_get_identity_response_Version { ferment_interfaces :: boxed (ferment_example_identity_identity_request_get_identity_response_Version :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_response_Version_destroy (ffi : * mut ferment_example_identity_identity_request_get_identity_response_Version) { ferment_interfaces :: unbox_any (ffi) ; } } # [doc = "FFI-representation of the [`ferment_example::identity::identity_request::ResponseMetadata`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_identity_identity_request_ResponseMetadata { pub height : u64 , pub core_chain_locked_height : u32 , pub epoch : u32 , pub time_ms : u64 , pub protocol_version : u32 , pub chain_id : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity_request :: ResponseMetadata > for ferment_example_identity_identity_request_ResponseMetadata { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_request_ResponseMetadata) -> ferment_example :: identity :: identity_request :: ResponseMetadata { let ffi_ref = & * ffi ; ferment_example :: identity :: identity_request :: ResponseMetadata { height : ffi_ref . height , core_chain_locked_height : ffi_ref . core_chain_locked_height , epoch : ffi_ref . epoch , time_ms : ffi_ref . time_ms , protocol_version : ffi_ref . protocol_version , chain_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . chain_id) } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity_request :: ResponseMetadata) -> * const ferment_example_identity_identity_request_ResponseMetadata { ferment_interfaces :: boxed (ferment_example_identity_identity_request_ResponseMetadata { height : obj . height , core_chain_locked_height : obj . core_chain_locked_height , epoch : obj . epoch , time_ms : obj . time_ms , protocol_version : obj . protocol_version , chain_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . chain_id) }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_request_ResponseMetadata) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_identity_identity_request_ResponseMetadata { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . chain_id) ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_ResponseMetadata_ctor (height : u64 , core_chain_locked_height : u32 , epoch : u32 , time_ms : u64 , protocol_version : u32 , chain_id : * mut std :: os :: raw :: c_char) -> * mut ferment_example_identity_identity_request_ResponseMetadata { ferment_interfaces :: boxed (ferment_example_identity_identity_request_ResponseMetadata { height , core_chain_locked_height , epoch , time_ms , protocol_version , chain_id }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_ResponseMetadata_destroy (ffi : * mut ferment_example_identity_identity_request_ResponseMetadata) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_ResponseMetadata_get_height (obj : * const ferment_example_identity_identity_request_ResponseMetadata) -> u64 { (* obj) . height } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_ResponseMetadata_get_core_chain_locked_height (obj : * const ferment_example_identity_identity_request_ResponseMetadata) -> u32 { (* obj) . core_chain_locked_height } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_ResponseMetadata_get_epoch (obj : * const ferment_example_identity_identity_request_ResponseMetadata) -> u32 { (* obj) . epoch } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_ResponseMetadata_get_time_ms (obj : * const ferment_example_identity_identity_request_ResponseMetadata) -> u64 { (* obj) . time_ms } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_ResponseMetadata_get_protocol_version (obj : * const ferment_example_identity_identity_request_ResponseMetadata) -> u32 { (* obj) . protocol_version } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_ResponseMetadata_get_chain_id (obj : * const ferment_example_identity_identity_request_ResponseMetadata) -> * mut std :: os :: raw :: c_char { (* obj) . chain_id } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_ResponseMetadata_set_height (obj : * mut ferment_example_identity_identity_request_ResponseMetadata , value : u64) { (* obj) . height = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_ResponseMetadata_set_core_chain_locked_height (obj : * mut ferment_example_identity_identity_request_ResponseMetadata , value : u32) { (* obj) . core_chain_locked_height = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_ResponseMetadata_set_epoch (obj : * mut ferment_example_identity_identity_request_ResponseMetadata , value : u32) { (* obj) . epoch = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_ResponseMetadata_set_time_ms (obj : * mut ferment_example_identity_identity_request_ResponseMetadata , value : u64) { (* obj) . time_ms = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_ResponseMetadata_set_protocol_version (obj : * mut ferment_example_identity_identity_request_ResponseMetadata , value : u32) { (* obj) . protocol_version = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_ResponseMetadata_set_chain_id (obj : * mut ferment_example_identity_identity_request_ResponseMetadata , value : * mut std :: os :: raw :: c_char) { (* obj) . chain_id = value ; } # [doc = "FFI-representation of the [`ferment_example::identity::identity_request::GetIdentityByPublicKeyHashRequest`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_identity_identity_request_GetIdentityByPublicKeyHashRequest { pub version : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_request :: ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_Version } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity_request :: GetIdentityByPublicKeyHashRequest > for ferment_example_identity_identity_request_GetIdentityByPublicKeyHashRequest { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_request_GetIdentityByPublicKeyHashRequest) -> ferment_example :: identity :: identity_request :: GetIdentityByPublicKeyHashRequest { let ffi_ref = & * ffi ; ferment_example :: identity :: identity_request :: GetIdentityByPublicKeyHashRequest { version : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . version) } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity_request :: GetIdentityByPublicKeyHashRequest) -> * const ferment_example_identity_identity_request_GetIdentityByPublicKeyHashRequest { ferment_interfaces :: boxed (ferment_example_identity_identity_request_GetIdentityByPublicKeyHashRequest { version : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . version) }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_request_GetIdentityByPublicKeyHashRequest) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_identity_identity_request_GetIdentityByPublicKeyHashRequest { fn drop (& mut self) { unsafe { let ffi_ref = self ; if ! ffi_ref . version . is_null () { ferment_interfaces :: unbox_any (ffi_ref . version) ; } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_GetIdentityByPublicKeyHashRequest_ctor (version : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_request :: ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_Version) -> * mut ferment_example_identity_identity_request_GetIdentityByPublicKeyHashRequest { ferment_interfaces :: boxed (ferment_example_identity_identity_request_GetIdentityByPublicKeyHashRequest { version }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_GetIdentityByPublicKeyHashRequest_destroy (ffi : * mut ferment_example_identity_identity_request_GetIdentityByPublicKeyHashRequest) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_GetIdentityByPublicKeyHashRequest_get_version (obj : * const ferment_example_identity_identity_request_GetIdentityByPublicKeyHashRequest) -> * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_request :: ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_Version { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_GetIdentityByPublicKeyHashRequest_set_version (obj : * mut ferment_example_identity_identity_request_GetIdentityByPublicKeyHashRequest , value : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_request :: ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_Version) { (* obj) . version = value ; } pub mod get_identity_by_public_key_hash_response { # [doc = "FFI-representation of the [`ferment_example::identity::identity_request::get_identity_by_public_key_hash_response::GetIdentityByPublicKeyHashResponseV0`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0 { pub metadata : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: ferment_example_identity_identity_request_ResponseMetadata , pub result : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: get_identity_by_public_key_hash_response_v0 :: ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: GetIdentityByPublicKeyHashResponseV0 > for ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0 { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0) -> ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: GetIdentityByPublicKeyHashResponseV0 { let ffi_ref = & * ffi ; ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: GetIdentityByPublicKeyHashResponseV0 { metadata : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . metadata) , result : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . result) } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: GetIdentityByPublicKeyHashResponseV0) -> * const ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0 { ferment_interfaces :: boxed (ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0 { metadata : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . metadata) , result : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . result) }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; if ! ffi_ref . metadata . is_null () { ferment_interfaces :: unbox_any (ffi_ref . metadata) ; } ; if ! ffi_ref . result . is_null () { ferment_interfaces :: unbox_any (ffi_ref . result) ; } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0_ctor (metadata : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: ferment_example_identity_identity_request_ResponseMetadata , result : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: get_identity_by_public_key_hash_response_v0 :: ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result) -> * mut ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0 { ferment_interfaces :: boxed (ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0 { metadata , result }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0_destroy (ffi : * mut ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0_get_metadata (obj : * const ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0) -> * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: ferment_example_identity_identity_request_ResponseMetadata { (* obj) . metadata } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0_get_result (obj : * const ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0) -> * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: get_identity_by_public_key_hash_response_v0 :: ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result { (* obj) . result } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0_set_metadata (obj : * mut ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0 , value : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: ferment_example_identity_identity_request_ResponseMetadata) { (* obj) . metadata = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0_set_result (obj : * mut ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0 , value : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: get_identity_by_public_key_hash_response_v0 :: ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result) { (* obj) . result = value ; } pub mod get_identity_by_public_key_hash_response_v0 { # [doc = "FFI-representation of the [`ferment_example::identity::identity_request::get_identity_by_public_key_hash_response::get_identity_by_public_key_hash_response_v0::Result`]"] # [repr (C)] # [derive (Clone)] pub enum ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result { Identity (* mut crate :: fermented :: generics :: Vec_u8) , Proof (* mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: ferment_example_identity_identity_request_Proof) } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: get_identity_by_public_key_hash_response_v0 :: Result > for ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result) -> ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: get_identity_by_public_key_hash_response_v0 :: Result { let ffi_ref = & * ffi ; match ffi_ref { ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result :: Identity (o_0) => ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: get_identity_by_public_key_hash_response_v0 :: Result :: Identity (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result :: Proof (o_0) => ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: get_identity_by_public_key_hash_response_v0 :: Result :: Proof (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: get_identity_by_public_key_hash_response_v0 :: Result) -> * const ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result { ferment_interfaces :: boxed (match obj { ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: get_identity_by_public_key_hash_response_v0 :: Result :: Identity (o_0) => ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result :: Identity (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: get_identity_by_public_key_hash_response_v0 :: Result :: Proof (o_0) => ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result :: Proof (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result { fn drop (& mut self) { unsafe { match self { ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result :: Identity (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result :: Proof (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result_Identity_ctor (o_0 : * mut crate :: fermented :: generics :: Vec_u8) -> * mut ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result { ferment_interfaces :: boxed (ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result :: Identity (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result_Proof_ctor (o_0 : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: ferment_example_identity_identity_request_Proof) -> * mut ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result { ferment_interfaces :: boxed (ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result :: Proof (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result_destroy (ffi : * mut ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_get_identity_by_public_key_hash_response_v0_Result) { ferment_interfaces :: unbox_any (ffi) ; } } # [doc = "FFI-representation of the [`ferment_example::identity::identity_request::get_identity_by_public_key_hash_response::Version`]"] # [repr (C)] # [derive (Clone)] pub enum ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_Version { V0 (* mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0) } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: Version > for ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_Version { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_Version) -> ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: Version { let ffi_ref = & * ffi ; match ffi_ref { ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_Version :: V0 (o_0) => ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: Version :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: Version) -> * const ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_Version { ferment_interfaces :: boxed (match obj { ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: Version :: V0 (o_0) => ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_Version :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_Version) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_Version { fn drop (& mut self) { unsafe { match self { ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_Version :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_Version_V0_ctor (o_0 : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_response :: ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_GetIdentityByPublicKeyHashResponseV0) -> * mut ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_Version { ferment_interfaces :: boxed (ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_Version :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_Version_destroy (ffi : * mut ferment_example_identity_identity_request_get_identity_by_public_key_hash_response_Version) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod get_identity_by_public_key_hash_request { # [doc = "FFI-representation of the [`ferment_example::identity::identity_request::get_identity_by_public_key_hash_request::GetIdentityByPublicKeyHashRequestV0`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0 { pub public_key_hash : * mut crate :: fermented :: generics :: Vec_u8 , pub prove : bool } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_request :: GetIdentityByPublicKeyHashRequestV0 > for ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0 { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0) -> ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_request :: GetIdentityByPublicKeyHashRequestV0 { let ffi_ref = & * ffi ; ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_request :: GetIdentityByPublicKeyHashRequestV0 { public_key_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_key_hash) , prove : ffi_ref . prove } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_request :: GetIdentityByPublicKeyHashRequestV0) -> * const ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0 { ferment_interfaces :: boxed (ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0 { public_key_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_key_hash) , prove : obj . prove }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_hash) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0_ctor (public_key_hash : * mut crate :: fermented :: generics :: Vec_u8 , prove : bool) -> * mut ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0 { ferment_interfaces :: boxed (ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0 { public_key_hash , prove }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0_destroy (ffi : * mut ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0_get_public_key_hash (obj : * const ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . public_key_hash } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0_get_prove (obj : * const ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0) -> bool { (* obj) . prove } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0_set_public_key_hash (obj : * mut ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0 , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . public_key_hash = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0_set_prove (obj : * mut ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0 , value : bool) { (* obj) . prove = value ; } # [doc = "FFI-representation of the [`ferment_example::identity::identity_request::get_identity_by_public_key_hash_request::Version`]"] # [repr (C)] # [derive (Clone)] pub enum ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_Version { V0 (* mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_request :: ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0) } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_request :: Version > for ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_Version { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_Version) -> ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_request :: Version { let ffi_ref = & * ffi ; match ffi_ref { ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_Version :: V0 (o_0) => ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_request :: Version :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_request :: Version) -> * const ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_Version { ferment_interfaces :: boxed (match obj { ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_request :: Version :: V0 (o_0) => ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_Version :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_Version) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_Version { fn drop (& mut self) { unsafe { match self { ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_Version :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_Version_V0_ctor (o_0 : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_by_public_key_hash_request :: ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_GetIdentityByPublicKeyHashRequestV0) -> * mut ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_Version { ferment_interfaces :: boxed (ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_Version :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_Version_destroy (ffi : * mut ferment_example_identity_identity_request_get_identity_by_public_key_hash_request_Version) { ferment_interfaces :: unbox_any (ffi) ; } } # [doc = "FFI-representation of the [`ferment_example::identity::identity_request::GetIdentityRequest`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_identity_identity_request_GetIdentityRequest { pub version : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_request :: ferment_example_identity_identity_request_get_identity_request_Version } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity_request :: GetIdentityRequest > for ferment_example_identity_identity_request_GetIdentityRequest { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_request_GetIdentityRequest) -> ferment_example :: identity :: identity_request :: GetIdentityRequest { let ffi_ref = & * ffi ; ferment_example :: identity :: identity_request :: GetIdentityRequest { version : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . version) } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity_request :: GetIdentityRequest) -> * const ferment_example_identity_identity_request_GetIdentityRequest { ferment_interfaces :: boxed (ferment_example_identity_identity_request_GetIdentityRequest { version : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . version) }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_request_GetIdentityRequest) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_identity_identity_request_GetIdentityRequest { fn drop (& mut self) { unsafe { let ffi_ref = self ; if ! ffi_ref . version . is_null () { ferment_interfaces :: unbox_any (ffi_ref . version) ; } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_GetIdentityRequest_ctor (version : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_request :: ferment_example_identity_identity_request_get_identity_request_Version) -> * mut ferment_example_identity_identity_request_GetIdentityRequest { ferment_interfaces :: boxed (ferment_example_identity_identity_request_GetIdentityRequest { version }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_GetIdentityRequest_destroy (ffi : * mut ferment_example_identity_identity_request_GetIdentityRequest) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_GetIdentityRequest_get_version (obj : * const ferment_example_identity_identity_request_GetIdentityRequest) -> * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_request :: ferment_example_identity_identity_request_get_identity_request_Version { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_request_GetIdentityRequest_set_version (obj : * mut ferment_example_identity_identity_request_GetIdentityRequest , value : * mut crate :: fermented :: types :: ferment_example :: identity :: identity_request :: get_identity_request :: ferment_example_identity_identity_request_get_identity_request_Version) { (* obj) . version = value ; } } pub mod identity { # [doc = "FFI-representation of the [`ferment_example::identity::identity::ContractBounds`]"] # [repr (C)] # [derive (Clone)] pub enum ferment_example_identity_identity_ContractBounds { SingleContract { id : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_Identifier } , SingleContractDocumentType { id : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_Identifier , document_type_name : * mut std :: os :: raw :: c_char } } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity :: ContractBounds > for ferment_example_identity_identity_ContractBounds { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_ContractBounds) -> ferment_example :: identity :: identity :: ContractBounds { let ffi_ref = & * ffi ; match ffi_ref { ferment_example_identity_identity_ContractBounds :: SingleContract { id } => ferment_example :: identity :: identity :: ContractBounds :: SingleContract { id : ferment_interfaces :: FFIConversion :: ffi_from (* id) } , ferment_example_identity_identity_ContractBounds :: SingleContractDocumentType { id , document_type_name } => ferment_example :: identity :: identity :: ContractBounds :: SingleContractDocumentType { id : ferment_interfaces :: FFIConversion :: ffi_from (* id) , document_type_name : ferment_interfaces :: FFIConversion :: ffi_from (* document_type_name) } } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity :: ContractBounds) -> * const ferment_example_identity_identity_ContractBounds { ferment_interfaces :: boxed (match obj { ferment_example :: identity :: identity :: ContractBounds :: SingleContract { id } => ferment_example_identity_identity_ContractBounds :: SingleContract { id : ferment_interfaces :: FFIConversion :: ffi_to (id) } , ferment_example :: identity :: identity :: ContractBounds :: SingleContractDocumentType { id , document_type_name } => ferment_example_identity_identity_ContractBounds :: SingleContractDocumentType { id : ferment_interfaces :: FFIConversion :: ffi_to (id) , document_type_name : ferment_interfaces :: FFIConversion :: ffi_to (document_type_name) } }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_ContractBounds) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_identity_identity_ContractBounds { fn drop (& mut self) { unsafe { match self { ferment_example_identity_identity_ContractBounds :: SingleContract { id } => { ferment_interfaces :: unbox_any (* id) ; } , ferment_example_identity_identity_ContractBounds :: SingleContractDocumentType { id , document_type_name } => { ferment_interfaces :: unbox_any (* id) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* document_type_name) } } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_ContractBounds_SingleContract_ctor (id : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_Identifier) -> * mut ferment_example_identity_identity_ContractBounds { ferment_interfaces :: boxed (ferment_example_identity_identity_ContractBounds :: SingleContract { id }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_ContractBounds_SingleContractDocumentType_ctor (id : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_Identifier , document_type_name : * mut std :: os :: raw :: c_char) -> * mut ferment_example_identity_identity_ContractBounds { ferment_interfaces :: boxed (ferment_example_identity_identity_ContractBounds :: SingleContractDocumentType { id , document_type_name }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_ContractBounds_destroy (ffi : * mut ferment_example_identity_identity_ContractBounds) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`ferment_example::identity::identity::Identity`]"] # [repr (C)] # [derive (Clone)] pub enum ferment_example_identity_identity_Identity { V0 (* mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_IdentityV0) } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity :: Identity > for ferment_example_identity_identity_Identity { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_Identity) -> ferment_example :: identity :: identity :: Identity { let ffi_ref = & * ffi ; match ffi_ref { ferment_example_identity_identity_Identity :: V0 (o_0) => ferment_example :: identity :: identity :: Identity :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity :: Identity) -> * const ferment_example_identity_identity_Identity { ferment_interfaces :: boxed (match obj { ferment_example :: identity :: identity :: Identity :: V0 (o_0) => ferment_example_identity_identity_Identity :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_Identity) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_identity_identity_Identity { fn drop (& mut self) { unsafe { match self { ferment_example_identity_identity_Identity :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_Identity_V0_ctor (o_0 : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_IdentityV0) -> * mut ferment_example_identity_identity_Identity { ferment_interfaces :: boxed (ferment_example_identity_identity_Identity :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_Identity_destroy (ffi : * mut ferment_example_identity_identity_Identity) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`ferment_example::identity::identity::KeyID`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_identity_identity_KeyID (u32) ; impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity :: KeyID > for ferment_example_identity_identity_KeyID { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_KeyID) -> ferment_example :: identity :: identity :: KeyID { let ffi_ref = & * ffi ; ffi_ref . 0 } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity :: KeyID) -> * const ferment_example_identity_identity_KeyID { ferment_interfaces :: boxed (ferment_example_identity_identity_KeyID (obj)) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_KeyID) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_identity_identity_KeyID { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_KeyID_ctor (o_0 : u32) -> * mut ferment_example_identity_identity_KeyID { ferment_interfaces :: boxed (ferment_example_identity_identity_KeyID (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_KeyID_destroy (ffi : * mut ferment_example_identity_identity_KeyID) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_KeyID_get_0 (obj : * const ferment_example_identity_identity_KeyID) -> u32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_KeyID_set_0 (obj : * mut ferment_example_identity_identity_KeyID , value : u32) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`ferment_example::identity::identity::Purpose`]"] # [repr (C)] # [derive (Clone)] pub enum ferment_example_identity_identity_Purpose { AUTHENTICATION = 0 , ENCRYPTION = 1 , DECRYPTION = 2 , WITHDRAW = 3 , SYSTEM = 4 , VOTING = 5 } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity :: Purpose > for ferment_example_identity_identity_Purpose { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_Purpose) -> ferment_example :: identity :: identity :: Purpose { let ffi_ref = & * ffi ; match ffi_ref { ferment_example_identity_identity_Purpose :: AUTHENTICATION => ferment_example :: identity :: identity :: Purpose :: AUTHENTICATION , ferment_example_identity_identity_Purpose :: ENCRYPTION => ferment_example :: identity :: identity :: Purpose :: ENCRYPTION , ferment_example_identity_identity_Purpose :: DECRYPTION => ferment_example :: identity :: identity :: Purpose :: DECRYPTION , ferment_example_identity_identity_Purpose :: WITHDRAW => ferment_example :: identity :: identity :: Purpose :: WITHDRAW , ferment_example_identity_identity_Purpose :: SYSTEM => ferment_example :: identity :: identity :: Purpose :: SYSTEM , ferment_example_identity_identity_Purpose :: VOTING => ferment_example :: identity :: identity :: Purpose :: VOTING } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity :: Purpose) -> * const ferment_example_identity_identity_Purpose { ferment_interfaces :: boxed (match obj { ferment_example :: identity :: identity :: Purpose :: AUTHENTICATION => ferment_example_identity_identity_Purpose :: AUTHENTICATION , ferment_example :: identity :: identity :: Purpose :: ENCRYPTION => ferment_example_identity_identity_Purpose :: ENCRYPTION , ferment_example :: identity :: identity :: Purpose :: DECRYPTION => ferment_example_identity_identity_Purpose :: DECRYPTION , ferment_example :: identity :: identity :: Purpose :: WITHDRAW => ferment_example_identity_identity_Purpose :: WITHDRAW , ferment_example :: identity :: identity :: Purpose :: SYSTEM => ferment_example_identity_identity_Purpose :: SYSTEM , ferment_example :: identity :: identity :: Purpose :: VOTING => ferment_example_identity_identity_Purpose :: VOTING }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_Purpose) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_identity_identity_Purpose { fn drop (& mut self) { unsafe { match self { ferment_example_identity_identity_Purpose :: AUTHENTICATION => { } , ferment_example_identity_identity_Purpose :: ENCRYPTION => { } , ferment_example_identity_identity_Purpose :: DECRYPTION => { } , ferment_example_identity_identity_Purpose :: WITHDRAW => { } , ferment_example_identity_identity_Purpose :: SYSTEM => { } , ferment_example_identity_identity_Purpose :: VOTING => { } } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_Purpose_AUTHENTICATION_ctor () -> * mut ferment_example_identity_identity_Purpose { ferment_interfaces :: boxed (ferment_example_identity_identity_Purpose :: AUTHENTICATION) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_Purpose_ENCRYPTION_ctor () -> * mut ferment_example_identity_identity_Purpose { ferment_interfaces :: boxed (ferment_example_identity_identity_Purpose :: ENCRYPTION) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_Purpose_DECRYPTION_ctor () -> * mut ferment_example_identity_identity_Purpose { ferment_interfaces :: boxed (ferment_example_identity_identity_Purpose :: DECRYPTION) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_Purpose_WITHDRAW_ctor () -> * mut ferment_example_identity_identity_Purpose { ferment_interfaces :: boxed (ferment_example_identity_identity_Purpose :: WITHDRAW) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_Purpose_SYSTEM_ctor () -> * mut ferment_example_identity_identity_Purpose { ferment_interfaces :: boxed (ferment_example_identity_identity_Purpose :: SYSTEM) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_Purpose_VOTING_ctor () -> * mut ferment_example_identity_identity_Purpose { ferment_interfaces :: boxed (ferment_example_identity_identity_Purpose :: VOTING) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_Purpose_destroy (ffi : * mut ferment_example_identity_identity_Purpose) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`ferment_example::identity::identity::IdentityV0`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_identity_identity_IdentityV0 { pub id : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_Identifier , pub public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_ferment_example_identity_identity_KeyID_values_ferment_example_identity_identity_IdentityPublicKey , pub balance : u64 , pub revision : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_Revision } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity :: IdentityV0 > for ferment_example_identity_identity_IdentityV0 { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_IdentityV0) -> ferment_example :: identity :: identity :: IdentityV0 { let ffi_ref = & * ffi ; ferment_example :: identity :: identity :: IdentityV0 { id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . id) , public_keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_keys) , balance : ffi_ref . balance , revision : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . revision) } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity :: IdentityV0) -> * const ferment_example_identity_identity_IdentityV0 { ferment_interfaces :: boxed (ferment_example_identity_identity_IdentityV0 { id : ferment_interfaces :: FFIConversion :: ffi_to (obj . id) , public_keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_keys) , balance : obj . balance , revision : ferment_interfaces :: FFIConversion :: ffi_to (obj . revision) }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_IdentityV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_identity_identity_IdentityV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; ferment_interfaces :: unbox_any (ffi_ref . public_keys) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . revision) ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityV0_ctor (id : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_Identifier , public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_ferment_example_identity_identity_KeyID_values_ferment_example_identity_identity_IdentityPublicKey , balance : u64 , revision : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_Revision) -> * mut ferment_example_identity_identity_IdentityV0 { ferment_interfaces :: boxed (ferment_example_identity_identity_IdentityV0 { id , public_keys , balance , revision }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityV0_destroy (ffi : * mut ferment_example_identity_identity_IdentityV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityV0_get_id (obj : * const ferment_example_identity_identity_IdentityV0) -> * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityV0_get_public_keys (obj : * const ferment_example_identity_identity_IdentityV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_ferment_example_identity_identity_KeyID_values_ferment_example_identity_identity_IdentityPublicKey { (* obj) . public_keys } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityV0_get_balance (obj : * const ferment_example_identity_identity_IdentityV0) -> u64 { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityV0_get_revision (obj : * const ferment_example_identity_identity_IdentityV0) -> * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityV0_set_id (obj : * mut ferment_example_identity_identity_IdentityV0 , value : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_Identifier) { (* obj) . id = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityV0_set_public_keys (obj : * mut ferment_example_identity_identity_IdentityV0 , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_ferment_example_identity_identity_KeyID_values_ferment_example_identity_identity_IdentityPublicKey) { (* obj) . public_keys = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityV0_set_balance (obj : * mut ferment_example_identity_identity_IdentityV0 , value : u64) { (* obj) . balance = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityV0_set_revision (obj : * mut ferment_example_identity_identity_IdentityV0 , value : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_Revision) { (* obj) . revision = value ; } # [doc = "FFI-representation of the [`ferment_example::identity::identity::TimestampMillis`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_identity_identity_TimestampMillis (u64) ; impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity :: TimestampMillis > for ferment_example_identity_identity_TimestampMillis { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_TimestampMillis) -> ferment_example :: identity :: identity :: TimestampMillis { let ffi_ref = & * ffi ; ffi_ref . 0 } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity :: TimestampMillis) -> * const ferment_example_identity_identity_TimestampMillis { ferment_interfaces :: boxed (ferment_example_identity_identity_TimestampMillis (obj)) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_TimestampMillis) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_identity_identity_TimestampMillis { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_TimestampMillis_ctor (o_0 : u64) -> * mut ferment_example_identity_identity_TimestampMillis { ferment_interfaces :: boxed (ferment_example_identity_identity_TimestampMillis (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_TimestampMillis_destroy (ffi : * mut ferment_example_identity_identity_TimestampMillis) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_TimestampMillis_get_0 (obj : * const ferment_example_identity_identity_TimestampMillis) -> u64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_TimestampMillis_set_0 (obj : * mut ferment_example_identity_identity_TimestampMillis , value : u64) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`ferment_example::identity::identity::SecurityLevel`]"] # [repr (C)] # [derive (Clone)] pub enum ferment_example_identity_identity_SecurityLevel { MASTER = 0 , CRITICAL = 1 , HIGH = 2 , MEDIUM = 3 } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity :: SecurityLevel > for ferment_example_identity_identity_SecurityLevel { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_SecurityLevel) -> ferment_example :: identity :: identity :: SecurityLevel { let ffi_ref = & * ffi ; match ffi_ref { ferment_example_identity_identity_SecurityLevel :: MASTER => ferment_example :: identity :: identity :: SecurityLevel :: MASTER , ferment_example_identity_identity_SecurityLevel :: CRITICAL => ferment_example :: identity :: identity :: SecurityLevel :: CRITICAL , ferment_example_identity_identity_SecurityLevel :: HIGH => ferment_example :: identity :: identity :: SecurityLevel :: HIGH , ferment_example_identity_identity_SecurityLevel :: MEDIUM => ferment_example :: identity :: identity :: SecurityLevel :: MEDIUM } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity :: SecurityLevel) -> * const ferment_example_identity_identity_SecurityLevel { ferment_interfaces :: boxed (match obj { ferment_example :: identity :: identity :: SecurityLevel :: MASTER => ferment_example_identity_identity_SecurityLevel :: MASTER , ferment_example :: identity :: identity :: SecurityLevel :: CRITICAL => ferment_example_identity_identity_SecurityLevel :: CRITICAL , ferment_example :: identity :: identity :: SecurityLevel :: HIGH => ferment_example_identity_identity_SecurityLevel :: HIGH , ferment_example :: identity :: identity :: SecurityLevel :: MEDIUM => ferment_example_identity_identity_SecurityLevel :: MEDIUM }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_SecurityLevel) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_identity_identity_SecurityLevel { fn drop (& mut self) { unsafe { match self { ferment_example_identity_identity_SecurityLevel :: MASTER => { } , ferment_example_identity_identity_SecurityLevel :: CRITICAL => { } , ferment_example_identity_identity_SecurityLevel :: HIGH => { } , ferment_example_identity_identity_SecurityLevel :: MEDIUM => { } } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_SecurityLevel_MASTER_ctor () -> * mut ferment_example_identity_identity_SecurityLevel { ferment_interfaces :: boxed (ferment_example_identity_identity_SecurityLevel :: MASTER) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_SecurityLevel_CRITICAL_ctor () -> * mut ferment_example_identity_identity_SecurityLevel { ferment_interfaces :: boxed (ferment_example_identity_identity_SecurityLevel :: CRITICAL) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_SecurityLevel_HIGH_ctor () -> * mut ferment_example_identity_identity_SecurityLevel { ferment_interfaces :: boxed (ferment_example_identity_identity_SecurityLevel :: HIGH) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_SecurityLevel_MEDIUM_ctor () -> * mut ferment_example_identity_identity_SecurityLevel { ferment_interfaces :: boxed (ferment_example_identity_identity_SecurityLevel :: MEDIUM) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_SecurityLevel_destroy (ffi : * mut ferment_example_identity_identity_SecurityLevel) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`ferment_example::identity::identity::IdentityPublicKeyV0`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_identity_identity_IdentityPublicKeyV0 { pub id : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_KeyID , pub purpose : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_Purpose , pub security_level : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_SecurityLevel , pub contract_bounds : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_ContractBounds , pub key_type : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_KeyType , pub read_only : bool , pub data : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_BinaryData , pub disabled_at : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_TimestampMillis } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity :: IdentityPublicKeyV0 > for ferment_example_identity_identity_IdentityPublicKeyV0 { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_IdentityPublicKeyV0) -> ferment_example :: identity :: identity :: IdentityPublicKeyV0 { let ffi_ref = & * ffi ; ferment_example :: identity :: identity :: IdentityPublicKeyV0 { id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . id) , purpose : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . purpose) , security_level : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . security_level) , contract_bounds : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . contract_bounds) , key_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . key_type) , read_only : ffi_ref . read_only , data : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data) , disabled_at : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . disabled_at) } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity :: IdentityPublicKeyV0) -> * const ferment_example_identity_identity_IdentityPublicKeyV0 { ferment_interfaces :: boxed (ferment_example_identity_identity_IdentityPublicKeyV0 { id : ferment_interfaces :: FFIConversion :: ffi_to (obj . id) , purpose : ferment_interfaces :: FFIConversion :: ffi_to (obj . purpose) , security_level : ferment_interfaces :: FFIConversion :: ffi_to (obj . security_level) , contract_bounds : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . contract_bounds) , key_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . key_type) , read_only : obj . read_only , data : ferment_interfaces :: FFIConversion :: ffi_to (obj . data) , disabled_at : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . disabled_at) }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_IdentityPublicKeyV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_identity_identity_IdentityPublicKeyV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; ferment_interfaces :: unbox_any (ffi_ref . purpose) ; ; ferment_interfaces :: unbox_any (ffi_ref . security_level) ; ; if ! ffi_ref . contract_bounds . is_null () { ferment_interfaces :: unbox_any (ffi_ref . contract_bounds) ; } ; ferment_interfaces :: unbox_any (ffi_ref . key_type) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . data) ; ; if ! ffi_ref . disabled_at . is_null () { ferment_interfaces :: unbox_any (ffi_ref . disabled_at) ; } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityPublicKeyV0_ctor (id : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_KeyID , purpose : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_Purpose , security_level : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_SecurityLevel , contract_bounds : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_ContractBounds , key_type : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_KeyType , read_only : bool , data : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_BinaryData , disabled_at : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_TimestampMillis) -> * mut ferment_example_identity_identity_IdentityPublicKeyV0 { ferment_interfaces :: boxed (ferment_example_identity_identity_IdentityPublicKeyV0 { id , purpose , security_level , contract_bounds , key_type , read_only , data , disabled_at }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityPublicKeyV0_destroy (ffi : * mut ferment_example_identity_identity_IdentityPublicKeyV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityPublicKeyV0_get_id (obj : * const ferment_example_identity_identity_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_KeyID { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityPublicKeyV0_get_purpose (obj : * const ferment_example_identity_identity_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_Purpose { (* obj) . purpose } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityPublicKeyV0_get_security_level (obj : * const ferment_example_identity_identity_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_SecurityLevel { (* obj) . security_level } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityPublicKeyV0_get_contract_bounds (obj : * const ferment_example_identity_identity_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_ContractBounds { (* obj) . contract_bounds } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityPublicKeyV0_get_key_type (obj : * const ferment_example_identity_identity_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_KeyType { (* obj) . key_type } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityPublicKeyV0_get_read_only (obj : * const ferment_example_identity_identity_IdentityPublicKeyV0) -> bool { (* obj) . read_only } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityPublicKeyV0_get_data (obj : * const ferment_example_identity_identity_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_BinaryData { (* obj) . data } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityPublicKeyV0_get_disabled_at (obj : * const ferment_example_identity_identity_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_TimestampMillis { (* obj) . disabled_at } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityPublicKeyV0_set_id (obj : * mut ferment_example_identity_identity_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_KeyID) { (* obj) . id = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityPublicKeyV0_set_purpose (obj : * mut ferment_example_identity_identity_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_Purpose) { (* obj) . purpose = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityPublicKeyV0_set_security_level (obj : * mut ferment_example_identity_identity_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_SecurityLevel) { (* obj) . security_level = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityPublicKeyV0_set_contract_bounds (obj : * mut ferment_example_identity_identity_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_ContractBounds) { (* obj) . contract_bounds = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityPublicKeyV0_set_key_type (obj : * mut ferment_example_identity_identity_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_KeyType) { (* obj) . key_type = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityPublicKeyV0_set_read_only (obj : * mut ferment_example_identity_identity_IdentityPublicKeyV0 , value : bool) { (* obj) . read_only = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityPublicKeyV0_set_data (obj : * mut ferment_example_identity_identity_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_BinaryData) { (* obj) . data = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityPublicKeyV0_set_disabled_at (obj : * mut ferment_example_identity_identity_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_TimestampMillis) { (* obj) . disabled_at = value ; } # [doc = "FFI-representation of the [`ferment_example::identity::identity::Identity::create_basic_identity`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_Identity_create_basic_identity (id : * mut crate :: fermented :: generics :: Arr_u8 , _platform_version : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_PlatformVersion) -> * mut crate :: fermented :: generics :: Result_ok_ferment_example_identity_identity_Identity_err_ferment_example_nested_ProtocolError { let obj = ferment_example :: identity :: identity :: Identity :: create_basic_identity (ferment_interfaces :: FFIConversion :: ffi_from (id) , & ferment_interfaces :: FFIConversion :: ffi_from (_platform_version)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`ferment_example::identity::identity::Identity::create_basic_identity_v0`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_Identity_create_basic_identity_v0 (id : * mut crate :: fermented :: generics :: Arr_u8) -> * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_Identity { let obj = ferment_example :: identity :: identity :: Identity :: create_basic_identity_v0 (ferment_interfaces :: FFIConversion :: ffi_from (id)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`ferment_example::identity::identity::Identity::get_balance`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_Identity_get_balance (self_ : * mut ferment_example_identity_identity_Identity) -> u64 { let obj = ferment_example :: identity :: identity :: Identity :: get_balance (& ferment_interfaces :: FFIConversion :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`ferment_example::identity::identity::create_platform_v0`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_create_platform_v0 (identity : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersionBounds , proofs : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersionBounds) -> * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_PlatformVersion { let obj = ferment_example :: identity :: identity :: create_platform_v0 (ferment_interfaces :: FFIConversion :: ffi_from (identity) , ferment_interfaces :: FFIConversion :: ffi_from (proofs)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`ferment_example::identity::identity::IdentityPublicKey`]"] # [repr (C)] # [derive (Clone)] pub enum ferment_example_identity_identity_IdentityPublicKey { V0 (* mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_IdentityPublicKeyV0) } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity :: IdentityPublicKey > for ferment_example_identity_identity_IdentityPublicKey { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_IdentityPublicKey) -> ferment_example :: identity :: identity :: IdentityPublicKey { let ffi_ref = & * ffi ; match ffi_ref { ferment_example_identity_identity_IdentityPublicKey :: V0 (o_0) => ferment_example :: identity :: identity :: IdentityPublicKey :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity :: IdentityPublicKey) -> * const ferment_example_identity_identity_IdentityPublicKey { ferment_interfaces :: boxed (match obj { ferment_example :: identity :: identity :: IdentityPublicKey :: V0 (o_0) => ferment_example_identity_identity_IdentityPublicKey :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_IdentityPublicKey) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_identity_identity_IdentityPublicKey { fn drop (& mut self) { unsafe { match self { ferment_example_identity_identity_IdentityPublicKey :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityPublicKey_V0_ctor (o_0 : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_IdentityPublicKeyV0) -> * mut ferment_example_identity_identity_IdentityPublicKey { ferment_interfaces :: boxed (ferment_example_identity_identity_IdentityPublicKey :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_IdentityPublicKey_destroy (ffi : * mut ferment_example_identity_identity_IdentityPublicKey) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`ferment_example::identity::identity::Revision`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_identity_identity_Revision (u64) ; impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity :: Revision > for ferment_example_identity_identity_Revision { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_Revision) -> ferment_example :: identity :: identity :: Revision { let ffi_ref = & * ffi ; ffi_ref . 0 } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity :: Revision) -> * const ferment_example_identity_identity_Revision { ferment_interfaces :: boxed (ferment_example_identity_identity_Revision (obj)) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_Revision) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_identity_identity_Revision { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_Revision_ctor (o_0 : u64) -> * mut ferment_example_identity_identity_Revision { ferment_interfaces :: boxed (ferment_example_identity_identity_Revision (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_Revision_destroy (ffi : * mut ferment_example_identity_identity_Revision) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_Revision_get_0 (obj : * const ferment_example_identity_identity_Revision) -> u64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_Revision_set_0 (obj : * mut ferment_example_identity_identity_Revision , value : u64) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`ferment_example::identity::identity::KeyType`]"] # [repr (C)] # [derive (Clone)] pub enum ferment_example_identity_identity_KeyType { ECDSA_SECP256K1 = 0 , BLS12_381 = 1 , ECDSA_HASH160 = 2 , BIP13_SCRIPT_HASH = 3 , EDDSA_25519_HASH160 = 4 } impl ferment_interfaces :: FFIConversion < ferment_example :: identity :: identity :: KeyType > for ferment_example_identity_identity_KeyType { unsafe fn ffi_from_const (ffi : * const ferment_example_identity_identity_KeyType) -> ferment_example :: identity :: identity :: KeyType { let ffi_ref = & * ffi ; match ffi_ref { ferment_example_identity_identity_KeyType :: ECDSA_SECP256K1 => ferment_example :: identity :: identity :: KeyType :: ECDSA_SECP256K1 , ferment_example_identity_identity_KeyType :: BLS12_381 => ferment_example :: identity :: identity :: KeyType :: BLS12_381 , ferment_example_identity_identity_KeyType :: ECDSA_HASH160 => ferment_example :: identity :: identity :: KeyType :: ECDSA_HASH160 , ferment_example_identity_identity_KeyType :: BIP13_SCRIPT_HASH => ferment_example :: identity :: identity :: KeyType :: BIP13_SCRIPT_HASH , ferment_example_identity_identity_KeyType :: EDDSA_25519_HASH160 => ferment_example :: identity :: identity :: KeyType :: EDDSA_25519_HASH160 } } unsafe fn ffi_to_const (obj : ferment_example :: identity :: identity :: KeyType) -> * const ferment_example_identity_identity_KeyType { ferment_interfaces :: boxed (match obj { ferment_example :: identity :: identity :: KeyType :: ECDSA_SECP256K1 => ferment_example_identity_identity_KeyType :: ECDSA_SECP256K1 , ferment_example :: identity :: identity :: KeyType :: BLS12_381 => ferment_example_identity_identity_KeyType :: BLS12_381 , ferment_example :: identity :: identity :: KeyType :: ECDSA_HASH160 => ferment_example_identity_identity_KeyType :: ECDSA_HASH160 , ferment_example :: identity :: identity :: KeyType :: BIP13_SCRIPT_HASH => ferment_example_identity_identity_KeyType :: BIP13_SCRIPT_HASH , ferment_example :: identity :: identity :: KeyType :: EDDSA_25519_HASH160 => ferment_example_identity_identity_KeyType :: EDDSA_25519_HASH160 }) } unsafe fn destroy (ffi : * mut ferment_example_identity_identity_KeyType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_identity_identity_KeyType { fn drop (& mut self) { unsafe { match self { ferment_example_identity_identity_KeyType :: ECDSA_SECP256K1 => { } , ferment_example_identity_identity_KeyType :: BLS12_381 => { } , ferment_example_identity_identity_KeyType :: ECDSA_HASH160 => { } , ferment_example_identity_identity_KeyType :: BIP13_SCRIPT_HASH => { } , ferment_example_identity_identity_KeyType :: EDDSA_25519_HASH160 => { } } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_KeyType_ECDSA_SECP256K1_ctor () -> * mut ferment_example_identity_identity_KeyType { ferment_interfaces :: boxed (ferment_example_identity_identity_KeyType :: ECDSA_SECP256K1) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_KeyType_BLS12_381_ctor () -> * mut ferment_example_identity_identity_KeyType { ferment_interfaces :: boxed (ferment_example_identity_identity_KeyType :: BLS12_381) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_KeyType_ECDSA_HASH160_ctor () -> * mut ferment_example_identity_identity_KeyType { ferment_interfaces :: boxed (ferment_example_identity_identity_KeyType :: ECDSA_HASH160) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_KeyType_BIP13_SCRIPT_HASH_ctor () -> * mut ferment_example_identity_identity_KeyType { ferment_interfaces :: boxed (ferment_example_identity_identity_KeyType :: BIP13_SCRIPT_HASH) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_KeyType_EDDSA_25519_HASH160_ctor () -> * mut ferment_example_identity_identity_KeyType { ferment_interfaces :: boxed (ferment_example_identity_identity_KeyType :: EDDSA_25519_HASH160) } # [no_mangle] pub unsafe extern "C" fn ferment_example_identity_identity_KeyType_destroy (ffi : * mut ferment_example_identity_identity_KeyType) { ferment_interfaces :: unbox_any (ffi) ; } } } pub mod types { pub mod tuple_in_functions { # [doc = "FFI-representation of the [`ferment_example::types::tuple_in_functions::StructWithTuple`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_types_tuple_in_functions_StructWithTuple { pub tuple : * mut crate :: fermented :: generics :: Tuple_u32_ferment_example_nested_HashID } impl ferment_interfaces :: FFIConversion < ferment_example :: types :: tuple_in_functions :: StructWithTuple > for ferment_example_types_tuple_in_functions_StructWithTuple { unsafe fn ffi_from_const (ffi : * const ferment_example_types_tuple_in_functions_StructWithTuple) -> ferment_example :: types :: tuple_in_functions :: StructWithTuple { let ffi_ref = & * ffi ; ferment_example :: types :: tuple_in_functions :: StructWithTuple { tuple : { let ffi_ref = & * ffi_ref . tuple ; (ffi_ref . o_0 , ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . o_1)) } } } unsafe fn ffi_to_const (obj : ferment_example :: types :: tuple_in_functions :: StructWithTuple) -> * const ferment_example_types_tuple_in_functions_StructWithTuple { ferment_interfaces :: boxed (ferment_example_types_tuple_in_functions_StructWithTuple { tuple : ferment_interfaces :: FFIConversion :: ffi_to (obj . tuple) }) } unsafe fn destroy (ffi : * mut ferment_example_types_tuple_in_functions_StructWithTuple) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_types_tuple_in_functions_StructWithTuple { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . tuple) ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_types_tuple_in_functions_StructWithTuple_ctor (tuple : * mut crate :: fermented :: generics :: Tuple_u32_ferment_example_nested_HashID) -> * mut ferment_example_types_tuple_in_functions_StructWithTuple { ferment_interfaces :: boxed (ferment_example_types_tuple_in_functions_StructWithTuple { tuple }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_types_tuple_in_functions_StructWithTuple_destroy (ffi : * mut ferment_example_types_tuple_in_functions_StructWithTuple) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_types_tuple_in_functions_StructWithTuple_get_tuple (obj : * const ferment_example_types_tuple_in_functions_StructWithTuple) -> * mut crate :: fermented :: generics :: Tuple_u32_ferment_example_nested_HashID { (* obj) . tuple } # [no_mangle] pub unsafe extern "C" fn ferment_example_types_tuple_in_functions_StructWithTuple_set_tuple (obj : * mut ferment_example_types_tuple_in_functions_StructWithTuple , value : * mut crate :: fermented :: generics :: Tuple_u32_ferment_example_nested_HashID) { (* obj) . tuple = value ; } # [doc = "FFI-representation of the [`ferment_example::types::tuple_in_functions::get_tuple_simple_complex`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_types_tuple_in_functions_get_tuple_simple_complex () -> * mut crate :: fermented :: generics :: Tuple_u32_ferment_example_nested_HashID { let obj = ferment_example :: types :: tuple_in_functions :: get_tuple_simple_complex () ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`ferment_example::types::tuple_in_functions::get_tuple_simple`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_types_tuple_in_functions_get_tuple_simple () -> * mut crate :: fermented :: generics :: Tuple_u32_u32 { let obj = ferment_example :: types :: tuple_in_functions :: get_tuple_simple () ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`ferment_example::types::tuple_in_functions::get_tuple_complex_complex`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_types_tuple_in_functions_get_tuple_complex_complex (tuple : * mut crate :: fermented :: generics :: Tuple_u32_ferment_example_nested_HashID) -> u32 { let obj = ferment_example :: types :: tuple_in_functions :: get_tuple_complex_complex ({ let ffi_ref = & * tuple ; (ffi_ref . o_0 , ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . o_1)) }) ; obj } # [doc = "FFI-representation of the [`ferment_example::types::tuple_in_functions::get_vec_of_tuples`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_types_tuple_in_functions_get_vec_of_tuples () -> * mut crate :: fermented :: generics :: Vec_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID { let obj = ferment_example :: types :: tuple_in_functions :: get_vec_of_tuples () ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`ferment_example::types::tuple_in_functions::set_slice_of_tuples`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_types_tuple_in_functions_set_slice_of_tuples (arr : * mut crate :: fermented :: generics :: Slice_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID) { let obj = ferment_example :: types :: tuple_in_functions :: set_slice_of_tuples (< crate :: fermented :: generics :: Slice_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID as ferment_interfaces :: FFIConversion < Vec < (ferment_example :: nested :: HashID , ferment_example :: nested :: HashID) > >> :: ffi_from (arr) . as_slice ()) ; ; } # [doc = "FFI-representation of the [`ferment_example::types::tuple_in_functions::set_vec_of_tuples`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_types_tuple_in_functions_set_vec_of_tuples (vec : * mut crate :: fermented :: generics :: Vec_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID) { let obj = ferment_example :: types :: tuple_in_functions :: set_vec_of_tuples (ferment_interfaces :: FFIConversion :: ffi_from (vec)) ; ; } } } pub mod nested { # [doc = "FFI-representation of the [`ferment_example::nested::get_root_struct_2`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_get_root_struct_2 () -> * mut crate :: fermented :: types :: ferment_example :: ferment_example_RootStruct { let obj = ferment_example :: nested :: get_root_struct_2 () ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`ferment_example::nested::RootUser`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_nested_RootUser { pub root : * mut crate :: fermented :: types :: ferment_example :: ferment_example_RootStruct } impl ferment_interfaces :: FFIConversion < ferment_example :: nested :: RootUser > for ferment_example_nested_RootUser { unsafe fn ffi_from_const (ffi : * const ferment_example_nested_RootUser) -> ferment_example :: nested :: RootUser { let ffi_ref = & * ffi ; ferment_example :: nested :: RootUser { root : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . root) } } unsafe fn ffi_to_const (obj : ferment_example :: nested :: RootUser) -> * const ferment_example_nested_RootUser { ferment_interfaces :: boxed (ferment_example_nested_RootUser { root : ferment_interfaces :: FFIConversion :: ffi_to (obj . root) }) } unsafe fn destroy (ffi : * mut ferment_example_nested_RootUser) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_nested_RootUser { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . root) ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_RootUser_ctor (root : * mut crate :: fermented :: types :: ferment_example :: ferment_example_RootStruct) -> * mut ferment_example_nested_RootUser { ferment_interfaces :: boxed (ferment_example_nested_RootUser { root }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_RootUser_destroy (ffi : * mut ferment_example_nested_RootUser) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_RootUser_get_root (obj : * const ferment_example_nested_RootUser) -> * mut crate :: fermented :: types :: ferment_example :: ferment_example_RootStruct { (* obj) . root } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_RootUser_set_root (obj : * mut ferment_example_nested_RootUser , value : * mut crate :: fermented :: types :: ferment_example :: ferment_example_RootStruct) { (* obj) . root = value ; } # [doc = "FFI-representation of the [`ferment_example::nested::FeatureVersion`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_nested_FeatureVersion (u16) ; impl ferment_interfaces :: FFIConversion < ferment_example :: nested :: FeatureVersion > for ferment_example_nested_FeatureVersion { unsafe fn ffi_from_const (ffi : * const ferment_example_nested_FeatureVersion) -> ferment_example :: nested :: FeatureVersion { let ffi_ref = & * ffi ; ffi_ref . 0 } unsafe fn ffi_to_const (obj : ferment_example :: nested :: FeatureVersion) -> * const ferment_example_nested_FeatureVersion { ferment_interfaces :: boxed (ferment_example_nested_FeatureVersion (obj)) } unsafe fn destroy (ffi : * mut ferment_example_nested_FeatureVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_nested_FeatureVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_FeatureVersion_ctor (o_0 : u16) -> * mut ferment_example_nested_FeatureVersion { ferment_interfaces :: boxed (ferment_example_nested_FeatureVersion (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_FeatureVersion_destroy (ffi : * mut ferment_example_nested_FeatureVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_FeatureVersion_get_0 (obj : * const ferment_example_nested_FeatureVersion) -> u16 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_FeatureVersion_set_0 (obj : * mut ferment_example_nested_FeatureVersion , value : u16) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`ferment_example::nested::HashID`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_nested_HashID (* mut crate :: fermented :: generics :: Arr_u8) ; impl ferment_interfaces :: FFIConversion < ferment_example :: nested :: HashID > for ferment_example_nested_HashID { unsafe fn ffi_from_const (ffi : * const ferment_example_nested_HashID) -> ferment_example :: nested :: HashID { let ffi_ref = & * ffi ; ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0) } unsafe fn ffi_to_const (obj : ferment_example :: nested :: HashID) -> * const ferment_example_nested_HashID { ferment_interfaces :: boxed (ferment_example_nested_HashID (ferment_interfaces :: FFIConversion :: ffi_to (obj))) } unsafe fn destroy (ffi : * mut ferment_example_nested_HashID) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_nested_HashID { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_HashID_ctor (o_0 : * mut crate :: fermented :: generics :: Arr_u8) -> * mut ferment_example_nested_HashID { ferment_interfaces :: boxed (ferment_example_nested_HashID (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_HashID_destroy (ffi : * mut ferment_example_nested_HashID) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_HashID_get_0 (obj : * const ferment_example_nested_HashID) -> * mut crate :: fermented :: generics :: Arr_u8 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_HashID_set_0 (obj : * mut ferment_example_nested_HashID , value : * mut crate :: fermented :: generics :: Arr_u8) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`ferment_example::nested::PlatformVersion`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_nested_PlatformVersion { pub protocol_version : u32 , pub identity : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersionBounds , pub proofs : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersionBounds } impl ferment_interfaces :: FFIConversion < ferment_example :: nested :: PlatformVersion > for ferment_example_nested_PlatformVersion { unsafe fn ffi_from_const (ffi : * const ferment_example_nested_PlatformVersion) -> ferment_example :: nested :: PlatformVersion { let ffi_ref = & * ffi ; ferment_example :: nested :: PlatformVersion { protocol_version : ffi_ref . protocol_version , identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity) , proofs : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . proofs) } } unsafe fn ffi_to_const (obj : ferment_example :: nested :: PlatformVersion) -> * const ferment_example_nested_PlatformVersion { ferment_interfaces :: boxed (ferment_example_nested_PlatformVersion { protocol_version : obj . protocol_version , identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity) , proofs : ferment_interfaces :: FFIConversion :: ffi_to (obj . proofs) }) } unsafe fn destroy (ffi : * mut ferment_example_nested_PlatformVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_nested_PlatformVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment_interfaces :: unbox_any (ffi_ref . identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . proofs) ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_PlatformVersion_ctor (protocol_version : u32 , identity : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersionBounds , proofs : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersionBounds) -> * mut ferment_example_nested_PlatformVersion { ferment_interfaces :: boxed (ferment_example_nested_PlatformVersion { protocol_version , identity , proofs }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_PlatformVersion_destroy (ffi : * mut ferment_example_nested_PlatformVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_PlatformVersion_get_protocol_version (obj : * const ferment_example_nested_PlatformVersion) -> u32 { (* obj) . protocol_version } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_PlatformVersion_get_identity (obj : * const ferment_example_nested_PlatformVersion) -> * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersionBounds { (* obj) . identity } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_PlatformVersion_get_proofs (obj : * const ferment_example_nested_PlatformVersion) -> * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersionBounds { (* obj) . proofs } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_PlatformVersion_set_protocol_version (obj : * mut ferment_example_nested_PlatformVersion , value : u32) { (* obj) . protocol_version = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_PlatformVersion_set_identity (obj : * mut ferment_example_nested_PlatformVersion , value : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersionBounds) { (* obj) . identity = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_PlatformVersion_set_proofs (obj : * mut ferment_example_nested_PlatformVersion , value : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersionBounds) { (* obj) . proofs = value ; } # [doc = "FFI-representation of the [`ferment_example::nested::BinaryData`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_nested_BinaryData (* mut crate :: fermented :: generics :: Vec_u8) ; impl ferment_interfaces :: FFIConversion < ferment_example :: nested :: BinaryData > for ferment_example_nested_BinaryData { unsafe fn ffi_from_const (ffi : * const ferment_example_nested_BinaryData) -> ferment_example :: nested :: BinaryData { let ffi_ref = & * ffi ; ferment_example :: nested :: BinaryData (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0)) } unsafe fn ffi_to_const (obj : ferment_example :: nested :: BinaryData) -> * const ferment_example_nested_BinaryData { ferment_interfaces :: boxed (ferment_example_nested_BinaryData (ferment_interfaces :: FFIConversion :: ffi_to (obj . 0))) } unsafe fn destroy (ffi : * mut ferment_example_nested_BinaryData) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_nested_BinaryData { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_BinaryData_ctor (o_0 : * mut crate :: fermented :: generics :: Vec_u8) -> * mut ferment_example_nested_BinaryData { ferment_interfaces :: boxed (ferment_example_nested_BinaryData (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_BinaryData_destroy (ffi : * mut ferment_example_nested_BinaryData) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_BinaryData_get_0 (obj : * const ferment_example_nested_BinaryData) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_BinaryData_set_0 (obj : * mut ferment_example_nested_BinaryData , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`ferment_example::nested::ProtocolError`]"] # [repr (C)] # [derive (Clone)] pub enum ferment_example_nested_ProtocolError { IdentifierError (* mut std :: os :: raw :: c_char) , StringDecodeError (* mut std :: os :: raw :: c_char) , StringDecodeError2 (* mut std :: os :: raw :: c_char , u32) , EmptyPublicKeyDataError , MaxEncodedBytesReachedError { max_size_kbytes : usize , size_hit : usize } , EncodingError (* mut std :: os :: raw :: c_char) , EncodingError2 (* mut std :: os :: raw :: c_char) , DataContractNotPresentError (* mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_DataContractNotPresentError) , UnknownVersionMismatch { method : * mut std :: os :: raw :: c_char , known_versions : * mut crate :: fermented :: generics :: Vec_ferment_example_nested_FeatureVersion , received : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersion } } impl ferment_interfaces :: FFIConversion < ferment_example :: nested :: ProtocolError > for ferment_example_nested_ProtocolError { unsafe fn ffi_from_const (ffi : * const ferment_example_nested_ProtocolError) -> ferment_example :: nested :: ProtocolError { let ffi_ref = & * ffi ; match ffi_ref { ferment_example_nested_ProtocolError :: IdentifierError (o_0) => ferment_example :: nested :: ProtocolError :: IdentifierError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , ferment_example_nested_ProtocolError :: StringDecodeError (o_0) => ferment_example :: nested :: ProtocolError :: StringDecodeError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , ferment_example_nested_ProtocolError :: StringDecodeError2 (o_0 , o_1) => ferment_example :: nested :: ProtocolError :: StringDecodeError2 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0) , * o_1) , ferment_example_nested_ProtocolError :: EmptyPublicKeyDataError => ferment_example :: nested :: ProtocolError :: EmptyPublicKeyDataError , ferment_example_nested_ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes , size_hit } => ferment_example :: nested :: ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes : * max_size_kbytes , size_hit : * size_hit } , ferment_example_nested_ProtocolError :: EncodingError (o_0) => ferment_example :: nested :: ProtocolError :: EncodingError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , ferment_example_nested_ProtocolError :: EncodingError2 (o_0) => ferment_example :: nested :: ProtocolError :: EncodingError2 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , ferment_example_nested_ProtocolError :: DataContractNotPresentError (o_0) => ferment_example :: nested :: ProtocolError :: DataContractNotPresentError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , ferment_example_nested_ProtocolError :: UnknownVersionMismatch { method , known_versions , received } => ferment_example :: nested :: ProtocolError :: UnknownVersionMismatch { method : ferment_interfaces :: FFIConversion :: ffi_from (* method) , known_versions : ferment_interfaces :: FFIConversion :: ffi_from (* known_versions) , received : ferment_interfaces :: FFIConversion :: ffi_from (* received) } } } unsafe fn ffi_to_const (obj : ferment_example :: nested :: ProtocolError) -> * const ferment_example_nested_ProtocolError { ferment_interfaces :: boxed (match obj { ferment_example :: nested :: ProtocolError :: IdentifierError (o_0) => ferment_example_nested_ProtocolError :: IdentifierError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , ferment_example :: nested :: ProtocolError :: StringDecodeError (o_0) => ferment_example_nested_ProtocolError :: StringDecodeError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , ferment_example :: nested :: ProtocolError :: StringDecodeError2 (o_0 , o_1) => ferment_example_nested_ProtocolError :: StringDecodeError2 (ferment_interfaces :: FFIConversion :: ffi_to (o_0) , o_1) , ferment_example :: nested :: ProtocolError :: EmptyPublicKeyDataError => ferment_example_nested_ProtocolError :: EmptyPublicKeyDataError , ferment_example :: nested :: ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes , size_hit } => ferment_example_nested_ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes : max_size_kbytes , size_hit : size_hit } , ferment_example :: nested :: ProtocolError :: EncodingError (o_0) => ferment_example_nested_ProtocolError :: EncodingError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , ferment_example :: nested :: ProtocolError :: EncodingError2 (o_0) => ferment_example_nested_ProtocolError :: EncodingError2 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , ferment_example :: nested :: ProtocolError :: DataContractNotPresentError (o_0) => ferment_example_nested_ProtocolError :: DataContractNotPresentError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , ferment_example :: nested :: ProtocolError :: UnknownVersionMismatch { method , known_versions , received } => ferment_example_nested_ProtocolError :: UnknownVersionMismatch { method : ferment_interfaces :: FFIConversion :: ffi_to (method) , known_versions : ferment_interfaces :: FFIConversion :: ffi_to (known_versions) , received : ferment_interfaces :: FFIConversion :: ffi_to (received) } }) } unsafe fn destroy (ffi : * mut ferment_example_nested_ProtocolError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_nested_ProtocolError { fn drop (& mut self) { unsafe { match self { ferment_example_nested_ProtocolError :: IdentifierError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , ferment_example_nested_ProtocolError :: StringDecodeError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , ferment_example_nested_ProtocolError :: StringDecodeError2 (o_0 , o_1) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) ; } , ferment_example_nested_ProtocolError :: EmptyPublicKeyDataError => { } , ferment_example_nested_ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes , size_hit } => { ; } , ferment_example_nested_ProtocolError :: EncodingError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , ferment_example_nested_ProtocolError :: EncodingError2 (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } , ferment_example_nested_ProtocolError :: DataContractNotPresentError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , ferment_example_nested_ProtocolError :: UnknownVersionMismatch { method , known_versions , received } => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* method) ; ferment_interfaces :: unbox_any (* known_versions) ; ; ferment_interfaces :: unbox_any (* received) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_ProtocolError_IdentifierError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut ferment_example_nested_ProtocolError { ferment_interfaces :: boxed (ferment_example_nested_ProtocolError :: IdentifierError (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_ProtocolError_StringDecodeError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut ferment_example_nested_ProtocolError { ferment_interfaces :: boxed (ferment_example_nested_ProtocolError :: StringDecodeError (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_ProtocolError_StringDecodeError2_ctor (o_0 : * mut std :: os :: raw :: c_char , o_1 : u32) -> * mut ferment_example_nested_ProtocolError { ferment_interfaces :: boxed (ferment_example_nested_ProtocolError :: StringDecodeError2 (o_0 , o_1)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_ProtocolError_EmptyPublicKeyDataError_ctor () -> * mut ferment_example_nested_ProtocolError { ferment_interfaces :: boxed (ferment_example_nested_ProtocolError :: EmptyPublicKeyDataError) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_ProtocolError_MaxEncodedBytesReachedError_ctor (max_size_kbytes : usize , size_hit : usize) -> * mut ferment_example_nested_ProtocolError { ferment_interfaces :: boxed (ferment_example_nested_ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes , size_hit }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_ProtocolError_EncodingError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut ferment_example_nested_ProtocolError { ferment_interfaces :: boxed (ferment_example_nested_ProtocolError :: EncodingError (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_ProtocolError_EncodingError2_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut ferment_example_nested_ProtocolError { ferment_interfaces :: boxed (ferment_example_nested_ProtocolError :: EncodingError2 (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_ProtocolError_DataContractNotPresentError_ctor (o_0 : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_DataContractNotPresentError) -> * mut ferment_example_nested_ProtocolError { ferment_interfaces :: boxed (ferment_example_nested_ProtocolError :: DataContractNotPresentError (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_ProtocolError_UnknownVersionMismatch_ctor (method : * mut std :: os :: raw :: c_char , known_versions : * mut crate :: fermented :: generics :: Vec_ferment_example_nested_FeatureVersion , received : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersion) -> * mut ferment_example_nested_ProtocolError { ferment_interfaces :: boxed (ferment_example_nested_ProtocolError :: UnknownVersionMismatch { method , known_versions , received }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_ProtocolError_destroy (ffi : * mut ferment_example_nested_ProtocolError) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`ferment_example::nested::OptionalFeatureVersion`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_nested_OptionalFeatureVersion (u16) ; impl ferment_interfaces :: FFIConversion < ferment_example :: nested :: OptionalFeatureVersion > for ferment_example_nested_OptionalFeatureVersion { unsafe fn ffi_from_const (ffi : * const ferment_example_nested_OptionalFeatureVersion) -> ferment_example :: nested :: OptionalFeatureVersion { let ffi_ref = & * ffi ; (ffi_ref . 0 > 0) . then (|| ffi_ref . 0) } unsafe fn ffi_to_const (obj : ferment_example :: nested :: OptionalFeatureVersion) -> * const ferment_example_nested_OptionalFeatureVersion { ferment_interfaces :: boxed (ferment_example_nested_OptionalFeatureVersion (obj . unwrap_or (0))) } unsafe fn destroy (ffi : * mut ferment_example_nested_OptionalFeatureVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_nested_OptionalFeatureVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_OptionalFeatureVersion_ctor (o_0 : u16) -> * mut ferment_example_nested_OptionalFeatureVersion { ferment_interfaces :: boxed (ferment_example_nested_OptionalFeatureVersion (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_OptionalFeatureVersion_destroy (ffi : * mut ferment_example_nested_OptionalFeatureVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_OptionalFeatureVersion_get_0 (obj : * const ferment_example_nested_OptionalFeatureVersion) -> u16 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_OptionalFeatureVersion_set_0 (obj : * mut ferment_example_nested_OptionalFeatureVersion , value : u16) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`ferment_example::nested::FeatureVersionBounds`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_nested_FeatureVersionBounds { pub min_version : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersion , pub max_version : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersion , pub default_current_version : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersion } impl ferment_interfaces :: FFIConversion < ferment_example :: nested :: FeatureVersionBounds > for ferment_example_nested_FeatureVersionBounds { unsafe fn ffi_from_const (ffi : * const ferment_example_nested_FeatureVersionBounds) -> ferment_example :: nested :: FeatureVersionBounds { let ffi_ref = & * ffi ; ferment_example :: nested :: FeatureVersionBounds { min_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . min_version) , max_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . max_version) , default_current_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . default_current_version) } } unsafe fn ffi_to_const (obj : ferment_example :: nested :: FeatureVersionBounds) -> * const ferment_example_nested_FeatureVersionBounds { ferment_interfaces :: boxed (ferment_example_nested_FeatureVersionBounds { min_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . min_version) , max_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . max_version) , default_current_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . default_current_version) }) } unsafe fn destroy (ffi : * mut ferment_example_nested_FeatureVersionBounds) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_nested_FeatureVersionBounds { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . min_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . max_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . default_current_version) ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_FeatureVersionBounds_ctor (min_version : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersion , max_version : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersion , default_current_version : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersion) -> * mut ferment_example_nested_FeatureVersionBounds { ferment_interfaces :: boxed (ferment_example_nested_FeatureVersionBounds { min_version , max_version , default_current_version }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_FeatureVersionBounds_destroy (ffi : * mut ferment_example_nested_FeatureVersionBounds) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_FeatureVersionBounds_get_min_version (obj : * const ferment_example_nested_FeatureVersionBounds) -> * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersion { (* obj) . min_version } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_FeatureVersionBounds_get_max_version (obj : * const ferment_example_nested_FeatureVersionBounds) -> * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersion { (* obj) . max_version } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_FeatureVersionBounds_get_default_current_version (obj : * const ferment_example_nested_FeatureVersionBounds) -> * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersion { (* obj) . default_current_version } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_FeatureVersionBounds_set_min_version (obj : * mut ferment_example_nested_FeatureVersionBounds , value : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersion) { (* obj) . min_version = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_FeatureVersionBounds_set_max_version (obj : * mut ferment_example_nested_FeatureVersionBounds , value : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersion) { (* obj) . max_version = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_FeatureVersionBounds_set_default_current_version (obj : * mut ferment_example_nested_FeatureVersionBounds , value : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersion) { (* obj) . default_current_version = value ; } # [doc = "FFI-representation of the [`ferment_example::nested::DataContractNotPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_nested_DataContractNotPresentError { pub data_contract_id : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_Identifier } impl ferment_interfaces :: FFIConversion < ferment_example :: nested :: DataContractNotPresentError > for ferment_example_nested_DataContractNotPresentError { unsafe fn ffi_from_const (ffi : * const ferment_example_nested_DataContractNotPresentError) -> ferment_example :: nested :: DataContractNotPresentError { let ffi_ref = & * ffi ; ferment_example :: nested :: DataContractNotPresentError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract_id) } } unsafe fn ffi_to_const (obj : ferment_example :: nested :: DataContractNotPresentError) -> * const ferment_example_nested_DataContractNotPresentError { ferment_interfaces :: boxed (ferment_example_nested_DataContractNotPresentError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract_id) }) } unsafe fn destroy (ffi : * mut ferment_example_nested_DataContractNotPresentError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_nested_DataContractNotPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_DataContractNotPresentError_ctor (data_contract_id : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_Identifier) -> * mut ferment_example_nested_DataContractNotPresentError { ferment_interfaces :: boxed (ferment_example_nested_DataContractNotPresentError { data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_DataContractNotPresentError_destroy (ffi : * mut ferment_example_nested_DataContractNotPresentError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_DataContractNotPresentError_get_data_contract_id (obj : * const ferment_example_nested_DataContractNotPresentError) -> * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_DataContractNotPresentError_set_data_contract_id (obj : * mut ferment_example_nested_DataContractNotPresentError , value : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_Identifier) { (* obj) . data_contract_id = value ; } # [doc = "FFI-representation of the [`ferment_example::nested::IdentifierBytes32`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_nested_IdentifierBytes32 (* mut crate :: fermented :: generics :: Arr_u8) ; impl ferment_interfaces :: FFIConversion < ferment_example :: nested :: IdentifierBytes32 > for ferment_example_nested_IdentifierBytes32 { unsafe fn ffi_from_const (ffi : * const ferment_example_nested_IdentifierBytes32) -> ferment_example :: nested :: IdentifierBytes32 { let ffi_ref = & * ffi ; ferment_example :: nested :: IdentifierBytes32 (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0)) } unsafe fn ffi_to_const (obj : ferment_example :: nested :: IdentifierBytes32) -> * const ferment_example_nested_IdentifierBytes32 { ferment_interfaces :: boxed (ferment_example_nested_IdentifierBytes32 (ferment_interfaces :: FFIConversion :: ffi_to (obj . 0))) } unsafe fn destroy (ffi : * mut ferment_example_nested_IdentifierBytes32) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_nested_IdentifierBytes32 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_IdentifierBytes32_ctor (o_0 : * mut crate :: fermented :: generics :: Arr_u8) -> * mut ferment_example_nested_IdentifierBytes32 { ferment_interfaces :: boxed (ferment_example_nested_IdentifierBytes32 (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_IdentifierBytes32_destroy (ffi : * mut ferment_example_nested_IdentifierBytes32) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_IdentifierBytes32_get_0 (obj : * const ferment_example_nested_IdentifierBytes32) -> * mut crate :: fermented :: generics :: Arr_u8 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_IdentifierBytes32_set_0 (obj : * mut ferment_example_nested_IdentifierBytes32 , value : * mut crate :: fermented :: generics :: Arr_u8) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`ferment_example::nested::Identifier`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_nested_Identifier (* mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_IdentifierBytes32) ; impl ferment_interfaces :: FFIConversion < ferment_example :: nested :: Identifier > for ferment_example_nested_Identifier { unsafe fn ffi_from_const (ffi : * const ferment_example_nested_Identifier) -> ferment_example :: nested :: Identifier { let ffi_ref = & * ffi ; ferment_example :: nested :: Identifier (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0)) } unsafe fn ffi_to_const (obj : ferment_example :: nested :: Identifier) -> * const ferment_example_nested_Identifier { ferment_interfaces :: boxed (ferment_example_nested_Identifier (ferment_interfaces :: FFIConversion :: ffi_to (obj . 0))) } unsafe fn destroy (ffi : * mut ferment_example_nested_Identifier) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_nested_Identifier { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_Identifier_ctor (o_0 : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_IdentifierBytes32) -> * mut ferment_example_nested_Identifier { ferment_interfaces :: boxed (ferment_example_nested_Identifier (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_Identifier_destroy (ffi : * mut ferment_example_nested_Identifier) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_Identifier_get_0 (obj : * const ferment_example_nested_Identifier) -> * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_IdentifierBytes32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_Identifier_set_0 (obj : * mut ferment_example_nested_Identifier , value : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_IdentifierBytes32) { (* obj) . 0 = value ; } } } pub mod ferment_example_nested { use crate as ferment_example_nested ; # [doc = "FFI-representation of the [`ferment_example_nested::SomeStruct`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_nested_SomeStruct { pub name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < ferment_example_nested :: SomeStruct > for ferment_example_nested_SomeStruct { unsafe fn ffi_from_const (ffi : * const ferment_example_nested_SomeStruct) -> ferment_example_nested :: SomeStruct { let ffi_ref = & * ffi ; ferment_example_nested :: SomeStruct { name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . name) } } unsafe fn ffi_to_const (obj : ferment_example_nested :: SomeStruct) -> * const ferment_example_nested_SomeStruct { ferment_interfaces :: boxed (ferment_example_nested_SomeStruct { name : ferment_interfaces :: FFIConversion :: ffi_to (obj . name) }) } unsafe fn destroy (ffi : * mut ferment_example_nested_SomeStruct) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_nested_SomeStruct { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . name) ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_SomeStruct_ctor (name : * mut std :: os :: raw :: c_char) -> * mut ferment_example_nested_SomeStruct { ferment_interfaces :: boxed (ferment_example_nested_SomeStruct { name }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_SomeStruct_destroy (ffi : * mut ferment_example_nested_SomeStruct) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_SomeStruct_get_name (obj : * const ferment_example_nested_SomeStruct) -> * mut std :: os :: raw :: c_char { (* obj) . name } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_SomeStruct_set_name (obj : * mut ferment_example_nested_SomeStruct , value : * mut std :: os :: raw :: c_char) { (* obj) . name = value ; } pub mod some_package { use crate as ferment_example_nested ; # [doc = "FFI-representation of the [`ferment_example_nested::some_package::get_tuple_generic`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_some_package_get_tuple_generic () -> * mut crate :: fermented :: generics :: Vec_Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot { let obj = ferment_example_nested :: some_package :: get_tuple_generic () ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } } pub mod model { use crate as ferment_example_nested ; pub mod snapshot { use crate as ferment_example_nested ; # [doc = "FFI-representation of the [`ferment_example_nested::model::snapshot::LLMQSnapshotSkipMode`]"] # [repr (C)] # [derive (Clone)] pub enum ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode { NoSkipping = 0 , SkipFirst = 1 , SkipExcept = 2 , SkipAll = 3 } impl ferment_interfaces :: FFIConversion < ferment_example_nested :: model :: snapshot :: LLMQSnapshotSkipMode > for ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode { unsafe fn ffi_from_const (ffi : * const ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode) -> ferment_example_nested :: model :: snapshot :: LLMQSnapshotSkipMode { let ffi_ref = & * ffi ; match ffi_ref { ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode :: NoSkipping => ferment_example_nested :: model :: snapshot :: LLMQSnapshotSkipMode :: NoSkipping , ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipFirst => ferment_example_nested :: model :: snapshot :: LLMQSnapshotSkipMode :: SkipFirst , ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipExcept => ferment_example_nested :: model :: snapshot :: LLMQSnapshotSkipMode :: SkipExcept , ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipAll => ferment_example_nested :: model :: snapshot :: LLMQSnapshotSkipMode :: SkipAll } } unsafe fn ffi_to_const (obj : ferment_example_nested :: model :: snapshot :: LLMQSnapshotSkipMode) -> * const ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode { ferment_interfaces :: boxed (match obj { ferment_example_nested :: model :: snapshot :: LLMQSnapshotSkipMode :: NoSkipping => ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode :: NoSkipping , ferment_example_nested :: model :: snapshot :: LLMQSnapshotSkipMode :: SkipFirst => ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipFirst , ferment_example_nested :: model :: snapshot :: LLMQSnapshotSkipMode :: SkipExcept => ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipExcept , ferment_example_nested :: model :: snapshot :: LLMQSnapshotSkipMode :: SkipAll => ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipAll }) } unsafe fn destroy (ffi : * mut ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode { fn drop (& mut self) { unsafe { match self { ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode :: NoSkipping => { } , ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipFirst => { } , ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipExcept => { } , ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipAll => { } } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode_NoSkipping_ctor () -> * mut ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode { ferment_interfaces :: boxed (ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode :: NoSkipping) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode_SkipFirst_ctor () -> * mut ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode { ferment_interfaces :: boxed (ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipFirst) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode_SkipExcept_ctor () -> * mut ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode { ferment_interfaces :: boxed (ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipExcept) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode_SkipAll_ctor () -> * mut ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode { ferment_interfaces :: boxed (ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipAll) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode_destroy (ffi : * mut ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`ferment_example_nested::model::snapshot::LLMQSnapshot`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_nested_model_snapshot_LLMQSnapshot { pub member_list : * mut crate :: fermented :: generics :: Vec_u8 , pub skip_list : * mut crate :: fermented :: generics :: Vec_i32 , pub skip_list_mode : * mut crate :: fermented :: types :: ferment_example_nested :: model :: snapshot :: ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode , pub option_vec : * mut crate :: fermented :: generics :: Vec_u8 } impl ferment_interfaces :: FFIConversion < ferment_example_nested :: model :: snapshot :: LLMQSnapshot > for ferment_example_nested_model_snapshot_LLMQSnapshot { unsafe fn ffi_from_const (ffi : * const ferment_example_nested_model_snapshot_LLMQSnapshot) -> ferment_example_nested :: model :: snapshot :: LLMQSnapshot { let ffi_ref = & * ffi ; ferment_example_nested :: model :: snapshot :: LLMQSnapshot { member_list : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . member_list) , skip_list : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . skip_list) , skip_list_mode : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . skip_list_mode) , option_vec : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . option_vec) } } unsafe fn ffi_to_const (obj : ferment_example_nested :: model :: snapshot :: LLMQSnapshot) -> * const ferment_example_nested_model_snapshot_LLMQSnapshot { ferment_interfaces :: boxed (ferment_example_nested_model_snapshot_LLMQSnapshot { member_list : ferment_interfaces :: FFIConversion :: ffi_to (obj . member_list) , skip_list : ferment_interfaces :: FFIConversion :: ffi_to (obj . skip_list) , skip_list_mode : ferment_interfaces :: FFIConversion :: ffi_to (obj . skip_list_mode) , option_vec : match obj . option_vec { Some (vec) => ferment_interfaces :: FFIConversion :: ffi_to (vec) , None => std :: ptr :: null_mut () } }) } unsafe fn destroy (ffi : * mut ferment_example_nested_model_snapshot_LLMQSnapshot) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_nested_model_snapshot_LLMQSnapshot { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . member_list) ; ; ferment_interfaces :: unbox_any (ffi_ref . skip_list) ; ; ferment_interfaces :: unbox_any (ffi_ref . skip_list_mode) ; ; if ! ffi_ref . option_vec . is_null () { ferment_interfaces :: unbox_any (ffi_ref . option_vec) ; } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_model_snapshot_LLMQSnapshot_ctor (member_list : * mut crate :: fermented :: generics :: Vec_u8 , skip_list : * mut crate :: fermented :: generics :: Vec_i32 , skip_list_mode : * mut crate :: fermented :: types :: ferment_example_nested :: model :: snapshot :: ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode , option_vec : * mut crate :: fermented :: generics :: Vec_u8) -> * mut ferment_example_nested_model_snapshot_LLMQSnapshot { ferment_interfaces :: boxed (ferment_example_nested_model_snapshot_LLMQSnapshot { member_list , skip_list , skip_list_mode , option_vec }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_model_snapshot_LLMQSnapshot_destroy (ffi : * mut ferment_example_nested_model_snapshot_LLMQSnapshot) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_model_snapshot_LLMQSnapshot_get_member_list (obj : * const ferment_example_nested_model_snapshot_LLMQSnapshot) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . member_list } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_model_snapshot_LLMQSnapshot_get_skip_list (obj : * const ferment_example_nested_model_snapshot_LLMQSnapshot) -> * mut crate :: fermented :: generics :: Vec_i32 { (* obj) . skip_list } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_model_snapshot_LLMQSnapshot_get_skip_list_mode (obj : * const ferment_example_nested_model_snapshot_LLMQSnapshot) -> * mut crate :: fermented :: types :: ferment_example_nested :: model :: snapshot :: ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode { (* obj) . skip_list_mode } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_model_snapshot_LLMQSnapshot_get_option_vec (obj : * const ferment_example_nested_model_snapshot_LLMQSnapshot) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . option_vec } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_model_snapshot_LLMQSnapshot_set_member_list (obj : * mut ferment_example_nested_model_snapshot_LLMQSnapshot , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . member_list = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_model_snapshot_LLMQSnapshot_set_skip_list (obj : * mut ferment_example_nested_model_snapshot_LLMQSnapshot , value : * mut crate :: fermented :: generics :: Vec_i32) { (* obj) . skip_list = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_model_snapshot_LLMQSnapshot_set_skip_list_mode (obj : * mut ferment_example_nested_model_snapshot_LLMQSnapshot , value : * mut crate :: fermented :: types :: ferment_example_nested :: model :: snapshot :: ferment_example_nested_model_snapshot_LLMQSnapshotSkipMode) { (* obj) . skip_list_mode = value ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_nested_model_snapshot_LLMQSnapshot_set_option_vec (obj : * mut ferment_example_nested_model_snapshot_LLMQSnapshot , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . option_vec = value ; } } } } } # [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unused_braces , unused_imports , unused_unsafe , unused_variables , unused_qualifications)] pub mod generics { use crate as ferment_example_nested ; # [repr (C)] # [derive (Clone)] pub struct Vec_i32 { pub count : usize , pub values : * mut i32 } impl ferment_interfaces :: FFIConversion < Vec < i32 > > for Vec_i32 { unsafe fn ffi_from_const (ffi : * const Vec_i32) -> Vec < i32 > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < i32 >) -> * const Vec_i32 { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_i32) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_i32 { type Value = Vec < i32 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_primitive_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: boxed_vec (obj) }) } } impl Drop for Vec_i32 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_i32_ctor (count : usize , values : * mut i32) -> * mut Vec_i32 { ferment_interfaces :: boxed (Vec_i32 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_i32_destroy (ffi : * mut Vec_i32) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_ferment_example_identity_identity_KeyID_values_ferment_example_identity_identity_IdentityPublicKey { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_KeyID , pub values : * mut * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_IdentityPublicKey } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < ferment_example :: identity :: identity :: KeyID , ferment_example :: identity :: identity :: IdentityPublicKey > > for std_collections_Map_keys_ferment_example_identity_identity_KeyID_values_ferment_example_identity_identity_IdentityPublicKey { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_ferment_example_identity_identity_KeyID_values_ferment_example_identity_identity_IdentityPublicKey) -> std :: collections :: BTreeMap < ferment_example :: identity :: identity :: KeyID , ferment_example :: identity :: identity :: IdentityPublicKey > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < ferment_example :: identity :: identity :: KeyID , ferment_example :: identity :: identity :: IdentityPublicKey >) -> * const std_collections_Map_keys_ferment_example_identity_identity_KeyID_values_ferment_example_identity_identity_IdentityPublicKey { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_vec (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_vec (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_ferment_example_identity_identity_KeyID_values_ferment_example_identity_identity_IdentityPublicKey) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_ferment_example_identity_identity_KeyID_values_ferment_example_identity_identity_IdentityPublicKey { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_ferment_example_identity_identity_KeyID_values_ferment_example_identity_identity_IdentityPublicKey_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_KeyID , values : * mut * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_IdentityPublicKey) -> * mut std_collections_Map_keys_ferment_example_identity_identity_KeyID_values_ferment_example_identity_identity_IdentityPublicKey { ferment_interfaces :: boxed (std_collections_Map_keys_ferment_example_identity_identity_KeyID_values_ferment_example_identity_identity_IdentityPublicKey { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_ferment_example_identity_identity_KeyID_values_ferment_example_identity_identity_IdentityPublicKey_destroy (ffi : * mut std_collections_Map_keys_ferment_example_identity_identity_KeyID_values_ferment_example_identity_identity_IdentityPublicKey) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8 { pub count : usize , pub values : * mut u8 } impl ferment_interfaces :: FFIConversion < [u8 ; 32] > for Arr_u8 { unsafe fn ffi_from_const (ffi : * const Arr_u8) -> [u8 ; 32] { let ffi_ref = & * ffi ; std :: slice :: from_raw_parts (ffi_ref . values , ffi_ref . count) . try_into () . expect ("Array Length mismatch") } unsafe fn ffi_to_const (obj : [u8 ; 32]) -> * const Arr_u8 { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: boxed_vec (obj . to_vec ()) }) } unsafe fn destroy (ffi : * mut Arr_u8) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Arr_u8 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_ctor (count : usize , values : * mut u8) -> * mut Arr_u8 { ferment_interfaces :: boxed (Arr_u8 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_destroy (ffi : * mut Arr_u8) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot } impl ferment_interfaces :: FFIConversion < Vec < (ferment_example :: nested :: BinaryData , ferment_example_nested :: model :: snapshot :: LLMQSnapshot) > > for Vec_Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot { unsafe fn ffi_from_const (ffi : * const Vec_Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot) -> Vec < (ferment_example :: nested :: BinaryData , ferment_example_nested :: model :: snapshot :: LLMQSnapshot) > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < (ferment_example :: nested :: BinaryData , ferment_example_nested :: model :: snapshot :: LLMQSnapshot) >) -> * const Vec_Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot { type Value = Vec < (ferment_example :: nested :: BinaryData , ferment_example_nested :: model :: snapshot :: LLMQSnapshot) > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_vec (obj . into_iter ()) }) } } impl Drop for Vec_Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot) -> * mut Vec_Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot { ferment_interfaces :: boxed (Vec_Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot_destroy (ffi : * mut Vec_Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Slice_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID } impl ferment_interfaces :: FFIConversion < Vec < (ferment_example :: nested :: HashID , ferment_example :: nested :: HashID) > > for Slice_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID { unsafe fn ffi_from_const (ffi : * const Slice_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID) -> Vec < (ferment_example :: nested :: HashID , ferment_example :: nested :: HashID) > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < (ferment_example :: nested :: HashID , ferment_example :: nested :: HashID) >) -> * const Slice_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Slice_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Slice_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID { type Value = Vec < (ferment_example :: nested :: HashID , ferment_example :: nested :: HashID) > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_vec (obj . into_iter ()) }) } } impl Drop for Slice_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Slice_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID) -> * mut Slice_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID { ferment_interfaces :: boxed (Slice_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID { count , values }) } # [no_mangle] pub unsafe extern "C" fn Slice_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID_destroy (ffi : * mut Slice_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Tuple_u32_ferment_example_nested_HashID { pub o_0 : u32 , pub o_1 : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_HashID } impl ferment_interfaces :: FFIConversion < (u32 , ferment_example :: nested :: HashID) > for Tuple_u32_ferment_example_nested_HashID { unsafe fn ffi_from_const (ffi : * const Tuple_u32_ferment_example_nested_HashID) -> (u32 , ferment_example :: nested :: HashID) { let ffi_ref = & * ffi ; (ffi_ref . o_0 , ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . o_1)) } unsafe fn ffi_to_const (obj : (u32 , ferment_example :: nested :: HashID)) -> * const Tuple_u32_ferment_example_nested_HashID { ferment_interfaces :: boxed (Self { o_0 : obj . 0 , o_1 : ferment_interfaces :: FFIConversion :: ffi_to (obj . 1) }) } unsafe fn destroy (ffi : * mut Tuple_u32_ferment_example_nested_HashID) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Tuple_u32_ferment_example_nested_HashID { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any (self . o_1) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Tuple_u32_ferment_example_nested_HashID_ctor (o_0 : u32 , o_1 : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_HashID) -> * mut Tuple_u32_ferment_example_nested_HashID { ferment_interfaces :: boxed (Tuple_u32_ferment_example_nested_HashID { o_0 , o_1 }) } # [no_mangle] pub unsafe extern "C" fn Tuple_u32_ferment_example_nested_HashID_destroy (ffi : * mut Tuple_u32_ferment_example_nested_HashID) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID } impl ferment_interfaces :: FFIConversion < Vec < (ferment_example :: nested :: HashID , ferment_example :: nested :: HashID) > > for Vec_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID { unsafe fn ffi_from_const (ffi : * const Vec_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID) -> Vec < (ferment_example :: nested :: HashID , ferment_example :: nested :: HashID) > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < (ferment_example :: nested :: HashID , ferment_example :: nested :: HashID) >) -> * const Vec_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID { type Value = Vec < (ferment_example :: nested :: HashID , ferment_example :: nested :: HashID) > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_vec (obj . into_iter ()) }) } } impl Drop for Vec_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID) -> * mut Vec_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID { ferment_interfaces :: boxed (Vec_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID_destroy (ffi : * mut Vec_Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_ferment_example_nested_HashID_err_ferment_example_nested_ProtocolError { pub ok : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_HashID , pub error : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_ProtocolError } impl ferment_interfaces :: FFIConversion < Result < ferment_example :: nested :: HashID , ferment_example :: nested :: ProtocolError > > for Result_ok_ferment_example_nested_HashID_err_ferment_example_nested_ProtocolError { unsafe fn ffi_from_const (ffi : * const Result_ok_ferment_example_nested_HashID_err_ferment_example_nested_ProtocolError) -> Result < ferment_example :: nested :: HashID , ferment_example :: nested :: ProtocolError > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_result (ffi_ref . ok , ffi_ref . error , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : Result < ferment_example :: nested :: HashID , ferment_example :: nested :: ProtocolError >) -> * const Result_ok_ferment_example_nested_HashID_err_ferment_example_nested_ProtocolError { ferment_interfaces :: boxed ({ let (ok , error) = match obj { Ok (o) => (ferment_interfaces :: FFIConversion :: ffi_to (o) , std :: ptr :: null_mut ()) , Err (o) => (std :: ptr :: null_mut () , ferment_interfaces :: FFIConversion :: ffi_to (o)) } ; Self { ok , error } }) } unsafe fn destroy (ffi : * mut Result_ok_ferment_example_nested_HashID_err_ferment_example_nested_ProtocolError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Result_ok_ferment_example_nested_HashID_err_ferment_example_nested_ProtocolError { fn drop (& mut self) { unsafe { if ! self . ok . is_null () { ferment_interfaces :: unbox_any (self . ok) ; } if ! self . error . is_null () { ferment_interfaces :: unbox_any (self . error) ; } ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_ferment_example_nested_HashID_err_ferment_example_nested_ProtocolError_ctor (ok : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_HashID , error : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_ProtocolError) -> * mut Result_ok_ferment_example_nested_HashID_err_ferment_example_nested_ProtocolError { ferment_interfaces :: boxed (Result_ok_ferment_example_nested_HashID_err_ferment_example_nested_ProtocolError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_ferment_example_nested_HashID_err_ferment_example_nested_ProtocolError_destroy (ffi : * mut Result_ok_ferment_example_nested_HashID_err_ferment_example_nested_ProtocolError) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_ferment_example_nested_HashID_values_ferment_example_nested_HashID { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_HashID , pub values : * mut * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_HashID } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < ferment_example :: nested :: HashID , ferment_example :: nested :: HashID > > for std_collections_Map_keys_ferment_example_nested_HashID_values_ferment_example_nested_HashID { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_ferment_example_nested_HashID_values_ferment_example_nested_HashID) -> std :: collections :: BTreeMap < ferment_example :: nested :: HashID , ferment_example :: nested :: HashID > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < ferment_example :: nested :: HashID , ferment_example :: nested :: HashID >) -> * const std_collections_Map_keys_ferment_example_nested_HashID_values_ferment_example_nested_HashID { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_vec (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_vec (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_ferment_example_nested_HashID_values_ferment_example_nested_HashID) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_ferment_example_nested_HashID_values_ferment_example_nested_HashID { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_ferment_example_nested_HashID_values_ferment_example_nested_HashID_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_HashID , values : * mut * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_HashID) -> * mut std_collections_Map_keys_ferment_example_nested_HashID_values_ferment_example_nested_HashID { ferment_interfaces :: boxed (std_collections_Map_keys_ferment_example_nested_HashID_values_ferment_example_nested_HashID { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_ferment_example_nested_HashID_values_ferment_example_nested_HashID_destroy (ffi : * mut std_collections_Map_keys_ferment_example_nested_HashID_values_ferment_example_nested_HashID) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Tuple_u32_u32 { pub o_0 : u32 , pub o_1 : u32 } impl ferment_interfaces :: FFIConversion < (u32 , u32) > for Tuple_u32_u32 { unsafe fn ffi_from_const (ffi : * const Tuple_u32_u32) -> (u32 , u32) { let ffi_ref = & * ffi ; (ffi_ref . o_0 , ffi_ref . o_1) } unsafe fn ffi_to_const (obj : (u32 , u32)) -> * const Tuple_u32_u32 { ferment_interfaces :: boxed (Self { o_0 : obj . 0 , o_1 : obj . 1 }) } unsafe fn destroy (ffi : * mut Tuple_u32_u32) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Tuple_u32_u32 { fn drop (& mut self) { unsafe { ; } } } # [no_mangle] pub unsafe extern "C" fn Tuple_u32_u32_ctor (o_0 : u32 , o_1 : u32) -> * mut Tuple_u32_u32 { ferment_interfaces :: boxed (Tuple_u32_u32 { o_0 , o_1 }) } # [no_mangle] pub unsafe extern "C" fn Tuple_u32_u32_destroy (ffi : * mut Tuple_u32_u32) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_ferment_example_nested_HashID { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_HashID } impl ferment_interfaces :: FFIConversion < Vec < ferment_example :: nested :: HashID > > for Vec_ferment_example_nested_HashID { unsafe fn ffi_from_const (ffi : * const Vec_ferment_example_nested_HashID) -> Vec < ferment_example :: nested :: HashID > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < ferment_example :: nested :: HashID >) -> * const Vec_ferment_example_nested_HashID { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_ferment_example_nested_HashID) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_ferment_example_nested_HashID { type Value = Vec < ferment_example :: nested :: HashID > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_vec (obj . into_iter ()) }) } } impl Drop for Vec_ferment_example_nested_HashID { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_ferment_example_nested_HashID_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_HashID) -> * mut Vec_ferment_example_nested_HashID { ferment_interfaces :: boxed (Vec_ferment_example_nested_HashID { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_ferment_example_nested_HashID_destroy (ffi : * mut Vec_ferment_example_nested_HashID) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_ferment_example_nested_FeatureVersion { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersion } impl ferment_interfaces :: FFIConversion < Vec < ferment_example :: nested :: FeatureVersion > > for Vec_ferment_example_nested_FeatureVersion { unsafe fn ffi_from_const (ffi : * const Vec_ferment_example_nested_FeatureVersion) -> Vec < ferment_example :: nested :: FeatureVersion > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < ferment_example :: nested :: FeatureVersion >) -> * const Vec_ferment_example_nested_FeatureVersion { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_ferment_example_nested_FeatureVersion) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_ferment_example_nested_FeatureVersion { type Value = Vec < ferment_example :: nested :: FeatureVersion > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_vec (obj . into_iter ()) }) } } impl Drop for Vec_ferment_example_nested_FeatureVersion { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_ferment_example_nested_FeatureVersion_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_FeatureVersion) -> * mut Vec_ferment_example_nested_FeatureVersion { ferment_interfaces :: boxed (Vec_ferment_example_nested_FeatureVersion { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_ferment_example_nested_FeatureVersion_destroy (ffi : * mut Vec_ferment_example_nested_FeatureVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID { pub o_0 : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_HashID , pub o_1 : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_HashID } impl ferment_interfaces :: FFIConversion < (ferment_example :: nested :: HashID , ferment_example :: nested :: HashID) > for Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID { unsafe fn ffi_from_const (ffi : * const Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID) -> (ferment_example :: nested :: HashID , ferment_example :: nested :: HashID) { let ffi_ref = & * ffi ; (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . o_0) , ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . o_1)) } unsafe fn ffi_to_const (obj : (ferment_example :: nested :: HashID , ferment_example :: nested :: HashID)) -> * const Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID { ferment_interfaces :: boxed (Self { o_0 : ferment_interfaces :: FFIConversion :: ffi_to (obj . 0) , o_1 : ferment_interfaces :: FFIConversion :: ffi_to (obj . 1) }) } unsafe fn destroy (ffi : * mut Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any (self . o_0) ; ferment_interfaces :: unbox_any (self . o_1) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID_ctor (o_0 : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_HashID , o_1 : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_HashID) -> * mut Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID { ferment_interfaces :: boxed (Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID { o_0 , o_1 }) } # [no_mangle] pub unsafe extern "C" fn Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID_destroy (ffi : * mut Tuple_ferment_example_nested_HashID_ferment_example_nested_HashID) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_ferment_example_identity_identity_Identity_err_ferment_example_nested_ProtocolError { pub ok : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_Identity , pub error : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_ProtocolError } impl ferment_interfaces :: FFIConversion < Result < ferment_example :: identity :: identity :: Identity , ferment_example :: nested :: ProtocolError > > for Result_ok_ferment_example_identity_identity_Identity_err_ferment_example_nested_ProtocolError { unsafe fn ffi_from_const (ffi : * const Result_ok_ferment_example_identity_identity_Identity_err_ferment_example_nested_ProtocolError) -> Result < ferment_example :: identity :: identity :: Identity , ferment_example :: nested :: ProtocolError > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_result (ffi_ref . ok , ffi_ref . error , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : Result < ferment_example :: identity :: identity :: Identity , ferment_example :: nested :: ProtocolError >) -> * const Result_ok_ferment_example_identity_identity_Identity_err_ferment_example_nested_ProtocolError { ferment_interfaces :: boxed ({ let (ok , error) = match obj { Ok (o) => (ferment_interfaces :: FFIConversion :: ffi_to (o) , std :: ptr :: null_mut ()) , Err (o) => (std :: ptr :: null_mut () , ferment_interfaces :: FFIConversion :: ffi_to (o)) } ; Self { ok , error } }) } unsafe fn destroy (ffi : * mut Result_ok_ferment_example_identity_identity_Identity_err_ferment_example_nested_ProtocolError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Result_ok_ferment_example_identity_identity_Identity_err_ferment_example_nested_ProtocolError { fn drop (& mut self) { unsafe { if ! self . ok . is_null () { ferment_interfaces :: unbox_any (self . ok) ; } if ! self . error . is_null () { ferment_interfaces :: unbox_any (self . error) ; } ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_ferment_example_identity_identity_Identity_err_ferment_example_nested_ProtocolError_ctor (ok : * mut crate :: fermented :: types :: ferment_example :: identity :: identity :: ferment_example_identity_identity_Identity , error : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_ProtocolError) -> * mut Result_ok_ferment_example_identity_identity_Identity_err_ferment_example_nested_ProtocolError { ferment_interfaces :: boxed (Result_ok_ferment_example_identity_identity_Identity_err_ferment_example_nested_ProtocolError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_ferment_example_identity_identity_Identity_err_ferment_example_nested_ProtocolError_destroy (ffi : * mut Result_ok_ferment_example_identity_identity_Identity_err_ferment_example_nested_ProtocolError) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_u8 { pub count : usize , pub values : * mut u8 } impl ferment_interfaces :: FFIConversion < Vec < u8 > > for Vec_u8 { unsafe fn ffi_from_const (ffi : * const Vec_u8) -> Vec < u8 > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < u8 >) -> * const Vec_u8 { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_u8) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_u8 { type Value = Vec < u8 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_primitive_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: boxed_vec (obj) }) } } impl Drop for Vec_u8 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_u8_ctor (count : usize , values : * mut u8) -> * mut Vec_u8 { ferment_interfaces :: boxed (Vec_u8 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_u8_destroy (ffi : * mut Vec_u8) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot { pub o_0 : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_BinaryData , pub o_1 : * mut crate :: fermented :: types :: ferment_example_nested :: model :: snapshot :: ferment_example_nested_model_snapshot_LLMQSnapshot } impl ferment_interfaces :: FFIConversion < (ferment_example :: nested :: BinaryData , ferment_example_nested :: model :: snapshot :: LLMQSnapshot) > for Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot { unsafe fn ffi_from_const (ffi : * const Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot) -> (ferment_example :: nested :: BinaryData , ferment_example_nested :: model :: snapshot :: LLMQSnapshot) { let ffi_ref = & * ffi ; (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . o_0) , ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . o_1)) } unsafe fn ffi_to_const (obj : (ferment_example :: nested :: BinaryData , ferment_example_nested :: model :: snapshot :: LLMQSnapshot)) -> * const Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot { ferment_interfaces :: boxed (Self { o_0 : ferment_interfaces :: FFIConversion :: ffi_to (obj . 0) , o_1 : ferment_interfaces :: FFIConversion :: ffi_to (obj . 1) }) } unsafe fn destroy (ffi : * mut Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any (self . o_0) ; ferment_interfaces :: unbox_any (self . o_1) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot_ctor (o_0 : * mut crate :: fermented :: types :: ferment_example :: nested :: ferment_example_nested_BinaryData , o_1 : * mut crate :: fermented :: types :: ferment_example_nested :: model :: snapshot :: ferment_example_nested_model_snapshot_LLMQSnapshot) -> * mut Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot { ferment_interfaces :: boxed (Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot { o_0 , o_1 }) } # [no_mangle] pub unsafe extern "C" fn Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot_destroy (ffi : * mut Tuple_ferment_example_nested_BinaryData_ferment_example_nested_model_snapshot_LLMQSnapshot) { ferment_interfaces :: unbox_any (ffi) ; } }