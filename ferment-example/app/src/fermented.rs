# [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unreachable_patterns , unused_braces , unused_imports , unused_parens , unused_qualifications , unused_unsafe , unused_variables)] pub mod types { pub mod example_simple { use crate as example_nested ; pub mod nested { use crate as example_nested ; # [doc = "FFI-representation of the [`HashID`]"] # [repr (C)] # [derive (Clone)] pub struct example_simple_nested_HashID (* mut crate :: fermented :: generics :: Arr_u8_32) ; impl ferment :: FFIConversionFrom < example_simple :: nested :: HashID > for example_simple_nested_HashID { unsafe fn ffi_from_const (ffi : * const example_simple_nested_HashID) -> example_simple :: nested :: HashID { let ffi_ref = & * ffi ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . 0) } } impl ferment :: FFIConversionTo < example_simple :: nested :: HashID > for example_simple_nested_HashID { unsafe fn ffi_to_const (obj : example_simple :: nested :: HashID) -> * const example_simple_nested_HashID { ferment :: boxed (example_simple_nested_HashID (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj))) } } impl Drop for example_simple_nested_HashID { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn example_simple_nested_HashID_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut example_simple_nested_HashID { ferment :: boxed (example_simple_nested_HashID (o_0)) } # [no_mangle] pub unsafe extern "C" fn example_simple_nested_HashID_destroy < > (ffi : * mut example_simple_nested_HashID) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn example_simple_nested_HashID_get_0 < > (obj : * const example_simple_nested_HashID) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn example_simple_nested_HashID_set_0 < > (obj : * const example_simple_nested_HashID) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . 0 } } pub mod chain { use crate as example_nested ; pub mod common { use crate as example_nested ; pub mod chain_type { use crate as example_nested ; # [repr (C)] # [derive (Clone)] pub struct example_simple_chain_common_chain_type_IHaveChainSettings { object : * const () , vtable : * const example_simple_chain_common_chain_type_IHaveChainSettings_VTable } # [repr (C)] # [derive (Clone)] pub struct example_simple_chain_common_chain_type_IHaveChainSettings_VTable { # [doc = "FFI-representation of the [`example_simple::chain::common::chain_type::IHaveChainSettings::genesis_hash`]"] pub genesis_hash : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID , # [doc = "FFI-representation of the [`example_simple::chain::common::chain_type::IHaveChainSettings::find_masternode_list`]"] pub find_masternode_list : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings , cached_mn_lists : * mut crate :: fermented :: generics :: std_collections_Map_keys_example_simple_nested_HashID_values_example_simple_nested_HashID , unknown_mn_lists : * mut crate :: fermented :: generics :: Vec_example_simple_nested_HashID) -> * mut crate :: fermented :: generics :: Result_ok_example_simple_nested_HashID_err_String , # [doc = "FFI-representation of the [`example_simple::chain::common::chain_type::IHaveChainSettings::has_genesis_hash`]"] pub has_genesis_hash : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings , hash : * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID) -> bool } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DevnetType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum example_simple_chain_common_chain_type_DevnetType { JackDaniels = 0 , Devnet333 = 1 , Chacha = 2 , Mojito = 3 , WhiteRussian = 4 } impl ferment :: FFIConversionFrom < example_simple :: chain :: common :: chain_type :: DevnetType > for example_simple_chain_common_chain_type_DevnetType { unsafe fn ffi_from_const (ffi : * const example_simple_chain_common_chain_type_DevnetType) -> example_simple :: chain :: common :: chain_type :: DevnetType { let ffi_ref = & * ffi ; match ffi_ref { example_simple_chain_common_chain_type_DevnetType :: JackDaniels => example_simple :: chain :: common :: chain_type :: DevnetType :: JackDaniels , example_simple_chain_common_chain_type_DevnetType :: Devnet333 => example_simple :: chain :: common :: chain_type :: DevnetType :: Devnet333 , example_simple_chain_common_chain_type_DevnetType :: Chacha => example_simple :: chain :: common :: chain_type :: DevnetType :: Chacha , example_simple_chain_common_chain_type_DevnetType :: Mojito => example_simple :: chain :: common :: chain_type :: DevnetType :: Mojito , example_simple_chain_common_chain_type_DevnetType :: WhiteRussian => example_simple :: chain :: common :: chain_type :: DevnetType :: WhiteRussian } } } impl ferment :: FFIConversionTo < example_simple :: chain :: common :: chain_type :: DevnetType > for example_simple_chain_common_chain_type_DevnetType { unsafe fn ffi_to_const (obj : example_simple :: chain :: common :: chain_type :: DevnetType) -> * const example_simple_chain_common_chain_type_DevnetType { ferment :: boxed (match obj { example_simple :: chain :: common :: chain_type :: DevnetType :: JackDaniels => example_simple_chain_common_chain_type_DevnetType :: JackDaniels , example_simple :: chain :: common :: chain_type :: DevnetType :: Devnet333 => example_simple_chain_common_chain_type_DevnetType :: Devnet333 , example_simple :: chain :: common :: chain_type :: DevnetType :: Chacha => example_simple_chain_common_chain_type_DevnetType :: Chacha , example_simple :: chain :: common :: chain_type :: DevnetType :: Mojito => example_simple_chain_common_chain_type_DevnetType :: Mojito , example_simple :: chain :: common :: chain_type :: DevnetType :: WhiteRussian => example_simple_chain_common_chain_type_DevnetType :: WhiteRussian , _ => unreachable ! ("This is unreachable") }) } } impl Drop for example_simple_chain_common_chain_type_DevnetType { fn drop (& mut self) { unsafe { match self { example_simple_chain_common_chain_type_DevnetType :: JackDaniels => { } , example_simple_chain_common_chain_type_DevnetType :: Devnet333 => { } , example_simple_chain_common_chain_type_DevnetType :: Chacha => { } , example_simple_chain_common_chain_type_DevnetType :: Mojito => { } , example_simple_chain_common_chain_type_DevnetType :: WhiteRussian => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_DevnetType_JackDaniels_ctor () -> * mut example_simple_chain_common_chain_type_DevnetType { ferment :: boxed (example_simple_chain_common_chain_type_DevnetType :: JackDaniels { }) } # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_DevnetType_Devnet333_ctor () -> * mut example_simple_chain_common_chain_type_DevnetType { ferment :: boxed (example_simple_chain_common_chain_type_DevnetType :: Devnet333 { }) } # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_DevnetType_Chacha_ctor () -> * mut example_simple_chain_common_chain_type_DevnetType { ferment :: boxed (example_simple_chain_common_chain_type_DevnetType :: Chacha { }) } # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_DevnetType_Mojito_ctor () -> * mut example_simple_chain_common_chain_type_DevnetType { ferment :: boxed (example_simple_chain_common_chain_type_DevnetType :: Mojito { }) } # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_DevnetType_WhiteRussian_ctor () -> * mut example_simple_chain_common_chain_type_DevnetType { ferment :: boxed (example_simple_chain_common_chain_type_DevnetType :: WhiteRussian { }) } # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_DevnetType_destroy < > (ffi : * mut example_simple_chain_common_chain_type_DevnetType) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub static example_simple_chain_common_chain_type_ChainType_example_simple_chain_common_chain_type_IHaveChainSettings : crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings_VTable = { # [no_mangle] unsafe extern "C" fn example_simple_chain_common_chain_type_IHaveChainSettings_example_simple_chain_common_chain_type_ChainType_genesis_hash (self_ : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID { let obj = < example_simple :: chain :: common :: chain_type :: ChainType as example_simple :: chain :: common :: chain_type :: IHaveChainSettings > :: genesis_hash (& * ((* self_) . object as * const example_simple :: chain :: common :: chain_type :: ChainType)) ; < crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID as ferment :: FFIConversionTo < example_simple :: nested :: HashID >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn example_simple_chain_common_chain_type_IHaveChainSettings_example_simple_chain_common_chain_type_ChainType_find_masternode_list (self_ : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings , cached_mn_lists : * mut crate :: fermented :: generics :: Map_keys_HashID_values_HashID , unknown_mn_lists : * mut crate :: fermented :: generics :: Vec_HashID) -> * mut crate :: fermented :: generics :: Result_ok_example_simple_nested_HashID_err_String { let obj = < example_simple :: chain :: common :: chain_type :: ChainType as example_simple :: chain :: common :: chain_type :: IHaveChainSettings > :: find_masternode_list (& * ((* self_) . object as * const example_simple :: chain :: common :: chain_type :: ChainType) , < crate :: fermented :: generics :: Map_keys_HashID_values_HashID as ferment :: FFIConversionFrom < BTreeMap < HashID , HashID > >> :: ffi_from (cached_mn_lists) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_HashID as ferment :: FFIConversionFrom < Vec < HashID > >> :: ffi_from (unknown_mn_lists)))) ; < crate :: fermented :: generics :: Result_ok_example_simple_nested_HashID_err_String as ferment :: FFIConversionTo < Result < example_simple :: nested :: HashID , String > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn example_simple_chain_common_chain_type_IHaveChainSettings_example_simple_chain_common_chain_type_ChainType_has_genesis_hash (self_ : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings , hash : * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID) -> bool { let obj = < example_simple :: chain :: common :: chain_type :: ChainType as example_simple :: chain :: common :: chain_type :: IHaveChainSettings > :: has_genesis_hash (& * ((* self_) . object as * const example_simple :: chain :: common :: chain_type :: ChainType) , < crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID as ferment :: FFIConversionFrom < example_simple :: nested :: HashID >> :: ffi_from (hash)) ; obj } crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings_VTable { genesis_hash : example_simple_chain_common_chain_type_IHaveChainSettings_example_simple_chain_common_chain_type_ChainType_genesis_hash , find_masternode_list : example_simple_chain_common_chain_type_IHaveChainSettings_example_simple_chain_common_chain_type_ChainType_find_masternode_list , has_genesis_hash : example_simple_chain_common_chain_type_IHaveChainSettings_example_simple_chain_common_chain_type_ChainType_has_genesis_hash } } ; # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_ChainType_as_crate_fermented_types_example_simple_chain_common_chain_type_example_simple_chain_common_chain_type_IHaveChainSettings (obj : * const example_simple :: chain :: common :: chain_type :: ChainType) -> crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings { crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings { object : obj as * const () , vtable : & example_simple_chain_common_chain_type_ChainType_example_simple_chain_common_chain_type_IHaveChainSettings } } # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_ChainType_as_crate_fermented_types_example_simple_chain_common_chain_type_example_simple_chain_common_chain_type_IHaveChainSettings_destroy (obj : crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings) { ferment :: unbox_any (obj . object as * mut example_simple :: chain :: common :: chain_type :: ChainType) ; } # [doc = "FFI-representation of the [`example_simple::chain::common::chain_type::ChainType::genesis_hash`]"] # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_ChainType_IHaveChainSettings_genesis_hash (self_ : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID { let obj = < example_simple :: chain :: common :: chain_type :: ChainType as example_simple :: chain :: common :: chain_type :: IHaveChainSettings > :: genesis_hash (& * ((* self_) . object as * const example_simple :: chain :: common :: chain_type :: ChainType)) ; < crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID as ferment :: FFIConversionTo < example_simple :: nested :: HashID >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`example_simple::chain::common::chain_type::ChainType::genesis_hash`]"] # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_ChainType_genesis_hash (self_ : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_ChainType) -> * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID { let obj = < example_simple :: chain :: common :: chain_type :: ChainType as example_simple :: chain :: common :: chain_type :: IHaveChainSettings > :: genesis_hash (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID as ferment :: FFIConversionTo < example_simple :: nested :: HashID >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`example_simple::chain::common::chain_type::ChainType::find_masternode_list`]"] # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_ChainType_IHaveChainSettings_find_masternode_list (self_ : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings , _cached_mn_lists : * mut crate :: fermented :: generics :: std_collections_Map_keys_example_simple_nested_HashID_values_example_simple_nested_HashID , _unknown_mn_lists : * mut crate :: fermented :: generics :: Vec_example_simple_nested_HashID) -> * mut crate :: fermented :: generics :: Result_ok_example_simple_nested_HashID_err_String { let obj = < example_simple :: chain :: common :: chain_type :: ChainType as example_simple :: chain :: common :: chain_type :: IHaveChainSettings > :: find_masternode_list (& * ((* self_) . object as * const example_simple :: chain :: common :: chain_type :: ChainType) , < crate :: fermented :: generics :: std_collections_Map_keys_example_simple_nested_HashID_values_example_simple_nested_HashID as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < example_simple :: nested :: HashID , example_simple :: nested :: HashID > >> :: ffi_from (_cached_mn_lists) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_example_simple_nested_HashID as ferment :: FFIConversionFrom < Vec < example_simple :: nested :: HashID > >> :: ffi_from (_unknown_mn_lists)))) ; < crate :: fermented :: generics :: Result_ok_example_simple_nested_HashID_err_String as ferment :: FFIConversionTo < Result < example_simple :: nested :: HashID , String > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`example_simple::chain::common::chain_type::ChainType::find_masternode_list`]"] # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_ChainType_find_masternode_list (self_ : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_ChainType , _cached_mn_lists : * mut crate :: fermented :: generics :: std_collections_Map_keys_example_simple_nested_HashID_values_example_simple_nested_HashID , _unknown_mn_lists : * mut crate :: fermented :: generics :: Vec_example_simple_nested_HashID) -> * mut crate :: fermented :: generics :: Result_ok_example_simple_nested_HashID_err_String { let obj = < example_simple :: chain :: common :: chain_type :: ChainType as example_simple :: chain :: common :: chain_type :: IHaveChainSettings > :: find_masternode_list (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: std_collections_Map_keys_example_simple_nested_HashID_values_example_simple_nested_HashID as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < example_simple :: nested :: HashID , example_simple :: nested :: HashID > >> :: ffi_from (_cached_mn_lists) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_example_simple_nested_HashID as ferment :: FFIConversionFrom < Vec < example_simple :: nested :: HashID > >> :: ffi_from (_unknown_mn_lists)))) ; < crate :: fermented :: generics :: Result_ok_example_simple_nested_HashID_err_String as ferment :: FFIConversionTo < Result < example_simple :: nested :: HashID , String > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`example_simple::chain::common::chain_type::ChainType::has_genesis_hash`]"] # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_ChainType_IHaveChainSettings_has_genesis_hash (self_ : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings , hash : * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID) -> bool { let obj = < example_simple :: chain :: common :: chain_type :: ChainType as example_simple :: chain :: common :: chain_type :: IHaveChainSettings > :: has_genesis_hash (& * ((* self_) . object as * const example_simple :: chain :: common :: chain_type :: ChainType) , < crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID as ferment :: FFIConversionFrom < example_simple :: nested :: HashID >> :: ffi_from (hash)) ; obj } # [doc = "FFI-representation of the [`example_simple::chain::common::chain_type::ChainType::has_genesis_hash`]"] # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_ChainType_has_genesis_hash (self_ : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_ChainType , hash : * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID) -> bool { let obj = < example_simple :: chain :: common :: chain_type :: ChainType as example_simple :: chain :: common :: chain_type :: IHaveChainSettings > :: has_genesis_hash (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID as ferment :: FFIConversionFrom < example_simple :: nested :: HashID >> :: ffi_from (hash)) ; obj } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ChainType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum example_simple_chain_common_chain_type_ChainType { MainNet , TestNet , DevNet (* mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_DevnetType) } impl ferment :: FFIConversionFrom < example_simple :: chain :: common :: chain_type :: ChainType > for example_simple_chain_common_chain_type_ChainType { unsafe fn ffi_from_const (ffi : * const example_simple_chain_common_chain_type_ChainType) -> example_simple :: chain :: common :: chain_type :: ChainType { let ffi_ref = & * ffi ; match ffi_ref { example_simple_chain_common_chain_type_ChainType :: MainNet => example_simple :: chain :: common :: chain_type :: ChainType :: MainNet , example_simple_chain_common_chain_type_ChainType :: TestNet => example_simple :: chain :: common :: chain_type :: ChainType :: TestNet , example_simple_chain_common_chain_type_ChainType :: DevNet (o_0) => example_simple :: chain :: common :: chain_type :: ChainType :: DevNet (< crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_DevnetType as ferment :: FFIConversionFrom < example_simple :: chain :: common :: chain_type :: DevnetType >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < example_simple :: chain :: common :: chain_type :: ChainType > for example_simple_chain_common_chain_type_ChainType { unsafe fn ffi_to_const (obj : example_simple :: chain :: common :: chain_type :: ChainType) -> * const example_simple_chain_common_chain_type_ChainType { ferment :: boxed (match obj { example_simple :: chain :: common :: chain_type :: ChainType :: MainNet => example_simple_chain_common_chain_type_ChainType :: MainNet , example_simple :: chain :: common :: chain_type :: ChainType :: TestNet => example_simple_chain_common_chain_type_ChainType :: TestNet , example_simple :: chain :: common :: chain_type :: ChainType :: DevNet (o_0) => example_simple_chain_common_chain_type_ChainType :: DevNet (< crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_DevnetType as ferment :: FFIConversionTo < example_simple :: chain :: common :: chain_type :: DevnetType >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for example_simple_chain_common_chain_type_ChainType { fn drop (& mut self) { unsafe { match self { example_simple_chain_common_chain_type_ChainType :: MainNet => { } , example_simple_chain_common_chain_type_ChainType :: TestNet => { } , example_simple_chain_common_chain_type_ChainType :: DevNet (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_ChainType_MainNet_ctor () -> * mut example_simple_chain_common_chain_type_ChainType { ferment :: boxed (example_simple_chain_common_chain_type_ChainType :: MainNet { }) } # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_ChainType_TestNet_ctor () -> * mut example_simple_chain_common_chain_type_ChainType { ferment :: boxed (example_simple_chain_common_chain_type_ChainType :: TestNet { }) } # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_ChainType_DevNet_ctor (o_o_0 : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_DevnetType) -> * mut example_simple_chain_common_chain_type_ChainType { ferment :: boxed (example_simple_chain_common_chain_type_ChainType :: DevNet (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_ChainType_destroy < > (ffi : * mut example_simple_chain_common_chain_type_ChainType) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub static example_simple_chain_common_chain_type_DevnetType_example_simple_chain_common_chain_type_IHaveChainSettings : crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings_VTable = { # [no_mangle] unsafe extern "C" fn example_simple_chain_common_chain_type_IHaveChainSettings_example_simple_chain_common_chain_type_DevnetType_genesis_hash (self_ : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID { let obj = < example_simple :: chain :: common :: chain_type :: DevnetType as example_simple :: chain :: common :: chain_type :: IHaveChainSettings > :: genesis_hash (& * ((* self_) . object as * const example_simple :: chain :: common :: chain_type :: DevnetType)) ; < crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID as ferment :: FFIConversionTo < example_simple :: nested :: HashID >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn example_simple_chain_common_chain_type_IHaveChainSettings_example_simple_chain_common_chain_type_DevnetType_find_masternode_list (self_ : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings , cached_mn_lists : * mut crate :: fermented :: generics :: Map_keys_HashID_values_HashID , unknown_mn_lists : * mut crate :: fermented :: generics :: Vec_HashID) -> * mut crate :: fermented :: generics :: Result_ok_example_simple_nested_HashID_err_String { let obj = < example_simple :: chain :: common :: chain_type :: DevnetType as example_simple :: chain :: common :: chain_type :: IHaveChainSettings > :: find_masternode_list (& * ((* self_) . object as * const example_simple :: chain :: common :: chain_type :: DevnetType) , < crate :: fermented :: generics :: Map_keys_HashID_values_HashID as ferment :: FFIConversionFrom < BTreeMap < HashID , HashID > >> :: ffi_from (cached_mn_lists) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_HashID as ferment :: FFIConversionFrom < Vec < HashID > >> :: ffi_from (unknown_mn_lists)))) ; < crate :: fermented :: generics :: Result_ok_example_simple_nested_HashID_err_String as ferment :: FFIConversionTo < Result < example_simple :: nested :: HashID , String > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn example_simple_chain_common_chain_type_IHaveChainSettings_example_simple_chain_common_chain_type_DevnetType_has_genesis_hash (self_ : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings , hash : * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID) -> bool { let obj = < example_simple :: chain :: common :: chain_type :: DevnetType as example_simple :: chain :: common :: chain_type :: IHaveChainSettings > :: has_genesis_hash (& * ((* self_) . object as * const example_simple :: chain :: common :: chain_type :: DevnetType) , < crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID as ferment :: FFIConversionFrom < example_simple :: nested :: HashID >> :: ffi_from (hash)) ; obj } crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings_VTable { genesis_hash : example_simple_chain_common_chain_type_IHaveChainSettings_example_simple_chain_common_chain_type_DevnetType_genesis_hash , find_masternode_list : example_simple_chain_common_chain_type_IHaveChainSettings_example_simple_chain_common_chain_type_DevnetType_find_masternode_list , has_genesis_hash : example_simple_chain_common_chain_type_IHaveChainSettings_example_simple_chain_common_chain_type_DevnetType_has_genesis_hash } } ; # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_DevnetType_as_crate_fermented_types_example_simple_chain_common_chain_type_example_simple_chain_common_chain_type_IHaveChainSettings (obj : * const example_simple :: chain :: common :: chain_type :: DevnetType) -> crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings { crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings { object : obj as * const () , vtable : & example_simple_chain_common_chain_type_DevnetType_example_simple_chain_common_chain_type_IHaveChainSettings } } # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_DevnetType_as_crate_fermented_types_example_simple_chain_common_chain_type_example_simple_chain_common_chain_type_IHaveChainSettings_destroy (obj : crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings) { ferment :: unbox_any (obj . object as * mut example_simple :: chain :: common :: chain_type :: DevnetType) ; } # [doc = "FFI-representation of the [`example_simple::chain::common::chain_type::DevnetType::genesis_hash`]"] # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_DevnetType_IHaveChainSettings_genesis_hash (self_ : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID { let obj = < example_simple :: chain :: common :: chain_type :: DevnetType as example_simple :: chain :: common :: chain_type :: IHaveChainSettings > :: genesis_hash (& * ((* self_) . object as * const example_simple :: chain :: common :: chain_type :: DevnetType)) ; < crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID as ferment :: FFIConversionTo < example_simple :: nested :: HashID >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`example_simple::chain::common::chain_type::DevnetType::genesis_hash`]"] # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_DevnetType_genesis_hash (self_ : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_DevnetType) -> * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID { let obj = < example_simple :: chain :: common :: chain_type :: DevnetType as example_simple :: chain :: common :: chain_type :: IHaveChainSettings > :: genesis_hash (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID as ferment :: FFIConversionTo < example_simple :: nested :: HashID >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`example_simple::chain::common::chain_type::DevnetType::find_masternode_list`]"] # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_DevnetType_IHaveChainSettings_find_masternode_list (self_ : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings , _cached_mn_lists : * mut crate :: fermented :: generics :: std_collections_Map_keys_example_simple_nested_HashID_values_example_simple_nested_HashID , _unknown_mn_lists : * mut crate :: fermented :: generics :: Vec_example_simple_nested_HashID) -> * mut crate :: fermented :: generics :: Result_ok_example_simple_nested_HashID_err_String { let obj = < example_simple :: chain :: common :: chain_type :: DevnetType as example_simple :: chain :: common :: chain_type :: IHaveChainSettings > :: find_masternode_list (& * ((* self_) . object as * const example_simple :: chain :: common :: chain_type :: DevnetType) , < crate :: fermented :: generics :: std_collections_Map_keys_example_simple_nested_HashID_values_example_simple_nested_HashID as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < example_simple :: nested :: HashID , example_simple :: nested :: HashID > >> :: ffi_from (_cached_mn_lists) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_example_simple_nested_HashID as ferment :: FFIConversionFrom < Vec < example_simple :: nested :: HashID > >> :: ffi_from (_unknown_mn_lists)))) ; < crate :: fermented :: generics :: Result_ok_example_simple_nested_HashID_err_String as ferment :: FFIConversionTo < Result < example_simple :: nested :: HashID , String > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`example_simple::chain::common::chain_type::DevnetType::find_masternode_list`]"] # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_DevnetType_find_masternode_list (self_ : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_DevnetType , _cached_mn_lists : * mut crate :: fermented :: generics :: std_collections_Map_keys_example_simple_nested_HashID_values_example_simple_nested_HashID , _unknown_mn_lists : * mut crate :: fermented :: generics :: Vec_example_simple_nested_HashID) -> * mut crate :: fermented :: generics :: Result_ok_example_simple_nested_HashID_err_String { let obj = < example_simple :: chain :: common :: chain_type :: DevnetType as example_simple :: chain :: common :: chain_type :: IHaveChainSettings > :: find_masternode_list (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: std_collections_Map_keys_example_simple_nested_HashID_values_example_simple_nested_HashID as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < example_simple :: nested :: HashID , example_simple :: nested :: HashID > >> :: ffi_from (_cached_mn_lists) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_example_simple_nested_HashID as ferment :: FFIConversionFrom < Vec < example_simple :: nested :: HashID > >> :: ffi_from (_unknown_mn_lists)))) ; < crate :: fermented :: generics :: Result_ok_example_simple_nested_HashID_err_String as ferment :: FFIConversionTo < Result < example_simple :: nested :: HashID , String > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`example_simple::chain::common::chain_type::DevnetType::has_genesis_hash`]"] # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_DevnetType_IHaveChainSettings_has_genesis_hash (self_ : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_IHaveChainSettings , hash : * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID) -> bool { let obj = < example_simple :: chain :: common :: chain_type :: DevnetType as example_simple :: chain :: common :: chain_type :: IHaveChainSettings > :: has_genesis_hash (& * ((* self_) . object as * const example_simple :: chain :: common :: chain_type :: DevnetType) , < crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID as ferment :: FFIConversionFrom < example_simple :: nested :: HashID >> :: ffi_from (hash)) ; obj } # [doc = "FFI-representation of the [`example_simple::chain::common::chain_type::DevnetType::has_genesis_hash`]"] # [no_mangle] pub unsafe extern "C" fn example_simple_chain_common_chain_type_DevnetType_has_genesis_hash (self_ : * mut crate :: fermented :: types :: example_simple :: chain :: common :: chain_type :: example_simple_chain_common_chain_type_DevnetType , hash : * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID) -> bool { let obj = < example_simple :: chain :: common :: chain_type :: DevnetType as example_simple :: chain :: common :: chain_type :: IHaveChainSettings > :: has_genesis_hash (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID as ferment :: FFIConversionFrom < example_simple :: nested :: HashID >> :: ffi_from (hash)) ; obj } } } } # [doc = "FFI-representation of the [`Unstable`]"] # [repr (C)] # [derive (Clone)] pub struct example_simple_Unstable { pub secs : * mut [u8 ; 16] , pub nanos : * mut [u8 ; 16] } impl ferment :: FFIConversionFrom < example_simple :: Unstable > for example_simple_Unstable { unsafe fn ffi_from_const (ffi : * const example_simple_Unstable) -> example_simple :: Unstable { let ffi_ref = & * ffi ; example_simple :: Unstable { secs : < [u8 ; 16] as ferment :: FFIConversionFrom < u128 >> :: ffi_from (ffi_ref . secs) , nanos : < [u8 ; 16] as ferment :: FFIConversionFrom < i128 >> :: ffi_from (ffi_ref . nanos) } } } impl ferment :: FFIConversionTo < example_simple :: Unstable > for example_simple_Unstable { unsafe fn ffi_to_const (obj : example_simple :: Unstable) -> * const example_simple_Unstable { ferment :: boxed (example_simple_Unstable { secs : < [u8 ; 16] as ferment :: FFIConversionTo < u128 >> :: ffi_to (obj . secs) , nanos : < [u8 ; 16] as ferment :: FFIConversionTo < i128 >> :: ffi_to (obj . nanos) }) } } impl Drop for example_simple_Unstable { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any_opt (ffi_ref . secs) ; ferment :: unbox_any_opt (ffi_ref . nanos) ; } } } # [no_mangle] pub unsafe extern "C" fn example_simple_Unstable_ctor < > (secs : * mut [u8 ; 16] , nanos : * mut [u8 ; 16]) -> * mut example_simple_Unstable { ferment :: boxed (example_simple_Unstable { secs , nanos }) } # [no_mangle] pub unsafe extern "C" fn example_simple_Unstable_destroy < > (ffi : * mut example_simple_Unstable) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn example_simple_Unstable_get_secs < > (obj : * const example_simple_Unstable) -> * mut [u8 ; 16] { (* obj) . secs } # [no_mangle] pub unsafe extern "C" fn example_simple_Unstable_get_nanos < > (obj : * const example_simple_Unstable) -> * mut [u8 ; 16] { (* obj) . nanos } # [no_mangle] pub unsafe extern "C" fn example_simple_Unstable_set_secs < > (obj : * const example_simple_Unstable) -> * mut [u8 ; 16] { (* obj) . secs } # [no_mangle] pub unsafe extern "C" fn example_simple_Unstable_set_nanos < > (obj : * const example_simple_Unstable) -> * mut [u8 ; 16] { (* obj) . nanos } } } # [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unreachable_patterns , unused_braces , unused_imports , unused_parens , unused_qualifications , unused_unsafe , unused_variables)] pub mod generics { use crate as example_nested ; # [repr (C)] # [derive (Clone)] pub struct Arr_u8_32 { pub count : usize , pub values : * mut u8 } impl ferment :: FFIConversionFrom < [u8 ; 32] > for Arr_u8_32 { unsafe fn ffi_from_const (ffi : * const Arr_u8_32) -> [u8 ; 32] { let ffi_ref = & * ffi ; let vec : Vec < u8 > = ferment :: from_primitive_group (ffi_ref . values , ffi_ref . count) ; vec . try_into () . unwrap () } } impl ferment :: FFIConversionTo < [u8 ; 32] > for Arr_u8_32 { unsafe fn ffi_to_const (obj : [u8 ; 32]) -> * const Arr_u8_32 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_32 { fn drop (& mut self) { unsafe { ferment :: unbox_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_32_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_32 { ferment :: boxed (Arr_u8_32 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_32_destroy (ffi : * mut Arr_u8_32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_example_simple_nested_HashID_values_example_simple_nested_HashID { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID , pub values : * mut * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < example_simple :: nested :: HashID , example_simple :: nested :: HashID > > for std_collections_Map_keys_example_simple_nested_HashID_values_example_simple_nested_HashID { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_example_simple_nested_HashID_values_example_simple_nested_HashID) -> std :: collections :: BTreeMap < example_simple :: nested :: HashID , example_simple :: nested :: HashID > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID as ferment :: FFIConversionFrom < example_simple :: nested :: HashID >> :: ffi_from (o) , | o | < crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID as ferment :: FFIConversionFrom < example_simple :: nested :: HashID >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < example_simple :: nested :: HashID , example_simple :: nested :: HashID > > for std_collections_Map_keys_example_simple_nested_HashID_values_example_simple_nested_HashID { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < example_simple :: nested :: HashID , example_simple :: nested :: HashID >) -> * const std_collections_Map_keys_example_simple_nested_HashID_values_example_simple_nested_HashID { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_example_simple_nested_HashID_values_example_simple_nested_HashID { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_example_simple_nested_HashID_values_example_simple_nested_HashID_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID , values : * mut * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID) -> * mut std_collections_Map_keys_example_simple_nested_HashID_values_example_simple_nested_HashID { ferment :: boxed (std_collections_Map_keys_example_simple_nested_HashID_values_example_simple_nested_HashID { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_example_simple_nested_HashID_values_example_simple_nested_HashID_destroy (ffi : * mut std_collections_Map_keys_example_simple_nested_HashID_values_example_simple_nested_HashID) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_example_simple_nested_HashID_err_String { pub ok : * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID , pub error : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < Result < example_simple :: nested :: HashID , String > > for Result_ok_example_simple_nested_HashID_err_String { unsafe fn ffi_from_const (ffi : * const Result_ok_example_simple_nested_HashID_err_String) -> Result < example_simple :: nested :: HashID , String > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID as ferment :: FFIConversionFrom < example_simple :: nested :: HashID >> :: ffi_from (o) , ffi_ref . error , | o | < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < example_simple :: nested :: HashID , String > > for Result_ok_example_simple_nested_HashID_err_String { unsafe fn ffi_to_const (obj : Result < example_simple :: nested :: HashID , String >) -> * const Result_ok_example_simple_nested_HashID_err_String { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_example_simple_nested_HashID_err_String { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_example_simple_nested_HashID_err_String_ctor (ok : * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID , error : * mut std :: os :: raw :: c_char) -> * mut Result_ok_example_simple_nested_HashID_err_String { ferment :: boxed (Result_ok_example_simple_nested_HashID_err_String { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_example_simple_nested_HashID_err_String_destroy (ffi : * mut Result_ok_example_simple_nested_HashID_err_String) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_example_simple_nested_HashID { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID } impl ferment :: FFIConversionFrom < Vec < example_simple :: nested :: HashID > > for Vec_example_simple_nested_HashID { unsafe fn ffi_from_const (ffi : * const Vec_example_simple_nested_HashID) -> Vec < example_simple :: nested :: HashID > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < example_simple :: nested :: HashID > > for Vec_example_simple_nested_HashID { unsafe fn ffi_to_const (obj : Vec < example_simple :: nested :: HashID >) -> * const Vec_example_simple_nested_HashID { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_example_simple_nested_HashID { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_example_simple_nested_HashID_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: example_simple :: nested :: example_simple_nested_HashID) -> * mut Vec_example_simple_nested_HashID { ferment :: boxed (Vec_example_simple_nested_HashID { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_example_simple_nested_HashID_destroy (ffi : * mut Vec_example_simple_nested_HashID) { ferment :: unbox_any (ffi) ; } }