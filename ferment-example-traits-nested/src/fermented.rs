# [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unreachable_patterns , unused_braces , unused_imports , unused_parens , unused_qualifications , unused_unsafe , unused_variables)] pub mod types { pub mod ferment_example_traits { use crate as ferment_example_traits_nested ; pub mod transport { use crate as ferment_example_traits_nested ; pub mod transport_request { use crate as ferment_example_traits_nested ; # [doc = "FFI-representation of the [`ferment_example_traits :: transport :: transport_request :: DocumentQuery`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_traits_transport_transport_request_DocumentQuery { pub version : u32 } impl ferment_interfaces :: FFIConversion < ferment_example_traits :: transport :: transport_request :: DocumentQuery > for ferment_example_traits_transport_transport_request_DocumentQuery { unsafe fn ffi_from_const (ffi : * const ferment_example_traits_transport_transport_request_DocumentQuery) -> ferment_example_traits :: transport :: transport_request :: DocumentQuery { let ffi_ref = & * ffi ; ferment_example_traits :: transport :: transport_request :: DocumentQuery { version : ffi_ref . version } } unsafe fn ffi_to_const (obj : ferment_example_traits :: transport :: transport_request :: DocumentQuery) -> * const ferment_example_traits_transport_transport_request_DocumentQuery { ferment_interfaces :: boxed (ferment_example_traits_transport_transport_request_DocumentQuery { version : obj . version }) } unsafe fn destroy (ffi : * mut ferment_example_traits_transport_transport_request_DocumentQuery) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_traits_transport_transport_request_DocumentQuery { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_DocumentQuery_ctor < > (version : u32) -> * mut ferment_example_traits_transport_transport_request_DocumentQuery { ferment_interfaces :: boxed (ferment_example_traits_transport_transport_request_DocumentQuery { version }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_DocumentQuery_destroy < > (ffi : * mut ferment_example_traits_transport_transport_request_DocumentQuery) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_DocumentQuery_get_version < > (obj : * const ferment_example_traits_transport_transport_request_DocumentQuery) -> u32 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_DocumentQuery_set_version < > (obj : * mut ferment_example_traits_transport_transport_request_DocumentQuery , value : u32) { (* obj) . version = value ; } # [doc = "FFI-representation of the [`ferment_example_traits :: transport :: transport_request :: Uri`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_traits_transport_transport_request_Uri { pub scheme : * mut String } impl ferment_interfaces :: FFIConversion < ferment_example_traits :: transport :: transport_request :: Uri > for ferment_example_traits_transport_transport_request_Uri { unsafe fn ffi_from_const (ffi : * const ferment_example_traits_transport_transport_request_Uri) -> ferment_example_traits :: transport :: transport_request :: Uri { let ffi_ref = & * ffi ; ferment_example_traits :: transport :: transport_request :: Uri { scheme : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . scheme) } } unsafe fn ffi_to_const (obj : ferment_example_traits :: transport :: transport_request :: Uri) -> * const ferment_example_traits_transport_transport_request_Uri { ferment_interfaces :: boxed (ferment_example_traits_transport_transport_request_Uri { scheme : ferment_interfaces :: FFIConversion :: ffi_to (obj . scheme) }) } unsafe fn destroy (ffi : * mut ferment_example_traits_transport_transport_request_Uri) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_traits_transport_transport_request_Uri { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . scheme) ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_Uri_ctor < > (scheme : * mut String) -> * mut ferment_example_traits_transport_transport_request_Uri { ferment_interfaces :: boxed (ferment_example_traits_transport_transport_request_Uri { scheme }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_Uri_destroy < > (ffi : * mut ferment_example_traits_transport_transport_request_Uri) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_Uri_get_scheme < > (obj : * const ferment_example_traits_transport_transport_request_Uri) -> * mut std :: os :: raw :: c_char { (* obj) . scheme } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_Uri_set_scheme < > (obj : * mut ferment_example_traits_transport_transport_request_Uri , value : * mut std :: os :: raw :: c_char) { (* obj) . scheme = value ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ferment_example_traits :: transport :: transport_request :: Status`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum ferment_example_traits_transport_transport_request_Status { Error , Success } impl ferment_interfaces :: FFIConversion < ferment_example_traits :: transport :: transport_request :: Status > for ferment_example_traits_transport_transport_request_Status { unsafe fn ffi_from_const (ffi : * const ferment_example_traits_transport_transport_request_Status) -> ferment_example_traits :: transport :: transport_request :: Status { let ffi_ref = & * ffi ; match ffi_ref { ferment_example_traits_transport_transport_request_Status :: Error => ferment_example_traits :: transport :: transport_request :: Status :: Error , ferment_example_traits_transport_transport_request_Status :: Success => ferment_example_traits :: transport :: transport_request :: Status :: Success } } unsafe fn ffi_to_const (obj : ferment_example_traits :: transport :: transport_request :: Status) -> * const ferment_example_traits_transport_transport_request_Status { ferment_interfaces :: boxed (match obj { ferment_example_traits :: transport :: transport_request :: Status :: Error => ferment_example_traits_transport_transport_request_Status :: Error , ferment_example_traits :: transport :: transport_request :: Status :: Success => ferment_example_traits_transport_transport_request_Status :: Success , _ => unreachable ! ("Enum Variant unreachable") }) } unsafe fn destroy (ffi : * mut ferment_example_traits_transport_transport_request_Status) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_traits_transport_transport_request_Status { fn drop (& mut self) { unsafe { match self { ferment_example_traits_transport_transport_request_Status :: Error => { } , ferment_example_traits_transport_transport_request_Status :: Success => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_Status_Error_ctor () -> * mut ferment_example_traits_transport_transport_request_Status { ferment_interfaces :: boxed (ferment_example_traits_transport_transport_request_Status :: Error { }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_Status_Success_ctor () -> * mut ferment_example_traits_transport_transport_request_Status { ferment_interfaces :: boxed (ferment_example_traits_transport_transport_request_Status :: Success { }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_Status_destroy < > (ffi : * mut ferment_example_traits_transport_transport_request_Status) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`ferment_example_traits :: transport :: transport_request :: GetDocumentsRequest`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_traits_transport_transport_request_GetDocumentsRequest { pub version : u32 } impl ferment_interfaces :: FFIConversion < ferment_example_traits :: transport :: transport_request :: GetDocumentsRequest > for ferment_example_traits_transport_transport_request_GetDocumentsRequest { unsafe fn ffi_from_const (ffi : * const ferment_example_traits_transport_transport_request_GetDocumentsRequest) -> ferment_example_traits :: transport :: transport_request :: GetDocumentsRequest { let ffi_ref = & * ffi ; ferment_example_traits :: transport :: transport_request :: GetDocumentsRequest { version : ffi_ref . version } } unsafe fn ffi_to_const (obj : ferment_example_traits :: transport :: transport_request :: GetDocumentsRequest) -> * const ferment_example_traits_transport_transport_request_GetDocumentsRequest { ferment_interfaces :: boxed (ferment_example_traits_transport_transport_request_GetDocumentsRequest { version : obj . version }) } unsafe fn destroy (ffi : * mut ferment_example_traits_transport_transport_request_GetDocumentsRequest) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_traits_transport_transport_request_GetDocumentsRequest { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_GetDocumentsRequest_ctor < > (version : u32) -> * mut ferment_example_traits_transport_transport_request_GetDocumentsRequest { ferment_interfaces :: boxed (ferment_example_traits_transport_transport_request_GetDocumentsRequest { version }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_GetDocumentsRequest_destroy < > (ffi : * mut ferment_example_traits_transport_transport_request_GetDocumentsRequest) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_GetDocumentsRequest_get_version < > (obj : * const ferment_example_traits_transport_transport_request_GetDocumentsRequest) -> u32 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_GetDocumentsRequest_set_version < > (obj : * mut ferment_example_traits_transport_transport_request_GetDocumentsRequest , value : u32) { (* obj) . version = value ; } # [doc = "FFI-representation of the [`ferment_example_traits :: transport :: transport_request :: Identifier`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_traits_transport_transport_request_Identifier (u32) ; impl ferment_interfaces :: FFIConversion < ferment_example_traits :: transport :: transport_request :: Identifier > for ferment_example_traits_transport_transport_request_Identifier { unsafe fn ffi_from_const (ffi : * const ferment_example_traits_transport_transport_request_Identifier) -> ferment_example_traits :: transport :: transport_request :: Identifier { let ffi_ref = & * ffi ; ferment_example_traits :: transport :: transport_request :: Identifier (ffi_ref . 0) } unsafe fn ffi_to_const (obj : ferment_example_traits :: transport :: transport_request :: Identifier) -> * const ferment_example_traits_transport_transport_request_Identifier { ferment_interfaces :: boxed (ferment_example_traits_transport_transport_request_Identifier (obj . 0)) } unsafe fn destroy (ffi : * mut ferment_example_traits_transport_transport_request_Identifier) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_traits_transport_transport_request_Identifier { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_Identifier_ctor < > (o_0 : u32) -> * mut ferment_example_traits_transport_transport_request_Identifier { ferment_interfaces :: boxed (ferment_example_traits_transport_transport_request_Identifier (o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_Identifier_destroy < > (ffi : * mut ferment_example_traits_transport_transport_request_Identifier) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_Identifier_get_0 < > (obj : * const ferment_example_traits_transport_transport_request_Identifier) -> u32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_Identifier_set_0 < > (obj : * mut ferment_example_traits_transport_transport_request_Identifier , value : u32) { (* obj) . 0 = value ; } # [repr (C)] # [derive (Clone)] pub struct ferment_example_traits_transport_transport_request_CanRetry_VTable { # [doc = "FFI-representation of the [`ferment_example_traits :: transport :: transport_request :: CanRetry :: can_retry`]"] pub can_retry : unsafe extern "C" fn (self_ : * mut ferment_example_traits_transport_transport_request_CanRetry) -> bool } # [repr (C)] # [derive (Clone)] pub struct ferment_example_traits_transport_transport_request_CanRetry { object : * const () , vtable : * const ferment_example_traits_transport_transport_request_CanRetry_VTable } # [doc = "FFI-representation of the [`ferment_example_traits :: transport :: transport_request :: GetDocumentsResponse`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_traits_transport_transport_request_GetDocumentsResponse { pub version : u32 } impl ferment_interfaces :: FFIConversion < ferment_example_traits :: transport :: transport_request :: GetDocumentsResponse > for ferment_example_traits_transport_transport_request_GetDocumentsResponse { unsafe fn ffi_from_const (ffi : * const ferment_example_traits_transport_transport_request_GetDocumentsResponse) -> ferment_example_traits :: transport :: transport_request :: GetDocumentsResponse { let ffi_ref = & * ffi ; ferment_example_traits :: transport :: transport_request :: GetDocumentsResponse { version : ffi_ref . version } } unsafe fn ffi_to_const (obj : ferment_example_traits :: transport :: transport_request :: GetDocumentsResponse) -> * const ferment_example_traits_transport_transport_request_GetDocumentsResponse { ferment_interfaces :: boxed (ferment_example_traits_transport_transport_request_GetDocumentsResponse { version : obj . version }) } unsafe fn destroy (ffi : * mut ferment_example_traits_transport_transport_request_GetDocumentsResponse) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_traits_transport_transport_request_GetDocumentsResponse { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_GetDocumentsResponse_ctor < > (version : u32) -> * mut ferment_example_traits_transport_transport_request_GetDocumentsResponse { ferment_interfaces :: boxed (ferment_example_traits_transport_transport_request_GetDocumentsResponse { version }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_GetDocumentsResponse_destroy < > (ffi : * mut ferment_example_traits_transport_transport_request_GetDocumentsResponse) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_GetDocumentsResponse_get_version < > (obj : * const ferment_example_traits_transport_transport_request_GetDocumentsResponse) -> u32 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_GetDocumentsResponse_set_version < > (obj : * mut ferment_example_traits_transport_transport_request_GetDocumentsResponse , value : u32) { (* obj) . version = value ; } # [doc = "FFI-representation of the [`ferment_example_traits :: transport :: transport_request :: CoreGrpcClient`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_traits_transport_transport_request_CoreGrpcClient { pub uri : * mut ferment_example_traits :: transport :: transport_request :: Uri } impl ferment_interfaces :: FFIConversion < ferment_example_traits :: transport :: transport_request :: CoreGrpcClient > for ferment_example_traits_transport_transport_request_CoreGrpcClient { unsafe fn ffi_from_const (ffi : * const ferment_example_traits_transport_transport_request_CoreGrpcClient) -> ferment_example_traits :: transport :: transport_request :: CoreGrpcClient { let ffi_ref = & * ffi ; ferment_example_traits :: transport :: transport_request :: CoreGrpcClient { uri : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . uri) } } unsafe fn ffi_to_const (obj : ferment_example_traits :: transport :: transport_request :: CoreGrpcClient) -> * const ferment_example_traits_transport_transport_request_CoreGrpcClient { ferment_interfaces :: boxed (ferment_example_traits_transport_transport_request_CoreGrpcClient { uri : ferment_interfaces :: FFIConversion :: ffi_to (obj . uri) }) } unsafe fn destroy (ffi : * mut ferment_example_traits_transport_transport_request_CoreGrpcClient) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_traits_transport_transport_request_CoreGrpcClient { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . uri) ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_CoreGrpcClient_ctor < > (uri : * mut ferment_example_traits :: transport :: transport_request :: Uri) -> * mut ferment_example_traits_transport_transport_request_CoreGrpcClient { ferment_interfaces :: boxed (ferment_example_traits_transport_transport_request_CoreGrpcClient { uri }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_CoreGrpcClient_destroy < > (ffi : * mut ferment_example_traits_transport_transport_request_CoreGrpcClient) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_CoreGrpcClient_get_uri < > (obj : * const ferment_example_traits_transport_transport_request_CoreGrpcClient) -> * mut crate :: fermented :: types :: ferment_example_traits :: transport :: transport_request :: ferment_example_traits_transport_transport_request_Uri { (* obj) . uri } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_transport_transport_request_CoreGrpcClient_set_uri < > (obj : * mut ferment_example_traits_transport_transport_request_CoreGrpcClient , value : * mut crate :: fermented :: types :: ferment_example_traits :: transport :: transport_request :: ferment_example_traits_transport_transport_request_Uri) { (* obj) . uri = value ; } } } pub mod from_proof { use crate as ferment_example_traits_nested ; pub mod from_proof { use crate as ferment_example_traits_nested ; # [doc = "FFI-representation of the [`ferment_example_traits :: from_proof :: from_proof :: Identity :: maybe_from_proof`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_from_proof_from_proof_Identity_maybe_from_proof (request : * mut crate :: fermented :: generics :: ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Request , response : * mut crate :: fermented :: generics :: ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Response , platform_version : u32) -> * mut Result < Option < ferment_example_traits :: from_proof :: from_proof :: Identity > , ferment_example_traits :: nested :: ProtocolError > { let obj = ferment_example_traits :: from_proof :: from_proof :: Identity :: maybe_from_proof (ferment_interfaces :: FFIConversion :: ffi_from (request) , ferment_interfaces :: FFIConversion :: ffi_from (response) , platform_version) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`ferment_example_traits :: from_proof :: from_proof :: Identity :: from_proof`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_from_proof_from_proof_Identity_from_proof (request : * mut crate :: fermented :: generics :: ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Request , response : * mut crate :: fermented :: generics :: ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Response , platform_version : u32) -> * mut Result < ferment_example_traits :: from_proof :: from_proof :: Identity , ferment_example_traits :: nested :: ProtocolError > { let obj = ferment_example_traits :: from_proof :: from_proof :: Identity :: from_proof (request , response , platform_version) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`ferment_example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashRequest`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest { } impl ferment_interfaces :: FFIConversion < ferment_example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashRequest > for ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest { unsafe fn ffi_from_const (ffi : * const ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest) -> ferment_example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashRequest { let ffi_ref = & * ffi ; ferment_example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashRequest { } } unsafe fn ffi_to_const (obj : ferment_example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashRequest) -> * const ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest { ferment_interfaces :: boxed (ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest { }) } unsafe fn destroy (ffi : * mut ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest_ctor < > () -> * mut ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest { ferment_interfaces :: boxed (ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest { }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest_destroy < > (ffi : * mut ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`ferment_example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashResponse`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse { } impl ferment_interfaces :: FFIConversion < ferment_example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashResponse > for ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse { unsafe fn ffi_from_const (ffi : * const ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse) -> ferment_example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashResponse { let ffi_ref = & * ffi ; ferment_example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashResponse { } } unsafe fn ffi_to_const (obj : ferment_example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashResponse) -> * const ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse { ferment_interfaces :: boxed (ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse { }) } unsafe fn destroy (ffi : * mut ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse_ctor < > () -> * mut ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse { ferment_interfaces :: boxed (ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse { }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse_destroy < > (ffi : * mut ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`ferment_example_traits :: from_proof :: from_proof :: Identity`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_traits_from_proof_from_proof_Identity { pub platform_version : u32 } impl ferment_interfaces :: FFIConversion < ferment_example_traits :: from_proof :: from_proof :: Identity > for ferment_example_traits_from_proof_from_proof_Identity { unsafe fn ffi_from_const (ffi : * const ferment_example_traits_from_proof_from_proof_Identity) -> ferment_example_traits :: from_proof :: from_proof :: Identity { let ffi_ref = & * ffi ; ferment_example_traits :: from_proof :: from_proof :: Identity { platform_version : ffi_ref . platform_version } } unsafe fn ffi_to_const (obj : ferment_example_traits :: from_proof :: from_proof :: Identity) -> * const ferment_example_traits_from_proof_from_proof_Identity { ferment_interfaces :: boxed (ferment_example_traits_from_proof_from_proof_Identity { platform_version : obj . platform_version }) } unsafe fn destroy (ffi : * mut ferment_example_traits_from_proof_from_proof_Identity) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_traits_from_proof_from_proof_Identity { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_from_proof_from_proof_Identity_ctor < > (platform_version : u32) -> * mut ferment_example_traits_from_proof_from_proof_Identity { ferment_interfaces :: boxed (ferment_example_traits_from_proof_from_proof_Identity { platform_version }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_from_proof_from_proof_Identity_destroy < > (ffi : * mut ferment_example_traits_from_proof_from_proof_Identity) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_from_proof_from_proof_Identity_get_platform_version < > (obj : * const ferment_example_traits_from_proof_from_proof_Identity) -> u32 { (* obj) . platform_version } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_from_proof_from_proof_Identity_set_platform_version < > (obj : * mut ferment_example_traits_from_proof_from_proof_Identity , value : u32) { (* obj) . platform_version = value ; } # [doc = "FFI-representation of the [`ferment_example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashRequestInit`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit { } impl ferment_interfaces :: FFIConversion < ferment_example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashRequestInit > for ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit { unsafe fn ffi_from_const (ffi : * const ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit) -> ferment_example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashRequestInit { let ffi_ref = & * ffi ; ferment_example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashRequestInit { } } unsafe fn ffi_to_const (obj : ferment_example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashRequestInit) -> * const ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit { ferment_interfaces :: boxed (ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit { }) } unsafe fn destroy (ffi : * mut ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit_ctor < > () -> * mut ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit { ferment_interfaces :: boxed (ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit { }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit_destroy < > (ffi : * mut ferment_example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit) { ferment_interfaces :: unbox_any (ffi) ; } } } pub mod nested { use crate as ferment_example_traits_nested ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ferment_example_traits :: nested :: ProtocolError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum ferment_example_traits_nested_ProtocolError { IdentifierError (* mut std :: os :: raw :: c_char) , Unknown (u32) } impl ferment_interfaces :: FFIConversion < ferment_example_traits :: nested :: ProtocolError > for ferment_example_traits_nested_ProtocolError { unsafe fn ffi_from_const (ffi : * const ferment_example_traits_nested_ProtocolError) -> ferment_example_traits :: nested :: ProtocolError { let ffi_ref = & * ffi ; match ffi_ref { ferment_example_traits_nested_ProtocolError :: IdentifierError (o_0) => ferment_example_traits :: nested :: ProtocolError :: IdentifierError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , ferment_example_traits_nested_ProtocolError :: Unknown (o_0) => ferment_example_traits :: nested :: ProtocolError :: Unknown (* o_0) } } unsafe fn ffi_to_const (obj : ferment_example_traits :: nested :: ProtocolError) -> * const ferment_example_traits_nested_ProtocolError { ferment_interfaces :: boxed (match obj { ferment_example_traits :: nested :: ProtocolError :: IdentifierError (o_0) => ferment_example_traits_nested_ProtocolError :: IdentifierError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , ferment_example_traits :: nested :: ProtocolError :: Unknown (o_0) => ferment_example_traits_nested_ProtocolError :: Unknown (o_0) , _ => unreachable ! ("Enum Variant unreachable") }) } unsafe fn destroy (ffi : * mut ferment_example_traits_nested_ProtocolError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_traits_nested_ProtocolError { fn drop (& mut self) { unsafe { match self { ferment_example_traits_nested_ProtocolError :: IdentifierError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) ; } , ferment_example_traits_nested_ProtocolError :: Unknown (o_0) => { ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_ProtocolError_IdentifierError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut ferment_example_traits_nested_ProtocolError { ferment_interfaces :: boxed (ferment_example_traits_nested_ProtocolError :: IdentifierError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_ProtocolError_Unknown_ctor (o_o_0 : u32) -> * mut ferment_example_traits_nested_ProtocolError { ferment_interfaces :: boxed (ferment_example_traits_nested_ProtocolError :: Unknown (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_ProtocolError_destroy < > (ffi : * mut ferment_example_traits_nested_ProtocolError) { ferment_interfaces :: unbox_any (ffi) ; } } } pub mod ferment_example_traits_nested { use crate as ferment_example_traits_nested ; pub mod some_package { use crate as ferment_example_traits_nested ; # [repr (C)] # [derive (Clone)] pub struct ferment_example_traits_nested_some_package_SomeTrait_VTable { } # [repr (C)] # [derive (Clone)] pub struct ferment_example_traits_nested_some_package_SomeTrait { object : * const () , vtable : * const ferment_example_traits_nested_some_package_SomeTrait_VTable } } } } # [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unreachable_patterns , unused_braces , unused_imports , unused_parens , unused_qualifications , unused_unsafe , unused_variables)] pub mod generics { use crate as ferment_example_traits_nested ; # [repr (C)] # [derive (Clone)] pub struct Result_ok_Option_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError { pub ok : * mut crate :: fermented :: types :: ferment_example_traits :: from_proof :: from_proof :: ferment_example_traits_from_proof_from_proof_Identity , pub error : * mut crate :: fermented :: types :: ferment_example_traits :: nested :: ferment_example_traits_nested_ProtocolError } impl ferment_interfaces :: FFIConversion < Result < Option < ferment_example_traits :: from_proof :: from_proof :: Identity > , ferment_example_traits :: nested :: ProtocolError > > for Result_ok_Option_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError { unsafe fn ffi_from_const (ffi : * const Result_ok_Option_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError) -> Result < Option < ferment_example_traits :: from_proof :: from_proof :: Identity > , ferment_example_traits :: nested :: ProtocolError > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_result (ffi_ref . ok , ffi_ref . error , | o | ferment_interfaces :: FFIConversion :: ffi_from_opt (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : Result < Option < ferment_example_traits :: from_proof :: from_proof :: Identity > , ferment_example_traits :: nested :: ProtocolError >) -> * const Result_ok_Option_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError { let (ok , error) = ferment_interfaces :: to_result (obj , | o | ferment_interfaces :: FFIConversion :: ffi_to_opt (o) , | o | ferment_interfaces :: FFIConversion :: ffi_to (o)) ; ferment_interfaces :: boxed (Self { ok , error }) } unsafe fn destroy (ffi : * mut Result_ok_Option_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Result_ok_Option_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_opt (self . ok) ; ferment_interfaces :: unbox_any_opt (self . error) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_Option_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError_ctor (ok : * mut crate :: fermented :: types :: ferment_example_traits :: from_proof :: from_proof :: ferment_example_traits_from_proof_from_proof_Identity , error : * mut crate :: fermented :: types :: ferment_example_traits :: nested :: ferment_example_traits_nested_ProtocolError) -> * mut Result_ok_Option_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError { ferment_interfaces :: boxed (Result_ok_Option_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_Option_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError_destroy (ffi : * mut Result_ok_Option_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError { pub ok : * mut crate :: fermented :: types :: ferment_example_traits :: from_proof :: from_proof :: ferment_example_traits_from_proof_from_proof_Identity , pub error : * mut crate :: fermented :: types :: ferment_example_traits :: nested :: ferment_example_traits_nested_ProtocolError } impl ferment_interfaces :: FFIConversion < Result < ferment_example_traits :: from_proof :: from_proof :: Identity , ferment_example_traits :: nested :: ProtocolError > > for Result_ok_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError { unsafe fn ffi_from_const (ffi : * const Result_ok_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError) -> Result < ferment_example_traits :: from_proof :: from_proof :: Identity , ferment_example_traits :: nested :: ProtocolError > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_result (ffi_ref . ok , ffi_ref . error , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : Result < ferment_example_traits :: from_proof :: from_proof :: Identity , ferment_example_traits :: nested :: ProtocolError >) -> * const Result_ok_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError { let (ok , error) = ferment_interfaces :: to_result (obj , | o | ferment_interfaces :: FFIConversion :: ffi_to (o) , | o | ferment_interfaces :: FFIConversion :: ffi_to (o)) ; ferment_interfaces :: boxed (Self { ok , error }) } unsafe fn destroy (ffi : * mut Result_ok_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Result_ok_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_opt (self . ok) ; ferment_interfaces :: unbox_any_opt (self . error) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError_ctor (ok : * mut crate :: fermented :: types :: ferment_example_traits :: from_proof :: from_proof :: ferment_example_traits_from_proof_from_proof_Identity , error : * mut crate :: fermented :: types :: ferment_example_traits :: nested :: ferment_example_traits_nested_ProtocolError) -> * mut Result_ok_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError { ferment_interfaces :: boxed (Result_ok_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError_destroy (ffi : * mut Result_ok_ferment_example_traits_from_proof_from_proof_Identity_err_ferment_example_traits_nested_ProtocolError) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Request { pub o_0 : * mut I } impl ferment_interfaces :: FFIConversion < I > for ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Request { unsafe fn ffi_from_const (ffi : * const ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Request) -> I { let ffi_ref = & * ffi ; (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . o_0)) } unsafe fn ffi_to_const (obj : I) -> * const ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Request { ferment_interfaces :: boxed (Self { ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . o_0) }) } unsafe fn destroy (ffi : * mut ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Request) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Request { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any (self . o_0) ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Request_ctor (o_0 : * mut I) -> * mut ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Request { ferment_interfaces :: boxed (ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Request { o_0 }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Request_destroy (ffi : * mut ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Request) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Response { pub o_0 : * mut O } impl ferment_interfaces :: FFIConversion < O > for ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Response { unsafe fn ffi_from_const (ffi : * const ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Response) -> O { let ffi_ref = & * ffi ; (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . o_0)) } unsafe fn ffi_to_const (obj : O) -> * const ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Response { ferment_interfaces :: boxed (Self { ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . o_0) }) } unsafe fn destroy (ffi : * mut ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Response) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Response { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any (self . o_0) ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Response_ctor (o_0 : * mut O) -> * mut ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Response { ferment_interfaces :: boxed (ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Response { o_0 }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Response_destroy (ffi : * mut ferment_example_traits_from_proof_from_proof_Into_ferment_example_traits_from_proof_from_proof_Identity_Response) { ferment_interfaces :: unbox_any (ffi) ; } }