# [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unreachable_patterns , unused_braces , unused_imports , unused_parens , unused_qualifications , unused_unsafe , unused_variables)] pub mod types { pub mod platform_value { use crate as ferment_example_platform ; pub mod value_serialization { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } } pub mod value_map { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_value :: value_map :: ValueMap`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_value_map_ValueMap (* mut crate :: fermented :: generics :: Vec_Tuple_platform_value_Value_platform_value_Value) ; impl ferment_interfaces :: FFIConversionFrom < platform_value :: value_map :: ValueMap > for platform_value_value_map_ValueMap { unsafe fn ffi_from_const (ffi : * const platform_value_value_map_ValueMap) -> platform_value :: value_map :: ValueMap { let ffi_ref = & * ffi ; ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . 0) } } impl ferment_interfaces :: FFIConversionTo < platform_value :: value_map :: ValueMap > for platform_value_value_map_ValueMap { unsafe fn ffi_to_const (obj : platform_value :: value_map :: ValueMap) -> * const platform_value_value_map_ValueMap { ferment_interfaces :: boxed (platform_value_value_map_ValueMap (ferment_interfaces :: FFIConversionTo :: ffi_to (obj))) } } impl ferment_interfaces :: FFIConversionDestroy < platform_value :: value_map :: ValueMap > for platform_value_value_map_ValueMap { unsafe fn destroy (ffi : * mut platform_value_value_map_ValueMap) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_value_value_map_ValueMap { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_value_map_ValueMap_ctor < > (o_0 : * mut crate :: fermented :: generics :: Vec_Tuple_platform_value_Value_platform_value_Value) -> * mut platform_value_value_map_ValueMap { ferment_interfaces :: boxed (platform_value_value_map_ValueMap (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_value_map_ValueMap_destroy < > (ffi : * mut platform_value_value_map_ValueMap) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_value_value_map_ValueMap_get_0 < > (obj : * const platform_value_value_map_ValueMap) -> * mut crate :: fermented :: generics :: Vec_Tuple_platform_value_Value_platform_value_Value { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_value_value_map_ValueMap_set_0 < > (obj : * mut platform_value_value_map_ValueMap , value : * mut crate :: fermented :: generics :: Vec_Tuple_platform_value_Value_platform_value_Value) { (* obj) . 0 = value ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`platform_value :: Value`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum platform_value_Value { U128 (u128) , I128 (i128) , U64 (u64) , I64 (i64) , U32 (u32) , I32 (i32) , U16 (u16) , I16 (i16) , U8 (u8) , I8 (i8) , Bytes (* mut crate :: fermented :: generics :: Vec_u8) , Bytes20 (* mut crate :: fermented :: generics :: Arr_u8_20) , Bytes32 (* mut crate :: fermented :: generics :: Arr_u8_32) , Bytes36 (* mut crate :: fermented :: generics :: Arr_u8_36) , EnumU8 (* mut crate :: fermented :: generics :: Vec_u8) , EnumString (* mut crate :: fermented :: generics :: Vec_String) , Identifier (* mut crate :: fermented :: types :: platform_value :: platform_value_Hash256) , Float (f64) , Text (* mut std :: os :: raw :: c_char) , Bool (bool) , Null , Array (* mut crate :: fermented :: generics :: Vec_platform_value_Value) , Map (* mut crate :: fermented :: types :: platform_value :: value_map :: platform_value_value_map_ValueMap) } impl ferment_interfaces :: FFIConversionFrom < platform_value :: Value > for platform_value_Value { unsafe fn ffi_from_const (ffi : * const platform_value_Value) -> platform_value :: Value { let ffi_ref = & * ffi ; match ffi_ref { platform_value_Value :: U128 (o_0) => platform_value :: Value :: U128 (* o_0) , platform_value_Value :: I128 (o_0) => platform_value :: Value :: I128 (* o_0) , platform_value_Value :: U64 (o_0) => platform_value :: Value :: U64 (* o_0) , platform_value_Value :: I64 (o_0) => platform_value :: Value :: I64 (* o_0) , platform_value_Value :: U32 (o_0) => platform_value :: Value :: U32 (* o_0) , platform_value_Value :: I32 (o_0) => platform_value :: Value :: I32 (* o_0) , platform_value_Value :: U16 (o_0) => platform_value :: Value :: U16 (* o_0) , platform_value_Value :: I16 (o_0) => platform_value :: Value :: I16 (* o_0) , platform_value_Value :: U8 (o_0) => platform_value :: Value :: U8 (* o_0) , platform_value_Value :: I8 (o_0) => platform_value :: Value :: I8 (* o_0) , platform_value_Value :: Bytes (o_0) => platform_value :: Value :: Bytes (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , platform_value_Value :: Bytes20 (o_0) => platform_value :: Value :: Bytes20 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , platform_value_Value :: Bytes32 (o_0) => platform_value :: Value :: Bytes32 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , platform_value_Value :: Bytes36 (o_0) => platform_value :: Value :: Bytes36 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , platform_value_Value :: EnumU8 (o_0) => platform_value :: Value :: EnumU8 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , platform_value_Value :: EnumString (o_0) => platform_value :: Value :: EnumString (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , platform_value_Value :: Identifier (o_0) => platform_value :: Value :: Identifier (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , platform_value_Value :: Float (o_0) => platform_value :: Value :: Float (* o_0) , platform_value_Value :: Text (o_0) => platform_value :: Value :: Text (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , platform_value_Value :: Bool (o_0) => platform_value :: Value :: Bool (* o_0) , platform_value_Value :: Null => platform_value :: Value :: Null , platform_value_Value :: Array (o_0) => platform_value :: Value :: Array (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , platform_value_Value :: Map (o_0) => platform_value :: Value :: Map (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < platform_value :: Value > for platform_value_Value { unsafe fn ffi_to_const (obj : platform_value :: Value) -> * const platform_value_Value { ferment_interfaces :: boxed (match obj { platform_value :: Value :: U128 (o_0) => platform_value_Value :: U128 (o_0) , platform_value :: Value :: I128 (o_0) => platform_value_Value :: I128 (o_0) , platform_value :: Value :: U64 (o_0) => platform_value_Value :: U64 (o_0) , platform_value :: Value :: I64 (o_0) => platform_value_Value :: I64 (o_0) , platform_value :: Value :: U32 (o_0) => platform_value_Value :: U32 (o_0) , platform_value :: Value :: I32 (o_0) => platform_value_Value :: I32 (o_0) , platform_value :: Value :: U16 (o_0) => platform_value_Value :: U16 (o_0) , platform_value :: Value :: I16 (o_0) => platform_value_Value :: I16 (o_0) , platform_value :: Value :: U8 (o_0) => platform_value_Value :: U8 (o_0) , platform_value :: Value :: I8 (o_0) => platform_value_Value :: I8 (o_0) , platform_value :: Value :: Bytes (o_0) => platform_value_Value :: Bytes (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , platform_value :: Value :: Bytes20 (o_0) => platform_value_Value :: Bytes20 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , platform_value :: Value :: Bytes32 (o_0) => platform_value_Value :: Bytes32 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , platform_value :: Value :: Bytes36 (o_0) => platform_value_Value :: Bytes36 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , platform_value :: Value :: EnumU8 (o_0) => platform_value_Value :: EnumU8 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , platform_value :: Value :: EnumString (o_0) => platform_value_Value :: EnumString (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , platform_value :: Value :: Identifier (o_0) => platform_value_Value :: Identifier (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , platform_value :: Value :: Float (o_0) => platform_value_Value :: Float (o_0) , platform_value :: Value :: Text (o_0) => platform_value_Value :: Text (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , platform_value :: Value :: Bool (o_0) => platform_value_Value :: Bool (o_0) , platform_value :: Value :: Null => platform_value_Value :: Null , platform_value :: Value :: Array (o_0) => platform_value_Value :: Array (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , platform_value :: Value :: Map (o_0) => platform_value_Value :: Map (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_value :: Value > for platform_value_Value { unsafe fn destroy (ffi : * mut platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for platform_value_Value { fn drop (& mut self) { unsafe { match self { platform_value_Value :: U128 (o_0) => { ; } , platform_value_Value :: I128 (o_0) => { ; } , platform_value_Value :: U64 (o_0) => { ; } , platform_value_Value :: I64 (o_0) => { ; } , platform_value_Value :: U32 (o_0) => { ; } , platform_value_Value :: I32 (o_0) => { ; } , platform_value_Value :: U16 (o_0) => { ; } , platform_value_Value :: I16 (o_0) => { ; } , platform_value_Value :: U8 (o_0) => { ; } , platform_value_Value :: I8 (o_0) => { ; } , platform_value_Value :: Bytes (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , platform_value_Value :: Bytes20 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , platform_value_Value :: Bytes32 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , platform_value_Value :: Bytes36 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , platform_value_Value :: EnumU8 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , platform_value_Value :: EnumString (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , platform_value_Value :: Identifier (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , platform_value_Value :: Float (o_0) => { ; } , platform_value_Value :: Text (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , platform_value_Value :: Bool (o_0) => { ; } , platform_value_Value :: Null => { } , platform_value_Value :: Array (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , platform_value_Value :: Map (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_U128_ctor (o_o_0 : u128) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: U128 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_I128_ctor (o_o_0 : i128) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: I128 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_U64_ctor (o_o_0 : u64) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: U64 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_I64_ctor (o_o_0 : i64) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: I64 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_U32_ctor (o_o_0 : u32) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: U32 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_I32_ctor (o_o_0 : i32) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: I32 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_U16_ctor (o_o_0 : u16) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: U16 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_I16_ctor (o_o_0 : i16) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: I16 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_U8_ctor (o_o_0 : u8) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: U8 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_I8_ctor (o_o_0 : i8) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: I8 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Bytes_ctor (o_o_0 : * mut crate :: fermented :: generics :: Vec_u8) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: Bytes (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Bytes20_ctor (o_o_0 : * mut crate :: fermented :: generics :: Arr_u8_20) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: Bytes20 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Bytes32_ctor (o_o_0 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: Bytes32 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Bytes36_ctor (o_o_0 : * mut crate :: fermented :: generics :: Arr_u8_36) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: Bytes36 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_EnumU8_ctor (o_o_0 : * mut crate :: fermented :: generics :: Vec_u8) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: EnumU8 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_EnumString_ctor (o_o_0 : * mut crate :: fermented :: generics :: Vec_String) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: EnumString (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Identifier_ctor (o_o_0 : * mut crate :: fermented :: types :: platform_value :: platform_value_Hash256) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: Identifier (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Float_ctor (o_o_0 : f64) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: Float (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Text_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: Text (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Bool_ctor (o_o_0 : bool) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: Bool (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Null_ctor () -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: Null { }) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Array_ctor (o_o_0 : * mut crate :: fermented :: generics :: Vec_platform_value_Value) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: Array (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Map_ctor (o_o_0 : * mut crate :: fermented :: types :: platform_value :: value_map :: platform_value_value_map_ValueMap) -> * mut platform_value_Value { ferment_interfaces :: boxed (platform_value_Value :: Map (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_destroy < > (ffi : * mut platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; } pub mod macros { use crate as ferment_example_platform ; # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } } pub mod types { use crate as ferment_example_platform ; pub mod bytes_32 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_value :: types :: bytes_32 :: Bytes32`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_types_bytes_32_Bytes32 (* mut crate :: fermented :: generics :: Arr_u8_32) ; impl ferment_interfaces :: FFIConversionFrom < platform_value :: types :: bytes_32 :: Bytes32 > for platform_value_types_bytes_32_Bytes32 { unsafe fn ffi_from_const (ffi : * const platform_value_types_bytes_32_Bytes32) -> platform_value :: types :: bytes_32 :: Bytes32 { let ffi_ref = & * ffi ; platform_value :: types :: bytes_32 :: Bytes32 (ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . 0)) } } impl ferment_interfaces :: FFIConversionTo < platform_value :: types :: bytes_32 :: Bytes32 > for platform_value_types_bytes_32_Bytes32 { unsafe fn ffi_to_const (obj : platform_value :: types :: bytes_32 :: Bytes32) -> * const platform_value_types_bytes_32_Bytes32 { ferment_interfaces :: boxed (platform_value_types_bytes_32_Bytes32 (ferment_interfaces :: FFIConversionTo :: ffi_to (obj . 0))) } } impl ferment_interfaces :: FFIConversionDestroy < platform_value :: types :: bytes_32 :: Bytes32 > for platform_value_types_bytes_32_Bytes32 { unsafe fn destroy (ffi : * mut platform_value_types_bytes_32_Bytes32) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_value_types_bytes_32_Bytes32 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_types_bytes_32_Bytes32_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut platform_value_types_bytes_32_Bytes32 { ferment_interfaces :: boxed (platform_value_types_bytes_32_Bytes32 (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_types_bytes_32_Bytes32_destroy < > (ffi : * mut platform_value_types_bytes_32_Bytes32) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_value_types_bytes_32_Bytes32_get_0 < > (obj : * const platform_value_types_bytes_32_Bytes32) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_value_types_bytes_32_Bytes32_set_0 < > (obj : * mut platform_value_types_bytes_32_Bytes32 , value : * mut crate :: fermented :: generics :: Arr_u8_32) { (* obj) . 0 = value ; } } pub mod binary_data { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`platform_value :: types :: binary_data :: BinaryData`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_types_binary_data_BinaryData (* mut crate :: fermented :: generics :: Vec_u8) ; impl ferment_interfaces :: FFIConversionFrom < platform_value :: types :: binary_data :: BinaryData > for platform_value_types_binary_data_BinaryData { unsafe fn ffi_from_const (ffi : * const platform_value_types_binary_data_BinaryData) -> platform_value :: types :: binary_data :: BinaryData { let ffi_ref = & * ffi ; platform_value :: types :: binary_data :: BinaryData (ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . 0)) } } impl ferment_interfaces :: FFIConversionTo < platform_value :: types :: binary_data :: BinaryData > for platform_value_types_binary_data_BinaryData { unsafe fn ffi_to_const (obj : platform_value :: types :: binary_data :: BinaryData) -> * const platform_value_types_binary_data_BinaryData { ferment_interfaces :: boxed (platform_value_types_binary_data_BinaryData (ferment_interfaces :: FFIConversionTo :: ffi_to (obj . 0))) } } impl ferment_interfaces :: FFIConversionDestroy < platform_value :: types :: binary_data :: BinaryData > for platform_value_types_binary_data_BinaryData { unsafe fn destroy (ffi : * mut platform_value_types_binary_data_BinaryData) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_value_types_binary_data_BinaryData { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_types_binary_data_BinaryData_ctor < > (o_0 : * mut crate :: fermented :: generics :: Vec_u8) -> * mut platform_value_types_binary_data_BinaryData { ferment_interfaces :: boxed (platform_value_types_binary_data_BinaryData (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_types_binary_data_BinaryData_destroy < > (ffi : * mut platform_value_types_binary_data_BinaryData) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_value_types_binary_data_BinaryData_get_0 < > (obj : * const platform_value_types_binary_data_BinaryData) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_value_types_binary_data_BinaryData_set_0 < > (obj : * mut platform_value_types_binary_data_BinaryData , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . 0 = value ; } } pub mod bytes_20 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_value :: types :: bytes_20 :: Bytes20`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_types_bytes_20_Bytes20 (* mut crate :: fermented :: generics :: Arr_u8_20) ; impl ferment_interfaces :: FFIConversionFrom < platform_value :: types :: bytes_20 :: Bytes20 > for platform_value_types_bytes_20_Bytes20 { unsafe fn ffi_from_const (ffi : * const platform_value_types_bytes_20_Bytes20) -> platform_value :: types :: bytes_20 :: Bytes20 { let ffi_ref = & * ffi ; platform_value :: types :: bytes_20 :: Bytes20 (ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . 0)) } } impl ferment_interfaces :: FFIConversionTo < platform_value :: types :: bytes_20 :: Bytes20 > for platform_value_types_bytes_20_Bytes20 { unsafe fn ffi_to_const (obj : platform_value :: types :: bytes_20 :: Bytes20) -> * const platform_value_types_bytes_20_Bytes20 { ferment_interfaces :: boxed (platform_value_types_bytes_20_Bytes20 (ferment_interfaces :: FFIConversionTo :: ffi_to (obj . 0))) } } impl ferment_interfaces :: FFIConversionDestroy < platform_value :: types :: bytes_20 :: Bytes20 > for platform_value_types_bytes_20_Bytes20 { unsafe fn destroy (ffi : * mut platform_value_types_bytes_20_Bytes20) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_value_types_bytes_20_Bytes20 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_types_bytes_20_Bytes20_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_20) -> * mut platform_value_types_bytes_20_Bytes20 { ferment_interfaces :: boxed (platform_value_types_bytes_20_Bytes20 (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_types_bytes_20_Bytes20_destroy < > (ffi : * mut platform_value_types_bytes_20_Bytes20) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_value_types_bytes_20_Bytes20_get_0 < > (obj : * const platform_value_types_bytes_20_Bytes20) -> * mut crate :: fermented :: generics :: Arr_u8_20 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_value_types_bytes_20_Bytes20_set_0 < > (obj : * mut platform_value_types_bytes_20_Bytes20 , value : * mut crate :: fermented :: generics :: Arr_u8_20) { (* obj) . 0 = value ; } } pub mod identifier { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_value :: types :: identifier :: Identifier`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_types_identifier_Identifier (* mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_IdentifierBytes32) ; impl ferment_interfaces :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier > for platform_value_types_identifier_Identifier { unsafe fn ffi_from_const (ffi : * const platform_value_types_identifier_Identifier) -> platform_value :: types :: identifier :: Identifier { let ffi_ref = & * ffi ; platform_value :: types :: identifier :: Identifier (ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . 0)) } } impl ferment_interfaces :: FFIConversionTo < platform_value :: types :: identifier :: Identifier > for platform_value_types_identifier_Identifier { unsafe fn ffi_to_const (obj : platform_value :: types :: identifier :: Identifier) -> * const platform_value_types_identifier_Identifier { ferment_interfaces :: boxed (platform_value_types_identifier_Identifier (ferment_interfaces :: FFIConversionTo :: ffi_to (obj . 0))) } } impl ferment_interfaces :: FFIConversionDestroy < platform_value :: types :: identifier :: Identifier > for platform_value_types_identifier_Identifier { unsafe fn destroy (ffi : * mut platform_value_types_identifier_Identifier) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_value_types_identifier_Identifier { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_Identifier_ctor < > (o_0 : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_IdentifierBytes32) -> * mut platform_value_types_identifier_Identifier { ferment_interfaces :: boxed (platform_value_types_identifier_Identifier (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_Identifier_destroy < > (ffi : * mut platform_value_types_identifier_Identifier) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_Identifier_get_0 < > (obj : * const platform_value_types_identifier_Identifier) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_IdentifierBytes32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_Identifier_set_0 < > (obj : * mut platform_value_types_identifier_Identifier , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_IdentifierBytes32) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`platform_value :: types :: identifier :: IdentifierBytes32`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_types_identifier_IdentifierBytes32 (* mut crate :: fermented :: generics :: Arr_u8_32) ; impl ferment_interfaces :: FFIConversionFrom < platform_value :: types :: identifier :: IdentifierBytes32 > for platform_value_types_identifier_IdentifierBytes32 { unsafe fn ffi_from_const (ffi : * const platform_value_types_identifier_IdentifierBytes32) -> platform_value :: types :: identifier :: IdentifierBytes32 { let ffi_ref = & * ffi ; platform_value :: types :: identifier :: IdentifierBytes32 (ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . 0)) } } impl ferment_interfaces :: FFIConversionTo < platform_value :: types :: identifier :: IdentifierBytes32 > for platform_value_types_identifier_IdentifierBytes32 { unsafe fn ffi_to_const (obj : platform_value :: types :: identifier :: IdentifierBytes32) -> * const platform_value_types_identifier_IdentifierBytes32 { ferment_interfaces :: boxed (platform_value_types_identifier_IdentifierBytes32 (ferment_interfaces :: FFIConversionTo :: ffi_to (obj . 0))) } } impl ferment_interfaces :: FFIConversionDestroy < platform_value :: types :: identifier :: IdentifierBytes32 > for platform_value_types_identifier_IdentifierBytes32 { unsafe fn destroy (ffi : * mut platform_value_types_identifier_IdentifierBytes32) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_value_types_identifier_IdentifierBytes32 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_IdentifierBytes32_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut platform_value_types_identifier_IdentifierBytes32 { ferment_interfaces :: boxed (platform_value_types_identifier_IdentifierBytes32 (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_IdentifierBytes32_destroy < > (ffi : * mut platform_value_types_identifier_IdentifierBytes32) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_IdentifierBytes32_get_0 < > (obj : * const platform_value_types_identifier_IdentifierBytes32) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_IdentifierBytes32_set_0 < > (obj : * mut platform_value_types_identifier_IdentifierBytes32 , value : * mut crate :: fermented :: generics :: Arr_u8_32) { (* obj) . 0 = value ; } # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } } } pub mod patch { use crate as ferment_example_platform ; pub mod diff { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } } } pub mod converter { use crate as ferment_example_platform ; # [cfg (feature = "json")] pub mod serde_json { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } } } pub mod inner_value_at_path { use crate as ferment_example_platform ; # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } } # [doc = "FFI-representation of the [`platform_value :: Hash256`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_Hash256 (* mut crate :: fermented :: generics :: Arr_u8_32) ; impl ferment_interfaces :: FFIConversionFrom < platform_value :: Hash256 > for platform_value_Hash256 { unsafe fn ffi_from_const (ffi : * const platform_value_Hash256) -> platform_value :: Hash256 { let ffi_ref = & * ffi ; ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . 0) } } impl ferment_interfaces :: FFIConversionTo < platform_value :: Hash256 > for platform_value_Hash256 { unsafe fn ffi_to_const (obj : platform_value :: Hash256) -> * const platform_value_Hash256 { ferment_interfaces :: boxed (platform_value_Hash256 (ferment_interfaces :: FFIConversionTo :: ffi_to (obj))) } } impl ferment_interfaces :: FFIConversionDestroy < platform_value :: Hash256 > for platform_value_Hash256 { unsafe fn destroy (ffi : * mut platform_value_Hash256) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_value_Hash256 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_Hash256_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut platform_value_Hash256 { ferment_interfaces :: boxed (platform_value_Hash256 (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Hash256_destroy < > (ffi : * mut platform_value_Hash256) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_value_Hash256_get_0 < > (obj : * const platform_value_Hash256) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_value_Hash256_set_0 < > (obj : * mut platform_value_Hash256 , value : * mut crate :: fermented :: generics :: Arr_u8_32) { (* obj) . 0 = value ; } pub mod btreemap_extensions { use crate as ferment_example_platform ; } pub mod index { use crate as ferment_example_platform ; pub mod private { use crate as ferment_example_platform ; } } pub mod error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`platform_value :: error :: Error`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum platform_value_error_Error { Unsupported (* mut std :: os :: raw :: c_char) , StructureError (* mut std :: os :: raw :: c_char) , PathError (* mut std :: os :: raw :: c_char) , IntegerSizeError , IntegerParsingError , StringDecodingError (* mut std :: os :: raw :: c_char) , KeyMustBeAString , ByteLengthNot20BytesError (* mut std :: os :: raw :: c_char) , ByteLengthNot32BytesError (* mut std :: os :: raw :: c_char) , ByteLengthNot36BytesError (* mut std :: os :: raw :: c_char) , SerdeSerializationError (* mut std :: os :: raw :: c_char) , SerdeDeserializationError (* mut std :: os :: raw :: c_char) , CborSerializationError (* mut std :: os :: raw :: c_char) } impl ferment_interfaces :: FFIConversionFrom < platform_value :: error :: Error > for platform_value_error_Error { unsafe fn ffi_from_const (ffi : * const platform_value_error_Error) -> platform_value :: error :: Error { let ffi_ref = & * ffi ; match ffi_ref { platform_value_error_Error :: Unsupported (o_0) => platform_value :: error :: Error :: Unsupported (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , platform_value_error_Error :: StructureError (o_0) => platform_value :: error :: Error :: StructureError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , platform_value_error_Error :: PathError (o_0) => platform_value :: error :: Error :: PathError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , platform_value_error_Error :: IntegerSizeError => platform_value :: error :: Error :: IntegerSizeError , platform_value_error_Error :: IntegerParsingError => platform_value :: error :: Error :: IntegerParsingError , platform_value_error_Error :: StringDecodingError (o_0) => platform_value :: error :: Error :: StringDecodingError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , platform_value_error_Error :: KeyMustBeAString => platform_value :: error :: Error :: KeyMustBeAString , platform_value_error_Error :: ByteLengthNot20BytesError (o_0) => platform_value :: error :: Error :: ByteLengthNot20BytesError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , platform_value_error_Error :: ByteLengthNot32BytesError (o_0) => platform_value :: error :: Error :: ByteLengthNot32BytesError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , platform_value_error_Error :: ByteLengthNot36BytesError (o_0) => platform_value :: error :: Error :: ByteLengthNot36BytesError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , platform_value_error_Error :: SerdeSerializationError (o_0) => platform_value :: error :: Error :: SerdeSerializationError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , platform_value_error_Error :: SerdeDeserializationError (o_0) => platform_value :: error :: Error :: SerdeDeserializationError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , platform_value_error_Error :: CborSerializationError (o_0) => platform_value :: error :: Error :: CborSerializationError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < platform_value :: error :: Error > for platform_value_error_Error { unsafe fn ffi_to_const (obj : platform_value :: error :: Error) -> * const platform_value_error_Error { ferment_interfaces :: boxed (match obj { platform_value :: error :: Error :: Unsupported (o_0) => platform_value_error_Error :: Unsupported (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , platform_value :: error :: Error :: StructureError (o_0) => platform_value_error_Error :: StructureError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , platform_value :: error :: Error :: PathError (o_0) => platform_value_error_Error :: PathError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , platform_value :: error :: Error :: IntegerSizeError => platform_value_error_Error :: IntegerSizeError , platform_value :: error :: Error :: IntegerParsingError => platform_value_error_Error :: IntegerParsingError , platform_value :: error :: Error :: StringDecodingError (o_0) => platform_value_error_Error :: StringDecodingError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , platform_value :: error :: Error :: KeyMustBeAString => platform_value_error_Error :: KeyMustBeAString , platform_value :: error :: Error :: ByteLengthNot20BytesError (o_0) => platform_value_error_Error :: ByteLengthNot20BytesError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , platform_value :: error :: Error :: ByteLengthNot32BytesError (o_0) => platform_value_error_Error :: ByteLengthNot32BytesError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , platform_value :: error :: Error :: ByteLengthNot36BytesError (o_0) => platform_value_error_Error :: ByteLengthNot36BytesError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , platform_value :: error :: Error :: SerdeSerializationError (o_0) => platform_value_error_Error :: SerdeSerializationError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , platform_value :: error :: Error :: SerdeDeserializationError (o_0) => platform_value_error_Error :: SerdeDeserializationError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , platform_value :: error :: Error :: CborSerializationError (o_0) => platform_value_error_Error :: CborSerializationError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_value :: error :: Error > for platform_value_error_Error { unsafe fn destroy (ffi : * mut platform_value_error_Error) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for platform_value_error_Error { fn drop (& mut self) { unsafe { match self { platform_value_error_Error :: Unsupported (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , platform_value_error_Error :: StructureError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , platform_value_error_Error :: PathError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , platform_value_error_Error :: IntegerSizeError => { } , platform_value_error_Error :: IntegerParsingError => { } , platform_value_error_Error :: StringDecodingError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , platform_value_error_Error :: KeyMustBeAString => { } , platform_value_error_Error :: ByteLengthNot20BytesError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , platform_value_error_Error :: ByteLengthNot32BytesError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , platform_value_error_Error :: ByteLengthNot36BytesError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , platform_value_error_Error :: SerdeSerializationError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , platform_value_error_Error :: SerdeDeserializationError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , platform_value_error_Error :: CborSerializationError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_Unsupported_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: Unsupported (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_StructureError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: StructureError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_PathError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: PathError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_IntegerSizeError_ctor () -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: IntegerSizeError { }) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_IntegerParsingError_ctor () -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: IntegerParsingError { }) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_StringDecodingError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: StringDecodingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_KeyMustBeAString_ctor () -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: KeyMustBeAString { }) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_ByteLengthNot20BytesError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: ByteLengthNot20BytesError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_ByteLengthNot32BytesError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: ByteLengthNot32BytesError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_ByteLengthNot36BytesError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: ByteLengthNot36BytesError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_SerdeSerializationError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: SerdeSerializationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_SerdeDeserializationError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: SerdeDeserializationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_CborSerializationError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: CborSerializationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_destroy < > (ffi : * mut platform_value_error_Error) { ferment_interfaces :: unbox_any (ffi) ; } } } pub mod dpp { use crate as ferment_example_platform ; pub mod util { use crate as ferment_example_platform ; pub mod json_schema { use crate as ferment_example_platform ; # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } } pub mod deserializer { use crate as ferment_example_platform ; pub mod serde_entropy { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp :: util :: deserializer :: ProtocolVersion`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_util_deserializer_ProtocolVersion (u32) ; impl ferment_interfaces :: FFIConversionFrom < dpp :: util :: deserializer :: ProtocolVersion > for dpp_util_deserializer_ProtocolVersion { unsafe fn ffi_from_const (ffi : * const dpp_util_deserializer_ProtocolVersion) -> dpp :: util :: deserializer :: ProtocolVersion { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment_interfaces :: FFIConversionTo < dpp :: util :: deserializer :: ProtocolVersion > for dpp_util_deserializer_ProtocolVersion { unsafe fn ffi_to_const (obj : dpp :: util :: deserializer :: ProtocolVersion) -> * const dpp_util_deserializer_ProtocolVersion { ferment_interfaces :: boxed (dpp_util_deserializer_ProtocolVersion (obj)) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: util :: deserializer :: ProtocolVersion > for dpp_util_deserializer_ProtocolVersion { unsafe fn destroy (ffi : * mut dpp_util_deserializer_ProtocolVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_util_deserializer_ProtocolVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_util_deserializer_ProtocolVersion_ctor < > (o_0 : u32) -> * mut dpp_util_deserializer_ProtocolVersion { ferment_interfaces :: boxed (dpp_util_deserializer_ProtocolVersion (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_util_deserializer_ProtocolVersion_destroy < > (ffi : * mut dpp_util_deserializer_ProtocolVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_util_deserializer_ProtocolVersion_get_0 < > (obj : * const dpp_util_deserializer_ProtocolVersion) -> u32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_util_deserializer_ProtocolVersion_set_0 < > (obj : * mut dpp_util_deserializer_ProtocolVersion , value : u32) { (* obj) . 0 = value ; } } pub mod strings { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; pub mod convert_to_homograph_safe_chars { use crate as ferment_example_platform ; } } } pub mod json_path { use crate as ferment_example_platform ; # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } } # [cfg (feature = "cbor")] pub mod cbor_value { use crate as ferment_example_platform ; pub mod convert { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } } pub mod canonical { use crate as ferment_example_platform ; # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } } } pub mod json_value { use crate as ferment_example_platform ; pub mod insert_with_path { use crate as ferment_example_platform ; # [cfg (test)] pub mod test_set { use crate as ferment_example_platform ; } } # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } pub mod remove_path { use crate as ferment_example_platform ; # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } } } } # [cfg (feature = "fixtures-and-mocks")] pub mod tests { use crate as ferment_example_platform ; pub mod fixtures { use crate as ferment_example_platform ; } pub mod utils { use crate as ferment_example_platform ; } } pub mod withdrawal { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: withdrawal :: Pooling`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_withdrawal_Pooling { Never = 0 , IfAvailable = 1 , Standard = 2 } impl ferment_interfaces :: FFIConversionFrom < dpp :: withdrawal :: Pooling > for dpp_withdrawal_Pooling { unsafe fn ffi_from_const (ffi : * const dpp_withdrawal_Pooling) -> dpp :: withdrawal :: Pooling { let ffi_ref = & * ffi ; match ffi_ref { dpp_withdrawal_Pooling :: Never => dpp :: withdrawal :: Pooling :: Never , dpp_withdrawal_Pooling :: IfAvailable => dpp :: withdrawal :: Pooling :: IfAvailable , dpp_withdrawal_Pooling :: Standard => dpp :: withdrawal :: Pooling :: Standard } } } impl ferment_interfaces :: FFIConversionTo < dpp :: withdrawal :: Pooling > for dpp_withdrawal_Pooling { unsafe fn ffi_to_const (obj : dpp :: withdrawal :: Pooling) -> * const dpp_withdrawal_Pooling { ferment_interfaces :: boxed (match obj { dpp :: withdrawal :: Pooling :: Never => dpp_withdrawal_Pooling :: Never , dpp :: withdrawal :: Pooling :: IfAvailable => dpp_withdrawal_Pooling :: IfAvailable , dpp :: withdrawal :: Pooling :: Standard => dpp_withdrawal_Pooling :: Standard , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: withdrawal :: Pooling > for dpp_withdrawal_Pooling { unsafe fn destroy (ffi : * mut dpp_withdrawal_Pooling) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_withdrawal_Pooling { fn drop (& mut self) { unsafe { match self { dpp_withdrawal_Pooling :: Never => { } , dpp_withdrawal_Pooling :: IfAvailable => { } , dpp_withdrawal_Pooling :: Standard => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_withdrawal_Pooling_Never_ctor () -> * mut dpp_withdrawal_Pooling { ferment_interfaces :: boxed (dpp_withdrawal_Pooling :: Never { }) } # [no_mangle] pub unsafe extern "C" fn dpp_withdrawal_Pooling_IfAvailable_ctor () -> * mut dpp_withdrawal_Pooling { ferment_interfaces :: boxed (dpp_withdrawal_Pooling :: IfAvailable { }) } # [no_mangle] pub unsafe extern "C" fn dpp_withdrawal_Pooling_Standard_ctor () -> * mut dpp_withdrawal_Pooling { ferment_interfaces :: boxed (dpp_withdrawal_Pooling :: Standard { }) } # [no_mangle] pub unsafe extern "C" fn dpp_withdrawal_Pooling_destroy < > (ffi : * mut dpp_withdrawal_Pooling) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod document { use crate as ferment_example_platform ; # [cfg (feature = "factories")] pub mod specialized_document_factory { use crate as ferment_example_platform ; } pub mod errors { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: document :: errors :: DocumentError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_document_errors_DocumentError { # [cfg (feature = "state-transitions")] DocumentAlreadyExistsError { document_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition } , # [cfg (feature = "state-transitions")] DocumentNotProvidedError { document_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition } , InvalidActionError (u8) , InvalidActionNameError { actions : * mut crate :: fermented :: generics :: Vec_String } , # [cfg (feature = "state-transitions")] InvalidDocumentActionError { document_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition } , InvalidDocumentError { errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , raw_document : * mut crate :: fermented :: types :: platform_value :: platform_value_Value } , InvalidInitialRevisionError { document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document } , RevisionAbsentError { document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document } , TryingToReplaceImmutableDocument { document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document } , TryingToDeleteIndelibleDocument { document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document } , MismatchOwnerIdsError { documents : * mut crate :: fermented :: generics :: Vec_dpp_document_Document } , DocumentNoRevisionError { document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document } , NoDocumentsSuppliedError } impl ferment_interfaces :: FFIConversionFrom < dpp :: document :: errors :: DocumentError > for dpp_document_errors_DocumentError { unsafe fn ffi_from_const (ffi : * const dpp_document_errors_DocumentError) -> dpp :: document :: errors :: DocumentError { let ffi_ref = & * ffi ; match ffi_ref { # [cfg (feature = "state-transitions")] dpp_document_errors_DocumentError :: DocumentAlreadyExistsError { document_transition } => dpp :: document :: errors :: DocumentError :: DocumentAlreadyExistsError { document_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (* document_transition) } , # [cfg (feature = "state-transitions")] dpp_document_errors_DocumentError :: DocumentNotProvidedError { document_transition } => dpp :: document :: errors :: DocumentError :: DocumentNotProvidedError { document_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (* document_transition) } , dpp_document_errors_DocumentError :: InvalidActionError (o_0) => dpp :: document :: errors :: DocumentError :: InvalidActionError (* o_0) , dpp_document_errors_DocumentError :: InvalidActionNameError { actions } => dpp :: document :: errors :: DocumentError :: InvalidActionNameError { actions : ferment_interfaces :: FFIConversionFrom :: ffi_from (* actions) } , # [cfg (feature = "state-transitions")] dpp_document_errors_DocumentError :: InvalidDocumentActionError { document_transition } => dpp :: document :: errors :: DocumentError :: InvalidDocumentActionError { document_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (* document_transition) } , dpp_document_errors_DocumentError :: InvalidDocumentError { errors , raw_document } => dpp :: document :: errors :: DocumentError :: InvalidDocumentError { errors : ferment_interfaces :: FFIConversionFrom :: ffi_from (* errors) , raw_document : ferment_interfaces :: FFIConversionFrom :: ffi_from (* raw_document) } , dpp_document_errors_DocumentError :: InvalidInitialRevisionError { document } => dpp :: document :: errors :: DocumentError :: InvalidInitialRevisionError { document : Box :: new (ferment_interfaces :: FFIConversionFrom :: ffi_from (* document)) } , dpp_document_errors_DocumentError :: RevisionAbsentError { document } => dpp :: document :: errors :: DocumentError :: RevisionAbsentError { document : Box :: new (ferment_interfaces :: FFIConversionFrom :: ffi_from (* document)) } , dpp_document_errors_DocumentError :: TryingToReplaceImmutableDocument { document } => dpp :: document :: errors :: DocumentError :: TryingToReplaceImmutableDocument { document : Box :: new (ferment_interfaces :: FFIConversionFrom :: ffi_from (* document)) } , dpp_document_errors_DocumentError :: TryingToDeleteIndelibleDocument { document } => dpp :: document :: errors :: DocumentError :: TryingToDeleteIndelibleDocument { document : Box :: new (ferment_interfaces :: FFIConversionFrom :: ffi_from (* document)) } , dpp_document_errors_DocumentError :: MismatchOwnerIdsError { documents } => dpp :: document :: errors :: DocumentError :: MismatchOwnerIdsError { documents : ferment_interfaces :: FFIConversionFrom :: ffi_from (* documents) } , dpp_document_errors_DocumentError :: DocumentNoRevisionError { document } => dpp :: document :: errors :: DocumentError :: DocumentNoRevisionError { document : Box :: new (ferment_interfaces :: FFIConversionFrom :: ffi_from (* document)) } , dpp_document_errors_DocumentError :: NoDocumentsSuppliedError => dpp :: document :: errors :: DocumentError :: NoDocumentsSuppliedError } } } impl ferment_interfaces :: FFIConversionTo < dpp :: document :: errors :: DocumentError > for dpp_document_errors_DocumentError { unsafe fn ffi_to_const (obj : dpp :: document :: errors :: DocumentError) -> * const dpp_document_errors_DocumentError { ferment_interfaces :: boxed (match obj { # [cfg (feature = "state-transitions")] dpp :: document :: errors :: DocumentError :: DocumentAlreadyExistsError { document_transition } => dpp_document_errors_DocumentError :: DocumentAlreadyExistsError { document_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (document_transition) } , # [cfg (feature = "state-transitions")] dpp :: document :: errors :: DocumentError :: DocumentNotProvidedError { document_transition } => dpp_document_errors_DocumentError :: DocumentNotProvidedError { document_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (document_transition) } , dpp :: document :: errors :: DocumentError :: InvalidActionError (o_0) => dpp_document_errors_DocumentError :: InvalidActionError (o_0) , dpp :: document :: errors :: DocumentError :: InvalidActionNameError { actions } => dpp_document_errors_DocumentError :: InvalidActionNameError { actions : ferment_interfaces :: FFIConversionTo :: ffi_to (actions) } , # [cfg (feature = "state-transitions")] dpp :: document :: errors :: DocumentError :: InvalidDocumentActionError { document_transition } => dpp_document_errors_DocumentError :: InvalidDocumentActionError { document_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (document_transition) } , dpp :: document :: errors :: DocumentError :: InvalidDocumentError { errors , raw_document } => dpp_document_errors_DocumentError :: InvalidDocumentError { errors : ferment_interfaces :: FFIConversionTo :: ffi_to (errors) , raw_document : ferment_interfaces :: FFIConversionTo :: ffi_to (raw_document) } , dpp :: document :: errors :: DocumentError :: InvalidInitialRevisionError { document } => dpp_document_errors_DocumentError :: InvalidInitialRevisionError { document : ferment_interfaces :: FFIConversionTo :: ffi_to (* document) } , dpp :: document :: errors :: DocumentError :: RevisionAbsentError { document } => dpp_document_errors_DocumentError :: RevisionAbsentError { document : ferment_interfaces :: FFIConversionTo :: ffi_to (* document) } , dpp :: document :: errors :: DocumentError :: TryingToReplaceImmutableDocument { document } => dpp_document_errors_DocumentError :: TryingToReplaceImmutableDocument { document : ferment_interfaces :: FFIConversionTo :: ffi_to (* document) } , dpp :: document :: errors :: DocumentError :: TryingToDeleteIndelibleDocument { document } => dpp_document_errors_DocumentError :: TryingToDeleteIndelibleDocument { document : ferment_interfaces :: FFIConversionTo :: ffi_to (* document) } , dpp :: document :: errors :: DocumentError :: MismatchOwnerIdsError { documents } => dpp_document_errors_DocumentError :: MismatchOwnerIdsError { documents : ferment_interfaces :: FFIConversionTo :: ffi_to (documents) } , dpp :: document :: errors :: DocumentError :: DocumentNoRevisionError { document } => dpp_document_errors_DocumentError :: DocumentNoRevisionError { document : ferment_interfaces :: FFIConversionTo :: ffi_to (* document) } , dpp :: document :: errors :: DocumentError :: NoDocumentsSuppliedError => dpp_document_errors_DocumentError :: NoDocumentsSuppliedError , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: document :: errors :: DocumentError > for dpp_document_errors_DocumentError { unsafe fn destroy (ffi : * mut dpp_document_errors_DocumentError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_document_errors_DocumentError { fn drop (& mut self) { unsafe { match self { # [cfg (feature = "state-transitions")] dpp_document_errors_DocumentError :: DocumentAlreadyExistsError { document_transition } => { ferment_interfaces :: unbox_any (* document_transition) ; ; } , # [cfg (feature = "state-transitions")] dpp_document_errors_DocumentError :: DocumentNotProvidedError { document_transition } => { ferment_interfaces :: unbox_any (* document_transition) ; ; } , dpp_document_errors_DocumentError :: InvalidActionError (o_0) => { ; } , dpp_document_errors_DocumentError :: InvalidActionNameError { actions } => { ferment_interfaces :: unbox_any (* actions) ; ; } , # [cfg (feature = "state-transitions")] dpp_document_errors_DocumentError :: InvalidDocumentActionError { document_transition } => { ferment_interfaces :: unbox_any (* document_transition) ; ; } , dpp_document_errors_DocumentError :: InvalidDocumentError { errors , raw_document } => { ferment_interfaces :: unbox_any (* errors) ; ; ; ferment_interfaces :: unbox_any (* raw_document) ; ; } , dpp_document_errors_DocumentError :: InvalidInitialRevisionError { document } => { ferment_interfaces :: unbox_any (* document) ; ; } , dpp_document_errors_DocumentError :: RevisionAbsentError { document } => { ferment_interfaces :: unbox_any (* document) ; ; } , dpp_document_errors_DocumentError :: TryingToReplaceImmutableDocument { document } => { ferment_interfaces :: unbox_any (* document) ; ; } , dpp_document_errors_DocumentError :: TryingToDeleteIndelibleDocument { document } => { ferment_interfaces :: unbox_any (* document) ; ; } , dpp_document_errors_DocumentError :: MismatchOwnerIdsError { documents } => { ferment_interfaces :: unbox_any (* documents) ; ; } , dpp_document_errors_DocumentError :: DocumentNoRevisionError { document } => { ferment_interfaces :: unbox_any (* document) ; ; } , dpp_document_errors_DocumentError :: NoDocumentsSuppliedError => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [cfg (feature = "state-transitions")] # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_DocumentAlreadyExistsError_ctor (document_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: DocumentAlreadyExistsError { document_transition }) } # [cfg (feature = "state-transitions")] # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_DocumentNotProvidedError_ctor (document_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: DocumentNotProvidedError { document_transition }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_InvalidActionError_ctor (o_o_0 : u8) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: InvalidActionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_InvalidActionNameError_ctor (actions : * mut crate :: fermented :: generics :: Vec_String) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: InvalidActionNameError { actions }) } # [cfg (feature = "state-transitions")] # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_InvalidDocumentActionError_ctor (document_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: InvalidDocumentActionError { document_transition }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_InvalidDocumentError_ctor (errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , raw_document : * mut crate :: fermented :: types :: platform_value :: platform_value_Value) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: InvalidDocumentError { errors , raw_document }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_InvalidInitialRevisionError_ctor (document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: InvalidInitialRevisionError { document }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_RevisionAbsentError_ctor (document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: RevisionAbsentError { document }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_TryingToReplaceImmutableDocument_ctor (document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: TryingToReplaceImmutableDocument { document }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_TryingToDeleteIndelibleDocument_ctor (document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: TryingToDeleteIndelibleDocument { document }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_MismatchOwnerIdsError_ctor (documents : * mut crate :: fermented :: generics :: Vec_dpp_document_Document) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: MismatchOwnerIdsError { documents }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_DocumentNoRevisionError_ctor (document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: DocumentNoRevisionError { document }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_NoDocumentsSuppliedError_ctor () -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: NoDocumentsSuppliedError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_destroy < > (ffi : * mut dpp_document_errors_DocumentError) { ferment_interfaces :: unbox_any (ffi) ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: document :: Document`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_document_Document { V0 (* mut crate :: fermented :: types :: dpp :: document :: v0 :: dpp_document_v0_DocumentV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: document :: Document > for dpp_document_Document { unsafe fn ffi_from_const (ffi : * const dpp_document_Document) -> dpp :: document :: Document { let ffi_ref = & * ffi ; match ffi_ref { dpp_document_Document :: V0 (o_0) => dpp :: document :: Document :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: document :: Document > for dpp_document_Document { unsafe fn ffi_to_const (obj : dpp :: document :: Document) -> * const dpp_document_Document { ferment_interfaces :: boxed (match obj { dpp :: document :: Document :: V0 (o_0) => dpp_document_Document :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: document :: Document > for dpp_document_Document { unsafe fn destroy (ffi : * mut dpp_document_Document) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_document_Document { fn drop (& mut self) { unsafe { match self { dpp_document_Document :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_document_Document_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: document :: v0 :: dpp_document_v0_DocumentV0) -> * mut dpp_document_Document { ferment_interfaces :: boxed (dpp_document_Document :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_document_Document_destroy < > (ffi : * mut dpp_document_Document) { ferment_interfaces :: unbox_any (ffi) ; } pub mod accessors { use crate as ferment_example_platform ; } pub mod transfer { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: document :: transfer :: Transferable`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_document_transfer_Transferable { Never = 0 , Always = 1 } impl ferment_interfaces :: FFIConversionFrom < dpp :: document :: transfer :: Transferable > for dpp_document_transfer_Transferable { unsafe fn ffi_from_const (ffi : * const dpp_document_transfer_Transferable) -> dpp :: document :: transfer :: Transferable { let ffi_ref = & * ffi ; match ffi_ref { dpp_document_transfer_Transferable :: Never => dpp :: document :: transfer :: Transferable :: Never , dpp_document_transfer_Transferable :: Always => dpp :: document :: transfer :: Transferable :: Always } } } impl ferment_interfaces :: FFIConversionTo < dpp :: document :: transfer :: Transferable > for dpp_document_transfer_Transferable { unsafe fn ffi_to_const (obj : dpp :: document :: transfer :: Transferable) -> * const dpp_document_transfer_Transferable { ferment_interfaces :: boxed (match obj { dpp :: document :: transfer :: Transferable :: Never => dpp_document_transfer_Transferable :: Never , dpp :: document :: transfer :: Transferable :: Always => dpp_document_transfer_Transferable :: Always , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: document :: transfer :: Transferable > for dpp_document_transfer_Transferable { unsafe fn destroy (ffi : * mut dpp_document_transfer_Transferable) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_document_transfer_Transferable { fn drop (& mut self) { unsafe { match self { dpp_document_transfer_Transferable :: Never => { } , dpp_document_transfer_Transferable :: Always => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_document_transfer_Transferable_Never_ctor () -> * mut dpp_document_transfer_Transferable { ferment_interfaces :: boxed (dpp_document_transfer_Transferable :: Never { }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_transfer_Transferable_Always_ctor () -> * mut dpp_document_transfer_Transferable { ferment_interfaces :: boxed (dpp_document_transfer_Transferable :: Always { }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_transfer_Transferable_destroy < > (ffi : * mut dpp_document_transfer_Transferable) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod serialization_traits { use crate as ferment_example_platform ; pub mod platform_serialization_conversion { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } pub mod serialize { use crate as ferment_example_platform ; } pub mod deserialize { use crate as ferment_example_platform ; } } # [cfg (feature = "document-cbor-conversion")] pub mod cbor_conversion { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } } # [cfg (feature = "document-value-conversion")] pub mod platform_value_conversion { use crate as ferment_example_platform ; } # [cfg (feature = "document-json-conversion")] pub mod json_conversion { use crate as ferment_example_platform ; } } pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: document :: v0 :: DocumentV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_document_v0_DocumentV0 { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub properties : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub created_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis , pub updated_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis , pub transferred_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis , pub created_at_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight , pub updated_at_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight , pub transferred_at_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight , pub created_at_core_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight , pub updated_at_core_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight , pub transferred_at_core_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight } impl ferment_interfaces :: FFIConversionFrom < dpp :: document :: v0 :: DocumentV0 > for dpp_document_v0_DocumentV0 { unsafe fn ffi_from_const (ffi : * const dpp_document_v0_DocumentV0) -> dpp :: document :: v0 :: DocumentV0 { let ffi_ref = & * ffi ; dpp :: document :: v0 :: DocumentV0 { id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . id) , owner_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . owner_id) , properties : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . properties) , revision : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . revision) , created_at : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . created_at) , updated_at : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . updated_at) , transferred_at : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . transferred_at) , created_at_block_height : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . created_at_block_height) , updated_at_block_height : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . updated_at_block_height) , transferred_at_block_height : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . transferred_at_block_height) , created_at_core_block_height : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . created_at_core_block_height) , updated_at_core_block_height : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . updated_at_core_block_height) , transferred_at_core_block_height : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . transferred_at_core_block_height) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: document :: v0 :: DocumentV0 > for dpp_document_v0_DocumentV0 { unsafe fn ffi_to_const (obj : dpp :: document :: v0 :: DocumentV0) -> * const dpp_document_v0_DocumentV0 { ferment_interfaces :: boxed (dpp_document_v0_DocumentV0 { id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . id) , owner_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . owner_id) , properties : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . properties) , revision : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . revision) , created_at : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . created_at) , updated_at : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . updated_at) , transferred_at : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . transferred_at) , created_at_block_height : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . created_at_block_height) , updated_at_block_height : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . updated_at_block_height) , transferred_at_block_height : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . transferred_at_block_height) , created_at_core_block_height : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . created_at_core_block_height) , updated_at_core_block_height : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . updated_at_core_block_height) , transferred_at_core_block_height : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . transferred_at_core_block_height) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: document :: v0 :: DocumentV0 > for dpp_document_v0_DocumentV0 { unsafe fn destroy (ffi : * mut dpp_document_v0_DocumentV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_document_v0_DocumentV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; ferment_interfaces :: unbox_any (ffi_ref . owner_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . properties) ; ; ferment_interfaces :: unbox_any_opt (ffi_ref . revision) ; ferment_interfaces :: unbox_any_opt (ffi_ref . created_at) ; ferment_interfaces :: unbox_any_opt (ffi_ref . updated_at) ; ferment_interfaces :: unbox_any_opt (ffi_ref . transferred_at) ; ferment_interfaces :: unbox_any_opt (ffi_ref . created_at_block_height) ; ferment_interfaces :: unbox_any_opt (ffi_ref . updated_at_block_height) ; ferment_interfaces :: unbox_any_opt (ffi_ref . transferred_at_block_height) ; ferment_interfaces :: unbox_any_opt (ffi_ref . created_at_core_block_height) ; ferment_interfaces :: unbox_any_opt (ffi_ref . updated_at_core_block_height) ; ferment_interfaces :: unbox_any_opt (ffi_ref . transferred_at_core_block_height) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_ctor < > (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , properties : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , created_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis , updated_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis , transferred_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis , created_at_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight , updated_at_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight , transferred_at_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight , created_at_core_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight , updated_at_core_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight , transferred_at_core_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight) -> * mut dpp_document_v0_DocumentV0 { ferment_interfaces :: boxed (dpp_document_v0_DocumentV0 { id , owner_id , properties , revision , created_at , updated_at , transferred_at , created_at_block_height , updated_at_block_height , transferred_at_block_height , created_at_core_block_height , updated_at_core_block_height , transferred_at_core_block_height }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_destroy < > (ffi : * mut dpp_document_v0_DocumentV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_id < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_owner_id < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_properties < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value { (* obj) . properties } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_revision < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_created_at < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis { (* obj) . created_at } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_updated_at < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis { (* obj) . updated_at } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_transferred_at < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis { (* obj) . transferred_at } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_created_at_block_height < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight { (* obj) . created_at_block_height } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_updated_at_block_height < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight { (* obj) . updated_at_block_height } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_transferred_at_block_height < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight { (* obj) . transferred_at_block_height } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_created_at_core_block_height < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight { (* obj) . created_at_core_block_height } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_updated_at_core_block_height < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight { (* obj) . updated_at_core_block_height } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_transferred_at_core_block_height < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight { (* obj) . transferred_at_core_block_height } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_id < > (obj : * mut dpp_document_v0_DocumentV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_owner_id < > (obj : * mut dpp_document_v0_DocumentV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . owner_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_properties < > (obj : * mut dpp_document_v0_DocumentV0 , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value) { (* obj) . properties = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_revision < > (obj : * mut dpp_document_v0_DocumentV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . revision = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_created_at < > (obj : * mut dpp_document_v0_DocumentV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis) { (* obj) . created_at = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_updated_at < > (obj : * mut dpp_document_v0_DocumentV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis) { (* obj) . updated_at = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_transferred_at < > (obj : * mut dpp_document_v0_DocumentV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis) { (* obj) . transferred_at = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_created_at_block_height < > (obj : * mut dpp_document_v0_DocumentV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight) { (* obj) . created_at_block_height = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_updated_at_block_height < > (obj : * mut dpp_document_v0_DocumentV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight) { (* obj) . updated_at_block_height = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_transferred_at_block_height < > (obj : * mut dpp_document_v0_DocumentV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight) { (* obj) . transferred_at_block_height = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_created_at_core_block_height < > (obj : * mut dpp_document_v0_DocumentV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight) { (* obj) . created_at_core_block_height = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_updated_at_core_block_height < > (obj : * mut dpp_document_v0_DocumentV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight) { (* obj) . updated_at_core_block_height = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_transferred_at_core_block_height < > (obj : * mut dpp_document_v0_DocumentV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight) { (* obj) . transferred_at_core_block_height = value ; } } # [cfg (feature = "factories")] pub mod document_factory { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } } } # [cfg (feature = "extended-document")] pub mod extended_document { use crate as ferment_example_platform ; # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } pub mod v0 { use crate as ferment_example_platform ; } pub mod fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } } pub mod fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } pub mod document_methods { use crate as ferment_example_platform ; pub mod get_raw_for_contract { use crate as ferment_example_platform ; } pub mod hash { use crate as ferment_example_platform ; } pub mod is_equal_ignoring_timestamps { use crate as ferment_example_platform ; } pub mod get_raw_for_document_type { use crate as ferment_example_platform ; } } # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } } pub mod bls { use crate as ferment_example_platform ; } pub mod block { use crate as ferment_example_platform ; pub mod extended_block_info { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } pub mod v0 { use crate as ferment_example_platform ; pub mod signature_serializer { use crate as ferment_example_platform ; } } } pub mod epoch { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: block :: epoch :: Epoch`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_block_epoch_Epoch { pub index : * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex , pub key : * mut crate :: fermented :: generics :: Arr_u8_2 } impl ferment_interfaces :: FFIConversionFrom < dpp :: block :: epoch :: Epoch > for dpp_block_epoch_Epoch { unsafe fn ffi_from_const (ffi : * const dpp_block_epoch_Epoch) -> dpp :: block :: epoch :: Epoch { let ffi_ref = & * ffi ; dpp :: block :: epoch :: Epoch { index : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . index) , key : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . key) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: block :: epoch :: Epoch > for dpp_block_epoch_Epoch { unsafe fn ffi_to_const (obj : dpp :: block :: epoch :: Epoch) -> * const dpp_block_epoch_Epoch { ferment_interfaces :: boxed (dpp_block_epoch_Epoch { index : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . index) , key : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . key) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: block :: epoch :: Epoch > for dpp_block_epoch_Epoch { unsafe fn destroy (ffi : * mut dpp_block_epoch_Epoch) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_block_epoch_Epoch { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . index) ; ; ferment_interfaces :: unbox_any (ffi_ref . key) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_block_epoch_Epoch_ctor < > (index : * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex , key : * mut crate :: fermented :: generics :: Arr_u8_2) -> * mut dpp_block_epoch_Epoch { ferment_interfaces :: boxed (dpp_block_epoch_Epoch { index , key }) } # [no_mangle] pub unsafe extern "C" fn dpp_block_epoch_Epoch_destroy < > (ffi : * mut dpp_block_epoch_Epoch) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_block_epoch_Epoch_get_index < > (obj : * const dpp_block_epoch_Epoch) -> * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex { (* obj) . index } # [no_mangle] pub unsafe extern "C" fn dpp_block_epoch_Epoch_get_key < > (obj : * const dpp_block_epoch_Epoch) -> * mut crate :: fermented :: generics :: Arr_u8_2 { (* obj) . key } # [no_mangle] pub unsafe extern "C" fn dpp_block_epoch_Epoch_set_index < > (obj : * mut dpp_block_epoch_Epoch , value : * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex) { (* obj) . index = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_block_epoch_Epoch_set_key < > (obj : * mut dpp_block_epoch_Epoch , value : * mut crate :: fermented :: generics :: Arr_u8_2) { (* obj) . key = value ; } # [doc = "FFI-representation of the [`dpp :: block :: epoch :: EpochIndex`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_block_epoch_EpochIndex (u16) ; impl ferment_interfaces :: FFIConversionFrom < dpp :: block :: epoch :: EpochIndex > for dpp_block_epoch_EpochIndex { unsafe fn ffi_from_const (ffi : * const dpp_block_epoch_EpochIndex) -> dpp :: block :: epoch :: EpochIndex { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment_interfaces :: FFIConversionTo < dpp :: block :: epoch :: EpochIndex > for dpp_block_epoch_EpochIndex { unsafe fn ffi_to_const (obj : dpp :: block :: epoch :: EpochIndex) -> * const dpp_block_epoch_EpochIndex { ferment_interfaces :: boxed (dpp_block_epoch_EpochIndex (obj)) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: block :: epoch :: EpochIndex > for dpp_block_epoch_EpochIndex { unsafe fn destroy (ffi : * mut dpp_block_epoch_EpochIndex) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_block_epoch_EpochIndex { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_block_epoch_EpochIndex_ctor < > (o_0 : u16) -> * mut dpp_block_epoch_EpochIndex { ferment_interfaces :: boxed (dpp_block_epoch_EpochIndex (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_block_epoch_EpochIndex_destroy < > (ffi : * mut dpp_block_epoch_EpochIndex) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_block_epoch_EpochIndex_get_0 < > (obj : * const dpp_block_epoch_EpochIndex) -> u16 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_block_epoch_EpochIndex_set_0 < > (obj : * mut dpp_block_epoch_EpochIndex , value : u16) { (* obj) . 0 = value ; } } pub mod extended_epoch_info { use crate as ferment_example_platform ; } pub mod block_info { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: block :: block_info :: BlockInfo`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_block_block_info_BlockInfo { pub time_ms : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , pub height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight , pub core_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight , pub epoch : * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_Epoch } impl ferment_interfaces :: FFIConversionFrom < dpp :: block :: block_info :: BlockInfo > for dpp_block_block_info_BlockInfo { unsafe fn ffi_from_const (ffi : * const dpp_block_block_info_BlockInfo) -> dpp :: block :: block_info :: BlockInfo { let ffi_ref = & * ffi ; dpp :: block :: block_info :: BlockInfo { time_ms : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . time_ms) , height : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . height) , core_height : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . core_height) , epoch : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . epoch) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: block :: block_info :: BlockInfo > for dpp_block_block_info_BlockInfo { unsafe fn ffi_to_const (obj : dpp :: block :: block_info :: BlockInfo) -> * const dpp_block_block_info_BlockInfo { ferment_interfaces :: boxed (dpp_block_block_info_BlockInfo { time_ms : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . time_ms) , height : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . height) , core_height : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . core_height) , epoch : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . epoch) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: block :: block_info :: BlockInfo > for dpp_block_block_info_BlockInfo { unsafe fn destroy (ffi : * mut dpp_block_block_info_BlockInfo) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_block_block_info_BlockInfo { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . time_ms) ; ; ferment_interfaces :: unbox_any (ffi_ref . height) ; ; ferment_interfaces :: unbox_any (ffi_ref . core_height) ; ; ferment_interfaces :: unbox_any (ffi_ref . epoch) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_block_block_info_BlockInfo_ctor < > (time_ms : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight , core_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight , epoch : * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_Epoch) -> * mut dpp_block_block_info_BlockInfo { ferment_interfaces :: boxed (dpp_block_block_info_BlockInfo { time_ms , height , core_height , epoch }) } # [no_mangle] pub unsafe extern "C" fn dpp_block_block_info_BlockInfo_destroy < > (ffi : * mut dpp_block_block_info_BlockInfo) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_block_block_info_BlockInfo_get_time_ms < > (obj : * const dpp_block_block_info_BlockInfo) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis { (* obj) . time_ms } # [no_mangle] pub unsafe extern "C" fn dpp_block_block_info_BlockInfo_get_height < > (obj : * const dpp_block_block_info_BlockInfo) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight { (* obj) . height } # [no_mangle] pub unsafe extern "C" fn dpp_block_block_info_BlockInfo_get_core_height < > (obj : * const dpp_block_block_info_BlockInfo) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight { (* obj) . core_height } # [no_mangle] pub unsafe extern "C" fn dpp_block_block_info_BlockInfo_get_epoch < > (obj : * const dpp_block_block_info_BlockInfo) -> * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_Epoch { (* obj) . epoch } # [no_mangle] pub unsafe extern "C" fn dpp_block_block_info_BlockInfo_set_time_ms < > (obj : * mut dpp_block_block_info_BlockInfo , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis) { (* obj) . time_ms = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_block_block_info_BlockInfo_set_height < > (obj : * mut dpp_block_block_info_BlockInfo , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight) { (* obj) . height = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_block_block_info_BlockInfo_set_core_height < > (obj : * mut dpp_block_block_info_BlockInfo , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight) { (* obj) . core_height = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_block_block_info_BlockInfo_set_epoch < > (obj : * mut dpp_block_block_info_BlockInfo , value : * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_Epoch) { (* obj) . epoch = value ; } } } # [cfg (feature = "state-transitions")] pub mod state_transition { use crate as ferment_example_platform ; pub mod state_transitions { use crate as ferment_example_platform ; pub mod common_fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } pub mod document { use crate as ferment_example_platform ; pub mod documents_batch_transition { use crate as ferment_example_platform ; pub mod accessors { use crate as ferment_example_platform ; } pub mod methods { use crate as ferment_example_platform ; } pub mod fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: DocumentsBatchTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { pub owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub transitions : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition , pub user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , pub signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: DocumentsBatchTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: DocumentsBatchTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: DocumentsBatchTransitionV0 { owner_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . owner_id) , transitions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . transitions) , user_fee_increase : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . user_fee_increase) , signature_public_key_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . signature_public_key_id) , signature : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . signature) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: DocumentsBatchTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: DocumentsBatchTransitionV0) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { owner_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . owner_id) , transitions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . transitions) , user_fee_increase : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . user_fee_increase) , signature_public_key_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . signature_public_key_id) , signature : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . signature) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: DocumentsBatchTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . owner_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . transitions) ; ; ferment_interfaces :: unbox_any (ffi_ref . user_fee_increase) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature_public_key_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_ctor < > (owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , transitions : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition , user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { owner_id , transitions , user_fee_increase , signature_public_key_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_get_owner_id < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_get_transitions < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { (* obj) . transitions } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_get_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_get_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_get_signature < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_set_owner_id < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . owner_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_set_transitions < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 , value : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) { (* obj) . transitions = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_set_user_fee_increase < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease) { (* obj) . user_fee_increase = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_set_signature_public_key_id < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . signature_public_key_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_set_signature < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . signature = value ; } } # [cfg (feature = "validation")] pub mod validation { use crate as ferment_example_platform ; pub mod find_duplicates_by_id { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } } } pub mod validate_basic_structure { use crate as ferment_example_platform ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: DocumentsBatchTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: DocumentsBatchTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: DocumentsBatchTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: DocumentsBatchTransition :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: DocumentsBatchTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: DocumentsBatchTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: DocumentsBatchTransition :: V0 (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: DocumentsBatchTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition) { ferment_interfaces :: unbox_any (ffi) ; } pub mod document_transition { use crate as ferment_example_platform ; pub mod document_delete_transition { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: DocumentDeleteTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { pub base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: DocumentDeleteTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: DocumentDeleteTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: DocumentDeleteTransitionV0 { base : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . base) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: DocumentDeleteTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: DocumentDeleteTransitionV0) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { base : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . base) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: DocumentDeleteTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . base) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0_ctor < > (base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { base }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0_get_base < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0) -> * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0_set_base < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition) { (* obj) . base = value ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: DocumentDeleteTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: DocumentDeleteTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: DocumentDeleteTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: DocumentDeleteTransition :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: DocumentDeleteTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: DocumentDeleteTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: DocumentDeleteTransition :: V0 (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: DocumentDeleteTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod document_replace_transition { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: DocumentReplaceTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { pub base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub data : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: DocumentReplaceTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: DocumentReplaceTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: DocumentReplaceTransitionV0 { base : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . base) , revision : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . revision) , data : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: DocumentReplaceTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: DocumentReplaceTransitionV0) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { base : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . base) , revision : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . revision) , data : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: DocumentReplaceTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . base) ; ; ferment_interfaces :: unbox_any (ffi_ref . revision) ; ; ferment_interfaces :: unbox_any (ffi_ref . data) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_ctor < > (base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , data : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { base , revision , data }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_get_base < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) -> * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_get_revision < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_get_data < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value { (* obj) . data } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_set_base < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition) { (* obj) . base = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_set_revision < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . revision = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_set_data < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value) { (* obj) . data = value ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: DocumentReplaceTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: DocumentReplaceTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: DocumentReplaceTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: DocumentReplaceTransition :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: DocumentReplaceTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: DocumentReplaceTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: DocumentReplaceTransition :: V0 (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: DocumentReplaceTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod document_transfer_transition { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: DocumentTransferTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: DocumentTransferTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: DocumentTransferTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: DocumentTransferTransition :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: DocumentTransferTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: DocumentTransferTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: DocumentTransferTransition :: V0 (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: DocumentTransferTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition) { ferment_interfaces :: unbox_any (ffi) ; } pub mod v0 { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: v0 :: DocumentTransferTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 { pub base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub recipient_owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: v0 :: DocumentTransferTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: v0 :: DocumentTransferTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: v0 :: DocumentTransferTransitionV0 { base : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . base) , revision : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . revision) , recipient_owner_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . recipient_owner_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: v0 :: DocumentTransferTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: v0 :: DocumentTransferTransitionV0) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 { base : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . base) , revision : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . revision) , recipient_owner_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . recipient_owner_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: v0 :: DocumentTransferTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . base) ; ; ferment_interfaces :: unbox_any (ffi_ref . revision) ; ; ferment_interfaces :: unbox_any (ffi_ref . recipient_owner_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0_ctor < > (base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , recipient_owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 { base , revision , recipient_owner_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0_get_base < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0) -> * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0_get_revision < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0_get_recipient_owner_id < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . recipient_owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0_set_base < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition) { (* obj) . base = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0_set_revision < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . revision = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0_set_recipient_owner_id < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . recipient_owner_id = value ; } } } pub mod document_create_transition { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: DocumentCreateTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: DocumentCreateTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: DocumentCreateTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: DocumentCreateTransition :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: DocumentCreateTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: DocumentCreateTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: DocumentCreateTransition :: V0 (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: DocumentCreateTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition) { ferment_interfaces :: unbox_any (ffi) ; } pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: DocumentCreateTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { pub base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , pub entropy : * mut crate :: fermented :: generics :: Arr_u8_32 , pub data : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value , pub prefunded_voting_balance : * mut crate :: fermented :: generics :: Tuple_String_dpp_balances_credits_Credits } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: DocumentCreateTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: DocumentCreateTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: DocumentCreateTransitionV0 { base : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . base) , entropy : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . entropy) , data : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data) , prefunded_voting_balance : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . prefunded_voting_balance) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: DocumentCreateTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: DocumentCreateTransitionV0) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { base : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . base) , entropy : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . entropy) , data : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data) , prefunded_voting_balance : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . prefunded_voting_balance) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: DocumentCreateTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . base) ; ; ferment_interfaces :: unbox_any (ffi_ref . entropy) ; ferment_interfaces :: unbox_any (ffi_ref . data) ; ; ferment_interfaces :: unbox_any_opt (ffi_ref . prefunded_voting_balance) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_ctor < > (base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , entropy : * mut crate :: fermented :: generics :: Arr_u8_32 , data : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value , prefunded_voting_balance : * mut crate :: fermented :: generics :: Tuple_String_dpp_balances_credits_Credits) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { base , entropy , data , prefunded_voting_balance }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_get_base < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_get_entropy < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . entropy } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_get_data < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value { (* obj) . data } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_get_prefunded_voting_balance < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> * mut crate :: fermented :: generics :: Tuple_String_dpp_balances_credits_Credits { (* obj) . prefunded_voting_balance } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_set_base < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition) { (* obj) . base = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_set_entropy < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 , value : * mut crate :: fermented :: generics :: Arr_u8_32) { (* obj) . entropy = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_set_data < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value) { (* obj) . data = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_set_prefunded_voting_balance < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 , value : * mut crate :: fermented :: generics :: Tuple_String_dpp_balances_credits_Credits) { (* obj) . prefunded_voting_balance = value ; } pub mod property_names { use crate as ferment_example_platform ; } # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } } } pub mod document_purchase_transition { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: v0 :: DocumentPurchaseTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 { pub base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub price : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: v0 :: DocumentPurchaseTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: v0 :: DocumentPurchaseTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: v0 :: DocumentPurchaseTransitionV0 { base : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . base) , revision : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . revision) , price : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . price) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: v0 :: DocumentPurchaseTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: v0 :: DocumentPurchaseTransitionV0) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 { base : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . base) , revision : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . revision) , price : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . price) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: v0 :: DocumentPurchaseTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . base) ; ; ferment_interfaces :: unbox_any (ffi_ref . revision) ; ; ferment_interfaces :: unbox_any (ffi_ref . price) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0_ctor < > (base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , price : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 { base , revision , price }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0_get_base < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0) -> * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0_get_revision < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0_get_price < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . price } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0_set_base < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition) { (* obj) . base = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0_set_revision < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . revision = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0_set_price < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) { (* obj) . price = value ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: DocumentPurchaseTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: DocumentPurchaseTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: DocumentPurchaseTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: DocumentPurchaseTransition :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: DocumentPurchaseTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: DocumentPurchaseTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: DocumentPurchaseTransition :: V0 (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: DocumentPurchaseTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod document_update_price_transition { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: v0 :: DocumentUpdatePriceTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 { pub base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub price : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: v0 :: DocumentUpdatePriceTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: v0 :: DocumentUpdatePriceTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: v0 :: DocumentUpdatePriceTransitionV0 { base : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . base) , revision : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . revision) , price : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . price) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: v0 :: DocumentUpdatePriceTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: v0 :: DocumentUpdatePriceTransitionV0) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 { base : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . base) , revision : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . revision) , price : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . price) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: v0 :: DocumentUpdatePriceTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . base) ; ; ferment_interfaces :: unbox_any (ffi_ref . revision) ; ; ferment_interfaces :: unbox_any (ffi_ref . price) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0_ctor < > (base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , price : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 { base , revision , price }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0_get_base < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0) -> * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0_get_revision < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0_get_price < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . price } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0_set_base < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition) { (* obj) . base = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0_set_revision < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . revision = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0_set_price < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) { (* obj) . price = value ; } pub mod property_names { use crate as ferment_example_platform ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: DocumentUpdatePriceTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: DocumentUpdatePriceTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: DocumentUpdatePriceTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: DocumentUpdatePriceTransition :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: DocumentUpdatePriceTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: DocumentUpdatePriceTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: DocumentUpdatePriceTransition :: V0 (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: DocumentUpdatePriceTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition) { ferment_interfaces :: unbox_any (ffi) ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { Create (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition) , Replace (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition) , Delete (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition) , Transfer (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition) , UpdatePrice (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition) , Purchase (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition) } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Create (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Create (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Replace (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Replace (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Delete (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Delete (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Transfer (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Transfer (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: UpdatePrice (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: UpdatePrice (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Purchase (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Purchase (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Create (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Create (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Replace (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Replace (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Delete (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Delete (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Transfer (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Transfer (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: UpdatePrice (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: UpdatePrice (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Purchase (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Purchase (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Create (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Replace (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Delete (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Transfer (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: UpdatePrice (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Purchase (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_Create_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Create (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_Replace_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Replace (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_Delete_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Delete (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_Transfer_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Transfer (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_UpdatePrice_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: UpdatePrice (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_Purchase_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Purchase (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) { ferment_interfaces :: unbox_any (ffi) ; } pub mod document_base_transition { use crate as ferment_example_platform ; pub mod fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: DocumentBaseTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub identity_contract_nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , pub document_type_name : * mut std :: os :: raw :: c_char , pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: DocumentBaseTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: DocumentBaseTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: DocumentBaseTransitionV0 { id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . id) , identity_contract_nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_contract_nonce) , document_type_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type_name) , data_contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: DocumentBaseTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: DocumentBaseTransitionV0) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . id) , identity_contract_nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_contract_nonce) , document_type_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type_name) , data_contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: DocumentBaseTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_contract_nonce) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type_name) ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_ctor < > (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , identity_contract_nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , document_type_name : * mut std :: os :: raw :: c_char , data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { id , identity_contract_nonce , document_type_name , data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_get_id < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_get_identity_contract_nonce < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . identity_contract_nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_get_document_type_name < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_get_data_contract_id < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_set_id < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_set_identity_contract_nonce < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce) { (* obj) . identity_contract_nonce = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_set_document_type_name < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_set_data_contract_id < > (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition :: V0 (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition) { ferment_interfaces :: unbox_any (ffi) ; } } } } } pub mod identity { use crate as ferment_example_platform ; pub mod common_fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } pub mod identity_create_transition { use crate as ferment_example_platform ; pub mod accessors { use crate as ferment_example_platform ; } pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: IdentityCreateTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { pub public_keys : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation , pub asset_lock_proof : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof , pub user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: IdentityCreateTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: IdentityCreateTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: IdentityCreateTransitionV0 { public_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . public_keys) , asset_lock_proof : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . asset_lock_proof) , user_fee_increase : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . user_fee_increase) , signature : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . signature) , identity_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: IdentityCreateTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: IdentityCreateTransitionV0) -> * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { public_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . public_keys) , asset_lock_proof : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . asset_lock_proof) , user_fee_increase : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . user_fee_increase) , signature : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . signature) , identity_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: IdentityCreateTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . asset_lock_proof) ; ; ferment_interfaces :: unbox_any (ffi_ref . user_fee_increase) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_ctor < > (public_keys : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation , asset_lock_proof : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof , user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { public_keys , asset_lock_proof , user_fee_increase , signature , identity_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_get_public_keys < > (obj : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { (* obj) . public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_get_asset_lock_proof < > (obj : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof { (* obj) . asset_lock_proof } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_get_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_get_signature < > (obj : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_get_identity_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_set_public_keys < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 , value : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) { (* obj) . public_keys = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_set_asset_lock_proof < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof) { (* obj) . asset_lock_proof = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_set_user_fee_increase < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease) { (* obj) . user_fee_increase = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_set_signature < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . signature = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_set_identity_id < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } } pub mod methods { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: IdentityCreateTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: IdentityCreateTransition > for dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition) -> dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: IdentityCreateTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: IdentityCreateTransition :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: IdentityCreateTransition > for dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: IdentityCreateTransition) -> * const dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: IdentityCreateTransition :: V0 (o_0) => dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: IdentityCreateTransition > for dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod masternode_vote_transition { use crate as ferment_example_platform ; pub mod accessors { use crate as ferment_example_platform ; } pub mod methods { use crate as ferment_example_platform ; } pub mod v0 { use crate as ferment_example_platform ; # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: v0 :: MasternodeVoteTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 { pub pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub voter_identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub vote : * mut crate :: fermented :: types :: dpp :: voting :: votes :: dpp_voting_votes_Vote , pub nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , pub signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: v0 :: MasternodeVoteTransitionV0 > for dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: v0 :: MasternodeVoteTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: v0 :: MasternodeVoteTransitionV0 { pro_tx_hash : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . pro_tx_hash) , voter_identity_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . voter_identity_id) , vote : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . vote) , nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . nonce) , signature_public_key_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . signature_public_key_id) , signature : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . signature) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: v0 :: MasternodeVoteTransitionV0 > for dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: v0 :: MasternodeVoteTransitionV0) -> * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 { pro_tx_hash : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . pro_tx_hash) , voter_identity_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . voter_identity_id) , vote : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . vote) , nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . nonce) , signature_public_key_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . signature_public_key_id) , signature : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . signature) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: v0 :: MasternodeVoteTransitionV0 > for dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . pro_tx_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . voter_identity_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . vote) ; ; ferment_interfaces :: unbox_any (ffi_ref . nonce) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature_public_key_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_ctor < > (pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , voter_identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , vote : * mut crate :: fermented :: types :: dpp :: voting :: votes :: dpp_voting_votes_Vote , nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 { pro_tx_hash , voter_identity_id , vote , nonce , signature_public_key_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_get_pro_tx_hash < > (obj : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_get_voter_identity_id < > (obj : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . voter_identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_get_vote < > (obj : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> * mut crate :: fermented :: types :: dpp :: voting :: votes :: dpp_voting_votes_Vote { (* obj) . vote } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_get_nonce < > (obj : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_get_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_get_signature < > (obj : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_set_pro_tx_hash < > (obj : * mut dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . pro_tx_hash = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_set_voter_identity_id < > (obj : * mut dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . voter_identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_set_vote < > (obj : * mut dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: voting :: votes :: dpp_voting_votes_Vote) { (* obj) . vote = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_set_nonce < > (obj : * mut dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce) { (* obj) . nonce = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_set_signature_public_key_id < > (obj : * mut dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . signature_public_key_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_set_signature < > (obj : * mut dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . signature = value ; } } pub mod fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: MasternodeVoteTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: v0 :: dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: MasternodeVoteTransition > for dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition) -> dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: MasternodeVoteTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: MasternodeVoteTransition :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: MasternodeVoteTransition > for dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: MasternodeVoteTransition) -> * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: MasternodeVoteTransition :: V0 (o_0) => dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: MasternodeVoteTransition > for dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: v0 :: dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> * mut dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod identity_credit_withdrawal_transition { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition > for dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition) -> dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition > for dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition) -> * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition :: V0 (o_0) => dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition > for dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition) { ferment_interfaces :: unbox_any (ffi) ; } pub mod v0 { use crate as ferment_example_platform ; # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: IdentityCreditWithdrawalTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub amount : u64 , pub core_fee_per_byte : u32 , pub pooling : * mut crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling , pub output_script : * mut ferment_example_platform :: custom :: dpp :: CoreScriptFFI , pub nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , pub user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , pub signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: IdentityCreditWithdrawalTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: IdentityCreditWithdrawalTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: IdentityCreditWithdrawalTransitionV0 { identity_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_id) , amount : ffi_ref . amount , core_fee_per_byte : ffi_ref . core_fee_per_byte , pooling : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . pooling) , output_script : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . output_script) , nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . nonce) , user_fee_increase : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . user_fee_increase) , signature_public_key_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . signature_public_key_id) , signature : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . signature) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: IdentityCreditWithdrawalTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: IdentityCreditWithdrawalTransitionV0) -> * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { identity_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_id) , amount : obj . amount , core_fee_per_byte : obj . core_fee_per_byte , pooling : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . pooling) , output_script : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . output_script) , nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . nonce) , user_fee_increase : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . user_fee_increase) , signature_public_key_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . signature_public_key_id) , signature : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . signature) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: IdentityCreditWithdrawalTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; ; ; ferment_interfaces :: unbox_any (ffi_ref . pooling) ; ; ferment_interfaces :: unbox_any (ffi_ref . output_script) ; ; ferment_interfaces :: unbox_any (ffi_ref . nonce) ; ; ferment_interfaces :: unbox_any (ffi_ref . user_fee_increase) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature_public_key_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_ctor < > (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , amount : u64 , core_fee_per_byte : u32 , pooling : * mut crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling , output_script : * mut ferment_example_platform :: custom :: dpp :: CoreScriptFFI , nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { identity_id , amount , core_fee_per_byte , pooling , output_script , nonce , user_fee_increase , signature_public_key_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_identity_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_amount < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> u64 { (* obj) . amount } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_core_fee_per_byte < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> u32 { (* obj) . core_fee_per_byte } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_pooling < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling { (* obj) . pooling } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_output_script < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut ferment_example_platform :: custom :: dpp :: CoreScriptFFI { (* obj) . output_script } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_nonce < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_signature < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_identity_id < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_amount < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 , value : u64) { (* obj) . amount = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_core_fee_per_byte < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 , value : u32) { (* obj) . core_fee_per_byte = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_pooling < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling) { (* obj) . pooling = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_output_script < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 , value : * mut ferment_example_platform :: custom :: dpp :: CoreScriptFFI) { (* obj) . output_script = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_nonce < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce) { (* obj) . nonce = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_user_fee_increase < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease) { (* obj) . user_fee_increase = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_signature_public_key_id < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . signature_public_key_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_signature < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . signature = value ; } } pub mod accessors { use crate as ferment_example_platform ; } pub mod methods { use crate as ferment_example_platform ; } } pub mod identity_topup_transition { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: IdentityTopUpTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { pub asset_lock_proof : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof , pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: IdentityTopUpTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) -> dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: IdentityTopUpTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: IdentityTopUpTransitionV0 { asset_lock_proof : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . asset_lock_proof) , identity_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_id) , user_fee_increase : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . user_fee_increase) , signature : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . signature) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: IdentityTopUpTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: IdentityTopUpTransitionV0) -> * const dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { asset_lock_proof : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . asset_lock_proof) , identity_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_id) , user_fee_increase : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . user_fee_increase) , signature : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . signature) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: IdentityTopUpTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . asset_lock_proof) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . user_fee_increase) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_ctor < > (asset_lock_proof : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof , identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { asset_lock_proof , identity_id , user_fee_increase , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_get_asset_lock_proof < > (obj : * const dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof { (* obj) . asset_lock_proof } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_get_identity_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_get_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_get_signature < > (obj : * const dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_set_asset_lock_proof < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof) { (* obj) . asset_lock_proof = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_set_identity_id < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_set_user_fee_increase < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease) { (* obj) . user_fee_increase = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_set_signature < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . signature = value ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: IdentityTopUpTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: IdentityTopUpTransition > for dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition) -> dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: IdentityTopUpTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: IdentityTopUpTransition :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: IdentityTopUpTransition > for dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: IdentityTopUpTransition) -> * const dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: IdentityTopUpTransition :: V0 (o_0) => dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: IdentityTopUpTransition > for dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) -> * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition) { ferment_interfaces :: unbox_any (ffi) ; } pub mod methods { use crate as ferment_example_platform ; } pub mod accessors { use crate as ferment_example_platform ; } } pub mod public_key_in_creation { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: IdentityPublicKeyInCreationV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { pub id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType , pub purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , pub security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub contract_bounds : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds , pub read_only : bool , pub data : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: IdentityPublicKeyInCreationV0 > for dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: IdentityPublicKeyInCreationV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: IdentityPublicKeyInCreationV0 { id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . id) , key_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . key_type) , purpose : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . purpose) , security_level : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . security_level) , contract_bounds : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . contract_bounds) , read_only : ffi_ref . read_only , data : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data) , signature : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . signature) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: IdentityPublicKeyInCreationV0 > for dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: IdentityPublicKeyInCreationV0) -> * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . id) , key_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . key_type) , purpose : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . purpose) , security_level : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . security_level) , contract_bounds : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . contract_bounds) , read_only : obj . read_only , data : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data) , signature : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . signature) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: IdentityPublicKeyInCreationV0 > for dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; ferment_interfaces :: unbox_any (ffi_ref . key_type) ; ; ferment_interfaces :: unbox_any (ffi_ref . purpose) ; ; ferment_interfaces :: unbox_any (ffi_ref . security_level) ; ; ferment_interfaces :: unbox_any_opt (ffi_ref . contract_bounds) ; ; ferment_interfaces :: unbox_any (ffi_ref . data) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_ctor < > (id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType , purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , contract_bounds : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds , read_only : bool , data : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { id , key_type , purpose , security_level , contract_bounds , read_only , data , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_id < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_key_type < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType { (* obj) . key_type } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_purpose < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . purpose } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_security_level < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . security_level } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_contract_bounds < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds { (* obj) . contract_bounds } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_read_only < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> bool { (* obj) . read_only } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_data < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . data } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_signature < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_id < > (obj : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_key_type < > (obj : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType) { (* obj) . key_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_purpose < > (obj : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) { (* obj) . purpose = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_security_level < > (obj : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . security_level = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_contract_bounds < > (obj : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds) { (* obj) . contract_bounds = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_read_only < > (obj : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 , value : bool) { (* obj) . read_only = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_data < > (obj : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . data = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_signature < > (obj : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . signature = value ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > for dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) -> dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation :: V0 (o_0) => dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > for dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation) -> * const dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation :: V0 (o_0) => dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > for dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) { ferment_interfaces :: unbox_any (ffi) ; } pub mod methods { use crate as ferment_example_platform ; pub mod hash { use crate as ferment_example_platform ; } pub mod duplicated_key_ids_witness { use crate as ferment_example_platform ; } pub mod duplicated_keys_witness { use crate as ferment_example_platform ; } # [cfg (feature = "state-transition-signing")] pub mod from_public_key_signed_with_private_key { use crate as ferment_example_platform ; } pub mod validate_identity_public_keys_structure { use crate as ferment_example_platform ; } # [cfg (feature = "state-transition-signing")] pub mod from_public_key_signed_external { use crate as ferment_example_platform ; } } } pub mod identity_update_transition { use crate as ferment_example_platform ; pub mod fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } pub mod accessors { use crate as ferment_example_platform ; } pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: IdentityUpdateTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , pub add_public_keys : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation , pub disable_public_keys : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID , pub user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , pub signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: IdentityUpdateTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: IdentityUpdateTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: IdentityUpdateTransitionV0 { identity_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_id) , revision : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . revision) , nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . nonce) , add_public_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_public_keys) , disable_public_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . disable_public_keys) , user_fee_increase : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . user_fee_increase) , signature_public_key_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . signature_public_key_id) , signature : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . signature) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: IdentityUpdateTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: IdentityUpdateTransitionV0) -> * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { identity_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_id) , revision : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . revision) , nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . nonce) , add_public_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_public_keys) , disable_public_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . disable_public_keys) , user_fee_increase : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . user_fee_increase) , signature_public_key_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . signature_public_key_id) , signature : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . signature) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: IdentityUpdateTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . revision) ; ; ferment_interfaces :: unbox_any (ffi_ref . nonce) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_public_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . disable_public_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . user_fee_increase) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature_public_key_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_ctor < > (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , add_public_keys : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation , disable_public_keys : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID , user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { identity_id , revision , nonce , add_public_keys , disable_public_keys , user_fee_increase , signature_public_key_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_identity_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_revision < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_nonce < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_add_public_keys < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { (* obj) . add_public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_disable_public_keys < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . disable_public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_signature < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_identity_id < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_revision < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . revision = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_nonce < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce) { (* obj) . nonce = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_add_public_keys < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 , value : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) { (* obj) . add_public_keys = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_disable_public_keys < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 , value : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) { (* obj) . disable_public_keys = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_user_fee_increase < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease) { (* obj) . user_fee_increase = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_signature_public_key_id < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . signature_public_key_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_signature < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . signature = value ; } # [cfg (feature = "state-transition-json-conversion")] pub mod json_conversion { use crate as ferment_example_platform ; # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } } } pub mod methods { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: IdentityUpdateTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: IdentityUpdateTransition > for dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition) -> dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: IdentityUpdateTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: IdentityUpdateTransition :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: IdentityUpdateTransition > for dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: IdentityUpdateTransition) -> * const dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: IdentityUpdateTransition :: V0 (o_0) => dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: IdentityUpdateTransition > for dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod identity_credit_transfer_transition { use crate as ferment_example_platform ; pub mod fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } pub mod methods { use crate as ferment_example_platform ; } pub mod accessors { use crate as ferment_example_platform ; } pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: IdentityCreditTransferTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub recipient_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub amount : u64 , pub nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , pub user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , pub signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: IdentityCreditTransferTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: IdentityCreditTransferTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: IdentityCreditTransferTransitionV0 { identity_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_id) , recipient_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . recipient_id) , amount : ffi_ref . amount , nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . nonce) , user_fee_increase : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . user_fee_increase) , signature_public_key_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . signature_public_key_id) , signature : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . signature) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: IdentityCreditTransferTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: IdentityCreditTransferTransitionV0) -> * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { identity_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_id) , recipient_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . recipient_id) , amount : obj . amount , nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . nonce) , user_fee_increase : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . user_fee_increase) , signature_public_key_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . signature_public_key_id) , signature : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . signature) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: IdentityCreditTransferTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . recipient_id) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . nonce) ; ; ferment_interfaces :: unbox_any (ffi_ref . user_fee_increase) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature_public_key_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_ctor < > (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , recipient_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , amount : u64 , nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { identity_id , recipient_id , amount , nonce , user_fee_increase , signature_public_key_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_get_identity_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_get_recipient_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . recipient_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_get_amount < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> u64 { (* obj) . amount } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_get_nonce < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_get_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_get_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_get_signature < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_set_identity_id < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_set_recipient_id < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . recipient_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_set_amount < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 , value : u64) { (* obj) . amount = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_set_nonce < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce) { (* obj) . nonce = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_set_user_fee_increase < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease) { (* obj) . user_fee_increase = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_set_signature_public_key_id < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . signature_public_key_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_set_signature < > (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . signature = value ; } # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: IdentityCreditTransferTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: IdentityCreditTransferTransition > for dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition) -> dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: IdentityCreditTransferTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: IdentityCreditTransferTransition :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: IdentityCreditTransferTransition > for dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: IdentityCreditTransferTransition) -> * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: IdentityCreditTransferTransition :: V0 (o_0) => dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: IdentityCreditTransferTransition > for dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition) { ferment_interfaces :: unbox_any (ffi) ; } } } pub mod contract { use crate as ferment_example_platform ; pub mod common_fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } pub mod data_contract_create_transition { use crate as ferment_example_platform ; pub mod accessors { use crate as ferment_example_platform ; } # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } # [cfg (feature = "state-transition-json-conversion")] pub mod json_conversion { use crate as ferment_example_platform ; # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition > for dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition) -> dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition > for dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition) -> * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition :: V0 (o_0) => dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition > for dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition) { ferment_interfaces :: unbox_any (ffi) ; } pub mod methods { use crate as ferment_example_platform ; } pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: DataContractCreateTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { pub data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat , pub identity_nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , pub user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , pub signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: DataContractCreateTransitionV0 > for dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: DataContractCreateTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: DataContractCreateTransitionV0 { data_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract) , identity_nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_nonce) , user_fee_increase : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . user_fee_increase) , signature_public_key_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . signature_public_key_id) , signature : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . signature) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: DataContractCreateTransitionV0 > for dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: DataContractCreateTransitionV0) -> * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { data_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract) , identity_nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_nonce) , user_fee_increase : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . user_fee_increase) , signature_public_key_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . signature_public_key_id) , signature : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . signature) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: DataContractCreateTransitionV0 > for dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_nonce) ; ; ferment_interfaces :: unbox_any (ffi_ref . user_fee_increase) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature_public_key_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_ctor < > (data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat , identity_nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { data_contract , identity_nonce , user_fee_increase , signature_public_key_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_get_data_contract < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat { (* obj) . data_contract } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_get_identity_nonce < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . identity_nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_get_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_get_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_get_signature < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_set_data_contract < > (obj : * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat) { (* obj) . data_contract = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_set_identity_nonce < > (obj : * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce) { (* obj) . identity_nonce = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_set_user_fee_increase < > (obj : * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease) { (* obj) . user_fee_increase = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_set_signature_public_key_id < > (obj : * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . signature_public_key_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_set_signature < > (obj : * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . signature = value ; } } } pub mod data_contract_update_transition { use crate as ferment_example_platform ; pub mod methods { use crate as ferment_example_platform ; } pub mod accessors { use crate as ferment_example_platform ; } # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: DataContractUpdateTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: DataContractUpdateTransition > for dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition) -> dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: DataContractUpdateTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: DataContractUpdateTransition :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: DataContractUpdateTransition > for dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: DataContractUpdateTransition) -> * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: DataContractUpdateTransition :: V0 (o_0) => dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: DataContractUpdateTransition > for dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition) { ferment_interfaces :: unbox_any (ffi) ; } pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: DataContractUpdateTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { pub identity_contract_nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , pub data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat , pub user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , pub signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: DataContractUpdateTransitionV0 > for dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: DataContractUpdateTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: DataContractUpdateTransitionV0 { identity_contract_nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_contract_nonce) , data_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract) , user_fee_increase : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . user_fee_increase) , signature_public_key_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . signature_public_key_id) , signature : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . signature) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: DataContractUpdateTransitionV0 > for dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: DataContractUpdateTransitionV0) -> * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { identity_contract_nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_contract_nonce) , data_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract) , user_fee_increase : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . user_fee_increase) , signature_public_key_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . signature_public_key_id) , signature : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . signature) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: DataContractUpdateTransitionV0 > for dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_contract_nonce) ; ; ferment_interfaces :: unbox_any (ffi_ref . data_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . user_fee_increase) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature_public_key_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_ctor < > (identity_contract_nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat , user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { identity_contract_nonce , data_contract , user_fee_increase , signature_public_key_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_get_identity_contract_nonce < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . identity_contract_nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_get_data_contract < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat { (* obj) . data_contract } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_get_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_get_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_get_signature < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_set_identity_contract_nonce < > (obj : * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce) { (* obj) . identity_contract_nonce = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_set_data_contract < > (obj : * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat) { (* obj) . data_contract = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_set_user_fee_increase < > (obj : * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease) { (* obj) . user_fee_increase = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_set_signature_public_key_id < > (obj : * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . signature_public_key_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_set_signature < > (obj : * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . signature = value ; } } } } } pub mod abstract_state_transition { use crate as ferment_example_platform ; pub mod state_transition_helpers { use crate as ferment_example_platform ; } } pub mod state_transition_types { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: state_transition_types :: StateTransitionType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transition_types_StateTransitionType { DataContractCreate = 0 , DocumentsBatch = 1 , IdentityCreate = 2 , IdentityTopUp = 3 , DataContractUpdate = 4 , IdentityUpdate = 5 , IdentityCreditWithdrawal = 6 , IdentityCreditTransfer = 7 , MasternodeVote = 8 } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: state_transition_types :: StateTransitionType > for dpp_state_transition_state_transition_types_StateTransitionType { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transition_types_StateTransitionType) -> dpp :: state_transition :: state_transition_types :: StateTransitionType { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transition_types_StateTransitionType :: DataContractCreate => dpp :: state_transition :: state_transition_types :: StateTransitionType :: DataContractCreate , dpp_state_transition_state_transition_types_StateTransitionType :: DocumentsBatch => dpp :: state_transition :: state_transition_types :: StateTransitionType :: DocumentsBatch , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreate => dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityCreate , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityTopUp => dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityTopUp , dpp_state_transition_state_transition_types_StateTransitionType :: DataContractUpdate => dpp :: state_transition :: state_transition_types :: StateTransitionType :: DataContractUpdate , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityUpdate => dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityUpdate , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditWithdrawal => dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityCreditWithdrawal , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditTransfer => dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityCreditTransfer , dpp_state_transition_state_transition_types_StateTransitionType :: MasternodeVote => dpp :: state_transition :: state_transition_types :: StateTransitionType :: MasternodeVote } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: state_transition_types :: StateTransitionType > for dpp_state_transition_state_transition_types_StateTransitionType { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transition_types :: StateTransitionType) -> * const dpp_state_transition_state_transition_types_StateTransitionType { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transition_types :: StateTransitionType :: DataContractCreate => dpp_state_transition_state_transition_types_StateTransitionType :: DataContractCreate , dpp :: state_transition :: state_transition_types :: StateTransitionType :: DocumentsBatch => dpp_state_transition_state_transition_types_StateTransitionType :: DocumentsBatch , dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityCreate => dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreate , dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityTopUp => dpp_state_transition_state_transition_types_StateTransitionType :: IdentityTopUp , dpp :: state_transition :: state_transition_types :: StateTransitionType :: DataContractUpdate => dpp_state_transition_state_transition_types_StateTransitionType :: DataContractUpdate , dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityUpdate => dpp_state_transition_state_transition_types_StateTransitionType :: IdentityUpdate , dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityCreditWithdrawal => dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditWithdrawal , dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityCreditTransfer => dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditTransfer , dpp :: state_transition :: state_transition_types :: StateTransitionType :: MasternodeVote => dpp_state_transition_state_transition_types_StateTransitionType :: MasternodeVote , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: state_transition_types :: StateTransitionType > for dpp_state_transition_state_transition_types_StateTransitionType { unsafe fn destroy (ffi : * mut dpp_state_transition_state_transition_types_StateTransitionType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transition_types_StateTransitionType { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transition_types_StateTransitionType :: DataContractCreate => { } , dpp_state_transition_state_transition_types_StateTransitionType :: DocumentsBatch => { } , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreate => { } , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityTopUp => { } , dpp_state_transition_state_transition_types_StateTransitionType :: DataContractUpdate => { } , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityUpdate => { } , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditWithdrawal => { } , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditTransfer => { } , dpp_state_transition_state_transition_types_StateTransitionType :: MasternodeVote => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_DataContractCreate_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment_interfaces :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: DataContractCreate { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_DocumentsBatch_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment_interfaces :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: DocumentsBatch { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_IdentityCreate_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment_interfaces :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreate { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_IdentityTopUp_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment_interfaces :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: IdentityTopUp { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_DataContractUpdate_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment_interfaces :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: DataContractUpdate { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_IdentityUpdate_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment_interfaces :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: IdentityUpdate { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_IdentityCreditWithdrawal_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment_interfaces :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditWithdrawal { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_IdentityCreditTransfer_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment_interfaces :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditTransfer { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_MasternodeVote_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment_interfaces :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: MasternodeVote { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_destroy < > (ffi : * mut dpp_state_transition_state_transition_types_StateTransitionType) { ferment_interfaces :: unbox_any (ffi) ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: StateTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_StateTransition { DataContractCreate (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition) , DataContractUpdate (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition) , DocumentsBatch (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition) , IdentityCreate (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition) , IdentityTopUp (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition) , IdentityCreditWithdrawal (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition) , IdentityUpdate (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition) , IdentityCreditTransfer (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition) , MasternodeVote (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition) } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: StateTransition > for dpp_state_transition_StateTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_StateTransition) -> dpp :: state_transition :: StateTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_StateTransition :: DataContractCreate (o_0) => dpp :: state_transition :: StateTransition :: DataContractCreate (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: DataContractUpdate (o_0) => dpp :: state_transition :: StateTransition :: DataContractUpdate (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: DocumentsBatch (o_0) => dpp :: state_transition :: StateTransition :: DocumentsBatch (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: IdentityCreate (o_0) => dpp :: state_transition :: StateTransition :: IdentityCreate (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: IdentityTopUp (o_0) => dpp :: state_transition :: StateTransition :: IdentityTopUp (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: IdentityCreditWithdrawal (o_0) => dpp :: state_transition :: StateTransition :: IdentityCreditWithdrawal (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: IdentityUpdate (o_0) => dpp :: state_transition :: StateTransition :: IdentityUpdate (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: IdentityCreditTransfer (o_0) => dpp :: state_transition :: StateTransition :: IdentityCreditTransfer (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: MasternodeVote (o_0) => dpp :: state_transition :: StateTransition :: MasternodeVote (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: StateTransition > for dpp_state_transition_StateTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: StateTransition) -> * const dpp_state_transition_StateTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: StateTransition :: DataContractCreate (o_0) => dpp_state_transition_StateTransition :: DataContractCreate (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: DataContractUpdate (o_0) => dpp_state_transition_StateTransition :: DataContractUpdate (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: DocumentsBatch (o_0) => dpp_state_transition_StateTransition :: DocumentsBatch (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: IdentityCreate (o_0) => dpp_state_transition_StateTransition :: IdentityCreate (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: IdentityTopUp (o_0) => dpp_state_transition_StateTransition :: IdentityTopUp (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: IdentityCreditWithdrawal (o_0) => dpp_state_transition_StateTransition :: IdentityCreditWithdrawal (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: IdentityUpdate (o_0) => dpp_state_transition_StateTransition :: IdentityUpdate (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: IdentityCreditTransfer (o_0) => dpp_state_transition_StateTransition :: IdentityCreditTransfer (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: MasternodeVote (o_0) => dpp_state_transition_StateTransition :: MasternodeVote (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: StateTransition > for dpp_state_transition_StateTransition { unsafe fn destroy (ffi : * mut dpp_state_transition_StateTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_StateTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_StateTransition :: DataContractCreate (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_state_transition_StateTransition :: DataContractUpdate (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_state_transition_StateTransition :: DocumentsBatch (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_state_transition_StateTransition :: IdentityCreate (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_state_transition_StateTransition :: IdentityTopUp (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_state_transition_StateTransition :: IdentityCreditWithdrawal (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_state_transition_StateTransition :: IdentityUpdate (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_state_transition_StateTransition :: IdentityCreditTransfer (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_state_transition_StateTransition :: MasternodeVote (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_DataContractCreate_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition) -> * mut dpp_state_transition_StateTransition { ferment_interfaces :: boxed (dpp_state_transition_StateTransition :: DataContractCreate (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_DataContractUpdate_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition) -> * mut dpp_state_transition_StateTransition { ferment_interfaces :: boxed (dpp_state_transition_StateTransition :: DataContractUpdate (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_DocumentsBatch_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition) -> * mut dpp_state_transition_StateTransition { ferment_interfaces :: boxed (dpp_state_transition_StateTransition :: DocumentsBatch (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_IdentityCreate_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition) -> * mut dpp_state_transition_StateTransition { ferment_interfaces :: boxed (dpp_state_transition_StateTransition :: IdentityCreate (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_IdentityTopUp_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition) -> * mut dpp_state_transition_StateTransition { ferment_interfaces :: boxed (dpp_state_transition_StateTransition :: IdentityTopUp (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_IdentityCreditWithdrawal_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition) -> * mut dpp_state_transition_StateTransition { ferment_interfaces :: boxed (dpp_state_transition_StateTransition :: IdentityCreditWithdrawal (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_IdentityUpdate_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition) -> * mut dpp_state_transition_StateTransition { ferment_interfaces :: boxed (dpp_state_transition_StateTransition :: IdentityUpdate (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_IdentityCreditTransfer_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition) -> * mut dpp_state_transition_StateTransition { ferment_interfaces :: boxed (dpp_state_transition_StateTransition :: IdentityCreditTransfer (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_MasternodeVote_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition) -> * mut dpp_state_transition_StateTransition { ferment_interfaces :: boxed (dpp_state_transition_StateTransition :: MasternodeVote (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_destroy < > (ffi : * mut dpp_state_transition_StateTransition) { ferment_interfaces :: unbox_any (ffi) ; } pub mod errors { use crate as ferment_example_platform ; # [cfg (any (feature = "state-transition-validation" , feature = "state-transition-signing"))] pub mod invalid_signature_public_key_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: state_transition :: errors :: invalid_signature_public_key_error :: InvalidSignaturePublicKeyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { pub public_key : * mut crate :: fermented :: generics :: Vec_u8 } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: errors :: invalid_signature_public_key_error :: InvalidSignaturePublicKeyError > for dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError) -> dpp :: state_transition :: errors :: invalid_signature_public_key_error :: InvalidSignaturePublicKeyError { let ffi_ref = & * ffi ; dpp :: state_transition :: errors :: invalid_signature_public_key_error :: InvalidSignaturePublicKeyError { public_key : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . public_key) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: errors :: invalid_signature_public_key_error :: InvalidSignaturePublicKeyError > for dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { unsafe fn ffi_to_const (obj : dpp :: state_transition :: errors :: invalid_signature_public_key_error :: InvalidSignaturePublicKeyError) -> * const dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { ferment_interfaces :: boxed (dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { public_key : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . public_key) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: errors :: invalid_signature_public_key_error :: InvalidSignaturePublicKeyError > for dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { unsafe fn destroy (ffi : * mut dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError_ctor < > (public_key : * mut crate :: fermented :: generics :: Vec_u8) -> * mut dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { ferment_interfaces :: boxed (dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { public_key }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError_destroy < > (ffi : * mut dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError_get_public_key < > (obj : * const dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . public_key } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError_set_public_key < > (obj : * mut dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . public_key = value ; } } # [cfg (any (all (feature = "state-transitions" , feature = "validation") , feature = "state-transition-validation"))] pub mod state_transition_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: errors :: state_transition_error :: StateTransitionError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_errors_state_transition_error_StateTransitionError { InvalidStateTransitionError { errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , raw_state_transition : * mut crate :: fermented :: types :: platform_value :: platform_value_Value } } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: errors :: state_transition_error :: StateTransitionError > for dpp_state_transition_errors_state_transition_error_StateTransitionError { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_errors_state_transition_error_StateTransitionError) -> dpp :: state_transition :: errors :: state_transition_error :: StateTransitionError { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_errors_state_transition_error_StateTransitionError :: InvalidStateTransitionError { errors , raw_state_transition } => dpp :: state_transition :: errors :: state_transition_error :: StateTransitionError :: InvalidStateTransitionError { errors : ferment_interfaces :: FFIConversionFrom :: ffi_from (* errors) , raw_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (* raw_state_transition) } } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: errors :: state_transition_error :: StateTransitionError > for dpp_state_transition_errors_state_transition_error_StateTransitionError { unsafe fn ffi_to_const (obj : dpp :: state_transition :: errors :: state_transition_error :: StateTransitionError) -> * const dpp_state_transition_errors_state_transition_error_StateTransitionError { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: errors :: state_transition_error :: StateTransitionError :: InvalidStateTransitionError { errors , raw_state_transition } => dpp_state_transition_errors_state_transition_error_StateTransitionError :: InvalidStateTransitionError { errors : ferment_interfaces :: FFIConversionTo :: ffi_to (errors) , raw_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (raw_state_transition) } , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: errors :: state_transition_error :: StateTransitionError > for dpp_state_transition_errors_state_transition_error_StateTransitionError { unsafe fn destroy (ffi : * mut dpp_state_transition_errors_state_transition_error_StateTransitionError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_errors_state_transition_error_StateTransitionError { fn drop (& mut self) { unsafe { match self { dpp_state_transition_errors_state_transition_error_StateTransitionError :: InvalidStateTransitionError { errors , raw_state_transition } => { ferment_interfaces :: unbox_any (* errors) ; ; ; ferment_interfaces :: unbox_any (* raw_state_transition) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_state_transition_error_StateTransitionError_InvalidStateTransitionError_ctor (errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , raw_state_transition : * mut crate :: fermented :: types :: platform_value :: platform_value_Value) -> * mut dpp_state_transition_errors_state_transition_error_StateTransitionError { ferment_interfaces :: boxed (dpp_state_transition_errors_state_transition_error_StateTransitionError :: InvalidStateTransitionError { errors , raw_state_transition }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_state_transition_error_StateTransitionError_destroy < > (ffi : * mut dpp_state_transition_errors_state_transition_error_StateTransitionError) { ferment_interfaces :: unbox_any (ffi) ; } } # [cfg (feature = "state-transition-validation")] pub mod public_key_security_level_not_met_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { pub public_key_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub required_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError > for dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError { let ffi_ref = & * ffi ; dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError { public_key_security_level : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . public_key_security_level) , required_security_level : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . required_security_level) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError > for dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { unsafe fn ffi_to_const (obj : dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError) -> * const dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { ferment_interfaces :: boxed (dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { public_key_security_level : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . public_key_security_level) , required_security_level : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . required_security_level) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError > for dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { unsafe fn destroy (ffi : * mut dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_security_level) ; ; ferment_interfaces :: unbox_any (ffi_ref . required_security_level) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_ctor < > (public_key_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , required_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) -> * mut dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { ferment_interfaces :: boxed (dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { public_key_security_level , required_security_level }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_destroy < > (ffi : * mut dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_get_public_key_security_level < > (obj : * const dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . public_key_security_level } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_get_required_security_level < > (obj : * const dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . required_security_level } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_set_public_key_security_level < > (obj : * mut dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . public_key_security_level = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_set_required_security_level < > (obj : * mut dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . required_security_level = value ; } } # [cfg (any (all (feature = "state-transitions" , feature = "validation") , feature = "state-transition-validation" , feature = "state-transition-signing" , feature = "state-transition-validation"))] pub mod wrong_public_key_purpose_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: state_transition :: errors :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { pub public_key_purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , pub key_purpose_requirement : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: errors :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError > for dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> dpp :: state_transition :: errors :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError { let ffi_ref = & * ffi ; dpp :: state_transition :: errors :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError { public_key_purpose : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . public_key_purpose) , key_purpose_requirement : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . key_purpose_requirement) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: errors :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError > for dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { unsafe fn ffi_to_const (obj : dpp :: state_transition :: errors :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError) -> * const dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { ferment_interfaces :: boxed (dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { public_key_purpose : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . public_key_purpose) , key_purpose_requirement : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . key_purpose_requirement) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: errors :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError > for dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { unsafe fn destroy (ffi : * mut dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_purpose) ; ; ferment_interfaces :: unbox_any (ffi_ref . key_purpose_requirement) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_ctor < > (public_key_purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , key_purpose_requirement : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) -> * mut dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { ferment_interfaces :: boxed (dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { public_key_purpose , key_purpose_requirement }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_destroy < > (ffi : * mut dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_get_public_key_purpose < > (obj : * const dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . public_key_purpose } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_get_key_purpose_requirement < > (obj : * const dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . key_purpose_requirement } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_set_public_key_purpose < > (obj : * mut dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) { (* obj) . public_key_purpose = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_set_key_purpose_requirement < > (obj : * mut dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) { (* obj) . key_purpose_requirement = value ; } } # [cfg (feature = "state-transition-validation")] pub mod public_key_mismatch_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: state_transition :: errors :: public_key_mismatch_error :: PublicKeyMismatchError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { pub public_key : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: errors :: public_key_mismatch_error :: PublicKeyMismatchError > for dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError) -> dpp :: state_transition :: errors :: public_key_mismatch_error :: PublicKeyMismatchError { let ffi_ref = & * ffi ; dpp :: state_transition :: errors :: public_key_mismatch_error :: PublicKeyMismatchError { public_key : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . public_key) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: errors :: public_key_mismatch_error :: PublicKeyMismatchError > for dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { unsafe fn ffi_to_const (obj : dpp :: state_transition :: errors :: public_key_mismatch_error :: PublicKeyMismatchError) -> * const dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { ferment_interfaces :: boxed (dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { public_key : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . public_key) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: errors :: public_key_mismatch_error :: PublicKeyMismatchError > for dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { unsafe fn destroy (ffi : * mut dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError_ctor < > (public_key : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey) -> * mut dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { ferment_interfaces :: boxed (dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { public_key }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError_destroy < > (ffi : * mut dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError_get_public_key < > (obj : * const dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey { (* obj) . public_key } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError_set_public_key < > (obj : * mut dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey) { (* obj) . public_key = value ; } } # [cfg (any (feature = "state-transition-validation" , feature = "state-transition-signing"))] pub mod invalid_identity_public_key_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { pub public_key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError > for dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) -> dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError { let ffi_ref = & * ffi ; dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError { public_key_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . public_key_type) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError > for dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { unsafe fn ffi_to_const (obj : dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError) -> * const dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { ferment_interfaces :: boxed (dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { public_key_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . public_key_type) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError > for dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { unsafe fn destroy (ffi : * mut dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_type) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_ctor < > (public_key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType) -> * mut dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { ferment_interfaces :: boxed (dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { public_key_type }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_destroy < > (ffi : * mut dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_get_public_key_type < > (obj : * const dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType { (* obj) . public_key_type } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_set_public_key_type < > (obj : * mut dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType) { (* obj) . public_key_type = value ; } } # [cfg (feature = "state-transition-validation")] pub mod state_transition_is_not_signed_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: StateTransitionIsNotSignedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { pub state_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: dpp_state_transition_StateTransition } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: StateTransitionIsNotSignedError > for dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError) -> dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: StateTransitionIsNotSignedError { let ffi_ref = & * ffi ; dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: StateTransitionIsNotSignedError { state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . state_transition) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: StateTransitionIsNotSignedError > for dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { unsafe fn ffi_to_const (obj : dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: StateTransitionIsNotSignedError) -> * const dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { ferment_interfaces :: boxed (dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . state_transition) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: StateTransitionIsNotSignedError > for dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { unsafe fn destroy (ffi : * mut dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . state_transition) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError_ctor < > (state_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: dpp_state_transition_StateTransition) -> * mut dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { ferment_interfaces :: boxed (dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { state_transition }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError_destroy < > (ffi : * mut dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError_get_state_transition < > (obj : * const dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError) -> * mut crate :: fermented :: types :: dpp :: state_transition :: dpp_state_transition_StateTransition { (* obj) . state_transition } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError_set_state_transition < > (obj : * mut dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError , value : * mut crate :: fermented :: types :: dpp :: state_transition :: dpp_state_transition_StateTransition) { (* obj) . state_transition = value ; } } } pub mod proof_result { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: state_transition :: proof_result :: StateTransitionProofResult`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_proof_result_StateTransitionProofResult { VerifiedDataContract (* mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) , VerifiedIdentity (* mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity) , VerifiedPartialIdentity (* mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity) , VerifiedBalanceTransfer (* mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity , * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity) , VerifiedDocuments (* mut crate :: fermented :: generics :: std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document) , VerifiedMasternodeVote (* mut crate :: fermented :: types :: dpp :: voting :: votes :: dpp_voting_votes_Vote) } impl ferment_interfaces :: FFIConversionFrom < dpp :: state_transition :: proof_result :: StateTransitionProofResult > for dpp_state_transition_proof_result_StateTransitionProofResult { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_proof_result_StateTransitionProofResult) -> dpp :: state_transition :: proof_result :: StateTransitionProofResult { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDataContract (o_0) => dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedDataContract (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedIdentity (o_0) => dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedIdentity (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedPartialIdentity (o_0) => dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedPartialIdentity (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedBalanceTransfer (o_0 , o_1) => dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedBalanceTransfer (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0) , ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_1)) , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDocuments (o_0) => dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedDocuments (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedMasternodeVote (o_0) => dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedMasternodeVote (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: state_transition :: proof_result :: StateTransitionProofResult > for dpp_state_transition_proof_result_StateTransitionProofResult { unsafe fn ffi_to_const (obj : dpp :: state_transition :: proof_result :: StateTransitionProofResult) -> * const dpp_state_transition_proof_result_StateTransitionProofResult { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedDataContract (o_0) => dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDataContract (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedIdentity (o_0) => dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedIdentity (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedPartialIdentity (o_0) => dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedPartialIdentity (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedBalanceTransfer (o_0 , o_1) => dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedBalanceTransfer (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0) , ferment_interfaces :: FFIConversionTo :: ffi_to (o_1)) , dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedDocuments (o_0) => dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDocuments (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedMasternodeVote (o_0) => dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedMasternodeVote (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: state_transition :: proof_result :: StateTransitionProofResult > for dpp_state_transition_proof_result_StateTransitionProofResult { unsafe fn destroy (ffi : * mut dpp_state_transition_proof_result_StateTransitionProofResult) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_proof_result_StateTransitionProofResult { fn drop (& mut self) { unsafe { match self { dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDataContract (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedIdentity (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedPartialIdentity (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedBalanceTransfer (o_0 , o_1) => { ferment_interfaces :: unbox_any (* o_0) ; ; ; ferment_interfaces :: unbox_any (* o_1) ; ; } , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDocuments (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedMasternodeVote (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_proof_result_StateTransitionProofResult_VerifiedDataContract_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) -> * mut dpp_state_transition_proof_result_StateTransitionProofResult { ferment_interfaces :: boxed (dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDataContract (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_proof_result_StateTransitionProofResult_VerifiedIdentity_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity) -> * mut dpp_state_transition_proof_result_StateTransitionProofResult { ferment_interfaces :: boxed (dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedIdentity (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_proof_result_StateTransitionProofResult_VerifiedPartialIdentity_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity) -> * mut dpp_state_transition_proof_result_StateTransitionProofResult { ferment_interfaces :: boxed (dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedPartialIdentity (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_proof_result_StateTransitionProofResult_VerifiedBalanceTransfer_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity , o_o_1 : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity) -> * mut dpp_state_transition_proof_result_StateTransitionProofResult { ferment_interfaces :: boxed (dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedBalanceTransfer (o_o_0 , o_o_1)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_proof_result_StateTransitionProofResult_VerifiedDocuments_ctor (o_o_0 : * mut crate :: fermented :: generics :: std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document) -> * mut dpp_state_transition_proof_result_StateTransitionProofResult { ferment_interfaces :: boxed (dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDocuments (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_proof_result_StateTransitionProofResult_VerifiedMasternodeVote_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: voting :: votes :: dpp_voting_votes_Vote) -> * mut dpp_state_transition_proof_result_StateTransitionProofResult { ferment_interfaces :: boxed (dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedMasternodeVote (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_proof_result_StateTransitionProofResult_destroy < > (ffi : * mut dpp_state_transition_proof_result_StateTransitionProofResult) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod traits { use crate as ferment_example_platform ; } pub mod serialization { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } } } pub mod validation { use crate as ferment_example_platform ; # [cfg (feature = "validation")] pub mod json_schema_validator { use crate as ferment_example_platform ; pub mod methods { use crate as ferment_example_platform ; pub mod validate { use crate as ferment_example_platform ; } pub mod new { use crate as ferment_example_platform ; } pub mod compile { use crate as ferment_example_platform ; } } } # [cfg (feature = "validation")] pub mod byte_array_keyword { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; pub mod validate { use crate as ferment_example_platform ; } } } } pub mod voting { use crate as ferment_example_platform ; pub mod vote_choices { use crate as ferment_example_platform ; pub mod resource_vote_choice { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { TowardsIdentity (* mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) , Abstain , Lock } impl ferment_interfaces :: FFIConversionFrom < dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice > for dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { unsafe fn ffi_from_const (ffi : * const dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice) -> dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice { let ffi_ref = & * ffi ; match ffi_ref { dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: TowardsIdentity (o_0) => dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice :: TowardsIdentity (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: Abstain => dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice :: Abstain , dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: Lock => dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice :: Lock } } } impl ferment_interfaces :: FFIConversionTo < dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice > for dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { unsafe fn ffi_to_const (obj : dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice) -> * const dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { ferment_interfaces :: boxed (match obj { dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice :: TowardsIdentity (o_0) => dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: TowardsIdentity (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice :: Abstain => dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: Abstain , dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice :: Lock => dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: Lock , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice > for dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { unsafe fn destroy (ffi : * mut dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { fn drop (& mut self) { unsafe { match self { dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: TowardsIdentity (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: Abstain => { } , dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: Lock => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice_TowardsIdentity_ctor (o_o_0 : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { ferment_interfaces :: boxed (dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: TowardsIdentity (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice_Abstain_ctor () -> * mut dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { ferment_interfaces :: boxed (dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: Abstain { }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice_Lock_ctor () -> * mut dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { ferment_interfaces :: boxed (dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: Lock { }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice_destroy < > (ffi : * mut dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice) { ferment_interfaces :: unbox_any (ffi) ; } } } pub mod vote_info_storage { use crate as ferment_example_platform ; pub mod contested_document_vote_poll_winner_info { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo { NoWinner , WonByIdentity (* mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) , Locked } impl ferment_interfaces :: FFIConversionFrom < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo > for dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo { unsafe fn ffi_from_const (ffi : * const dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo) -> dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo { let ffi_ref = & * ffi ; match ffi_ref { dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: NoWinner => dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo :: NoWinner , dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: WonByIdentity (o_0) => dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo :: WonByIdentity (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: Locked => dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo :: Locked } } } impl ferment_interfaces :: FFIConversionTo < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo > for dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo { unsafe fn ffi_to_const (obj : dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo) -> * const dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo { ferment_interfaces :: boxed (match obj { dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo :: NoWinner => dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: NoWinner , dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo :: WonByIdentity (o_0) => dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: WonByIdentity (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo :: Locked => dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: Locked , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo > for dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo { unsafe fn destroy (ffi : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo { fn drop (& mut self) { unsafe { match self { dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: NoWinner => { } , dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: WonByIdentity (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: Locked => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo_NoWinner_ctor () -> * mut dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo { ferment_interfaces :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: NoWinner { }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo_WonByIdentity_ctor (o_o_0 : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo { ferment_interfaces :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: WonByIdentity (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo_Locked_ctor () -> * mut dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo { ferment_interfaces :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: Locked { }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo_destroy < > (ffi : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod contested_document_vote_poll_stored_info { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { pub resource_vote_choices : * mut crate :: fermented :: generics :: Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo , pub start_block : * mut crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo , pub finalization_block : * mut crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo , pub winner : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo } impl ferment_interfaces :: FFIConversionFrom < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0 > for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { unsafe fn ffi_from_const (ffi : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) -> dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0 { let ffi_ref = & * ffi ; dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0 { resource_vote_choices : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . resource_vote_choices) , start_block : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . start_block) , finalization_block : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . finalization_block) , winner : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . winner) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0 > for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { unsafe fn ffi_to_const (obj : dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0) -> * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { ferment_interfaces :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { resource_vote_choices : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . resource_vote_choices) , start_block : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . start_block) , finalization_block : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . finalization_block) , winner : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . winner) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0 > for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { unsafe fn destroy (ffi : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . resource_vote_choices) ; ; ferment_interfaces :: unbox_any (ffi_ref . start_block) ; ; ferment_interfaces :: unbox_any (ffi_ref . finalization_block) ; ; ferment_interfaces :: unbox_any (ffi_ref . winner) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_ctor < > (resource_vote_choices : * mut crate :: fermented :: generics :: Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo , start_block : * mut crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo , finalization_block : * mut crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo , winner : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo) -> * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { ferment_interfaces :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { resource_vote_choices , start_block , finalization_block , winner }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_destroy < > (ffi : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_get_resource_vote_choices < > (obj : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) -> * mut crate :: fermented :: generics :: Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { (* obj) . resource_vote_choices } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_get_start_block < > (obj : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) -> * mut crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo { (* obj) . start_block } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_get_finalization_block < > (obj : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) -> * mut crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo { (* obj) . finalization_block } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_get_winner < > (obj : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo { (* obj) . winner } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_set_resource_vote_choices < > (obj : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 , value : * mut crate :: fermented :: generics :: Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo) { (* obj) . resource_vote_choices = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_set_start_block < > (obj : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 , value : * mut crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo) { (* obj) . start_block = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_set_finalization_block < > (obj : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 , value : * mut crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo) { (* obj) . finalization_block = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_set_winner < > (obj : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 , value : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo) { (* obj) . winner = value ; } # [doc = "FFI-representation of the [`dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 { pub finalized_events : * mut crate :: fermented :: generics :: Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 , pub vote_poll_status : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus , pub locked_count : u16 } impl ferment_interfaces :: FFIConversionFrom < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoV0 > for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 { unsafe fn ffi_from_const (ffi : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0) -> dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoV0 { let ffi_ref = & * ffi ; dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoV0 { finalized_events : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . finalized_events) , vote_poll_status : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . vote_poll_status) , locked_count : ffi_ref . locked_count } } } impl ferment_interfaces :: FFIConversionTo < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoV0 > for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 { unsafe fn ffi_to_const (obj : dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoV0) -> * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 { ferment_interfaces :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 { finalized_events : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . finalized_events) , vote_poll_status : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . vote_poll_status) , locked_count : obj . locked_count }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoV0 > for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 { unsafe fn destroy (ffi : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . finalized_events) ; ; ferment_interfaces :: unbox_any (ffi_ref . vote_poll_status) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0_ctor < > (finalized_events : * mut crate :: fermented :: generics :: Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 , vote_poll_status : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus , locked_count : u16) -> * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 { ferment_interfaces :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 { finalized_events , vote_poll_status , locked_count }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0_destroy < > (ffi : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0_get_finalized_events < > (obj : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0) -> * mut crate :: fermented :: generics :: Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { (* obj) . finalized_events } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0_get_vote_poll_status < > (obj : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { (* obj) . vote_poll_status } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0_get_locked_count < > (obj : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0) -> u16 { (* obj) . locked_count } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0_set_finalized_events < > (obj : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 , value : * mut crate :: fermented :: generics :: Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) { (* obj) . finalized_events = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0_set_vote_poll_status < > (obj : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 , value : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus) { (* obj) . vote_poll_status = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0_set_locked_count < > (obj : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 , value : u16) { (* obj) . locked_count = value ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStoredInfo`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo { V0 (* mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStoredInfo > for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo { unsafe fn ffi_from_const (ffi : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo) -> dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStoredInfo { let ffi_ref = & * ffi ; match ffi_ref { dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo :: V0 (o_0) => dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStoredInfo :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStoredInfo > for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo { unsafe fn ffi_to_const (obj : dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStoredInfo) -> * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo { ferment_interfaces :: boxed (match obj { dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStoredInfo :: V0 (o_0) => dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStoredInfo > for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo { unsafe fn destroy (ffi : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo { fn drop (& mut self) { unsafe { match self { dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0) -> * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo { ferment_interfaces :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo_destroy < > (ffi : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { NotStarted , Awarded (* mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) , Locked , Started (* mut crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo) } impl ferment_interfaces :: FFIConversionFrom < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus > for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { unsafe fn ffi_from_const (ffi : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus) -> dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus { let ffi_ref = & * ffi ; match ffi_ref { dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: NotStarted => dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus :: NotStarted , dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Awarded (o_0) => dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus :: Awarded (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Locked => dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus :: Locked , dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Started (o_0) => dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus :: Started (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus > for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { unsafe fn ffi_to_const (obj : dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus) -> * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { ferment_interfaces :: boxed (match obj { dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus :: NotStarted => dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: NotStarted , dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus :: Awarded (o_0) => dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Awarded (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus :: Locked => dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Locked , dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus :: Started (o_0) => dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Started (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus > for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { unsafe fn destroy (ffi : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { fn drop (& mut self) { unsafe { match self { dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: NotStarted => { } , dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Awarded (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Locked => { } , dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Started (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus_NotStarted_ctor () -> * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { ferment_interfaces :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: NotStarted { }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus_Awarded_ctor (o_o_0 : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { ferment_interfaces :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Awarded (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus_Locked_ctor () -> * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { ferment_interfaces :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Locked { }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus_Started_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo) -> * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { ferment_interfaces :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Started (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus_destroy < > (ffi : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus) { ferment_interfaces :: unbox_any (ffi) ; } } } pub mod vote_polls { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: voting :: vote_polls :: VotePoll`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_voting_vote_polls_VotePoll { ContestedDocumentResourceVotePoll (* mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) } impl ferment_interfaces :: FFIConversionFrom < dpp :: voting :: vote_polls :: VotePoll > for dpp_voting_vote_polls_VotePoll { unsafe fn ffi_from_const (ffi : * const dpp_voting_vote_polls_VotePoll) -> dpp :: voting :: vote_polls :: VotePoll { let ffi_ref = & * ffi ; match ffi_ref { dpp_voting_vote_polls_VotePoll :: ContestedDocumentResourceVotePoll (o_0) => dpp :: voting :: vote_polls :: VotePoll :: ContestedDocumentResourceVotePoll (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: voting :: vote_polls :: VotePoll > for dpp_voting_vote_polls_VotePoll { unsafe fn ffi_to_const (obj : dpp :: voting :: vote_polls :: VotePoll) -> * const dpp_voting_vote_polls_VotePoll { ferment_interfaces :: boxed (match obj { dpp :: voting :: vote_polls :: VotePoll :: ContestedDocumentResourceVotePoll (o_0) => dpp_voting_vote_polls_VotePoll :: ContestedDocumentResourceVotePoll (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: voting :: vote_polls :: VotePoll > for dpp_voting_vote_polls_VotePoll { unsafe fn destroy (ffi : * mut dpp_voting_vote_polls_VotePoll) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_voting_vote_polls_VotePoll { fn drop (& mut self) { unsafe { match self { dpp_voting_vote_polls_VotePoll :: ContestedDocumentResourceVotePoll (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_VotePoll_ContestedDocumentResourceVotePoll_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) -> * mut dpp_voting_vote_polls_VotePoll { ferment_interfaces :: boxed (dpp_voting_vote_polls_VotePoll :: ContestedDocumentResourceVotePoll (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_VotePoll_destroy < > (ffi : * mut dpp_voting_vote_polls_VotePoll) { ferment_interfaces :: unbox_any (ffi) ; } pub mod contested_document_resource_vote_poll { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: ContestedDocumentResourceVotePoll`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { pub contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_type_name : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char , pub index_values : * mut crate :: fermented :: generics :: Vec_platform_value_Value } impl ferment_interfaces :: FFIConversionFrom < dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: ContestedDocumentResourceVotePoll > for dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { unsafe fn ffi_from_const (ffi : * const dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) -> dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: ContestedDocumentResourceVotePoll { let ffi_ref = & * ffi ; dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: ContestedDocumentResourceVotePoll { contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contract_id) , document_type_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type_name) , index_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . index_name) , index_values : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . index_values) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: ContestedDocumentResourceVotePoll > for dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { unsafe fn ffi_to_const (obj : dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: ContestedDocumentResourceVotePoll) -> * const dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { ferment_interfaces :: boxed (dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contract_id) , document_type_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type_name) , index_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . index_name) , index_values : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . index_values) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: ContestedDocumentResourceVotePoll > for dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { unsafe fn destroy (ffi : * mut dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . contract_id) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . index_name) ; ferment_interfaces :: unbox_any (ffi_ref . index_values) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll_ctor < > (contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type_name : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char , index_values : * mut crate :: fermented :: generics :: Vec_platform_value_Value) -> * mut dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { ferment_interfaces :: boxed (dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { contract_id , document_type_name , index_name , index_values }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll_destroy < > (ffi : * mut dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll_get_contract_id < > (obj : * const dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll_get_document_type_name < > (obj : * const dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll_get_index_name < > (obj : * const dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll_get_index_values < > (obj : * const dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) -> * mut crate :: fermented :: generics :: Vec_platform_value_Value { (* obj) . index_values } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll_set_contract_id < > (obj : * mut dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll_set_document_type_name < > (obj : * mut dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll_set_index_name < > (obj : * mut dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll , value : * mut std :: os :: raw :: c_char) { (* obj) . index_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll_set_index_values < > (obj : * mut dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll , value : * mut crate :: fermented :: generics :: Vec_platform_value_Value) { (* obj) . index_values = value ; } } } pub mod contender_structs { use crate as ferment_example_platform ; pub mod contender { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { pub resource_vote_choice : * mut crate :: fermented :: types :: dpp :: voting :: vote_choices :: resource_vote_choice :: dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice , pub voters : * mut crate :: fermented :: generics :: Vec_Tuple_platform_value_types_identifier_Identifier_u8 } impl ferment_interfaces :: FFIConversionFrom < dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo > for dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { unsafe fn ffi_from_const (ffi : * const dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo) -> dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo { let ffi_ref = & * ffi ; dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo { resource_vote_choice : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . resource_vote_choice) , voters : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . voters) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo > for dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { unsafe fn ffi_to_const (obj : dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo) -> * const dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { ferment_interfaces :: boxed (dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { resource_vote_choice : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . resource_vote_choice) , voters : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . voters) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo > for dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { unsafe fn destroy (ffi : * mut dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . resource_vote_choice) ; ; ferment_interfaces :: unbox_any (ffi_ref . voters) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo_ctor < > (resource_vote_choice : * mut crate :: fermented :: types :: dpp :: voting :: vote_choices :: resource_vote_choice :: dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice , voters : * mut crate :: fermented :: generics :: Vec_Tuple_platform_value_types_identifier_Identifier_u8) -> * mut dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { ferment_interfaces :: boxed (dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { resource_vote_choice , voters }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo_destroy < > (ffi : * mut dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo_get_resource_vote_choice < > (obj : * const dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_choices :: resource_vote_choice :: dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { (* obj) . resource_vote_choice } # [no_mangle] pub unsafe extern "C" fn dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo_get_voters < > (obj : * const dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo) -> * mut crate :: fermented :: generics :: Vec_Tuple_platform_value_types_identifier_Identifier_u8 { (* obj) . voters } # [no_mangle] pub unsafe extern "C" fn dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo_set_resource_vote_choice < > (obj : * mut dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo , value : * mut crate :: fermented :: types :: dpp :: voting :: vote_choices :: resource_vote_choice :: dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice) { (* obj) . resource_vote_choice = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo_set_voters < > (obj : * mut dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo , value : * mut crate :: fermented :: generics :: Vec_Tuple_platform_value_types_identifier_Identifier_u8) { (* obj) . voters = value ; } } pub mod votes { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: voting :: votes :: Vote`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_voting_votes_Vote { ResourceVote (* mut crate :: fermented :: types :: dpp :: voting :: votes :: resource_vote :: dpp_voting_votes_resource_vote_ResourceVote) } impl ferment_interfaces :: FFIConversionFrom < dpp :: voting :: votes :: Vote > for dpp_voting_votes_Vote { unsafe fn ffi_from_const (ffi : * const dpp_voting_votes_Vote) -> dpp :: voting :: votes :: Vote { let ffi_ref = & * ffi ; match ffi_ref { dpp_voting_votes_Vote :: ResourceVote (o_0) => dpp :: voting :: votes :: Vote :: ResourceVote (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: voting :: votes :: Vote > for dpp_voting_votes_Vote { unsafe fn ffi_to_const (obj : dpp :: voting :: votes :: Vote) -> * const dpp_voting_votes_Vote { ferment_interfaces :: boxed (match obj { dpp :: voting :: votes :: Vote :: ResourceVote (o_0) => dpp_voting_votes_Vote :: ResourceVote (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: voting :: votes :: Vote > for dpp_voting_votes_Vote { unsafe fn destroy (ffi : * mut dpp_voting_votes_Vote) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_voting_votes_Vote { fn drop (& mut self) { unsafe { match self { dpp_voting_votes_Vote :: ResourceVote (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_votes_Vote_ResourceVote_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: voting :: votes :: resource_vote :: dpp_voting_votes_resource_vote_ResourceVote) -> * mut dpp_voting_votes_Vote { ferment_interfaces :: boxed (dpp_voting_votes_Vote :: ResourceVote (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_votes_Vote_destroy < > (ffi : * mut dpp_voting_votes_Vote) { ferment_interfaces :: unbox_any (ffi) ; } pub mod resource_vote { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: voting :: votes :: resource_vote :: ResourceVote`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_voting_votes_resource_vote_ResourceVote { V0 (* mut crate :: fermented :: types :: dpp :: voting :: votes :: resource_vote :: v0 :: dpp_voting_votes_resource_vote_v0_ResourceVoteV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: voting :: votes :: resource_vote :: ResourceVote > for dpp_voting_votes_resource_vote_ResourceVote { unsafe fn ffi_from_const (ffi : * const dpp_voting_votes_resource_vote_ResourceVote) -> dpp :: voting :: votes :: resource_vote :: ResourceVote { let ffi_ref = & * ffi ; match ffi_ref { dpp_voting_votes_resource_vote_ResourceVote :: V0 (o_0) => dpp :: voting :: votes :: resource_vote :: ResourceVote :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: voting :: votes :: resource_vote :: ResourceVote > for dpp_voting_votes_resource_vote_ResourceVote { unsafe fn ffi_to_const (obj : dpp :: voting :: votes :: resource_vote :: ResourceVote) -> * const dpp_voting_votes_resource_vote_ResourceVote { ferment_interfaces :: boxed (match obj { dpp :: voting :: votes :: resource_vote :: ResourceVote :: V0 (o_0) => dpp_voting_votes_resource_vote_ResourceVote :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: voting :: votes :: resource_vote :: ResourceVote > for dpp_voting_votes_resource_vote_ResourceVote { unsafe fn destroy (ffi : * mut dpp_voting_votes_resource_vote_ResourceVote) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_voting_votes_resource_vote_ResourceVote { fn drop (& mut self) { unsafe { match self { dpp_voting_votes_resource_vote_ResourceVote :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_votes_resource_vote_ResourceVote_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: voting :: votes :: resource_vote :: v0 :: dpp_voting_votes_resource_vote_v0_ResourceVoteV0) -> * mut dpp_voting_votes_resource_vote_ResourceVote { ferment_interfaces :: boxed (dpp_voting_votes_resource_vote_ResourceVote :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_votes_resource_vote_ResourceVote_destroy < > (ffi : * mut dpp_voting_votes_resource_vote_ResourceVote) { ferment_interfaces :: unbox_any (ffi) ; } pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: voting :: votes :: resource_vote :: v0 :: ResourceVoteV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_voting_votes_resource_vote_v0_ResourceVoteV0 { pub vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll , pub resource_vote_choice : * mut crate :: fermented :: types :: dpp :: voting :: vote_choices :: resource_vote_choice :: dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice } impl ferment_interfaces :: FFIConversionFrom < dpp :: voting :: votes :: resource_vote :: v0 :: ResourceVoteV0 > for dpp_voting_votes_resource_vote_v0_ResourceVoteV0 { unsafe fn ffi_from_const (ffi : * const dpp_voting_votes_resource_vote_v0_ResourceVoteV0) -> dpp :: voting :: votes :: resource_vote :: v0 :: ResourceVoteV0 { let ffi_ref = & * ffi ; dpp :: voting :: votes :: resource_vote :: v0 :: ResourceVoteV0 { vote_poll : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . vote_poll) , resource_vote_choice : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . resource_vote_choice) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: voting :: votes :: resource_vote :: v0 :: ResourceVoteV0 > for dpp_voting_votes_resource_vote_v0_ResourceVoteV0 { unsafe fn ffi_to_const (obj : dpp :: voting :: votes :: resource_vote :: v0 :: ResourceVoteV0) -> * const dpp_voting_votes_resource_vote_v0_ResourceVoteV0 { ferment_interfaces :: boxed (dpp_voting_votes_resource_vote_v0_ResourceVoteV0 { vote_poll : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . vote_poll) , resource_vote_choice : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . resource_vote_choice) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: voting :: votes :: resource_vote :: v0 :: ResourceVoteV0 > for dpp_voting_votes_resource_vote_v0_ResourceVoteV0 { unsafe fn destroy (ffi : * mut dpp_voting_votes_resource_vote_v0_ResourceVoteV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_voting_votes_resource_vote_v0_ResourceVoteV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . vote_poll) ; ; ferment_interfaces :: unbox_any (ffi_ref . resource_vote_choice) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_votes_resource_vote_v0_ResourceVoteV0_ctor < > (vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll , resource_vote_choice : * mut crate :: fermented :: types :: dpp :: voting :: vote_choices :: resource_vote_choice :: dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice) -> * mut dpp_voting_votes_resource_vote_v0_ResourceVoteV0 { ferment_interfaces :: boxed (dpp_voting_votes_resource_vote_v0_ResourceVoteV0 { vote_poll , resource_vote_choice }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_votes_resource_vote_v0_ResourceVoteV0_destroy < > (ffi : * mut dpp_voting_votes_resource_vote_v0_ResourceVoteV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_voting_votes_resource_vote_v0_ResourceVoteV0_get_vote_poll < > (obj : * const dpp_voting_votes_resource_vote_v0_ResourceVoteV0) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll { (* obj) . vote_poll } # [no_mangle] pub unsafe extern "C" fn dpp_voting_votes_resource_vote_v0_ResourceVoteV0_get_resource_vote_choice < > (obj : * const dpp_voting_votes_resource_vote_v0_ResourceVoteV0) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_choices :: resource_vote_choice :: dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { (* obj) . resource_vote_choice } # [no_mangle] pub unsafe extern "C" fn dpp_voting_votes_resource_vote_v0_ResourceVoteV0_set_vote_poll < > (obj : * mut dpp_voting_votes_resource_vote_v0_ResourceVoteV0 , value : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll) { (* obj) . vote_poll = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_voting_votes_resource_vote_v0_ResourceVoteV0_set_resource_vote_choice < > (obj : * mut dpp_voting_votes_resource_vote_v0_ResourceVoteV0 , value : * mut crate :: fermented :: types :: dpp :: voting :: vote_choices :: resource_vote_choice :: dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice) { (* obj) . resource_vote_choice = value ; } } pub mod accessors { use crate as ferment_example_platform ; } } } } pub mod schema { use crate as ferment_example_platform ; pub mod identity { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; } } } pub mod asset_lock { use crate as ferment_example_platform ; pub mod reduced_asset_lock_value { use crate as ferment_example_platform ; } } pub mod fee { use crate as ferment_example_platform ; # [cfg (feature = "fee-distribution")] pub mod fee_result { use crate as ferment_example_platform ; pub mod refunds { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; pub mod from_storage_removal { use crate as ferment_example_platform ; } } } } pub mod default_costs { use crate as ferment_example_platform ; } pub mod epoch { use crate as ferment_example_platform ; # [cfg (feature = "fee-distribution")] pub mod distribution { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; pub mod distribution_storage_fee_to_epochs_map { use crate as ferment_example_platform ; } pub mod calculate_storage_fee_refund_amount_and_leftovers { use crate as ferment_example_platform ; } pub mod original_removed_credits_multiplier_from { use crate as ferment_example_platform ; } pub mod subtract_refunds_from_epoch_credits_collection { use crate as ferment_example_platform ; } pub mod fee_distribution_table { use crate as ferment_example_platform ; } pub mod distribute_storage_fee_to_epochs_collection { use crate as ferment_example_platform ; } } } } } pub mod nft { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: nft :: TradeMode`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_nft_TradeMode { None = 0 , DirectPurchase = 1 } impl ferment_interfaces :: FFIConversionFrom < dpp :: nft :: TradeMode > for dpp_nft_TradeMode { unsafe fn ffi_from_const (ffi : * const dpp_nft_TradeMode) -> dpp :: nft :: TradeMode { let ffi_ref = & * ffi ; match ffi_ref { dpp_nft_TradeMode :: None => dpp :: nft :: TradeMode :: None , dpp_nft_TradeMode :: DirectPurchase => dpp :: nft :: TradeMode :: DirectPurchase } } } impl ferment_interfaces :: FFIConversionTo < dpp :: nft :: TradeMode > for dpp_nft_TradeMode { unsafe fn ffi_to_const (obj : dpp :: nft :: TradeMode) -> * const dpp_nft_TradeMode { ferment_interfaces :: boxed (match obj { dpp :: nft :: TradeMode :: None => dpp_nft_TradeMode :: None , dpp :: nft :: TradeMode :: DirectPurchase => dpp_nft_TradeMode :: DirectPurchase , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: nft :: TradeMode > for dpp_nft_TradeMode { unsafe fn destroy (ffi : * mut dpp_nft_TradeMode) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_nft_TradeMode { fn drop (& mut self) { unsafe { match self { dpp_nft_TradeMode :: None => { } , dpp_nft_TradeMode :: DirectPurchase => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_nft_TradeMode_None_ctor () -> * mut dpp_nft_TradeMode { ferment_interfaces :: boxed (dpp_nft_TradeMode :: None { }) } # [no_mangle] pub unsafe extern "C" fn dpp_nft_TradeMode_DirectPurchase_ctor () -> * mut dpp_nft_TradeMode { ferment_interfaces :: boxed (dpp_nft_TradeMode :: DirectPurchase { }) } # [no_mangle] pub unsafe extern "C" fn dpp_nft_TradeMode_destroy < > (ffi : * mut dpp_nft_TradeMode) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod serialization { use crate as ferment_example_platform ; } pub mod data_contract { use crate as ferment_example_platform ; pub mod errors { use crate as ferment_example_platform ; pub mod contract { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: data_contract :: errors :: contract :: DataContractError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_errors_contract_DataContractError { DecodingContractError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: decoding_error :: dpp_errors_consensus_basic_decode_decoding_error_DecodingError) , DecodingDocumentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: decoding_error :: dpp_errors_consensus_basic_decode_decoding_error_DecodingError) , InvalidDocumentTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) , DocumentTypesAreMissingError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: document_types_are_missing_error :: dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError) , MissingRequiredKey (* mut std :: os :: raw :: c_char) , FieldRequirementUnmet (* mut std :: os :: raw :: c_char) , RegexError (* mut std :: os :: raw :: c_char) , KeyWrongType (* mut std :: os :: raw :: c_char) , ValueWrongType (* mut std :: os :: raw :: c_char) , InvalidURI (* mut std :: os :: raw :: c_char) , KeyWrongBounds (* mut std :: os :: raw :: c_char) , KeyValueMustExist (* mut std :: os :: raw :: c_char) , ValueDecodingError (* mut std :: os :: raw :: c_char) , EncodingDataStructureNotSupported (* mut std :: os :: raw :: c_char) , InvalidContractStructure (* mut std :: os :: raw :: c_char) , DocumentTypeNotFound (* mut std :: os :: raw :: c_char) , DocumentTypeFieldNotFound (* mut std :: os :: raw :: c_char) , ReferenceDefinitionNotFound (* mut std :: os :: raw :: c_char) , DocumentOwnerIdMissing (* mut std :: os :: raw :: c_char) , DocumentIdMissing (* mut std :: os :: raw :: c_char) , Unsupported (* mut std :: os :: raw :: c_char) , CorruptedSerialization (* mut std :: os :: raw :: c_char) , JsonSchema (* mut crate :: fermented :: types :: dpp :: data_contract :: errors :: json_schema_error :: dpp_data_contract_errors_json_schema_error_JsonSchemaError) } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: errors :: contract :: DataContractError > for dpp_data_contract_errors_contract_DataContractError { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_errors_contract_DataContractError) -> dpp :: data_contract :: errors :: contract :: DataContractError { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_errors_contract_DataContractError :: DecodingContractError (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: DecodingContractError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: DecodingDocumentError (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: DecodingDocumentError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: InvalidDocumentTypeError (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: InvalidDocumentTypeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: DocumentTypesAreMissingError (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentTypesAreMissingError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: MissingRequiredKey (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: MissingRequiredKey (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: FieldRequirementUnmet (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: FieldRequirementUnmet (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: RegexError (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: RegexError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: KeyWrongType (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: KeyWrongType (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: ValueWrongType (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: ValueWrongType (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: InvalidURI (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: InvalidURI (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: KeyWrongBounds (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: KeyWrongBounds (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: KeyValueMustExist (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: KeyValueMustExist (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: ValueDecodingError (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: ValueDecodingError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: EncodingDataStructureNotSupported (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: EncodingDataStructureNotSupported (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: InvalidContractStructure (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: InvalidContractStructure (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: DocumentTypeNotFound (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentTypeNotFound (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: DocumentTypeFieldNotFound (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentTypeFieldNotFound (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: ReferenceDefinitionNotFound (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: ReferenceDefinitionNotFound (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: DocumentOwnerIdMissing (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentOwnerIdMissing (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: DocumentIdMissing (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentIdMissing (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: Unsupported (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: Unsupported (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: CorruptedSerialization (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: CorruptedSerialization (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: JsonSchema (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: JsonSchema (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: errors :: contract :: DataContractError > for dpp_data_contract_errors_contract_DataContractError { unsafe fn ffi_to_const (obj : dpp :: data_contract :: errors :: contract :: DataContractError) -> * const dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: errors :: contract :: DataContractError :: DecodingContractError (o_0) => dpp_data_contract_errors_contract_DataContractError :: DecodingContractError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: DecodingDocumentError (o_0) => dpp_data_contract_errors_contract_DataContractError :: DecodingDocumentError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: InvalidDocumentTypeError (o_0) => dpp_data_contract_errors_contract_DataContractError :: InvalidDocumentTypeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentTypesAreMissingError (o_0) => dpp_data_contract_errors_contract_DataContractError :: DocumentTypesAreMissingError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: MissingRequiredKey (o_0) => dpp_data_contract_errors_contract_DataContractError :: MissingRequiredKey (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: FieldRequirementUnmet (o_0) => dpp_data_contract_errors_contract_DataContractError :: FieldRequirementUnmet (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: RegexError (o_0) => dpp_data_contract_errors_contract_DataContractError :: RegexError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: KeyWrongType (o_0) => dpp_data_contract_errors_contract_DataContractError :: KeyWrongType (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: ValueWrongType (o_0) => dpp_data_contract_errors_contract_DataContractError :: ValueWrongType (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: InvalidURI (o_0) => dpp_data_contract_errors_contract_DataContractError :: InvalidURI (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: KeyWrongBounds (o_0) => dpp_data_contract_errors_contract_DataContractError :: KeyWrongBounds (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: KeyValueMustExist (o_0) => dpp_data_contract_errors_contract_DataContractError :: KeyValueMustExist (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: ValueDecodingError (o_0) => dpp_data_contract_errors_contract_DataContractError :: ValueDecodingError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: EncodingDataStructureNotSupported (o_0) => dpp_data_contract_errors_contract_DataContractError :: EncodingDataStructureNotSupported (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: InvalidContractStructure (o_0) => dpp_data_contract_errors_contract_DataContractError :: InvalidContractStructure (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentTypeNotFound (o_0) => dpp_data_contract_errors_contract_DataContractError :: DocumentTypeNotFound (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentTypeFieldNotFound (o_0) => dpp_data_contract_errors_contract_DataContractError :: DocumentTypeFieldNotFound (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: ReferenceDefinitionNotFound (o_0) => dpp_data_contract_errors_contract_DataContractError :: ReferenceDefinitionNotFound (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentOwnerIdMissing (o_0) => dpp_data_contract_errors_contract_DataContractError :: DocumentOwnerIdMissing (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentIdMissing (o_0) => dpp_data_contract_errors_contract_DataContractError :: DocumentIdMissing (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: Unsupported (o_0) => dpp_data_contract_errors_contract_DataContractError :: Unsupported (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: CorruptedSerialization (o_0) => dpp_data_contract_errors_contract_DataContractError :: CorruptedSerialization (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: JsonSchema (o_0) => dpp_data_contract_errors_contract_DataContractError :: JsonSchema (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: errors :: contract :: DataContractError > for dpp_data_contract_errors_contract_DataContractError { unsafe fn destroy (ffi : * mut dpp_data_contract_errors_contract_DataContractError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_errors_contract_DataContractError { fn drop (& mut self) { unsafe { match self { dpp_data_contract_errors_contract_DataContractError :: DecodingContractError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_data_contract_errors_contract_DataContractError :: DecodingDocumentError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_data_contract_errors_contract_DataContractError :: InvalidDocumentTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_data_contract_errors_contract_DataContractError :: DocumentTypesAreMissingError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_data_contract_errors_contract_DataContractError :: MissingRequiredKey (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: FieldRequirementUnmet (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: RegexError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: KeyWrongType (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: ValueWrongType (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: InvalidURI (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: KeyWrongBounds (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: KeyValueMustExist (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: ValueDecodingError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: EncodingDataStructureNotSupported (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: InvalidContractStructure (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: DocumentTypeNotFound (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: DocumentTypeFieldNotFound (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: ReferenceDefinitionNotFound (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: DocumentOwnerIdMissing (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: DocumentIdMissing (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: Unsupported (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: CorruptedSerialization (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: JsonSchema (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_DecodingContractError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: decoding_error :: dpp_errors_consensus_basic_decode_decoding_error_DecodingError) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: DecodingContractError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_DecodingDocumentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: decoding_error :: dpp_errors_consensus_basic_decode_decoding_error_DecodingError) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: DecodingDocumentError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_InvalidDocumentTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: InvalidDocumentTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_DocumentTypesAreMissingError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: document_types_are_missing_error :: dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: DocumentTypesAreMissingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_MissingRequiredKey_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: MissingRequiredKey (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_FieldRequirementUnmet_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: FieldRequirementUnmet (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_RegexError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: RegexError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_KeyWrongType_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: KeyWrongType (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_ValueWrongType_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: ValueWrongType (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_InvalidURI_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: InvalidURI (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_KeyWrongBounds_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: KeyWrongBounds (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_KeyValueMustExist_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: KeyValueMustExist (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_ValueDecodingError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: ValueDecodingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_EncodingDataStructureNotSupported_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: EncodingDataStructureNotSupported (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_InvalidContractStructure_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: InvalidContractStructure (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_DocumentTypeNotFound_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: DocumentTypeNotFound (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_DocumentTypeFieldNotFound_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: DocumentTypeFieldNotFound (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_ReferenceDefinitionNotFound_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: ReferenceDefinitionNotFound (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_DocumentOwnerIdMissing_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: DocumentOwnerIdMissing (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_DocumentIdMissing_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: DocumentIdMissing (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_Unsupported_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: Unsupported (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_CorruptedSerialization_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: CorruptedSerialization (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_JsonSchema_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: errors :: json_schema_error :: dpp_data_contract_errors_json_schema_error_JsonSchemaError) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: JsonSchema (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_destroy < > (ffi : * mut dpp_data_contract_errors_contract_DataContractError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod json_schema_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_errors_json_schema_error_JsonSchemaError { CreateSchemaError (* mut std :: os :: raw :: c_char) , SchemaCompatibilityValidationError (* mut std :: os :: raw :: c_char) } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError > for dpp_data_contract_errors_json_schema_error_JsonSchemaError { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_errors_json_schema_error_JsonSchemaError) -> dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_errors_json_schema_error_JsonSchemaError :: CreateSchemaError (o_0) => dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError :: CreateSchemaError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_errors_json_schema_error_JsonSchemaError :: SchemaCompatibilityValidationError (o_0) => dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError :: SchemaCompatibilityValidationError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError > for dpp_data_contract_errors_json_schema_error_JsonSchemaError { unsafe fn ffi_to_const (obj : dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError) -> * const dpp_data_contract_errors_json_schema_error_JsonSchemaError { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError :: CreateSchemaError (o_0) => dpp_data_contract_errors_json_schema_error_JsonSchemaError :: CreateSchemaError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError :: SchemaCompatibilityValidationError (o_0) => dpp_data_contract_errors_json_schema_error_JsonSchemaError :: SchemaCompatibilityValidationError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError > for dpp_data_contract_errors_json_schema_error_JsonSchemaError { unsafe fn destroy (ffi : * mut dpp_data_contract_errors_json_schema_error_JsonSchemaError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_errors_json_schema_error_JsonSchemaError { fn drop (& mut self) { unsafe { match self { dpp_data_contract_errors_json_schema_error_JsonSchemaError :: CreateSchemaError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_data_contract_errors_json_schema_error_JsonSchemaError :: SchemaCompatibilityValidationError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_json_schema_error_JsonSchemaError_CreateSchemaError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_json_schema_error_JsonSchemaError { ferment_interfaces :: boxed (dpp_data_contract_errors_json_schema_error_JsonSchemaError :: CreateSchemaError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_json_schema_error_JsonSchemaError_SchemaCompatibilityValidationError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_json_schema_error_JsonSchemaError { ferment_interfaces :: boxed (dpp_data_contract_errors_json_schema_error_JsonSchemaError :: SchemaCompatibilityValidationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_json_schema_error_JsonSchemaError_destroy < > (ffi : * mut dpp_data_contract_errors_json_schema_error_JsonSchemaError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod invalid_document_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: data_contract :: errors :: invalid_document_type_error :: InvalidDocumentTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { pub doc_type : * mut std :: os :: raw :: c_char , pub data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: errors :: invalid_document_type_error :: InvalidDocumentTypeError > for dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) -> dpp :: data_contract :: errors :: invalid_document_type_error :: InvalidDocumentTypeError { let ffi_ref = & * ffi ; dpp :: data_contract :: errors :: invalid_document_type_error :: InvalidDocumentTypeError { doc_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . doc_type) , data_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: errors :: invalid_document_type_error :: InvalidDocumentTypeError > for dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { unsafe fn ffi_to_const (obj : dpp :: data_contract :: errors :: invalid_document_type_error :: InvalidDocumentTypeError) -> * const dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { ferment_interfaces :: boxed (dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { doc_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . doc_type) , data_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: errors :: invalid_document_type_error :: InvalidDocumentTypeError > for dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { unsafe fn destroy (ffi : * mut dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . doc_type) ; ferment_interfaces :: unbox_any (ffi_ref . data_contract) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError_ctor < > (doc_type : * mut std :: os :: raw :: c_char , data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) -> * mut dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { ferment_interfaces :: boxed (dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { doc_type , data_contract }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError_destroy < > (ffi : * mut dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError_get_doc_type < > (obj : * const dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . doc_type } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError_get_data_contract < > (obj : * const dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) -> * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract { (* obj) . data_contract } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError_set_doc_type < > (obj : * mut dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError , value : * mut std :: os :: raw :: c_char) { (* obj) . doc_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError_set_data_contract < > (obj : * mut dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError , value : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) { (* obj) . data_contract = value ; } } pub mod identity_not_present_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: data_contract :: errors :: identity_not_present_error :: IdentityNotPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: errors :: identity_not_present_error :: IdentityNotPresentError > for dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError) -> dpp :: data_contract :: errors :: identity_not_present_error :: IdentityNotPresentError { let ffi_ref = & * ffi ; dpp :: data_contract :: errors :: identity_not_present_error :: IdentityNotPresentError { id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: errors :: identity_not_present_error :: IdentityNotPresentError > for dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { unsafe fn ffi_to_const (obj : dpp :: data_contract :: errors :: identity_not_present_error :: IdentityNotPresentError) -> * const dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { ferment_interfaces :: boxed (dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: errors :: identity_not_present_error :: IdentityNotPresentError > for dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { unsafe fn destroy (ffi : * mut dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError_ctor < > (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { ferment_interfaces :: boxed (dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { id }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError_destroy < > (ffi : * mut dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError_get_id < > (obj : * const dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError_set_id < > (obj : * mut dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . id = value ; } } pub mod data_contract_not_present_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: data_contract :: errors :: data_contract_not_present_error :: DataContractNotPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: errors :: data_contract_not_present_error :: DataContractNotPresentError > for dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError) -> dpp :: data_contract :: errors :: data_contract_not_present_error :: DataContractNotPresentError { let ffi_ref = & * ffi ; dpp :: data_contract :: errors :: data_contract_not_present_error :: DataContractNotPresentError { data_contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: errors :: data_contract_not_present_error :: DataContractNotPresentError > for dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { unsafe fn ffi_to_const (obj : dpp :: data_contract :: errors :: data_contract_not_present_error :: DataContractNotPresentError) -> * const dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { ferment_interfaces :: boxed (dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { data_contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: errors :: data_contract_not_present_error :: DataContractNotPresentError > for dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { unsafe fn destroy (ffi : * mut dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { ferment_interfaces :: boxed (dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError_destroy < > (ffi : * mut dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError_get_data_contract_id < > (obj : * const dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError_set_data_contract_id < > (obj : * mut dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } } } # [cfg (feature = "factories")] pub mod factory { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } } } pub mod serialized_version { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: data_contract :: serialized_version :: v0 :: DataContractInSerializationFormatV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub config : * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig , pub version : u32 , pub owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub schema_defs : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value , pub document_schemas : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: serialized_version :: v0 :: DataContractInSerializationFormatV0 > for dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> dpp :: data_contract :: serialized_version :: v0 :: DataContractInSerializationFormatV0 { let ffi_ref = & * ffi ; dpp :: data_contract :: serialized_version :: v0 :: DataContractInSerializationFormatV0 { id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . id) , config : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . config) , version : ffi_ref . version , owner_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . owner_id) , schema_defs : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . schema_defs) , document_schemas : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_schemas) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: serialized_version :: v0 :: DataContractInSerializationFormatV0 > for dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { unsafe fn ffi_to_const (obj : dpp :: data_contract :: serialized_version :: v0 :: DataContractInSerializationFormatV0) -> * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { ferment_interfaces :: boxed (dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . id) , config : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . config) , version : obj . version , owner_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . owner_id) , schema_defs : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . schema_defs) , document_schemas : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_schemas) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: serialized_version :: v0 :: DataContractInSerializationFormatV0 > for dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { unsafe fn destroy (ffi : * mut dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; ferment_interfaces :: unbox_any (ffi_ref . config) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . owner_id) ; ; ferment_interfaces :: unbox_any_opt (ffi_ref . schema_defs) ; ferment_interfaces :: unbox_any (ffi_ref . document_schemas) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_ctor < > (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , config : * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig , version : u32 , owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , schema_defs : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value , document_schemas : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value) -> * mut dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { ferment_interfaces :: boxed (dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { id , config , version , owner_id , schema_defs , document_schemas }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_destroy < > (ffi : * mut dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_get_id < > (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_get_config < > (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig { (* obj) . config } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_get_version < > (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> u32 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_get_owner_id < > (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_get_schema_defs < > (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { (* obj) . schema_defs } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_get_document_schemas < > (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { (* obj) . document_schemas } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_set_id < > (obj : * mut dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_set_config < > (obj : * mut dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 , value : * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig) { (* obj) . config = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_set_version < > (obj : * mut dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 , value : u32) { (* obj) . version = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_set_owner_id < > (obj : * mut dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . owner_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_set_schema_defs < > (obj : * mut dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value) { (* obj) . schema_defs = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_set_document_schemas < > (obj : * mut dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value) { (* obj) . document_schemas = value ; } pub mod property_names { use crate as ferment_example_platform ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_serialized_version_DataContractInSerializationFormat { V0 (* mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: v0 :: dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat > for dpp_data_contract_serialized_version_DataContractInSerializationFormat { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_serialized_version_DataContractInSerializationFormat) -> dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_serialized_version_DataContractInSerializationFormat :: V0 (o_0) => dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat > for dpp_data_contract_serialized_version_DataContractInSerializationFormat { unsafe fn ffi_to_const (obj : dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat) -> * const dpp_data_contract_serialized_version_DataContractInSerializationFormat { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat :: V0 (o_0) => dpp_data_contract_serialized_version_DataContractInSerializationFormat :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat > for dpp_data_contract_serialized_version_DataContractInSerializationFormat { unsafe fn destroy (ffi : * mut dpp_data_contract_serialized_version_DataContractInSerializationFormat) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_serialized_version_DataContractInSerializationFormat { fn drop (& mut self) { unsafe { match self { dpp_data_contract_serialized_version_DataContractInSerializationFormat :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_DataContractInSerializationFormat_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: v0 :: dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut dpp_data_contract_serialized_version_DataContractInSerializationFormat { ferment_interfaces :: boxed (dpp_data_contract_serialized_version_DataContractInSerializationFormat :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_DataContractInSerializationFormat_destroy < > (ffi : * mut dpp_data_contract_serialized_version_DataContractInSerializationFormat) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod document_type { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: data_contract :: document_type :: v0 :: DocumentTypeV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_v0_DocumentTypeV0 { pub name : * mut std :: os :: raw :: c_char , pub schema : * mut crate :: fermented :: types :: platform_value :: platform_value_Value , pub indices : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index , pub index_structure : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevel , pub flattened_properties : * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty , pub properties : * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty , pub identifier_paths : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , pub binary_paths : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , pub required_fields : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , pub transient_fields : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , pub documents_keep_history : bool , pub documents_mutable : bool , pub documents_can_be_deleted : bool , pub documents_transferable : * mut crate :: fermented :: types :: dpp :: document :: transfer :: dpp_document_transfer_Transferable , pub trade_mode : * mut crate :: fermented :: types :: dpp :: nft :: dpp_nft_TradeMode , pub creation_restriction_mode : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: restricted_creation :: dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode , pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub requires_identity_encryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements , pub requires_identity_decryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements , pub security_level_requirement : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: document_type :: v0 :: DocumentTypeV0 > for dpp_data_contract_document_type_v0_DocumentTypeV0 { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> dpp :: data_contract :: document_type :: v0 :: DocumentTypeV0 { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: v0 :: DocumentTypeV0 { name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . name) , schema : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . schema) , indices : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . indices) , index_structure : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . index_structure) , flattened_properties : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . flattened_properties) , properties : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . properties) , identifier_paths : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identifier_paths) , binary_paths : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . binary_paths) , required_fields : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . required_fields) , transient_fields : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . transient_fields) , documents_keep_history : ffi_ref . documents_keep_history , documents_mutable : ffi_ref . documents_mutable , documents_can_be_deleted : ffi_ref . documents_can_be_deleted , documents_transferable : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . documents_transferable) , trade_mode : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . trade_mode) , creation_restriction_mode : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . creation_restriction_mode) , data_contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract_id) , requires_identity_encryption_bounded_key : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . requires_identity_encryption_bounded_key) , requires_identity_decryption_bounded_key : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . requires_identity_decryption_bounded_key) , security_level_requirement : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . security_level_requirement) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: document_type :: v0 :: DocumentTypeV0 > for dpp_data_contract_document_type_v0_DocumentTypeV0 { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: v0 :: DocumentTypeV0) -> * const dpp_data_contract_document_type_v0_DocumentTypeV0 { ferment_interfaces :: boxed (dpp_data_contract_document_type_v0_DocumentTypeV0 { name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . name) , schema : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . schema) , indices : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . indices) , index_structure : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . index_structure) , flattened_properties : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . flattened_properties) , properties : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . properties) , identifier_paths : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identifier_paths) , binary_paths : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . binary_paths) , required_fields : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . required_fields) , transient_fields : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . transient_fields) , documents_keep_history : obj . documents_keep_history , documents_mutable : obj . documents_mutable , documents_can_be_deleted : obj . documents_can_be_deleted , documents_transferable : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . documents_transferable) , trade_mode : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . trade_mode) , creation_restriction_mode : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . creation_restriction_mode) , data_contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract_id) , requires_identity_encryption_bounded_key : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . requires_identity_encryption_bounded_key) , requires_identity_decryption_bounded_key : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . requires_identity_decryption_bounded_key) , security_level_requirement : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . security_level_requirement) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: document_type :: v0 :: DocumentTypeV0 > for dpp_data_contract_document_type_v0_DocumentTypeV0 { unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_v0_DocumentTypeV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_document_type_v0_DocumentTypeV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . name) ; ferment_interfaces :: unbox_any (ffi_ref . schema) ; ; ferment_interfaces :: unbox_any (ffi_ref . indices) ; ; ferment_interfaces :: unbox_any (ffi_ref . index_structure) ; ; ferment_interfaces :: unbox_any (ffi_ref . flattened_properties) ; ; ferment_interfaces :: unbox_any (ffi_ref . properties) ; ; ferment_interfaces :: unbox_any (ffi_ref . identifier_paths) ; ; ferment_interfaces :: unbox_any (ffi_ref . binary_paths) ; ; ferment_interfaces :: unbox_any (ffi_ref . required_fields) ; ; ferment_interfaces :: unbox_any (ffi_ref . transient_fields) ; ; ; ; ; ferment_interfaces :: unbox_any (ffi_ref . documents_transferable) ; ; ferment_interfaces :: unbox_any (ffi_ref . trade_mode) ; ; ferment_interfaces :: unbox_any (ffi_ref . creation_restriction_mode) ; ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; ferment_interfaces :: unbox_any_opt (ffi_ref . requires_identity_encryption_bounded_key) ; ferment_interfaces :: unbox_any_opt (ffi_ref . requires_identity_decryption_bounded_key) ; ferment_interfaces :: unbox_any (ffi_ref . security_level_requirement) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_ctor < > (name : * mut std :: os :: raw :: c_char , schema : * mut crate :: fermented :: types :: platform_value :: platform_value_Value , indices : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index , index_structure : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevel , flattened_properties : * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty , properties : * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty , identifier_paths : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , binary_paths : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , required_fields : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , transient_fields : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , documents_keep_history : bool , documents_mutable : bool , documents_can_be_deleted : bool , documents_transferable : * mut crate :: fermented :: types :: dpp :: document :: transfer :: dpp_document_transfer_Transferable , trade_mode : * mut crate :: fermented :: types :: dpp :: nft :: dpp_nft_TradeMode , creation_restriction_mode : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: restricted_creation :: dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode , data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , requires_identity_encryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements , requires_identity_decryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements , security_level_requirement : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) -> * mut dpp_data_contract_document_type_v0_DocumentTypeV0 { ferment_interfaces :: boxed (dpp_data_contract_document_type_v0_DocumentTypeV0 { name , schema , indices , index_structure , flattened_properties , properties , identifier_paths , binary_paths , required_fields , transient_fields , documents_keep_history , documents_mutable , documents_can_be_deleted , documents_transferable , trade_mode , creation_restriction_mode , data_contract_id , requires_identity_encryption_bounded_key , requires_identity_decryption_bounded_key , security_level_requirement }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_destroy < > (ffi : * mut dpp_data_contract_document_type_v0_DocumentTypeV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_name < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut std :: os :: raw :: c_char { (* obj) . name } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_schema < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: platform_value :: platform_value_Value { (* obj) . schema } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_indices < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index { (* obj) . indices } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_index_structure < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevel { (* obj) . index_structure } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_flattened_properties < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { (* obj) . flattened_properties } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_properties < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { (* obj) . properties } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_identifier_paths < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: std_collections_BTreeSet_String { (* obj) . identifier_paths } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_binary_paths < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: std_collections_BTreeSet_String { (* obj) . binary_paths } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_required_fields < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: std_collections_BTreeSet_String { (* obj) . required_fields } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_transient_fields < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: std_collections_BTreeSet_String { (* obj) . transient_fields } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_documents_keep_history < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> bool { (* obj) . documents_keep_history } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_documents_mutable < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> bool { (* obj) . documents_mutable } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_documents_can_be_deleted < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> bool { (* obj) . documents_can_be_deleted } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_documents_transferable < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: document :: transfer :: dpp_document_transfer_Transferable { (* obj) . documents_transferable } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_trade_mode < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: nft :: dpp_nft_TradeMode { (* obj) . trade_mode } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_creation_restriction_mode < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: restricted_creation :: dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { (* obj) . creation_restriction_mode } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_data_contract_id < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_requires_identity_encryption_bounded_key < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { (* obj) . requires_identity_encryption_bounded_key } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_requires_identity_decryption_bounded_key < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { (* obj) . requires_identity_decryption_bounded_key } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_security_level_requirement < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . security_level_requirement } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_name < > (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut std :: os :: raw :: c_char) { (* obj) . name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_schema < > (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: types :: platform_value :: platform_value_Value) { (* obj) . schema = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_indices < > (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index) { (* obj) . indices = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_index_structure < > (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevel) { (* obj) . index_structure = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_flattened_properties < > (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty) { (* obj) . flattened_properties = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_properties < > (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty) { (* obj) . properties = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_identifier_paths < > (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String) { (* obj) . identifier_paths = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_binary_paths < > (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String) { (* obj) . binary_paths = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_required_fields < > (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String) { (* obj) . required_fields = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_transient_fields < > (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String) { (* obj) . transient_fields = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_documents_keep_history < > (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : bool) { (* obj) . documents_keep_history = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_documents_mutable < > (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : bool) { (* obj) . documents_mutable = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_documents_can_be_deleted < > (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : bool) { (* obj) . documents_can_be_deleted = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_documents_transferable < > (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: types :: dpp :: document :: transfer :: dpp_document_transfer_Transferable) { (* obj) . documents_transferable = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_trade_mode < > (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: types :: dpp :: nft :: dpp_nft_TradeMode) { (* obj) . trade_mode = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_creation_restriction_mode < > (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: restricted_creation :: dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode) { (* obj) . creation_restriction_mode = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_data_contract_id < > (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_requires_identity_encryption_bounded_key < > (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements) { (* obj) . requires_identity_encryption_bounded_key = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_requires_identity_decryption_bounded_key < > (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements) { (* obj) . requires_identity_decryption_bounded_key = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_security_level_requirement < > (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . security_level_requirement = value ; } # [cfg (feature = "validation")] pub mod validator { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: data_contract :: document_type :: v0 :: validator :: StatelessJsonSchemaLazyValidator`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator (* mut dpp :: validation :: json_schema_validator :: dpp_validation_JsonSchemaValidator) ; impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: document_type :: v0 :: validator :: StatelessJsonSchemaLazyValidator > for dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator) -> dpp :: data_contract :: document_type :: v0 :: validator :: StatelessJsonSchemaLazyValidator { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: v0 :: validator :: StatelessJsonSchemaLazyValidator (ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . 0)) } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: document_type :: v0 :: validator :: StatelessJsonSchemaLazyValidator > for dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: v0 :: validator :: StatelessJsonSchemaLazyValidator) -> * const dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator { ferment_interfaces :: boxed (dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator (ferment_interfaces :: FFIConversionTo :: ffi_to (obj . 0))) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: document_type :: v0 :: validator :: StatelessJsonSchemaLazyValidator > for dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator { unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator_ctor < > (o_0 : * mut dpp :: validation :: json_schema_validator :: dpp_validation_JsonSchemaValidator) -> * mut dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator { ferment_interfaces :: boxed (dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator_destroy < > (ffi : * mut dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator_get_0 < > (obj : * const dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator) -> * mut dpp :: validation :: json_schema_validator :: dpp_validation_JsonSchemaValidator { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator_set_0 < > (obj : * mut dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator , value : * mut dpp :: validation :: json_schema_validator :: dpp_validation_JsonSchemaValidator) { (* obj) . 0 = value ; } } } pub mod class_methods { use crate as ferment_example_platform ; pub mod create_document_types_from_document_schemas { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } } } pub mod try_from_schema { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; pub mod document_type_name { use crate as ferment_example_platform ; } } } } } pub mod methods { use crate as ferment_example_platform ; pub mod max_size { use crate as ferment_example_platform ; } pub mod create_document_with_prevalidated_properties { use crate as ferment_example_platform ; } # [cfg (feature = "validation")] pub mod validate_update { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; pub mod validate_config { use crate as ferment_example_platform ; } pub mod validate_schema { use crate as ferment_example_platform ; } } } } pub mod deserialize_value_for_key { use crate as ferment_example_platform ; } pub mod contested_vote_poll_for_document { use crate as ferment_example_platform ; } pub mod create_document_from_data { use crate as ferment_example_platform ; } pub mod prefunded_voting_balances_for_document { use crate as ferment_example_platform ; } pub mod serialize_value_for_key { use crate as ferment_example_platform ; } pub mod estimated_size { use crate as ferment_example_platform ; } pub mod index_for_types { use crate as ferment_example_platform ; } } pub mod schema { use crate as ferment_example_platform ; pub mod enrich_with_base_schema { use crate as ferment_example_platform ; } pub mod find_identifier_and_binary_paths { use crate as ferment_example_platform ; } # [cfg (feature = "validation")] pub mod validate_max_depth { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } } } # [cfg (feature = "validation")] pub mod validate_schema_compatibility { use crate as ferment_example_platform ; } # [cfg (feature = "validation")] pub mod recursive_schema_validator { use crate as ferment_example_platform ; pub mod traversal_validator { use crate as ferment_example_platform ; } # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } } } pub mod index { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: data_contract :: document_type :: index :: ContestedIndexInformation`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_index_ContestedIndexInformation { pub field_matches : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch , pub resolution : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexResolution } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: document_type :: index :: ContestedIndexInformation > for dpp_data_contract_document_type_index_ContestedIndexInformation { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_ContestedIndexInformation) -> dpp :: data_contract :: document_type :: index :: ContestedIndexInformation { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: index :: ContestedIndexInformation { field_matches : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . field_matches) , resolution : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . resolution) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: document_type :: index :: ContestedIndexInformation > for dpp_data_contract_document_type_index_ContestedIndexInformation { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index :: ContestedIndexInformation) -> * const dpp_data_contract_document_type_index_ContestedIndexInformation { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_ContestedIndexInformation { field_matches : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . field_matches) , resolution : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . resolution) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: document_type :: index :: ContestedIndexInformation > for dpp_data_contract_document_type_index_ContestedIndexInformation { unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_index_ContestedIndexInformation) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_document_type_index_ContestedIndexInformation { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . field_matches) ; ; ferment_interfaces :: unbox_any (ffi_ref . resolution) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexInformation_ctor < > (field_matches : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch , resolution : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexResolution) -> * mut dpp_data_contract_document_type_index_ContestedIndexInformation { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_ContestedIndexInformation { field_matches , resolution }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexInformation_destroy < > (ffi : * mut dpp_data_contract_document_type_index_ContestedIndexInformation) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexInformation_get_field_matches < > (obj : * const dpp_data_contract_document_type_index_ContestedIndexInformation) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch { (* obj) . field_matches } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexInformation_get_resolution < > (obj : * const dpp_data_contract_document_type_index_ContestedIndexInformation) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexResolution { (* obj) . resolution } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexInformation_set_field_matches < > (obj : * mut dpp_data_contract_document_type_index_ContestedIndexInformation , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch) { (* obj) . field_matches = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexInformation_set_resolution < > (obj : * mut dpp_data_contract_document_type_index_ContestedIndexInformation , value : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexResolution) { (* obj) . resolution = value ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: data_contract :: document_type :: index :: ContestedIndexResolution`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_document_type_index_ContestedIndexResolution { MasternodeVote = 0 } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: document_type :: index :: ContestedIndexResolution > for dpp_data_contract_document_type_index_ContestedIndexResolution { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_ContestedIndexResolution) -> dpp :: data_contract :: document_type :: index :: ContestedIndexResolution { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_document_type_index_ContestedIndexResolution :: MasternodeVote => dpp :: data_contract :: document_type :: index :: ContestedIndexResolution :: MasternodeVote } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: document_type :: index :: ContestedIndexResolution > for dpp_data_contract_document_type_index_ContestedIndexResolution { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index :: ContestedIndexResolution) -> * const dpp_data_contract_document_type_index_ContestedIndexResolution { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: document_type :: index :: ContestedIndexResolution :: MasternodeVote => dpp_data_contract_document_type_index_ContestedIndexResolution :: MasternodeVote , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: document_type :: index :: ContestedIndexResolution > for dpp_data_contract_document_type_index_ContestedIndexResolution { unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_index_ContestedIndexResolution) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_document_type_index_ContestedIndexResolution { fn drop (& mut self) { unsafe { match self { dpp_data_contract_document_type_index_ContestedIndexResolution :: MasternodeVote => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexResolution_MasternodeVote_ctor () -> * mut dpp_data_contract_document_type_index_ContestedIndexResolution { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_ContestedIndexResolution :: MasternodeVote { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexResolution_destroy < > (ffi : * mut dpp_data_contract_document_type_index_ContestedIndexResolution) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_document_type_index_ContestedIndexFieldMatch { Regex (* mut ferment_example_platform :: custom :: regex :: regex_Regex) , PositiveIntegerMatch (u128) } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch > for dpp_data_contract_document_type_index_ContestedIndexFieldMatch { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_ContestedIndexFieldMatch) -> dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_document_type_index_ContestedIndexFieldMatch :: Regex (o_0) => dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch :: Regex (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_document_type_index_ContestedIndexFieldMatch :: PositiveIntegerMatch (o_0) => dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch :: PositiveIntegerMatch (* o_0) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch > for dpp_data_contract_document_type_index_ContestedIndexFieldMatch { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch) -> * const dpp_data_contract_document_type_index_ContestedIndexFieldMatch { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch :: Regex (o_0) => dpp_data_contract_document_type_index_ContestedIndexFieldMatch :: Regex (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch :: PositiveIntegerMatch (o_0) => dpp_data_contract_document_type_index_ContestedIndexFieldMatch :: PositiveIntegerMatch (o_0) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch > for dpp_data_contract_document_type_index_ContestedIndexFieldMatch { unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_index_ContestedIndexFieldMatch) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_document_type_index_ContestedIndexFieldMatch { fn drop (& mut self) { unsafe { match self { dpp_data_contract_document_type_index_ContestedIndexFieldMatch :: Regex (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_data_contract_document_type_index_ContestedIndexFieldMatch :: PositiveIntegerMatch (o_0) => { ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexFieldMatch_Regex_ctor (o_o_0 : * mut ferment_example_platform :: custom :: regex :: regex_Regex) -> * mut dpp_data_contract_document_type_index_ContestedIndexFieldMatch { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_ContestedIndexFieldMatch :: Regex (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexFieldMatch_PositiveIntegerMatch_ctor (o_o_0 : u128) -> * mut dpp_data_contract_document_type_index_ContestedIndexFieldMatch { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_ContestedIndexFieldMatch :: PositiveIntegerMatch (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexFieldMatch_destroy < > (ffi : * mut dpp_data_contract_document_type_index_ContestedIndexFieldMatch) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: data_contract :: document_type :: index :: OrderBy`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_document_type_index_OrderBy { Asc , Desc } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: document_type :: index :: OrderBy > for dpp_data_contract_document_type_index_OrderBy { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_OrderBy) -> dpp :: data_contract :: document_type :: index :: OrderBy { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_document_type_index_OrderBy :: Asc => dpp :: data_contract :: document_type :: index :: OrderBy :: Asc , dpp_data_contract_document_type_index_OrderBy :: Desc => dpp :: data_contract :: document_type :: index :: OrderBy :: Desc } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: document_type :: index :: OrderBy > for dpp_data_contract_document_type_index_OrderBy { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index :: OrderBy) -> * const dpp_data_contract_document_type_index_OrderBy { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: document_type :: index :: OrderBy :: Asc => dpp_data_contract_document_type_index_OrderBy :: Asc , dpp :: data_contract :: document_type :: index :: OrderBy :: Desc => dpp_data_contract_document_type_index_OrderBy :: Desc , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: document_type :: index :: OrderBy > for dpp_data_contract_document_type_index_OrderBy { unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_index_OrderBy) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_document_type_index_OrderBy { fn drop (& mut self) { unsafe { match self { dpp_data_contract_document_type_index_OrderBy :: Asc => { } , dpp_data_contract_document_type_index_OrderBy :: Desc => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_OrderBy_Asc_ctor () -> * mut dpp_data_contract_document_type_index_OrderBy { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_OrderBy :: Asc { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_OrderBy_Desc_ctor () -> * mut dpp_data_contract_document_type_index_OrderBy { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_OrderBy :: Desc { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_OrderBy_destroy < > (ffi : * mut dpp_data_contract_document_type_index_OrderBy) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`dpp :: data_contract :: document_type :: index :: IndexProperty`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_index_IndexProperty { pub name : * mut std :: os :: raw :: c_char , pub ascending : bool } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: document_type :: index :: IndexProperty > for dpp_data_contract_document_type_index_IndexProperty { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_IndexProperty) -> dpp :: data_contract :: document_type :: index :: IndexProperty { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: index :: IndexProperty { name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . name) , ascending : ffi_ref . ascending } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: document_type :: index :: IndexProperty > for dpp_data_contract_document_type_index_IndexProperty { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index :: IndexProperty) -> * const dpp_data_contract_document_type_index_IndexProperty { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_IndexProperty { name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . name) , ascending : obj . ascending }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: document_type :: index :: IndexProperty > for dpp_data_contract_document_type_index_IndexProperty { unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_index_IndexProperty) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_document_type_index_IndexProperty { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . name) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_IndexProperty_ctor < > (name : * mut std :: os :: raw :: c_char , ascending : bool) -> * mut dpp_data_contract_document_type_index_IndexProperty { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_IndexProperty { name , ascending }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_IndexProperty_destroy < > (ffi : * mut dpp_data_contract_document_type_index_IndexProperty) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_IndexProperty_get_name < > (obj : * const dpp_data_contract_document_type_index_IndexProperty) -> * mut std :: os :: raw :: c_char { (* obj) . name } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_IndexProperty_get_ascending < > (obj : * const dpp_data_contract_document_type_index_IndexProperty) -> bool { (* obj) . ascending } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_IndexProperty_set_name < > (obj : * mut dpp_data_contract_document_type_index_IndexProperty , value : * mut std :: os :: raw :: c_char) { (* obj) . name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_IndexProperty_set_ascending < > (obj : * mut dpp_data_contract_document_type_index_IndexProperty , value : bool) { (* obj) . ascending = value ; } # [doc = "FFI-representation of the [`dpp :: data_contract :: document_type :: index :: Index`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_index_Index { pub name : * mut std :: os :: raw :: c_char , pub properties : * mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_index_IndexProperty , pub unique : bool , pub null_searchable : bool , pub contested_index : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexInformation } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: document_type :: index :: Index > for dpp_data_contract_document_type_index_Index { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_Index) -> dpp :: data_contract :: document_type :: index :: Index { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: index :: Index { name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . name) , properties : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . properties) , unique : ffi_ref . unique , null_searchable : ffi_ref . null_searchable , contested_index : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . contested_index) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: document_type :: index :: Index > for dpp_data_contract_document_type_index_Index { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index :: Index) -> * const dpp_data_contract_document_type_index_Index { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_Index { name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . name) , properties : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . properties) , unique : obj . unique , null_searchable : obj . null_searchable , contested_index : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . contested_index) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: document_type :: index :: Index > for dpp_data_contract_document_type_index_Index { unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_index_Index) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_document_type_index_Index { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . name) ; ferment_interfaces :: unbox_any (ffi_ref . properties) ; ; ; ; ferment_interfaces :: unbox_any_opt (ffi_ref . contested_index) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_ctor < > (name : * mut std :: os :: raw :: c_char , properties : * mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_index_IndexProperty , unique : bool , null_searchable : bool , contested_index : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexInformation) -> * mut dpp_data_contract_document_type_index_Index { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_Index { name , properties , unique , null_searchable , contested_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_destroy < > (ffi : * mut dpp_data_contract_document_type_index_Index) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_get_name < > (obj : * const dpp_data_contract_document_type_index_Index) -> * mut std :: os :: raw :: c_char { (* obj) . name } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_get_properties < > (obj : * const dpp_data_contract_document_type_index_Index) -> * mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_index_IndexProperty { (* obj) . properties } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_get_unique < > (obj : * const dpp_data_contract_document_type_index_Index) -> bool { (* obj) . unique } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_get_null_searchable < > (obj : * const dpp_data_contract_document_type_index_Index) -> bool { (* obj) . null_searchable } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_get_contested_index < > (obj : * const dpp_data_contract_document_type_index_Index) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexInformation { (* obj) . contested_index } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_set_name < > (obj : * mut dpp_data_contract_document_type_index_Index , value : * mut std :: os :: raw :: c_char) { (* obj) . name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_set_properties < > (obj : * mut dpp_data_contract_document_type_index_Index , value : * mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_index_IndexProperty) { (* obj) . properties = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_set_unique < > (obj : * mut dpp_data_contract_document_type_index_Index , value : bool) { (* obj) . unique = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_set_null_searchable < > (obj : * mut dpp_data_contract_document_type_index_Index , value : bool) { (* obj) . null_searchable = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_set_contested_index < > (obj : * mut dpp_data_contract_document_type_index_Index , value : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexInformation) { (* obj) . contested_index = value ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: data_contract :: document_type :: DocumentType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_document_type_DocumentType { V0 (* mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: v0 :: dpp_data_contract_document_type_v0_DocumentTypeV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: document_type :: DocumentType > for dpp_data_contract_document_type_DocumentType { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_DocumentType) -> dpp :: data_contract :: document_type :: DocumentType { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_document_type_DocumentType :: V0 (o_0) => dpp :: data_contract :: document_type :: DocumentType :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: document_type :: DocumentType > for dpp_data_contract_document_type_DocumentType { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: DocumentType) -> * const dpp_data_contract_document_type_DocumentType { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: document_type :: DocumentType :: V0 (o_0) => dpp_data_contract_document_type_DocumentType :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: document_type :: DocumentType > for dpp_data_contract_document_type_DocumentType { unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_DocumentType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_document_type_DocumentType { fn drop (& mut self) { unsafe { match self { dpp_data_contract_document_type_DocumentType :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_DocumentType_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: v0 :: dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut dpp_data_contract_document_type_DocumentType { ferment_interfaces :: boxed (dpp_data_contract_document_type_DocumentType :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_DocumentType_destroy < > (ffi : * mut dpp_data_contract_document_type_DocumentType) { ferment_interfaces :: unbox_any (ffi) ; } pub mod restricted_creation { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { NoRestrictions , OwnerOnly , NoCreationAllowed } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode > for dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode) -> dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: NoRestrictions => dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode :: NoRestrictions , dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: OwnerOnly => dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode :: OwnerOnly , dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: NoCreationAllowed => dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode :: NoCreationAllowed } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode > for dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode) -> * const dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode :: NoRestrictions => dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: NoRestrictions , dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode :: OwnerOnly => dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: OwnerOnly , dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode :: NoCreationAllowed => dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: NoCreationAllowed , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode > for dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { fn drop (& mut self) { unsafe { match self { dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: NoRestrictions => { } , dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: OwnerOnly => { } , dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: NoCreationAllowed => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode_NoRestrictions_ctor () -> * mut dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { ferment_interfaces :: boxed (dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: NoRestrictions { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode_OwnerOnly_ctor () -> * mut dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { ferment_interfaces :: boxed (dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: OwnerOnly { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode_NoCreationAllowed_ctor () -> * mut dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { ferment_interfaces :: boxed (dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: NoCreationAllowed { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode_destroy < > (ffi : * mut dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod property_names { use crate as ferment_example_platform ; } pub mod accessors { use crate as ferment_example_platform ; } pub mod property { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: data_contract :: document_type :: property :: DocumentPropertyType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_document_type_property_DocumentPropertyType { U128 , I128 , U64 , I64 , U32 , I32 , U16 , I16 , U8 , I8 , F64 , String (* mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_StringPropertySizes) , ByteArray (* mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_ByteArrayPropertySizes) , Identifier , Boolean , Date , Object (* mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty) , Array (* mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: array :: dpp_data_contract_document_type_property_array_ArrayItemType) , VariableTypeArray (* mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_property_array_ArrayItemType) } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: document_type :: property :: DocumentPropertyType > for dpp_data_contract_document_type_property_DocumentPropertyType { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_property_DocumentPropertyType) -> dpp :: data_contract :: document_type :: property :: DocumentPropertyType { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_document_type_property_DocumentPropertyType :: U128 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: U128 , dpp_data_contract_document_type_property_DocumentPropertyType :: I128 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: I128 , dpp_data_contract_document_type_property_DocumentPropertyType :: U64 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: U64 , dpp_data_contract_document_type_property_DocumentPropertyType :: I64 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: I64 , dpp_data_contract_document_type_property_DocumentPropertyType :: U32 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: U32 , dpp_data_contract_document_type_property_DocumentPropertyType :: I32 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: I32 , dpp_data_contract_document_type_property_DocumentPropertyType :: U16 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: U16 , dpp_data_contract_document_type_property_DocumentPropertyType :: I16 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: I16 , dpp_data_contract_document_type_property_DocumentPropertyType :: U8 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: U8 , dpp_data_contract_document_type_property_DocumentPropertyType :: I8 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: I8 , dpp_data_contract_document_type_property_DocumentPropertyType :: F64 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: F64 , dpp_data_contract_document_type_property_DocumentPropertyType :: String (o_0) => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: String (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_document_type_property_DocumentPropertyType :: ByteArray (o_0) => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: ByteArray (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_document_type_property_DocumentPropertyType :: Identifier => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Identifier , dpp_data_contract_document_type_property_DocumentPropertyType :: Boolean => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Boolean , dpp_data_contract_document_type_property_DocumentPropertyType :: Date => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Date , dpp_data_contract_document_type_property_DocumentPropertyType :: Object (o_0) => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Object (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_document_type_property_DocumentPropertyType :: Array (o_0) => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Array (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_data_contract_document_type_property_DocumentPropertyType :: VariableTypeArray (o_0) => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: VariableTypeArray (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: document_type :: property :: DocumentPropertyType > for dpp_data_contract_document_type_property_DocumentPropertyType { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: property :: DocumentPropertyType) -> * const dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: U128 => dpp_data_contract_document_type_property_DocumentPropertyType :: U128 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: I128 => dpp_data_contract_document_type_property_DocumentPropertyType :: I128 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: U64 => dpp_data_contract_document_type_property_DocumentPropertyType :: U64 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: I64 => dpp_data_contract_document_type_property_DocumentPropertyType :: I64 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: U32 => dpp_data_contract_document_type_property_DocumentPropertyType :: U32 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: I32 => dpp_data_contract_document_type_property_DocumentPropertyType :: I32 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: U16 => dpp_data_contract_document_type_property_DocumentPropertyType :: U16 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: I16 => dpp_data_contract_document_type_property_DocumentPropertyType :: I16 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: U8 => dpp_data_contract_document_type_property_DocumentPropertyType :: U8 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: I8 => dpp_data_contract_document_type_property_DocumentPropertyType :: I8 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: F64 => dpp_data_contract_document_type_property_DocumentPropertyType :: F64 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: String (o_0) => dpp_data_contract_document_type_property_DocumentPropertyType :: String (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: ByteArray (o_0) => dpp_data_contract_document_type_property_DocumentPropertyType :: ByteArray (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Identifier => dpp_data_contract_document_type_property_DocumentPropertyType :: Identifier , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Boolean => dpp_data_contract_document_type_property_DocumentPropertyType :: Boolean , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Date => dpp_data_contract_document_type_property_DocumentPropertyType :: Date , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Object (o_0) => dpp_data_contract_document_type_property_DocumentPropertyType :: Object (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Array (o_0) => dpp_data_contract_document_type_property_DocumentPropertyType :: Array (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: VariableTypeArray (o_0) => dpp_data_contract_document_type_property_DocumentPropertyType :: VariableTypeArray (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: document_type :: property :: DocumentPropertyType > for dpp_data_contract_document_type_property_DocumentPropertyType { unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_property_DocumentPropertyType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_document_type_property_DocumentPropertyType { fn drop (& mut self) { unsafe { match self { dpp_data_contract_document_type_property_DocumentPropertyType :: U128 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: I128 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: U64 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: I64 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: U32 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: I32 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: U16 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: I16 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: U8 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: I8 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: F64 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: String (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_data_contract_document_type_property_DocumentPropertyType :: ByteArray (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_data_contract_document_type_property_DocumentPropertyType :: Identifier => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: Boolean => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: Date => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: Object (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_data_contract_document_type_property_DocumentPropertyType :: Array (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_data_contract_document_type_property_DocumentPropertyType :: VariableTypeArray (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_U128_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: U128 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_I128_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: I128 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_U64_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: U64 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_I64_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: I64 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_U32_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: U32 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_I32_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: I32 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_U16_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: U16 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_I16_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: I16 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_U8_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: U8 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_I8_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: I8 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_F64_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: F64 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_String_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_StringPropertySizes) -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: String (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_ByteArray_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_ByteArrayPropertySizes) -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: ByteArray (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_Identifier_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: Identifier { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_Boolean_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: Boolean { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_Date_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: Date { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_Object_ctor (o_o_0 : * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty) -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: Object (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_Array_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: array :: dpp_data_contract_document_type_property_array_ArrayItemType) -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: Array (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_VariableTypeArray_ctor (o_o_0 : * mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_property_array_ArrayItemType) -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: VariableTypeArray (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_destroy < > (ffi : * mut dpp_data_contract_document_type_property_DocumentPropertyType) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`dpp :: data_contract :: document_type :: property :: StringPropertySizes`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_property_StringPropertySizes { pub min_length : * mut u16 , pub max_length : * mut u16 } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: document_type :: property :: StringPropertySizes > for dpp_data_contract_document_type_property_StringPropertySizes { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_property_StringPropertySizes) -> dpp :: data_contract :: document_type :: property :: StringPropertySizes { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: property :: StringPropertySizes { min_length : ferment_interfaces :: from_opt_primitive (ffi_ref . min_length) , max_length : ferment_interfaces :: from_opt_primitive (ffi_ref . max_length) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: document_type :: property :: StringPropertySizes > for dpp_data_contract_document_type_property_StringPropertySizes { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: property :: StringPropertySizes) -> * const dpp_data_contract_document_type_property_StringPropertySizes { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_StringPropertySizes { min_length : ferment_interfaces :: to_opt_primitive (obj . min_length) , max_length : ferment_interfaces :: to_opt_primitive (obj . max_length) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: document_type :: property :: StringPropertySizes > for dpp_data_contract_document_type_property_StringPropertySizes { unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_property_StringPropertySizes) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_document_type_property_StringPropertySizes { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_StringPropertySizes_ctor < > (min_length : * mut u16 , max_length : * mut u16) -> * mut dpp_data_contract_document_type_property_StringPropertySizes { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_StringPropertySizes { min_length , max_length }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_StringPropertySizes_destroy < > (ffi : * mut dpp_data_contract_document_type_property_StringPropertySizes) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_StringPropertySizes_get_min_length < > (obj : * const dpp_data_contract_document_type_property_StringPropertySizes) -> * mut u16 { (* obj) . min_length } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_StringPropertySizes_get_max_length < > (obj : * const dpp_data_contract_document_type_property_StringPropertySizes) -> * mut u16 { (* obj) . max_length } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_StringPropertySizes_set_min_length < > (obj : * mut dpp_data_contract_document_type_property_StringPropertySizes , value : * mut u16) { (* obj) . min_length = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_StringPropertySizes_set_max_length < > (obj : * mut dpp_data_contract_document_type_property_StringPropertySizes , value : * mut u16) { (* obj) . max_length = value ; } pub mod array { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: data_contract :: document_type :: property :: array :: ArrayItemType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_document_type_property_array_ArrayItemType { Integer , Number , String (* mut usize , * mut usize) , ByteArray (* mut usize , * mut usize) , Identifier , Boolean , Date } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType > for dpp_data_contract_document_type_property_array_ArrayItemType { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_property_array_ArrayItemType) -> dpp :: data_contract :: document_type :: property :: array :: ArrayItemType { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_document_type_property_array_ArrayItemType :: Integer => dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Integer , dpp_data_contract_document_type_property_array_ArrayItemType :: Number => dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Number , dpp_data_contract_document_type_property_array_ArrayItemType :: String (o_0 , o_1) => dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: String (ferment_interfaces :: from_opt_primitive (* o_0) , ferment_interfaces :: from_opt_primitive (* o_1)) , dpp_data_contract_document_type_property_array_ArrayItemType :: ByteArray (o_0 , o_1) => dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: ByteArray (ferment_interfaces :: from_opt_primitive (* o_0) , ferment_interfaces :: from_opt_primitive (* o_1)) , dpp_data_contract_document_type_property_array_ArrayItemType :: Identifier => dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Identifier , dpp_data_contract_document_type_property_array_ArrayItemType :: Boolean => dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Boolean , dpp_data_contract_document_type_property_array_ArrayItemType :: Date => dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Date } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType > for dpp_data_contract_document_type_property_array_ArrayItemType { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: property :: array :: ArrayItemType) -> * const dpp_data_contract_document_type_property_array_ArrayItemType { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Integer => dpp_data_contract_document_type_property_array_ArrayItemType :: Integer , dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Number => dpp_data_contract_document_type_property_array_ArrayItemType :: Number , dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: String (o_0 , o_1) => dpp_data_contract_document_type_property_array_ArrayItemType :: String (ferment_interfaces :: to_opt_primitive (o_0) , ferment_interfaces :: to_opt_primitive (o_1)) , dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: ByteArray (o_0 , o_1) => dpp_data_contract_document_type_property_array_ArrayItemType :: ByteArray (ferment_interfaces :: to_opt_primitive (o_0) , ferment_interfaces :: to_opt_primitive (o_1)) , dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Identifier => dpp_data_contract_document_type_property_array_ArrayItemType :: Identifier , dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Boolean => dpp_data_contract_document_type_property_array_ArrayItemType :: Boolean , dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Date => dpp_data_contract_document_type_property_array_ArrayItemType :: Date , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType > for dpp_data_contract_document_type_property_array_ArrayItemType { unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_property_array_ArrayItemType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_document_type_property_array_ArrayItemType { fn drop (& mut self) { unsafe { match self { dpp_data_contract_document_type_property_array_ArrayItemType :: Integer => { } , dpp_data_contract_document_type_property_array_ArrayItemType :: Number => { } , dpp_data_contract_document_type_property_array_ArrayItemType :: String (o_0 , o_1) => { ; ; ; } , dpp_data_contract_document_type_property_array_ArrayItemType :: ByteArray (o_0 , o_1) => { ; ; ; } , dpp_data_contract_document_type_property_array_ArrayItemType :: Identifier => { } , dpp_data_contract_document_type_property_array_ArrayItemType :: Boolean => { } , dpp_data_contract_document_type_property_array_ArrayItemType :: Date => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_Integer_ctor () -> * mut dpp_data_contract_document_type_property_array_ArrayItemType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_array_ArrayItemType :: Integer { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_Number_ctor () -> * mut dpp_data_contract_document_type_property_array_ArrayItemType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_array_ArrayItemType :: Number { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_String_ctor (o_o_0 : * mut usize , o_o_1 : * mut usize) -> * mut dpp_data_contract_document_type_property_array_ArrayItemType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_array_ArrayItemType :: String (o_o_0 , o_o_1)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_ByteArray_ctor (o_o_0 : * mut usize , o_o_1 : * mut usize) -> * mut dpp_data_contract_document_type_property_array_ArrayItemType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_array_ArrayItemType :: ByteArray (o_o_0 , o_o_1)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_Identifier_ctor () -> * mut dpp_data_contract_document_type_property_array_ArrayItemType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_array_ArrayItemType :: Identifier { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_Boolean_ctor () -> * mut dpp_data_contract_document_type_property_array_ArrayItemType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_array_ArrayItemType :: Boolean { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_Date_ctor () -> * mut dpp_data_contract_document_type_property_array_ArrayItemType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_array_ArrayItemType :: Date { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_destroy < > (ffi : * mut dpp_data_contract_document_type_property_array_ArrayItemType) { ferment_interfaces :: unbox_any (ffi) ; } } # [doc = "FFI-representation of the [`dpp :: data_contract :: document_type :: property :: ByteArrayPropertySizes`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_property_ByteArrayPropertySizes { pub min_size : * mut u16 , pub max_size : * mut u16 } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: document_type :: property :: ByteArrayPropertySizes > for dpp_data_contract_document_type_property_ByteArrayPropertySizes { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_property_ByteArrayPropertySizes) -> dpp :: data_contract :: document_type :: property :: ByteArrayPropertySizes { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: property :: ByteArrayPropertySizes { min_size : ferment_interfaces :: from_opt_primitive (ffi_ref . min_size) , max_size : ferment_interfaces :: from_opt_primitive (ffi_ref . max_size) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: document_type :: property :: ByteArrayPropertySizes > for dpp_data_contract_document_type_property_ByteArrayPropertySizes { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: property :: ByteArrayPropertySizes) -> * const dpp_data_contract_document_type_property_ByteArrayPropertySizes { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_ByteArrayPropertySizes { min_size : ferment_interfaces :: to_opt_primitive (obj . min_size) , max_size : ferment_interfaces :: to_opt_primitive (obj . max_size) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: document_type :: property :: ByteArrayPropertySizes > for dpp_data_contract_document_type_property_ByteArrayPropertySizes { unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_property_ByteArrayPropertySizes) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_document_type_property_ByteArrayPropertySizes { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_ByteArrayPropertySizes_ctor < > (min_size : * mut u16 , max_size : * mut u16) -> * mut dpp_data_contract_document_type_property_ByteArrayPropertySizes { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_ByteArrayPropertySizes { min_size , max_size }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_ByteArrayPropertySizes_destroy < > (ffi : * mut dpp_data_contract_document_type_property_ByteArrayPropertySizes) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_ByteArrayPropertySizes_get_min_size < > (obj : * const dpp_data_contract_document_type_property_ByteArrayPropertySizes) -> * mut u16 { (* obj) . min_size } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_ByteArrayPropertySizes_get_max_size < > (obj : * const dpp_data_contract_document_type_property_ByteArrayPropertySizes) -> * mut u16 { (* obj) . max_size } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_ByteArrayPropertySizes_set_min_size < > (obj : * mut dpp_data_contract_document_type_property_ByteArrayPropertySizes , value : * mut u16) { (* obj) . min_size = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_ByteArrayPropertySizes_set_max_size < > (obj : * mut dpp_data_contract_document_type_property_ByteArrayPropertySizes , value : * mut u16) { (* obj) . max_size = value ; } # [doc = "FFI-representation of the [`dpp :: data_contract :: document_type :: property :: DocumentProperty`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_property_DocumentProperty { pub property_type : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_DocumentPropertyType , pub required : bool , pub transient : bool } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: document_type :: property :: DocumentProperty > for dpp_data_contract_document_type_property_DocumentProperty { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_property_DocumentProperty) -> dpp :: data_contract :: document_type :: property :: DocumentProperty { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: property :: DocumentProperty { property_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . property_type) , required : ffi_ref . required , transient : ffi_ref . transient } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: document_type :: property :: DocumentProperty > for dpp_data_contract_document_type_property_DocumentProperty { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: property :: DocumentProperty) -> * const dpp_data_contract_document_type_property_DocumentProperty { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentProperty { property_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . property_type) , required : obj . required , transient : obj . transient }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: document_type :: property :: DocumentProperty > for dpp_data_contract_document_type_property_DocumentProperty { unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_property_DocumentProperty) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_document_type_property_DocumentProperty { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . property_type) ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_ctor < > (property_type : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_DocumentPropertyType , required : bool , transient : bool) -> * mut dpp_data_contract_document_type_property_DocumentProperty { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentProperty { property_type , required , transient }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_destroy < > (ffi : * mut dpp_data_contract_document_type_property_DocumentProperty) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_get_property_type < > (obj : * const dpp_data_contract_document_type_property_DocumentProperty) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_DocumentPropertyType { (* obj) . property_type } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_get_required < > (obj : * const dpp_data_contract_document_type_property_DocumentProperty) -> bool { (* obj) . required } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_get_transient < > (obj : * const dpp_data_contract_document_type_property_DocumentProperty) -> bool { (* obj) . transient } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_set_property_type < > (obj : * mut dpp_data_contract_document_type_property_DocumentProperty , value : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_DocumentPropertyType) { (* obj) . property_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_set_required < > (obj : * mut dpp_data_contract_document_type_property_DocumentProperty , value : bool) { (* obj) . required = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_set_transient < > (obj : * mut dpp_data_contract_document_type_property_DocumentProperty , value : bool) { (* obj) . transient = value ; } } pub mod index_level { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: data_contract :: document_type :: index_level :: IndexLevel`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_index_level_IndexLevel { pub sub_index_levels : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel , pub has_index_with_type : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevelTypeInfo , pub level_identifier : u64 } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: document_type :: index_level :: IndexLevel > for dpp_data_contract_document_type_index_level_IndexLevel { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_level_IndexLevel) -> dpp :: data_contract :: document_type :: index_level :: IndexLevel { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: index_level :: IndexLevel { sub_index_levels : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . sub_index_levels) , has_index_with_type : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . has_index_with_type) , level_identifier : ffi_ref . level_identifier } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: document_type :: index_level :: IndexLevel > for dpp_data_contract_document_type_index_level_IndexLevel { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index_level :: IndexLevel) -> * const dpp_data_contract_document_type_index_level_IndexLevel { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_level_IndexLevel { sub_index_levels : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . sub_index_levels) , has_index_with_type : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . has_index_with_type) , level_identifier : obj . level_identifier }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: document_type :: index_level :: IndexLevel > for dpp_data_contract_document_type_index_level_IndexLevel { unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_index_level_IndexLevel) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_document_type_index_level_IndexLevel { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . sub_index_levels) ; ; ferment_interfaces :: unbox_any_opt (ffi_ref . has_index_with_type) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_ctor < > (sub_index_levels : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel , has_index_with_type : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevelTypeInfo , level_identifier : u64) -> * mut dpp_data_contract_document_type_index_level_IndexLevel { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_level_IndexLevel { sub_index_levels , has_index_with_type , level_identifier }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_destroy < > (ffi : * mut dpp_data_contract_document_type_index_level_IndexLevel) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_get_sub_index_levels < > (obj : * const dpp_data_contract_document_type_index_level_IndexLevel) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { (* obj) . sub_index_levels } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_get_has_index_with_type < > (obj : * const dpp_data_contract_document_type_index_level_IndexLevel) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevelTypeInfo { (* obj) . has_index_with_type } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_get_level_identifier < > (obj : * const dpp_data_contract_document_type_index_level_IndexLevel) -> u64 { (* obj) . level_identifier } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_set_sub_index_levels < > (obj : * mut dpp_data_contract_document_type_index_level_IndexLevel , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel) { (* obj) . sub_index_levels = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_set_has_index_with_type < > (obj : * mut dpp_data_contract_document_type_index_level_IndexLevel , value : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevelTypeInfo) { (* obj) . has_index_with_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_set_level_identifier < > (obj : * mut dpp_data_contract_document_type_index_level_IndexLevel , value : u64) { (* obj) . level_identifier = value ; } # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp :: data_contract :: document_type :: index_level :: IndexLevelTypeInfo`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_index_level_IndexLevelTypeInfo { pub should_insert_with_all_null : bool , pub index_type : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexType } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: document_type :: index_level :: IndexLevelTypeInfo > for dpp_data_contract_document_type_index_level_IndexLevelTypeInfo { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_level_IndexLevelTypeInfo) -> dpp :: data_contract :: document_type :: index_level :: IndexLevelTypeInfo { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: index_level :: IndexLevelTypeInfo { should_insert_with_all_null : ffi_ref . should_insert_with_all_null , index_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . index_type) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: document_type :: index_level :: IndexLevelTypeInfo > for dpp_data_contract_document_type_index_level_IndexLevelTypeInfo { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index_level :: IndexLevelTypeInfo) -> * const dpp_data_contract_document_type_index_level_IndexLevelTypeInfo { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_level_IndexLevelTypeInfo { should_insert_with_all_null : obj . should_insert_with_all_null , index_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . index_type) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: document_type :: index_level :: IndexLevelTypeInfo > for dpp_data_contract_document_type_index_level_IndexLevelTypeInfo { unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_index_level_IndexLevelTypeInfo) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_document_type_index_level_IndexLevelTypeInfo { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment_interfaces :: unbox_any (ffi_ref . index_type) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevelTypeInfo_ctor < > (should_insert_with_all_null : bool , index_type : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexType) -> * mut dpp_data_contract_document_type_index_level_IndexLevelTypeInfo { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_level_IndexLevelTypeInfo { should_insert_with_all_null , index_type }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevelTypeInfo_destroy < > (ffi : * mut dpp_data_contract_document_type_index_level_IndexLevelTypeInfo) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevelTypeInfo_get_should_insert_with_all_null < > (obj : * const dpp_data_contract_document_type_index_level_IndexLevelTypeInfo) -> bool { (* obj) . should_insert_with_all_null } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevelTypeInfo_get_index_type < > (obj : * const dpp_data_contract_document_type_index_level_IndexLevelTypeInfo) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexType { (* obj) . index_type } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevelTypeInfo_set_should_insert_with_all_null < > (obj : * mut dpp_data_contract_document_type_index_level_IndexLevelTypeInfo , value : bool) { (* obj) . should_insert_with_all_null = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevelTypeInfo_set_index_type < > (obj : * mut dpp_data_contract_document_type_index_level_IndexLevelTypeInfo , value : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexType) { (* obj) . index_type = value ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: data_contract :: document_type :: index_level :: IndexType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_document_type_index_level_IndexType { NonUniqueIndex , UniqueIndex , ContestedResourceIndex } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: document_type :: index_level :: IndexType > for dpp_data_contract_document_type_index_level_IndexType { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_level_IndexType) -> dpp :: data_contract :: document_type :: index_level :: IndexType { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_document_type_index_level_IndexType :: NonUniqueIndex => dpp :: data_contract :: document_type :: index_level :: IndexType :: NonUniqueIndex , dpp_data_contract_document_type_index_level_IndexType :: UniqueIndex => dpp :: data_contract :: document_type :: index_level :: IndexType :: UniqueIndex , dpp_data_contract_document_type_index_level_IndexType :: ContestedResourceIndex => dpp :: data_contract :: document_type :: index_level :: IndexType :: ContestedResourceIndex } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: document_type :: index_level :: IndexType > for dpp_data_contract_document_type_index_level_IndexType { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index_level :: IndexType) -> * const dpp_data_contract_document_type_index_level_IndexType { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: document_type :: index_level :: IndexType :: NonUniqueIndex => dpp_data_contract_document_type_index_level_IndexType :: NonUniqueIndex , dpp :: data_contract :: document_type :: index_level :: IndexType :: UniqueIndex => dpp_data_contract_document_type_index_level_IndexType :: UniqueIndex , dpp :: data_contract :: document_type :: index_level :: IndexType :: ContestedResourceIndex => dpp_data_contract_document_type_index_level_IndexType :: ContestedResourceIndex , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: document_type :: index_level :: IndexType > for dpp_data_contract_document_type_index_level_IndexType { unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_index_level_IndexType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_document_type_index_level_IndexType { fn drop (& mut self) { unsafe { match self { dpp_data_contract_document_type_index_level_IndexType :: NonUniqueIndex => { } , dpp_data_contract_document_type_index_level_IndexType :: UniqueIndex => { } , dpp_data_contract_document_type_index_level_IndexType :: ContestedResourceIndex => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexType_NonUniqueIndex_ctor () -> * mut dpp_data_contract_document_type_index_level_IndexType { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_level_IndexType :: NonUniqueIndex { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexType_UniqueIndex_ctor () -> * mut dpp_data_contract_document_type_index_level_IndexType { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_level_IndexType :: UniqueIndex { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexType_ContestedResourceIndex_ctor () -> * mut dpp_data_contract_document_type_index_level_IndexType { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_level_IndexType :: ContestedResourceIndex { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexType_destroy < > (ffi : * mut dpp_data_contract_document_type_index_level_IndexType) { ferment_interfaces :: unbox_any (ffi) ; } } } # [doc = "FFI-representation of the [`dpp :: data_contract :: JsonSchema`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_JsonSchema (* mut ferment_example_platform :: custom :: serde_json :: serde_json_JsonValue) ; impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: JsonSchema > for dpp_data_contract_JsonSchema { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_JsonSchema) -> dpp :: data_contract :: JsonSchema { let ffi_ref = & * ffi ; ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . 0) } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: JsonSchema > for dpp_data_contract_JsonSchema { unsafe fn ffi_to_const (obj : dpp :: data_contract :: JsonSchema) -> * const dpp_data_contract_JsonSchema { ferment_interfaces :: boxed (dpp_data_contract_JsonSchema (ferment_interfaces :: FFIConversionTo :: ffi_to (obj))) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: JsonSchema > for dpp_data_contract_JsonSchema { unsafe fn destroy (ffi : * mut dpp_data_contract_JsonSchema) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_JsonSchema { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_JsonSchema_ctor < > (o_0 : * mut ferment_example_platform :: custom :: serde_json :: serde_json_JsonValue) -> * mut dpp_data_contract_JsonSchema { ferment_interfaces :: boxed (dpp_data_contract_JsonSchema (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_JsonSchema_destroy < > (ffi : * mut dpp_data_contract_JsonSchema) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_JsonSchema_get_0 < > (obj : * const dpp_data_contract_JsonSchema) -> * mut ferment_example_platform :: custom :: serde_json :: serde_json_JsonValue { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_JsonSchema_set_0 < > (obj : * mut dpp_data_contract_JsonSchema , value : * mut ferment_example_platform :: custom :: serde_json :: serde_json_JsonValue) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`dpp :: data_contract :: DocumentName`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_DocumentName (* mut std :: os :: raw :: c_char) ; impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: DocumentName > for dpp_data_contract_DocumentName { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_DocumentName) -> dpp :: data_contract :: DocumentName { let ffi_ref = & * ffi ; ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . 0) } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: DocumentName > for dpp_data_contract_DocumentName { unsafe fn ffi_to_const (obj : dpp :: data_contract :: DocumentName) -> * const dpp_data_contract_DocumentName { ferment_interfaces :: boxed (dpp_data_contract_DocumentName (ferment_interfaces :: FFIConversionTo :: ffi_to (obj))) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: DocumentName > for dpp_data_contract_DocumentName { unsafe fn destroy (ffi : * mut dpp_data_contract_DocumentName) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_DocumentName { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DocumentName_ctor < > (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_DocumentName { ferment_interfaces :: boxed (dpp_data_contract_DocumentName (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DocumentName_destroy < > (ffi : * mut dpp_data_contract_DocumentName) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DocumentName_get_0 < > (obj : * const dpp_data_contract_DocumentName) -> * mut std :: os :: raw :: c_char { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DocumentName_set_0 < > (obj : * mut dpp_data_contract_DocumentName , value : * mut std :: os :: raw :: c_char) { (* obj) . 0 = value ; } pub mod conversion { use crate as ferment_example_platform ; # [cfg (feature = "data-contract-cbor-conversion")] pub mod cbor { use crate as ferment_example_platform ; } # [cfg (feature = "data-contract-value-conversion")] pub mod value { use crate as ferment_example_platform ; } # [cfg (feature = "data-contract-json-conversion")] pub mod json { use crate as ferment_example_platform ; } } pub mod v0 { use crate as ferment_example_platform ; pub mod methods { use crate as ferment_example_platform ; pub mod schema { use crate as ferment_example_platform ; # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } } } pub mod conversion { use crate as ferment_example_platform ; } pub mod serialization { use crate as ferment_example_platform ; pub mod bincode { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } } } pub mod data_contract { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: data_contract :: v0 :: data_contract :: DataContractV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_v0_data_contract_DataContractV0 { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub version : u32 , pub owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_types : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType , pub metadata : * mut crate :: fermented :: types :: dpp :: metadata :: dpp_metadata_Metadata , pub config : * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig , pub schema_defs : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: v0 :: data_contract :: DataContractV0 > for dpp_data_contract_v0_data_contract_DataContractV0 { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_v0_data_contract_DataContractV0) -> dpp :: data_contract :: v0 :: data_contract :: DataContractV0 { let ffi_ref = & * ffi ; dpp :: data_contract :: v0 :: data_contract :: DataContractV0 { id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . id) , version : ffi_ref . version , owner_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . owner_id) , document_types : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_types) , metadata : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . metadata) , config : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . config) , schema_defs : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . schema_defs) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: v0 :: data_contract :: DataContractV0 > for dpp_data_contract_v0_data_contract_DataContractV0 { unsafe fn ffi_to_const (obj : dpp :: data_contract :: v0 :: data_contract :: DataContractV0) -> * const dpp_data_contract_v0_data_contract_DataContractV0 { ferment_interfaces :: boxed (dpp_data_contract_v0_data_contract_DataContractV0 { id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . id) , version : obj . version , owner_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . owner_id) , document_types : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_types) , metadata : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . metadata) , config : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . config) , schema_defs : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . schema_defs) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: v0 :: data_contract :: DataContractV0 > for dpp_data_contract_v0_data_contract_DataContractV0 { unsafe fn destroy (ffi : * mut dpp_data_contract_v0_data_contract_DataContractV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_v0_data_contract_DataContractV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . owner_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_types) ; ; ferment_interfaces :: unbox_any_opt (ffi_ref . metadata) ; ferment_interfaces :: unbox_any (ffi_ref . config) ; ; ferment_interfaces :: unbox_any_opt (ffi_ref . schema_defs) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_ctor < > (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , version : u32 , owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_types : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType , metadata : * mut crate :: fermented :: types :: dpp :: metadata :: dpp_metadata_Metadata , config : * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig , schema_defs : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value) -> * mut dpp_data_contract_v0_data_contract_DataContractV0 { ferment_interfaces :: boxed (dpp_data_contract_v0_data_contract_DataContractV0 { id , version , owner_id , document_types , metadata , config , schema_defs }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_destroy < > (ffi : * mut dpp_data_contract_v0_data_contract_DataContractV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_get_id < > (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_get_version < > (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> u32 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_get_owner_id < > (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_get_document_types < > (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { (* obj) . document_types } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_get_metadata < > (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: types :: dpp :: metadata :: dpp_metadata_Metadata { (* obj) . metadata } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_get_config < > (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig { (* obj) . config } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_get_schema_defs < > (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { (* obj) . schema_defs } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_set_id < > (obj : * mut dpp_data_contract_v0_data_contract_DataContractV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_set_version < > (obj : * mut dpp_data_contract_v0_data_contract_DataContractV0 , value : u32) { (* obj) . version = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_set_owner_id < > (obj : * mut dpp_data_contract_v0_data_contract_DataContractV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . owner_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_set_document_types < > (obj : * mut dpp_data_contract_v0_data_contract_DataContractV0 , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType) { (* obj) . document_types = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_set_metadata < > (obj : * mut dpp_data_contract_v0_data_contract_DataContractV0 , value : * mut crate :: fermented :: types :: dpp :: metadata :: dpp_metadata_Metadata) { (* obj) . metadata = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_set_config < > (obj : * mut dpp_data_contract_v0_data_contract_DataContractV0 , value : * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig) { (* obj) . config = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_set_schema_defs < > (obj : * mut dpp_data_contract_v0_data_contract_DataContractV0 , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value) { (* obj) . schema_defs = value ; } # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } } } pub mod extra { use crate as ferment_example_platform ; # [cfg (test)] pub mod drive_api_tests { use crate as ferment_example_platform ; pub mod test { use crate as ferment_example_platform ; } } } pub mod accessors { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp :: data_contract :: DefinitionName`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_DefinitionName (* mut std :: os :: raw :: c_char) ; impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: DefinitionName > for dpp_data_contract_DefinitionName { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_DefinitionName) -> dpp :: data_contract :: DefinitionName { let ffi_ref = & * ffi ; ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . 0) } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: DefinitionName > for dpp_data_contract_DefinitionName { unsafe fn ffi_to_const (obj : dpp :: data_contract :: DefinitionName) -> * const dpp_data_contract_DefinitionName { ferment_interfaces :: boxed (dpp_data_contract_DefinitionName (ferment_interfaces :: FFIConversionTo :: ffi_to (obj))) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: DefinitionName > for dpp_data_contract_DefinitionName { unsafe fn destroy (ffi : * mut dpp_data_contract_DefinitionName) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_DefinitionName { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DefinitionName_ctor < > (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_DefinitionName { ferment_interfaces :: boxed (dpp_data_contract_DefinitionName (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DefinitionName_destroy < > (ffi : * mut dpp_data_contract_DefinitionName) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DefinitionName_get_0 < > (obj : * const dpp_data_contract_DefinitionName) -> * mut std :: os :: raw :: c_char { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DefinitionName_set_0 < > (obj : * mut dpp_data_contract_DefinitionName , value : * mut std :: os :: raw :: c_char) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: data_contract :: DataContract`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_DataContract { V0 (* mut crate :: fermented :: types :: dpp :: data_contract :: v0 :: data_contract :: dpp_data_contract_v0_data_contract_DataContractV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: DataContract > for dpp_data_contract_DataContract { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_DataContract) -> dpp :: data_contract :: DataContract { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_DataContract :: V0 (o_0) => dpp :: data_contract :: DataContract :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: DataContract > for dpp_data_contract_DataContract { unsafe fn ffi_to_const (obj : dpp :: data_contract :: DataContract) -> * const dpp_data_contract_DataContract { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: DataContract :: V0 (o_0) => dpp_data_contract_DataContract :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: DataContract > for dpp_data_contract_DataContract { unsafe fn destroy (ffi : * mut dpp_data_contract_DataContract) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_DataContract { fn drop (& mut self) { unsafe { match self { dpp_data_contract_DataContract :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DataContract_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: v0 :: data_contract :: dpp_data_contract_v0_data_contract_DataContractV0) -> * mut dpp_data_contract_DataContract { ferment_interfaces :: boxed (dpp_data_contract_DataContract :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DataContract_destroy < > (ffi : * mut dpp_data_contract_DataContract) { ferment_interfaces :: unbox_any (ffi) ; } pub mod storage_requirements { use crate as ferment_example_platform ; pub mod keys_for_document_type { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { Unique = 0 , Multiple = 1 , MultipleReferenceToLatest = 2 } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements > for dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements) -> dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Unique => dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements :: Unique , dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Multiple => dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements :: Multiple , dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: MultipleReferenceToLatest => dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements :: MultipleReferenceToLatest } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements > for dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { unsafe fn ffi_to_const (obj : dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements) -> * const dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements :: Unique => dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Unique , dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements :: Multiple => dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Multiple , dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements :: MultipleReferenceToLatest => dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: MultipleReferenceToLatest , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements > for dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { unsafe fn destroy (ffi : * mut dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { fn drop (& mut self) { unsafe { match self { dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Unique => { } , dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Multiple => { } , dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: MultipleReferenceToLatest => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements_Unique_ctor () -> * mut dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { ferment_interfaces :: boxed (dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Unique { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements_Multiple_ctor () -> * mut dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { ferment_interfaces :: boxed (dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Multiple { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements_MultipleReferenceToLatest_ctor () -> * mut dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { ferment_interfaces :: boxed (dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: MultipleReferenceToLatest { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements_destroy < > (ffi : * mut dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements) { ferment_interfaces :: unbox_any (ffi) ; } } } # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } pub mod methods { use crate as ferment_example_platform ; pub mod schema { use crate as ferment_example_platform ; } # [cfg (feature = "validation")] pub mod validate_document { use crate as ferment_example_platform ; } # [cfg (feature = "validation")] pub mod validate_update { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; pub mod validate_update { use crate as ferment_example_platform ; } } } } } pub mod config { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: data_contract :: config :: DataContractConfig`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_config_DataContractConfig { V0 (* mut crate :: fermented :: types :: dpp :: data_contract :: config :: v0 :: dpp_data_contract_config_v0_DataContractConfigV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: config :: DataContractConfig > for dpp_data_contract_config_DataContractConfig { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_config_DataContractConfig) -> dpp :: data_contract :: config :: DataContractConfig { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_config_DataContractConfig :: V0 (o_0) => dpp :: data_contract :: config :: DataContractConfig :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: config :: DataContractConfig > for dpp_data_contract_config_DataContractConfig { unsafe fn ffi_to_const (obj : dpp :: data_contract :: config :: DataContractConfig) -> * const dpp_data_contract_config_DataContractConfig { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: config :: DataContractConfig :: V0 (o_0) => dpp_data_contract_config_DataContractConfig :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: config :: DataContractConfig > for dpp_data_contract_config_DataContractConfig { unsafe fn destroy (ffi : * mut dpp_data_contract_config_DataContractConfig) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_config_DataContractConfig { fn drop (& mut self) { unsafe { match self { dpp_data_contract_config_DataContractConfig :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_DataContractConfig_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: config :: v0 :: dpp_data_contract_config_v0_DataContractConfigV0) -> * mut dpp_data_contract_config_DataContractConfig { ferment_interfaces :: boxed (dpp_data_contract_config_DataContractConfig :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_DataContractConfig_destroy < > (ffi : * mut dpp_data_contract_config_DataContractConfig) { ferment_interfaces :: unbox_any (ffi) ; } pub mod methods { use crate as ferment_example_platform ; pub mod validate_update { use crate as ferment_example_platform ; } } pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: data_contract :: config :: v0 :: DataContractConfigV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_config_v0_DataContractConfigV0 { pub can_be_deleted : bool , pub readonly : bool , pub keeps_history : bool , pub documents_keep_history_contract_default : bool , pub documents_mutable_contract_default : bool , pub documents_can_be_deleted_contract_default : bool , pub requires_identity_encryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements , pub requires_identity_decryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements } impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: config :: v0 :: DataContractConfigV0 > for dpp_data_contract_config_v0_DataContractConfigV0 { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_config_v0_DataContractConfigV0) -> dpp :: data_contract :: config :: v0 :: DataContractConfigV0 { let ffi_ref = & * ffi ; dpp :: data_contract :: config :: v0 :: DataContractConfigV0 { can_be_deleted : ffi_ref . can_be_deleted , readonly : ffi_ref . readonly , keeps_history : ffi_ref . keeps_history , documents_keep_history_contract_default : ffi_ref . documents_keep_history_contract_default , documents_mutable_contract_default : ffi_ref . documents_mutable_contract_default , documents_can_be_deleted_contract_default : ffi_ref . documents_can_be_deleted_contract_default , requires_identity_encryption_bounded_key : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . requires_identity_encryption_bounded_key) , requires_identity_decryption_bounded_key : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . requires_identity_decryption_bounded_key) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: config :: v0 :: DataContractConfigV0 > for dpp_data_contract_config_v0_DataContractConfigV0 { unsafe fn ffi_to_const (obj : dpp :: data_contract :: config :: v0 :: DataContractConfigV0) -> * const dpp_data_contract_config_v0_DataContractConfigV0 { ferment_interfaces :: boxed (dpp_data_contract_config_v0_DataContractConfigV0 { can_be_deleted : obj . can_be_deleted , readonly : obj . readonly , keeps_history : obj . keeps_history , documents_keep_history_contract_default : obj . documents_keep_history_contract_default , documents_mutable_contract_default : obj . documents_mutable_contract_default , documents_can_be_deleted_contract_default : obj . documents_can_be_deleted_contract_default , requires_identity_encryption_bounded_key : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . requires_identity_encryption_bounded_key) , requires_identity_decryption_bounded_key : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . requires_identity_decryption_bounded_key) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: config :: v0 :: DataContractConfigV0 > for dpp_data_contract_config_v0_DataContractConfigV0 { unsafe fn destroy (ffi : * mut dpp_data_contract_config_v0_DataContractConfigV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_config_v0_DataContractConfigV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ; ; ; ferment_interfaces :: unbox_any_opt (ffi_ref . requires_identity_encryption_bounded_key) ; ferment_interfaces :: unbox_any_opt (ffi_ref . requires_identity_decryption_bounded_key) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_ctor < > (can_be_deleted : bool , readonly : bool , keeps_history : bool , documents_keep_history_contract_default : bool , documents_mutable_contract_default : bool , documents_can_be_deleted_contract_default : bool , requires_identity_encryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements , requires_identity_decryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements) -> * mut dpp_data_contract_config_v0_DataContractConfigV0 { ferment_interfaces :: boxed (dpp_data_contract_config_v0_DataContractConfigV0 { can_be_deleted , readonly , keeps_history , documents_keep_history_contract_default , documents_mutable_contract_default , documents_can_be_deleted_contract_default , requires_identity_encryption_bounded_key , requires_identity_decryption_bounded_key }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_destroy < > (ffi : * mut dpp_data_contract_config_v0_DataContractConfigV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_can_be_deleted < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . can_be_deleted } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_readonly < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . readonly } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_keeps_history < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . keeps_history } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_documents_keep_history_contract_default < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . documents_keep_history_contract_default } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_documents_mutable_contract_default < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . documents_mutable_contract_default } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_documents_can_be_deleted_contract_default < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . documents_can_be_deleted_contract_default } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_requires_identity_encryption_bounded_key < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { (* obj) . requires_identity_encryption_bounded_key } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_requires_identity_decryption_bounded_key < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { (* obj) . requires_identity_decryption_bounded_key } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_can_be_deleted < > (obj : * mut dpp_data_contract_config_v0_DataContractConfigV0 , value : bool) { (* obj) . can_be_deleted = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_readonly < > (obj : * mut dpp_data_contract_config_v0_DataContractConfigV0 , value : bool) { (* obj) . readonly = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_keeps_history < > (obj : * mut dpp_data_contract_config_v0_DataContractConfigV0 , value : bool) { (* obj) . keeps_history = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_documents_keep_history_contract_default < > (obj : * mut dpp_data_contract_config_v0_DataContractConfigV0 , value : bool) { (* obj) . documents_keep_history_contract_default = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_documents_mutable_contract_default < > (obj : * mut dpp_data_contract_config_v0_DataContractConfigV0 , value : bool) { (* obj) . documents_mutable_contract_default = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_documents_can_be_deleted_contract_default < > (obj : * mut dpp_data_contract_config_v0_DataContractConfigV0 , value : bool) { (* obj) . documents_can_be_deleted_contract_default = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_requires_identity_encryption_bounded_key < > (obj : * mut dpp_data_contract_config_v0_DataContractConfigV0 , value : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements) { (* obj) . requires_identity_encryption_bounded_key = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_requires_identity_decryption_bounded_key < > (obj : * mut dpp_data_contract_config_v0_DataContractConfigV0 , value : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements) { (* obj) . requires_identity_decryption_bounded_key = value ; } } pub mod fields { use crate as ferment_example_platform ; pub mod property { use crate as ferment_example_platform ; } } } # [cfg (any (feature = "state-transitions" , feature = "factories"))] pub mod created_data_contract { use crate as ferment_example_platform ; pub mod fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } } # [doc = "FFI-representation of the [`dpp :: data_contract :: PropertyPath`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_PropertyPath (* mut std :: os :: raw :: c_char) ; impl ferment_interfaces :: FFIConversionFrom < dpp :: data_contract :: PropertyPath > for dpp_data_contract_PropertyPath { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_PropertyPath) -> dpp :: data_contract :: PropertyPath { let ffi_ref = & * ffi ; ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . 0) } } impl ferment_interfaces :: FFIConversionTo < dpp :: data_contract :: PropertyPath > for dpp_data_contract_PropertyPath { unsafe fn ffi_to_const (obj : dpp :: data_contract :: PropertyPath) -> * const dpp_data_contract_PropertyPath { ferment_interfaces :: boxed (dpp_data_contract_PropertyPath (ferment_interfaces :: FFIConversionTo :: ffi_to (obj))) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: data_contract :: PropertyPath > for dpp_data_contract_PropertyPath { unsafe fn destroy (ffi : * mut dpp_data_contract_PropertyPath) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_PropertyPath { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_PropertyPath_ctor < > (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_PropertyPath { ferment_interfaces :: boxed (dpp_data_contract_PropertyPath (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_PropertyPath_destroy < > (ffi : * mut dpp_data_contract_PropertyPath) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_PropertyPath_get_0 < > (obj : * const dpp_data_contract_PropertyPath) -> * mut std :: os :: raw :: c_char { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_PropertyPath_set_0 < > (obj : * mut dpp_data_contract_PropertyPath , value : * mut std :: os :: raw :: c_char) { (* obj) . 0 = value ; } } pub mod errors { use crate as ferment_example_platform ; pub mod dpp_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: errors :: dpp_error :: DPPError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_errors_dpp_error_DPPError { AssetLockOutputNotFoundError (* mut crate :: fermented :: types :: dpp :: identity :: errors :: asset_lock_output_not_found_error :: dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError) , AssetLockTransactionIsNotFoundError (* mut crate :: fermented :: types :: dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError) , WrongPublicKeyHashSize , WrongBurnOutputType , InvalidAssetLockTransaction , CoreMessageCorruption (* mut std :: os :: raw :: c_char) } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: dpp_error :: DPPError > for dpp_errors_dpp_error_DPPError { unsafe fn ffi_from_const (ffi : * const dpp_errors_dpp_error_DPPError) -> dpp :: errors :: dpp_error :: DPPError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_dpp_error_DPPError :: AssetLockOutputNotFoundError (o_0) => dpp :: errors :: dpp_error :: DPPError :: AssetLockOutputNotFoundError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_dpp_error_DPPError :: AssetLockTransactionIsNotFoundError (o_0) => dpp :: errors :: dpp_error :: DPPError :: AssetLockTransactionIsNotFoundError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_dpp_error_DPPError :: WrongPublicKeyHashSize => dpp :: errors :: dpp_error :: DPPError :: WrongPublicKeyHashSize , dpp_errors_dpp_error_DPPError :: WrongBurnOutputType => dpp :: errors :: dpp_error :: DPPError :: WrongBurnOutputType , dpp_errors_dpp_error_DPPError :: InvalidAssetLockTransaction => dpp :: errors :: dpp_error :: DPPError :: InvalidAssetLockTransaction , dpp_errors_dpp_error_DPPError :: CoreMessageCorruption (o_0) => dpp :: errors :: dpp_error :: DPPError :: CoreMessageCorruption (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: dpp_error :: DPPError > for dpp_errors_dpp_error_DPPError { unsafe fn ffi_to_const (obj : dpp :: errors :: dpp_error :: DPPError) -> * const dpp_errors_dpp_error_DPPError { ferment_interfaces :: boxed (match obj { dpp :: errors :: dpp_error :: DPPError :: AssetLockOutputNotFoundError (o_0) => dpp_errors_dpp_error_DPPError :: AssetLockOutputNotFoundError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: dpp_error :: DPPError :: AssetLockTransactionIsNotFoundError (o_0) => dpp_errors_dpp_error_DPPError :: AssetLockTransactionIsNotFoundError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: dpp_error :: DPPError :: WrongPublicKeyHashSize => dpp_errors_dpp_error_DPPError :: WrongPublicKeyHashSize , dpp :: errors :: dpp_error :: DPPError :: WrongBurnOutputType => dpp_errors_dpp_error_DPPError :: WrongBurnOutputType , dpp :: errors :: dpp_error :: DPPError :: InvalidAssetLockTransaction => dpp_errors_dpp_error_DPPError :: InvalidAssetLockTransaction , dpp :: errors :: dpp_error :: DPPError :: CoreMessageCorruption (o_0) => dpp_errors_dpp_error_DPPError :: CoreMessageCorruption (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: dpp_error :: DPPError > for dpp_errors_dpp_error_DPPError { unsafe fn destroy (ffi : * mut dpp_errors_dpp_error_DPPError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_errors_dpp_error_DPPError { fn drop (& mut self) { unsafe { match self { dpp_errors_dpp_error_DPPError :: AssetLockOutputNotFoundError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_dpp_error_DPPError :: AssetLockTransactionIsNotFoundError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_dpp_error_DPPError :: WrongPublicKeyHashSize => { } , dpp_errors_dpp_error_DPPError :: WrongBurnOutputType => { } , dpp_errors_dpp_error_DPPError :: InvalidAssetLockTransaction => { } , dpp_errors_dpp_error_DPPError :: CoreMessageCorruption (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_error_DPPError_AssetLockOutputNotFoundError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: identity :: errors :: asset_lock_output_not_found_error :: dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError) -> * mut dpp_errors_dpp_error_DPPError { ferment_interfaces :: boxed (dpp_errors_dpp_error_DPPError :: AssetLockOutputNotFoundError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_error_DPPError_AssetLockTransactionIsNotFoundError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError) -> * mut dpp_errors_dpp_error_DPPError { ferment_interfaces :: boxed (dpp_errors_dpp_error_DPPError :: AssetLockTransactionIsNotFoundError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_error_DPPError_WrongPublicKeyHashSize_ctor () -> * mut dpp_errors_dpp_error_DPPError { ferment_interfaces :: boxed (dpp_errors_dpp_error_DPPError :: WrongPublicKeyHashSize { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_error_DPPError_WrongBurnOutputType_ctor () -> * mut dpp_errors_dpp_error_DPPError { ferment_interfaces :: boxed (dpp_errors_dpp_error_DPPError :: WrongBurnOutputType { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_error_DPPError_InvalidAssetLockTransaction_ctor () -> * mut dpp_errors_dpp_error_DPPError { ferment_interfaces :: boxed (dpp_errors_dpp_error_DPPError :: InvalidAssetLockTransaction { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_error_DPPError_CoreMessageCorruption_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_dpp_error_DPPError { ferment_interfaces :: boxed (dpp_errors_dpp_error_DPPError :: CoreMessageCorruption (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_error_DPPError_destroy < > (ffi : * mut dpp_errors_dpp_error_DPPError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod serde_parsing_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: serde_parsing_error :: SerdeParsingError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_serde_parsing_error_SerdeParsingError { pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: serde_parsing_error :: SerdeParsingError > for dpp_errors_serde_parsing_error_SerdeParsingError { unsafe fn ffi_from_const (ffi : * const dpp_errors_serde_parsing_error_SerdeParsingError) -> dpp :: errors :: serde_parsing_error :: SerdeParsingError { let ffi_ref = & * ffi ; dpp :: errors :: serde_parsing_error :: SerdeParsingError { message : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . message) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: serde_parsing_error :: SerdeParsingError > for dpp_errors_serde_parsing_error_SerdeParsingError { unsafe fn ffi_to_const (obj : dpp :: errors :: serde_parsing_error :: SerdeParsingError) -> * const dpp_errors_serde_parsing_error_SerdeParsingError { ferment_interfaces :: boxed (dpp_errors_serde_parsing_error_SerdeParsingError { message : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . message) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: serde_parsing_error :: SerdeParsingError > for dpp_errors_serde_parsing_error_SerdeParsingError { unsafe fn destroy (ffi : * mut dpp_errors_serde_parsing_error_SerdeParsingError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_serde_parsing_error_SerdeParsingError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_serde_parsing_error_SerdeParsingError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_serde_parsing_error_SerdeParsingError { ferment_interfaces :: boxed (dpp_errors_serde_parsing_error_SerdeParsingError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_serde_parsing_error_SerdeParsingError_destroy < > (ffi : * mut dpp_errors_serde_parsing_error_SerdeParsingError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_serde_parsing_error_SerdeParsingError_get_message < > (obj : * const dpp_errors_serde_parsing_error_SerdeParsingError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_serde_parsing_error_SerdeParsingError_set_message < > (obj : * mut dpp_errors_serde_parsing_error_SerdeParsingError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod compatible_protocol_version_is_not_defined_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: compatible_protocol_version_is_not_defined_error :: CompatibleProtocolVersionIsNotDefinedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { pub current_protocol_version : u32 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: compatible_protocol_version_is_not_defined_error :: CompatibleProtocolVersionIsNotDefinedError > for dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) -> dpp :: errors :: compatible_protocol_version_is_not_defined_error :: CompatibleProtocolVersionIsNotDefinedError { let ffi_ref = & * ffi ; dpp :: errors :: compatible_protocol_version_is_not_defined_error :: CompatibleProtocolVersionIsNotDefinedError { current_protocol_version : ffi_ref . current_protocol_version } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: compatible_protocol_version_is_not_defined_error :: CompatibleProtocolVersionIsNotDefinedError > for dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { unsafe fn ffi_to_const (obj : dpp :: errors :: compatible_protocol_version_is_not_defined_error :: CompatibleProtocolVersionIsNotDefinedError) -> * const dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { ferment_interfaces :: boxed (dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { current_protocol_version : obj . current_protocol_version }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: compatible_protocol_version_is_not_defined_error :: CompatibleProtocolVersionIsNotDefinedError > for dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { unsafe fn destroy (ffi : * mut dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError_ctor < > (current_protocol_version : u32) -> * mut dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { ferment_interfaces :: boxed (dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { current_protocol_version }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError_destroy < > (ffi : * mut dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError_get_current_protocol_version < > (obj : * const dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) -> u32 { (* obj) . current_protocol_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError_set_current_protocol_version < > (obj : * mut dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError , value : u32) { (* obj) . current_protocol_version = value ; } } pub mod public_key_validation_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: public_key_validation_error :: PublicKeyValidationError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_public_key_validation_error_PublicKeyValidationError { pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: public_key_validation_error :: PublicKeyValidationError > for dpp_errors_public_key_validation_error_PublicKeyValidationError { unsafe fn ffi_from_const (ffi : * const dpp_errors_public_key_validation_error_PublicKeyValidationError) -> dpp :: errors :: public_key_validation_error :: PublicKeyValidationError { let ffi_ref = & * ffi ; dpp :: errors :: public_key_validation_error :: PublicKeyValidationError { message : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . message) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: public_key_validation_error :: PublicKeyValidationError > for dpp_errors_public_key_validation_error_PublicKeyValidationError { unsafe fn ffi_to_const (obj : dpp :: errors :: public_key_validation_error :: PublicKeyValidationError) -> * const dpp_errors_public_key_validation_error_PublicKeyValidationError { ferment_interfaces :: boxed (dpp_errors_public_key_validation_error_PublicKeyValidationError { message : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . message) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: public_key_validation_error :: PublicKeyValidationError > for dpp_errors_public_key_validation_error_PublicKeyValidationError { unsafe fn destroy (ffi : * mut dpp_errors_public_key_validation_error_PublicKeyValidationError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_public_key_validation_error_PublicKeyValidationError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_public_key_validation_error_PublicKeyValidationError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_public_key_validation_error_PublicKeyValidationError { ferment_interfaces :: boxed (dpp_errors_public_key_validation_error_PublicKeyValidationError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_public_key_validation_error_PublicKeyValidationError_destroy < > (ffi : * mut dpp_errors_public_key_validation_error_PublicKeyValidationError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_public_key_validation_error_PublicKeyValidationError_get_message < > (obj : * const dpp_errors_public_key_validation_error_PublicKeyValidationError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_public_key_validation_error_PublicKeyValidationError_set_message < > (obj : * mut dpp_errors_public_key_validation_error_PublicKeyValidationError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod consensus { use crate as ferment_example_platform ; # [cfg (test)] pub mod test_consensus_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: test_consensus_error :: TestConsensusError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_test_consensus_error_TestConsensusError { pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: test_consensus_error :: TestConsensusError > for dpp_errors_consensus_test_consensus_error_TestConsensusError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_test_consensus_error_TestConsensusError) -> dpp :: errors :: consensus :: test_consensus_error :: TestConsensusError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: test_consensus_error :: TestConsensusError { message : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . message) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: test_consensus_error :: TestConsensusError > for dpp_errors_consensus_test_consensus_error_TestConsensusError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: test_consensus_error :: TestConsensusError) -> * const dpp_errors_consensus_test_consensus_error_TestConsensusError { ferment_interfaces :: boxed (dpp_errors_consensus_test_consensus_error_TestConsensusError { message : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . message) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: test_consensus_error :: TestConsensusError > for dpp_errors_consensus_test_consensus_error_TestConsensusError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_test_consensus_error_TestConsensusError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_test_consensus_error_TestConsensusError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_test_consensus_error_TestConsensusError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_test_consensus_error_TestConsensusError { ferment_interfaces :: boxed (dpp_errors_consensus_test_consensus_error_TestConsensusError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_test_consensus_error_TestConsensusError_destroy < > (ffi : * mut dpp_errors_consensus_test_consensus_error_TestConsensusError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_test_consensus_error_TestConsensusError_get_message < > (obj : * const dpp_errors_consensus_test_consensus_error_TestConsensusError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_test_consensus_error_TestConsensusError_set_message < > (obj : * mut dpp_errors_consensus_test_consensus_error_TestConsensusError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod consensus_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: errors :: consensus :: consensus_error :: ConsensusError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_errors_consensus_consensus_error_ConsensusError { DefaultError , BasicError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: basic_error :: dpp_errors_consensus_basic_basic_error_BasicError) , StateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: state_error :: dpp_errors_consensus_state_state_error_StateError) , SignatureError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: signature_error :: dpp_errors_consensus_signature_signature_error_SignatureError) , FeeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: fee :: fee_error :: dpp_errors_consensus_fee_fee_error_FeeError) , # [cfg (test)] TestConsensusError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: test_consensus_error :: dpp_errors_consensus_test_consensus_error_TestConsensusError) } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: consensus_error :: ConsensusError > for dpp_errors_consensus_consensus_error_ConsensusError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_consensus_error_ConsensusError) -> dpp :: errors :: consensus :: consensus_error :: ConsensusError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_consensus_consensus_error_ConsensusError :: DefaultError => dpp :: errors :: consensus :: consensus_error :: ConsensusError :: DefaultError , dpp_errors_consensus_consensus_error_ConsensusError :: BasicError (o_0) => dpp :: errors :: consensus :: consensus_error :: ConsensusError :: BasicError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_consensus_error_ConsensusError :: StateError (o_0) => dpp :: errors :: consensus :: consensus_error :: ConsensusError :: StateError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_consensus_error_ConsensusError :: SignatureError (o_0) => dpp :: errors :: consensus :: consensus_error :: ConsensusError :: SignatureError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_consensus_error_ConsensusError :: FeeError (o_0) => dpp :: errors :: consensus :: consensus_error :: ConsensusError :: FeeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , # [cfg (test)] dpp_errors_consensus_consensus_error_ConsensusError :: TestConsensusError (o_0) => dpp :: errors :: consensus :: consensus_error :: ConsensusError :: TestConsensusError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: consensus_error :: ConsensusError > for dpp_errors_consensus_consensus_error_ConsensusError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: consensus_error :: ConsensusError) -> * const dpp_errors_consensus_consensus_error_ConsensusError { ferment_interfaces :: boxed (match obj { dpp :: errors :: consensus :: consensus_error :: ConsensusError :: DefaultError => dpp_errors_consensus_consensus_error_ConsensusError :: DefaultError , dpp :: errors :: consensus :: consensus_error :: ConsensusError :: BasicError (o_0) => dpp_errors_consensus_consensus_error_ConsensusError :: BasicError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: consensus_error :: ConsensusError :: StateError (o_0) => dpp_errors_consensus_consensus_error_ConsensusError :: StateError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: consensus_error :: ConsensusError :: SignatureError (o_0) => dpp_errors_consensus_consensus_error_ConsensusError :: SignatureError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: consensus_error :: ConsensusError :: FeeError (o_0) => dpp_errors_consensus_consensus_error_ConsensusError :: FeeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , # [cfg (test)] dpp :: errors :: consensus :: consensus_error :: ConsensusError :: TestConsensusError (o_0) => dpp_errors_consensus_consensus_error_ConsensusError :: TestConsensusError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: consensus_error :: ConsensusError > for dpp_errors_consensus_consensus_error_ConsensusError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_consensus_error_ConsensusError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_errors_consensus_consensus_error_ConsensusError { fn drop (& mut self) { unsafe { match self { dpp_errors_consensus_consensus_error_ConsensusError :: DefaultError => { } , dpp_errors_consensus_consensus_error_ConsensusError :: BasicError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_consensus_error_ConsensusError :: StateError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_consensus_error_ConsensusError :: SignatureError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_consensus_error_ConsensusError :: FeeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , # [cfg (test)] dpp_errors_consensus_consensus_error_ConsensusError :: TestConsensusError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_consensus_error_ConsensusError_DefaultError_ctor () -> * mut dpp_errors_consensus_consensus_error_ConsensusError { ferment_interfaces :: boxed (dpp_errors_consensus_consensus_error_ConsensusError :: DefaultError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_consensus_error_ConsensusError_BasicError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: basic_error :: dpp_errors_consensus_basic_basic_error_BasicError) -> * mut dpp_errors_consensus_consensus_error_ConsensusError { ferment_interfaces :: boxed (dpp_errors_consensus_consensus_error_ConsensusError :: BasicError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_consensus_error_ConsensusError_StateError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: state_error :: dpp_errors_consensus_state_state_error_StateError) -> * mut dpp_errors_consensus_consensus_error_ConsensusError { ferment_interfaces :: boxed (dpp_errors_consensus_consensus_error_ConsensusError :: StateError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_consensus_error_ConsensusError_SignatureError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: signature_error :: dpp_errors_consensus_signature_signature_error_SignatureError) -> * mut dpp_errors_consensus_consensus_error_ConsensusError { ferment_interfaces :: boxed (dpp_errors_consensus_consensus_error_ConsensusError :: SignatureError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_consensus_error_ConsensusError_FeeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: fee :: fee_error :: dpp_errors_consensus_fee_fee_error_FeeError) -> * mut dpp_errors_consensus_consensus_error_ConsensusError { ferment_interfaces :: boxed (dpp_errors_consensus_consensus_error_ConsensusError :: FeeError (o_o_0)) } # [cfg (test)] # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_consensus_error_ConsensusError_TestConsensusError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: test_consensus_error :: dpp_errors_consensus_test_consensus_error_TestConsensusError) -> * mut dpp_errors_consensus_consensus_error_ConsensusError { ferment_interfaces :: boxed (dpp_errors_consensus_consensus_error_ConsensusError :: TestConsensusError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_consensus_error_ConsensusError_destroy < > (ffi : * mut dpp_errors_consensus_consensus_error_ConsensusError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod fee { use crate as ferment_example_platform ; pub mod balance_is_not_enough_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: BalanceIsNotEnoughError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { pub balance : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , pub fee : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: BalanceIsNotEnoughError > for dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) -> dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: BalanceIsNotEnoughError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: BalanceIsNotEnoughError { balance : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . balance) , fee : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fee) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: BalanceIsNotEnoughError > for dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: BalanceIsNotEnoughError) -> * const dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { ferment_interfaces :: boxed (dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { balance : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . balance) , fee : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fee) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: BalanceIsNotEnoughError > for dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . balance) ; ; ferment_interfaces :: unbox_any (ffi_ref . fee) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError_ctor < > (balance : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , fee : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) -> * mut dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { ferment_interfaces :: boxed (dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { balance , fee }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError_destroy < > (ffi : * mut dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError_get_balance < > (obj : * const dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError_get_fee < > (obj : * const dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . fee } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError_set_balance < > (obj : * mut dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError , value : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) { (* obj) . balance = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError_set_fee < > (obj : * mut dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError , value : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) { (* obj) . fee = value ; } } pub mod fee_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: errors :: consensus :: fee :: fee_error :: FeeError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_errors_consensus_fee_fee_error_FeeError { BalanceIsNotEnoughError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: fee :: fee_error :: FeeError > for dpp_errors_consensus_fee_fee_error_FeeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_fee_fee_error_FeeError) -> dpp :: errors :: consensus :: fee :: fee_error :: FeeError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_consensus_fee_fee_error_FeeError :: BalanceIsNotEnoughError (o_0) => dpp :: errors :: consensus :: fee :: fee_error :: FeeError :: BalanceIsNotEnoughError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: fee :: fee_error :: FeeError > for dpp_errors_consensus_fee_fee_error_FeeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: fee :: fee_error :: FeeError) -> * const dpp_errors_consensus_fee_fee_error_FeeError { ferment_interfaces :: boxed (match obj { dpp :: errors :: consensus :: fee :: fee_error :: FeeError :: BalanceIsNotEnoughError (o_0) => dpp_errors_consensus_fee_fee_error_FeeError :: BalanceIsNotEnoughError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: fee :: fee_error :: FeeError > for dpp_errors_consensus_fee_fee_error_FeeError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_fee_fee_error_FeeError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_errors_consensus_fee_fee_error_FeeError { fn drop (& mut self) { unsafe { match self { dpp_errors_consensus_fee_fee_error_FeeError :: BalanceIsNotEnoughError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_fee_error_FeeError_BalanceIsNotEnoughError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) -> * mut dpp_errors_consensus_fee_fee_error_FeeError { ferment_interfaces :: boxed (dpp_errors_consensus_fee_fee_error_FeeError :: BalanceIsNotEnoughError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_fee_error_FeeError_destroy < > (ffi : * mut dpp_errors_consensus_fee_fee_error_FeeError) { ferment_interfaces :: unbox_any (ffi) ; } } } pub mod basic { use crate as ferment_example_platform ; # [cfg (feature = "json-schema-validation")] pub mod json_schema_error { use crate as ferment_example_platform ; pub mod json_schema_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: JsonSchemaError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { pub error_summary : * mut std :: os :: raw :: c_char , pub keyword : * mut std :: os :: raw :: c_char , pub instance_path : * mut std :: os :: raw :: c_char , pub schema_path : * mut std :: os :: raw :: c_char , pub params : * mut crate :: fermented :: types :: platform_value :: platform_value_Value , pub property_name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: JsonSchemaError > for dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: JsonSchemaError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: JsonSchemaError { error_summary : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . error_summary) , keyword : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . keyword) , instance_path : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . instance_path) , schema_path : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . schema_path) , params : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . params) , property_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . property_name) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: JsonSchemaError > for dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: JsonSchemaError) -> * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { error_summary : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . error_summary) , keyword : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . keyword) , instance_path : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . instance_path) , schema_path : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . schema_path) , params : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . params) , property_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . property_name) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: JsonSchemaError > for dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . error_summary) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . keyword) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . instance_path) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . schema_path) ; ferment_interfaces :: unbox_any (ffi_ref . params) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . property_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_ctor < > (error_summary : * mut std :: os :: raw :: c_char , keyword : * mut std :: os :: raw :: c_char , instance_path : * mut std :: os :: raw :: c_char , schema_path : * mut std :: os :: raw :: c_char , params : * mut crate :: fermented :: types :: platform_value :: platform_value_Value , property_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { error_summary , keyword , instance_path , schema_path , params , property_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_destroy < > (ffi : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_get_error_summary < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . error_summary } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_get_keyword < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . keyword } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_get_instance_path < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . instance_path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_get_schema_path < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . schema_path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_get_params < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut crate :: fermented :: types :: platform_value :: platform_value_Value { (* obj) . params } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_get_property_name < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_set_error_summary < > (obj : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError , value : * mut std :: os :: raw :: c_char) { (* obj) . error_summary = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_set_keyword < > (obj : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError , value : * mut std :: os :: raw :: c_char) { (* obj) . keyword = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_set_instance_path < > (obj : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError , value : * mut std :: os :: raw :: c_char) { (* obj) . instance_path = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_set_schema_path < > (obj : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError , value : * mut std :: os :: raw :: c_char) { (* obj) . schema_path = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_set_params < > (obj : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError , value : * mut crate :: fermented :: types :: platform_value :: platform_value_Value) { (* obj) . params = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_set_property_name < > (obj : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError , value : * mut std :: os :: raw :: c_char) { (* obj) . property_name = value ; } } pub mod json_schema_error_data { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error_data :: JsonSchemaErrorData`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { pub keyword : * mut std :: os :: raw :: c_char , pub params : * mut serde_json :: Map < String , serde_json :: Value > , pub property_name : * mut std :: os :: raw :: c_char , pub error_message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error_data :: JsonSchemaErrorData > for dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) -> dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error_data :: JsonSchemaErrorData { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error_data :: JsonSchemaErrorData { keyword : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . keyword) , params : (& * ffi_ref . params) . clone () , property_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . property_name) , error_message : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . error_message) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error_data :: JsonSchemaErrorData > for dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error_data :: JsonSchemaErrorData) -> * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { ferment_interfaces :: boxed (dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { keyword : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . keyword) , params : ferment_interfaces :: boxed (obj . params) , property_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . property_name) , error_message : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . error_message) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error_data :: JsonSchemaErrorData > for dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . keyword) ; ferment_interfaces :: unbox_any (ffi_ref . params) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . property_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . error_message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_ctor < > (keyword : * mut std :: os :: raw :: c_char , params : * mut serde_json :: Map < String , serde_json :: Value > , property_name : * mut std :: os :: raw :: c_char , error_message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { ferment_interfaces :: boxed (dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { keyword , params , property_name , error_message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_destroy < > (ffi : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_get_keyword < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) -> * mut std :: os :: raw :: c_char { (* obj) . keyword } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_get_params < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) -> * mut serde_json :: Map < String , serde_json :: Value > { (* obj) . params } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_get_property_name < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_get_error_message < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) -> * mut std :: os :: raw :: c_char { (* obj) . error_message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_set_keyword < > (obj : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData , value : * mut std :: os :: raw :: c_char) { (* obj) . keyword = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_set_params < > (obj : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData , value : * mut serde_json :: Map < String , serde_json :: Value >) { (* obj) . params = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_set_property_name < > (obj : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData , value : * mut std :: os :: raw :: c_char) { (* obj) . property_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_set_error_message < > (obj : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData , value : * mut std :: os :: raw :: c_char) { (* obj) . error_message = value ; } } } pub mod identity { use crate as ferment_example_platform ; pub mod invalid_identity_asset_lock_proof_chain_lock_validation_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: InvalidIdentityAssetLockProofChainLockValidationError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { pub transaction_id : * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid , pub height_reported_not_locked : u32 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: InvalidIdentityAssetLockProofChainLockValidationError > for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: InvalidIdentityAssetLockProofChainLockValidationError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: InvalidIdentityAssetLockProofChainLockValidationError { transaction_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . transaction_id) , height_reported_not_locked : ffi_ref . height_reported_not_locked } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: InvalidIdentityAssetLockProofChainLockValidationError > for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: InvalidIdentityAssetLockProofChainLockValidationError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { transaction_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . transaction_id) , height_reported_not_locked : obj . height_reported_not_locked }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: InvalidIdentityAssetLockProofChainLockValidationError > for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . transaction_id) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError_ctor < > (transaction_id : * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid , height_reported_not_locked : u32) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { transaction_id , height_reported_not_locked }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError_get_transaction_id < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) -> * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid { (* obj) . transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError_get_height_reported_not_locked < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) -> u32 { (* obj) . height_reported_not_locked } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError_set_transaction_id < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError , value : * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid) { (* obj) . transaction_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError_set_height_reported_not_locked < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError , value : u32) { (* obj) . height_reported_not_locked = value ; } } pub mod too_many_master_public_key_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: too_many_master_public_key_error :: TooManyMasterPublicKeyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError { } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: too_many_master_public_key_error :: TooManyMasterPublicKeyError > for dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError) -> dpp :: errors :: consensus :: basic :: identity :: too_many_master_public_key_error :: TooManyMasterPublicKeyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: too_many_master_public_key_error :: TooManyMasterPublicKeyError { } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: too_many_master_public_key_error :: TooManyMasterPublicKeyError > for dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: too_many_master_public_key_error :: TooManyMasterPublicKeyError) -> * const dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError { }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: too_many_master_public_key_error :: TooManyMasterPublicKeyError > for dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError_ctor < > () -> * mut dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod invalid_instant_asset_lock_proof_signature_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: InvalidInstantAssetLockProofSignatureError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: InvalidInstantAssetLockProofSignatureError > for dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: InvalidInstantAssetLockProofSignatureError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: InvalidInstantAssetLockProofSignatureError { } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: InvalidInstantAssetLockProofSignatureError > for dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: InvalidInstantAssetLockProofSignatureError) -> * const dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: InvalidInstantAssetLockProofSignatureError > for dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError_ctor < > () -> * mut dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod invalid_identity_credit_transfer_amount_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: InvalidIdentityCreditTransferAmountError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { pub amount : u64 , pub min_amount : u64 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: InvalidIdentityCreditTransferAmountError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: InvalidIdentityCreditTransferAmountError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: InvalidIdentityCreditTransferAmountError { amount : ffi_ref . amount , min_amount : ffi_ref . min_amount } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: InvalidIdentityCreditTransferAmountError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: InvalidIdentityCreditTransferAmountError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { amount : obj . amount , min_amount : obj . min_amount }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: InvalidIdentityCreditTransferAmountError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError_ctor < > (amount : u64 , min_amount : u64) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { amount , min_amount }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError_get_amount < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) -> u64 { (* obj) . amount } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError_get_min_amount < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) -> u64 { (* obj) . min_amount } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError_set_amount < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError , value : u64) { (* obj) . amount = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError_set_min_amount < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError , value : u64) { (* obj) . min_amount = value ; } } pub mod invalid_asset_lock_proof_core_chain_height_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: InvalidAssetLockProofCoreChainHeightError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { pub proof_core_chain_locked_height : u32 , pub current_core_chain_locked_height : u32 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: InvalidAssetLockProofCoreChainHeightError > for dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: InvalidAssetLockProofCoreChainHeightError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: InvalidAssetLockProofCoreChainHeightError { proof_core_chain_locked_height : ffi_ref . proof_core_chain_locked_height , current_core_chain_locked_height : ffi_ref . current_core_chain_locked_height } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: InvalidAssetLockProofCoreChainHeightError > for dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: InvalidAssetLockProofCoreChainHeightError) -> * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { proof_core_chain_locked_height : obj . proof_core_chain_locked_height , current_core_chain_locked_height : obj . current_core_chain_locked_height }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: InvalidAssetLockProofCoreChainHeightError > for dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError_ctor < > (proof_core_chain_locked_height : u32 , current_core_chain_locked_height : u32) -> * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { proof_core_chain_locked_height , current_core_chain_locked_height }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError_get_proof_core_chain_locked_height < > (obj : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) -> u32 { (* obj) . proof_core_chain_locked_height } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError_get_current_core_chain_locked_height < > (obj : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) -> u32 { (* obj) . current_core_chain_locked_height } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError_set_proof_core_chain_locked_height < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError , value : u32) { (* obj) . proof_core_chain_locked_height = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError_set_current_core_chain_locked_height < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError , value : u32) { (* obj) . current_core_chain_locked_height = value ; } } pub mod identity_asset_lock_state_transition_replay_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_state_transition_replay_error :: IdentityAssetLockStateTransitionReplayError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError { pub transaction_id : * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid , pub output_index : usize , pub state_transition_id : * mut crate :: fermented :: types :: platform_value :: types :: bytes_32 :: platform_value_types_bytes_32_Bytes32 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_state_transition_replay_error :: IdentityAssetLockStateTransitionReplayError > for dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError) -> dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_state_transition_replay_error :: IdentityAssetLockStateTransitionReplayError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_state_transition_replay_error :: IdentityAssetLockStateTransitionReplayError { transaction_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . transaction_id) , output_index : ffi_ref . output_index , state_transition_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . state_transition_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_state_transition_replay_error :: IdentityAssetLockStateTransitionReplayError > for dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_state_transition_replay_error :: IdentityAssetLockStateTransitionReplayError) -> * const dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError { transaction_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . transaction_id) , output_index : obj . output_index , state_transition_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . state_transition_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_state_transition_replay_error :: IdentityAssetLockStateTransitionReplayError > for dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . transaction_id) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . state_transition_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError_ctor < > (transaction_id : * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid , output_index : usize , state_transition_id : * mut crate :: fermented :: types :: platform_value :: types :: bytes_32 :: platform_value_types_bytes_32_Bytes32) -> * mut dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError { transaction_id , output_index , state_transition_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError_get_transaction_id < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError) -> * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid { (* obj) . transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError_get_output_index < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError) -> usize { (* obj) . output_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError_get_state_transition_id < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError) -> * mut crate :: fermented :: types :: platform_value :: types :: bytes_32 :: platform_value_types_bytes_32_Bytes32 { (* obj) . state_transition_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError_set_transaction_id < > (obj : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError , value : * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid) { (* obj) . transaction_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError_set_output_index < > (obj : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError , value : usize) { (* obj) . output_index = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError_set_state_transition_id < > (obj : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError , value : * mut crate :: fermented :: types :: platform_value :: types :: bytes_32 :: platform_value_types_bytes_32_Bytes32) { (* obj) . state_transition_id = value ; } } pub mod identity_asset_lock_transaction_output_not_found_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: IdentityAssetLockTransactionOutputNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { pub output_index : usize } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: IdentityAssetLockTransactionOutputNotFoundError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError) -> dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: IdentityAssetLockTransactionOutputNotFoundError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: IdentityAssetLockTransactionOutputNotFoundError { output_index : ffi_ref . output_index } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: IdentityAssetLockTransactionOutputNotFoundError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: IdentityAssetLockTransactionOutputNotFoundError) -> * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { output_index : obj . output_index }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: IdentityAssetLockTransactionOutputNotFoundError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError_ctor < > (output_index : usize) -> * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { output_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError_get_output_index < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError) -> usize { (* obj) . output_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError_set_output_index < > (obj : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError , value : usize) { (* obj) . output_index = value ; } } pub mod identity_asset_lock_transaction_out_point_not_enough_balance_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_not_enough_balance_error :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError { pub transaction_id : * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid , pub output_index : usize , pub initial_asset_lock_credits : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , pub credits_left : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , pub credits_required : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_not_enough_balance_error :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) -> dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_not_enough_balance_error :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_not_enough_balance_error :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError { transaction_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . transaction_id) , output_index : ffi_ref . output_index , initial_asset_lock_credits : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . initial_asset_lock_credits) , credits_left : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . credits_left) , credits_required : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . credits_required) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_not_enough_balance_error :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_not_enough_balance_error :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError) -> * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError { transaction_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . transaction_id) , output_index : obj . output_index , initial_asset_lock_credits : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . initial_asset_lock_credits) , credits_left : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . credits_left) , credits_required : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . credits_required) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_not_enough_balance_error :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . transaction_id) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . initial_asset_lock_credits) ; ; ferment_interfaces :: unbox_any (ffi_ref . credits_left) ; ; ferment_interfaces :: unbox_any (ffi_ref . credits_required) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_ctor < > (transaction_id : * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid , output_index : usize , initial_asset_lock_credits : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , credits_left : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , credits_required : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) -> * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError { transaction_id , output_index , initial_asset_lock_credits , credits_left , credits_required }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_get_transaction_id < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) -> * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid { (* obj) . transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_get_output_index < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) -> usize { (* obj) . output_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_get_initial_asset_lock_credits < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . initial_asset_lock_credits } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_get_credits_left < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . credits_left } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_get_credits_required < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . credits_required } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_set_transaction_id < > (obj : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError , value : * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid) { (* obj) . transaction_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_set_output_index < > (obj : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError , value : usize) { (* obj) . output_index = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_set_initial_asset_lock_credits < > (obj : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError , value : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) { (* obj) . initial_asset_lock_credits = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_set_credits_left < > (obj : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError , value : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) { (* obj) . credits_left = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_set_credits_required < > (obj : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError , value : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) { (* obj) . credits_required = value ; } } pub mod invalid_asset_lock_transaction_output_return_size { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: InvalidAssetLockTransactionOutputReturnSizeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { pub output_index : usize } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: InvalidAssetLockTransactionOutputReturnSizeError > for dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: InvalidAssetLockTransactionOutputReturnSizeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: InvalidAssetLockTransactionOutputReturnSizeError { output_index : ffi_ref . output_index } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: InvalidAssetLockTransactionOutputReturnSizeError > for dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: InvalidAssetLockTransactionOutputReturnSizeError) -> * const dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { output_index : obj . output_index }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: InvalidAssetLockTransactionOutputReturnSizeError > for dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError_ctor < > (output_index : usize) -> * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { output_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError_get_output_index < > (obj : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError) -> usize { (* obj) . output_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError_set_output_index < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError , value : usize) { (* obj) . output_index = value ; } } pub mod data_contract_bounds_not_present_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: DataContractBoundsNotPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: DataContractBoundsNotPresentError > for dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError) -> dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: DataContractBoundsNotPresentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: DataContractBoundsNotPresentError { data_contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: DataContractBoundsNotPresentError > for dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: DataContractBoundsNotPresentError) -> * const dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { data_contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: DataContractBoundsNotPresentError > for dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError_get_data_contract_id < > (obj : * const dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError_set_data_contract_id < > (obj : * mut dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } } pub mod invalid_identity_public_key_data_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: InvalidIdentityPublicKeyDataError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { pub public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub validation_error : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: InvalidIdentityPublicKeyDataError > for dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: InvalidIdentityPublicKeyDataError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: InvalidIdentityPublicKeyDataError { public_key_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . public_key_id) , validation_error : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validation_error) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: InvalidIdentityPublicKeyDataError > for dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: InvalidIdentityPublicKeyDataError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { public_key_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . public_key_id) , validation_error : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validation_error) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: InvalidIdentityPublicKeyDataError > for dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_id) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . validation_error) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError_ctor < > (public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , validation_error : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { public_key_id , validation_error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError_get_public_key_id < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError_get_validation_error < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) -> * mut std :: os :: raw :: c_char { (* obj) . validation_error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError_set_public_key_id < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . public_key_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError_set_validation_error < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError , value : * mut std :: os :: raw :: c_char) { (* obj) . validation_error = value ; } } pub mod invalid_identity_update_transition_empty_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: InvalidIdentityUpdateTransitionEmptyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: InvalidIdentityUpdateTransitionEmptyError > for dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: InvalidIdentityUpdateTransitionEmptyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: InvalidIdentityUpdateTransitionEmptyError { } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: InvalidIdentityUpdateTransitionEmptyError > for dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: InvalidIdentityUpdateTransitionEmptyError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: InvalidIdentityUpdateTransitionEmptyError > for dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError_ctor < > () -> * mut dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod duplicated_identity_public_key_basic_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: DuplicatedIdentityPublicKeyBasicError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { pub duplicated_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: DuplicatedIdentityPublicKeyBasicError > for dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError) -> dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: DuplicatedIdentityPublicKeyBasicError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: DuplicatedIdentityPublicKeyBasicError { duplicated_ids : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . duplicated_ids) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: DuplicatedIdentityPublicKeyBasicError > for dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: DuplicatedIdentityPublicKeyBasicError) -> * const dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { duplicated_ids : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . duplicated_ids) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: DuplicatedIdentityPublicKeyBasicError > for dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . duplicated_ids) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError_ctor < > (duplicated_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { duplicated_ids }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError_get_duplicated_ids < > (obj : * const dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . duplicated_ids } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError_set_duplicated_ids < > (obj : * mut dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError , value : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) { (* obj) . duplicated_ids = value ; } } pub mod invalid_identity_credit_withdrawal_transition_amount_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: InvalidIdentityCreditWithdrawalTransitionAmountError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { pub amount : u64 , pub min_amount : u64 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: InvalidIdentityCreditWithdrawalTransitionAmountError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: InvalidIdentityCreditWithdrawalTransitionAmountError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: InvalidIdentityCreditWithdrawalTransitionAmountError { amount : ffi_ref . amount , min_amount : ffi_ref . min_amount } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: InvalidIdentityCreditWithdrawalTransitionAmountError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: InvalidIdentityCreditWithdrawalTransitionAmountError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { amount : obj . amount , min_amount : obj . min_amount }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: InvalidIdentityCreditWithdrawalTransitionAmountError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError_ctor < > (amount : u64 , min_amount : u64) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { amount , min_amount }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError_get_amount < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) -> u64 { (* obj) . amount } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError_get_min_amount < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) -> u64 { (* obj) . min_amount } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError_set_amount < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError , value : u64) { (* obj) . amount = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError_set_min_amount < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError , value : u64) { (* obj) . min_amount = value ; } } pub mod duplicated_identity_public_key_id_basic_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: DuplicatedIdentityPublicKeyIdBasicError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { pub duplicated_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: DuplicatedIdentityPublicKeyIdBasicError > for dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError) -> dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: DuplicatedIdentityPublicKeyIdBasicError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: DuplicatedIdentityPublicKeyIdBasicError { duplicated_ids : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . duplicated_ids) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: DuplicatedIdentityPublicKeyIdBasicError > for dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: DuplicatedIdentityPublicKeyIdBasicError) -> * const dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { duplicated_ids : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . duplicated_ids) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: DuplicatedIdentityPublicKeyIdBasicError > for dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . duplicated_ids) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError_ctor < > (duplicated_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { duplicated_ids }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError_get_duplicated_ids < > (obj : * const dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . duplicated_ids } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError_set_duplicated_ids < > (obj : * mut dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError , value : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) { (* obj) . duplicated_ids = value ; } } pub mod invalid_identity_update_transition_disable_keys_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: InvalidIdentityUpdateTransitionDisableKeysError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: InvalidIdentityUpdateTransitionDisableKeysError > for dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: InvalidIdentityUpdateTransitionDisableKeysError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: InvalidIdentityUpdateTransitionDisableKeysError { } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: InvalidIdentityUpdateTransitionDisableKeysError > for dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: InvalidIdentityUpdateTransitionDisableKeysError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: InvalidIdentityUpdateTransitionDisableKeysError > for dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError_ctor < > () -> * mut dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod not_implemented_identity_credit_withdrawal_transition_pooling_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { pub pooling : u8 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError > for dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError) -> dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError { pooling : ffi_ref . pooling } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError > for dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError) -> * const dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { pooling : obj . pooling }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError > for dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError_ctor < > (pooling : u8) -> * mut dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { pooling }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError_get_pooling < > (obj : * const dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError) -> u8 { (* obj) . pooling } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError_set_pooling < > (obj : * mut dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError , value : u8) { (* obj) . pooling = value ; } } pub mod identity_asset_lock_proof_locked_transaction_mismatch_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: IdentityAssetLockProofLockedTransactionMismatchError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { pub instant_lock_transaction_id : * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid , pub asset_lock_transaction_id : * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: IdentityAssetLockProofLockedTransactionMismatchError > for dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) -> dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: IdentityAssetLockProofLockedTransactionMismatchError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: IdentityAssetLockProofLockedTransactionMismatchError { instant_lock_transaction_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . instant_lock_transaction_id) , asset_lock_transaction_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . asset_lock_transaction_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: IdentityAssetLockProofLockedTransactionMismatchError > for dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: IdentityAssetLockProofLockedTransactionMismatchError) -> * const dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { instant_lock_transaction_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . instant_lock_transaction_id) , asset_lock_transaction_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . asset_lock_transaction_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: IdentityAssetLockProofLockedTransactionMismatchError > for dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . instant_lock_transaction_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . asset_lock_transaction_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError_ctor < > (instant_lock_transaction_id : * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid , asset_lock_transaction_id : * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid) -> * mut dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { instant_lock_transaction_id , asset_lock_transaction_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError_get_instant_lock_transaction_id < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) -> * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid { (* obj) . instant_lock_transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError_get_asset_lock_transaction_id < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) -> * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid { (* obj) . asset_lock_transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError_set_instant_lock_transaction_id < > (obj : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError , value : * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid) { (* obj) . instant_lock_transaction_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError_set_asset_lock_transaction_id < > (obj : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError , value : * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid) { (* obj) . asset_lock_transaction_id = value ; } } pub mod invalid_identity_public_key_security_level_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: InvalidIdentityPublicKeySecurityLevelError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { pub public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , pub security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub allowed_security_levels : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: InvalidIdentityPublicKeySecurityLevelError > for dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: InvalidIdentityPublicKeySecurityLevelError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: InvalidIdentityPublicKeySecurityLevelError { public_key_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . public_key_id) , purpose : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . purpose) , security_level : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . security_level) , allowed_security_levels : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . allowed_security_levels) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: InvalidIdentityPublicKeySecurityLevelError > for dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: InvalidIdentityPublicKeySecurityLevelError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { public_key_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . public_key_id) , purpose : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . purpose) , security_level : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . security_level) , allowed_security_levels : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . allowed_security_levels) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: InvalidIdentityPublicKeySecurityLevelError > for dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . purpose) ; ; ferment_interfaces :: unbox_any (ffi_ref . security_level) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . allowed_security_levels) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_ctor < > (public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , allowed_security_levels : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { public_key_id , purpose , security_level , allowed_security_levels }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_get_public_key_id < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_get_purpose < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . purpose } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_get_security_level < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . security_level } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_get_allowed_security_levels < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> * mut std :: os :: raw :: c_char { (* obj) . allowed_security_levels } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_set_public_key_id < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . public_key_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_set_purpose < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) { (* obj) . purpose = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_set_security_level < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . security_level = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_set_allowed_security_levels < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError , value : * mut std :: os :: raw :: c_char) { (* obj) . allowed_security_levels = value ; } } pub mod invalid_identity_asset_lock_transaction_output_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: InvalidIdentityAssetLockTransactionOutputError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { pub output_index : usize } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: InvalidIdentityAssetLockTransactionOutputError > for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: InvalidIdentityAssetLockTransactionOutputError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: InvalidIdentityAssetLockTransactionOutputError { output_index : ffi_ref . output_index } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: InvalidIdentityAssetLockTransactionOutputError > for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: InvalidIdentityAssetLockTransactionOutputError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { output_index : obj . output_index }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: InvalidIdentityAssetLockTransactionOutputError > for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError_ctor < > (output_index : usize) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { output_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError_get_output_index < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError) -> usize { (* obj) . output_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError_set_output_index < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError , value : usize) { (* obj) . output_index = value ; } } pub mod identity_asset_lock_transaction_out_point_already_consumed_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_consumed_error :: IdentityAssetLockTransactionOutPointAlreadyConsumedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError { pub transaction_id : * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid , pub output_index : usize } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_consumed_error :: IdentityAssetLockTransactionOutPointAlreadyConsumedError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError) -> dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_consumed_error :: IdentityAssetLockTransactionOutPointAlreadyConsumedError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_consumed_error :: IdentityAssetLockTransactionOutPointAlreadyConsumedError { transaction_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . transaction_id) , output_index : ffi_ref . output_index } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_consumed_error :: IdentityAssetLockTransactionOutPointAlreadyConsumedError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_consumed_error :: IdentityAssetLockTransactionOutPointAlreadyConsumedError) -> * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError { transaction_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . transaction_id) , output_index : obj . output_index }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_consumed_error :: IdentityAssetLockTransactionOutPointAlreadyConsumedError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . transaction_id) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError_ctor < > (transaction_id : * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid , output_index : usize) -> * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError { transaction_id , output_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError_get_transaction_id < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError) -> * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid { (* obj) . transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError_get_output_index < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError) -> usize { (* obj) . output_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError_set_transaction_id < > (obj : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError , value : * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid) { (* obj) . transaction_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError_set_output_index < > (obj : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError , value : usize) { (* obj) . output_index = value ; } } pub mod invalid_identity_credit_withdrawal_transition_core_fee_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { pub core_fee_per_byte : u32 , pub min_core_fee_per_byte : u32 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError { core_fee_per_byte : ffi_ref . core_fee_per_byte , min_core_fee_per_byte : ffi_ref . min_core_fee_per_byte } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { core_fee_per_byte : obj . core_fee_per_byte , min_core_fee_per_byte : obj . min_core_fee_per_byte }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError_ctor < > (core_fee_per_byte : u32 , min_core_fee_per_byte : u32) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { core_fee_per_byte , min_core_fee_per_byte }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError_get_core_fee_per_byte < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) -> u32 { (* obj) . core_fee_per_byte } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError_get_min_core_fee_per_byte < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) -> u32 { (* obj) . min_core_fee_per_byte } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError_set_core_fee_per_byte < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError , value : u32) { (* obj) . core_fee_per_byte = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError_set_min_core_fee_per_byte < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError , value : u32) { (* obj) . min_core_fee_per_byte = value ; } } pub mod invalid_identity_key_signature_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: InvalidIdentityKeySignatureError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { pub public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: InvalidIdentityKeySignatureError > for dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: InvalidIdentityKeySignatureError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: InvalidIdentityKeySignatureError { public_key_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . public_key_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: InvalidIdentityKeySignatureError > for dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: InvalidIdentityKeySignatureError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { public_key_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . public_key_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: InvalidIdentityKeySignatureError > for dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError_ctor < > (public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { public_key_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError_get_public_key_id < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError_set_public_key_id < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . public_key_id = value ; } } pub mod invalid_asset_lock_proof_transaction_height_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: InvalidAssetLockProofTransactionHeightError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { pub proof_core_chain_locked_height : u32 , pub transaction_height : * mut u32 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: InvalidAssetLockProofTransactionHeightError > for dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: InvalidAssetLockProofTransactionHeightError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: InvalidAssetLockProofTransactionHeightError { proof_core_chain_locked_height : ffi_ref . proof_core_chain_locked_height , transaction_height : ferment_interfaces :: from_opt_primitive (ffi_ref . transaction_height) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: InvalidAssetLockProofTransactionHeightError > for dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: InvalidAssetLockProofTransactionHeightError) -> * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { proof_core_chain_locked_height : obj . proof_core_chain_locked_height , transaction_height : ferment_interfaces :: to_opt_primitive (obj . transaction_height) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: InvalidAssetLockProofTransactionHeightError > for dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError_ctor < > (proof_core_chain_locked_height : u32 , transaction_height : * mut u32) -> * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { proof_core_chain_locked_height , transaction_height }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError_get_proof_core_chain_locked_height < > (obj : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) -> u32 { (* obj) . proof_core_chain_locked_height } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError_get_transaction_height < > (obj : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) -> * mut u32 { (* obj) . transaction_height } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError_set_proof_core_chain_locked_height < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError , value : u32) { (* obj) . proof_core_chain_locked_height = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError_set_transaction_height < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError , value : * mut u32) { (* obj) . transaction_height = value ; } } pub mod identity_credit_transfer_to_self_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: IdentityCreditTransferToSelfError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: IdentityCreditTransferToSelfError > for dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError) -> dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: IdentityCreditTransferToSelfError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: IdentityCreditTransferToSelfError { } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: IdentityCreditTransferToSelfError > for dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: IdentityCreditTransferToSelfError) -> * const dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: IdentityCreditTransferToSelfError > for dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError_ctor < > () -> * mut dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod identity_asset_lock_transaction_is_not_found_error { use crate as ferment_example_platform ; # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: IdentityAssetLockTransactionIsNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { pub transaction_id : * mut crate :: fermented :: generics :: Arr_u8_32 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: IdentityAssetLockTransactionIsNotFoundError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError) -> dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: IdentityAssetLockTransactionIsNotFoundError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: IdentityAssetLockTransactionIsNotFoundError { transaction_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . transaction_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: IdentityAssetLockTransactionIsNotFoundError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: IdentityAssetLockTransactionIsNotFoundError) -> * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { transaction_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . transaction_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: IdentityAssetLockTransactionIsNotFoundError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . transaction_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError_ctor < > (transaction_id : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { transaction_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError_get_transaction_id < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError_set_transaction_id < > (obj : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError , value : * mut crate :: fermented :: generics :: Arr_u8_32) { (* obj) . transaction_id = value ; } } pub mod invalid_identity_credit_withdrawal_transition_output_script_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { pub output_script : * mut ferment_example_platform :: custom :: dpp :: CoreScriptFFI } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError { output_script : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . output_script) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { output_script : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . output_script) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . output_script) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError_ctor < > (output_script : * mut ferment_example_platform :: custom :: dpp :: CoreScriptFFI) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { output_script }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError_get_output_script < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError) -> * mut ferment_example_platform :: custom :: dpp :: CoreScriptFFI { (* obj) . output_script } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError_set_output_script < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError , value : * mut ferment_example_platform :: custom :: dpp :: CoreScriptFFI) { (* obj) . output_script = value ; } } pub mod invalid_instant_asset_lock_proof_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: InvalidInstantAssetLockProofError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: InvalidInstantAssetLockProofError > for dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: InvalidInstantAssetLockProofError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: InvalidInstantAssetLockProofError { message : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . message) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: InvalidInstantAssetLockProofError > for dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: InvalidInstantAssetLockProofError) -> * const dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { message : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . message) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: InvalidInstantAssetLockProofError > for dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError_get_message < > (obj : * const dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError_set_message < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod missing_master_public_key_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: MissingMasterPublicKeyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: MissingMasterPublicKeyError > for dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError) -> dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: MissingMasterPublicKeyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: MissingMasterPublicKeyError { } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: MissingMasterPublicKeyError > for dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: MissingMasterPublicKeyError) -> * const dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: MissingMasterPublicKeyError > for dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError_ctor < > () -> * mut dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod invalid_identity_asset_lock_transaction_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: InvalidIdentityAssetLockTransactionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: InvalidIdentityAssetLockTransactionError > for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: InvalidIdentityAssetLockTransactionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: InvalidIdentityAssetLockTransactionError { message : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . message) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: InvalidIdentityAssetLockTransactionError > for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: InvalidIdentityAssetLockTransactionError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { message : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . message) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: InvalidIdentityAssetLockTransactionError > for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError_get_message < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError_set_message < > (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod disabling_key_id_also_being_added_in_same_transition_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: identity :: disabling_key_id_also_being_added_in_same_transition_error :: DisablingKeyIdAlsoBeingAddedInSameTransitionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError { pub key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: disabling_key_id_also_being_added_in_same_transition_error :: DisablingKeyIdAlsoBeingAddedInSameTransitionError > for dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError) -> dpp :: errors :: consensus :: basic :: identity :: disabling_key_id_also_being_added_in_same_transition_error :: DisablingKeyIdAlsoBeingAddedInSameTransitionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: disabling_key_id_also_being_added_in_same_transition_error :: DisablingKeyIdAlsoBeingAddedInSameTransitionError { key_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . key_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: disabling_key_id_also_being_added_in_same_transition_error :: DisablingKeyIdAlsoBeingAddedInSameTransitionError > for dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: disabling_key_id_also_being_added_in_same_transition_error :: DisablingKeyIdAlsoBeingAddedInSameTransitionError) -> * const dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError { key_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . key_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: identity :: disabling_key_id_also_being_added_in_same_transition_error :: DisablingKeyIdAlsoBeingAddedInSameTransitionError > for dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . key_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError_ctor < > (key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError { key_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError_get_key_id < > (obj : * const dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError_set_key_id < > (obj : * mut dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . key_id = value ; } } } pub mod unsupported_version_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: unsupported_version_error :: UnsupportedVersionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { pub received_version : u16 , pub min_version : u16 , pub max_version : u16 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: unsupported_version_error :: UnsupportedVersionError > for dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) -> dpp :: errors :: consensus :: basic :: unsupported_version_error :: UnsupportedVersionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: unsupported_version_error :: UnsupportedVersionError { received_version : ffi_ref . received_version , min_version : ffi_ref . min_version , max_version : ffi_ref . max_version } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: unsupported_version_error :: UnsupportedVersionError > for dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: unsupported_version_error :: UnsupportedVersionError) -> * const dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { received_version : obj . received_version , min_version : obj . min_version , max_version : obj . max_version }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: unsupported_version_error :: UnsupportedVersionError > for dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_ctor < > (received_version : u16 , min_version : u16 , max_version : u16) -> * mut dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { received_version , min_version , max_version }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_destroy < > (ffi : * mut dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_get_received_version < > (obj : * const dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) -> u16 { (* obj) . received_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_get_min_version < > (obj : * const dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) -> u16 { (* obj) . min_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_get_max_version < > (obj : * const dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) -> u16 { (* obj) . max_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_set_received_version < > (obj : * mut dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError , value : u16) { (* obj) . received_version = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_set_min_version < > (obj : * mut dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError , value : u16) { (* obj) . min_version = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_set_max_version < > (obj : * mut dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError , value : u16) { (* obj) . max_version = value ; } # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } } pub mod invalid_identifier_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: invalid_identifier_error :: InvalidIdentifierError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { pub identifier_name : * mut std :: os :: raw :: c_char , pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: invalid_identifier_error :: InvalidIdentifierError > for dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) -> dpp :: errors :: consensus :: basic :: invalid_identifier_error :: InvalidIdentifierError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: invalid_identifier_error :: InvalidIdentifierError { identifier_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identifier_name) , message : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . message) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: invalid_identifier_error :: InvalidIdentifierError > for dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: invalid_identifier_error :: InvalidIdentifierError) -> * const dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { identifier_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identifier_name) , message : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . message) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: invalid_identifier_error :: InvalidIdentifierError > for dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . identifier_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError_ctor < > (identifier_name : * mut std :: os :: raw :: c_char , message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { identifier_name , message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError_destroy < > (ffi : * mut dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError_get_identifier_name < > (obj : * const dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) -> * mut std :: os :: raw :: c_char { (* obj) . identifier_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError_get_message < > (obj : * const dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError_set_identifier_name < > (obj : * mut dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError , value : * mut std :: os :: raw :: c_char) { (* obj) . identifier_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError_set_message < > (obj : * mut dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod overflow_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: overflow_error :: OverflowError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_overflow_error_OverflowError { pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: overflow_error :: OverflowError > for dpp_errors_consensus_basic_overflow_error_OverflowError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_overflow_error_OverflowError) -> dpp :: errors :: consensus :: basic :: overflow_error :: OverflowError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: overflow_error :: OverflowError { message : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . message) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: overflow_error :: OverflowError > for dpp_errors_consensus_basic_overflow_error_OverflowError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: overflow_error :: OverflowError) -> * const dpp_errors_consensus_basic_overflow_error_OverflowError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_overflow_error_OverflowError { message : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . message) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: overflow_error :: OverflowError > for dpp_errors_consensus_basic_overflow_error_OverflowError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_overflow_error_OverflowError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_overflow_error_OverflowError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_overflow_error_OverflowError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_overflow_error_OverflowError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_overflow_error_OverflowError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_overflow_error_OverflowError_destroy < > (ffi : * mut dpp_errors_consensus_basic_overflow_error_OverflowError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_overflow_error_OverflowError_get_message < > (obj : * const dpp_errors_consensus_basic_overflow_error_OverflowError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_overflow_error_OverflowError_set_message < > (obj : * mut dpp_errors_consensus_basic_overflow_error_OverflowError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod incompatible_protocol_version_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: IncompatibleProtocolVersionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { pub parsed_protocol_version : u32 , pub minimal_protocol_version : u32 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: IncompatibleProtocolVersionError > for dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) -> dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: IncompatibleProtocolVersionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: IncompatibleProtocolVersionError { parsed_protocol_version : ffi_ref . parsed_protocol_version , minimal_protocol_version : ffi_ref . minimal_protocol_version } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: IncompatibleProtocolVersionError > for dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: IncompatibleProtocolVersionError) -> * const dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { parsed_protocol_version : obj . parsed_protocol_version , minimal_protocol_version : obj . minimal_protocol_version }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: IncompatibleProtocolVersionError > for dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError_ctor < > (parsed_protocol_version : u32 , minimal_protocol_version : u32) -> * mut dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { parsed_protocol_version , minimal_protocol_version }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError_destroy < > (ffi : * mut dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError_get_parsed_protocol_version < > (obj : * const dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) -> u32 { (* obj) . parsed_protocol_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError_get_minimal_protocol_version < > (obj : * const dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) -> u32 { (* obj) . minimal_protocol_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError_set_parsed_protocol_version < > (obj : * mut dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError , value : u32) { (* obj) . parsed_protocol_version = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError_set_minimal_protocol_version < > (obj : * mut dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError , value : u32) { (* obj) . minimal_protocol_version = value ; } } pub mod unsupported_feature_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: unsupported_feature_error :: UnsupportedFeatureError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError { pub feature_name : * mut std :: os :: raw :: c_char , pub current_protocol_version : u32 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: unsupported_feature_error :: UnsupportedFeatureError > for dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError) -> dpp :: errors :: consensus :: basic :: unsupported_feature_error :: UnsupportedFeatureError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: unsupported_feature_error :: UnsupportedFeatureError { feature_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . feature_name) , current_protocol_version : ffi_ref . current_protocol_version } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: unsupported_feature_error :: UnsupportedFeatureError > for dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: unsupported_feature_error :: UnsupportedFeatureError) -> * const dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError { feature_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . feature_name) , current_protocol_version : obj . current_protocol_version }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: unsupported_feature_error :: UnsupportedFeatureError > for dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . feature_name) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError_ctor < > (feature_name : * mut std :: os :: raw :: c_char , current_protocol_version : u32) -> * mut dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError { feature_name , current_protocol_version }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError_destroy < > (ffi : * mut dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError_get_feature_name < > (obj : * const dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError) -> * mut std :: os :: raw :: c_char { (* obj) . feature_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError_get_current_protocol_version < > (obj : * const dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError) -> u32 { (* obj) . current_protocol_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError_set_feature_name < > (obj : * mut dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError , value : * mut std :: os :: raw :: c_char) { (* obj) . feature_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError_set_current_protocol_version < > (obj : * mut dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError , value : u32) { (* obj) . current_protocol_version = value ; } } # [cfg (feature = "json-schema-validation")] pub mod json_schema_compilation_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: JsonSchemaCompilationError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { pub compilation_error : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: JsonSchemaCompilationError > for dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError) -> dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: JsonSchemaCompilationError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: JsonSchemaCompilationError { compilation_error : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . compilation_error) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: JsonSchemaCompilationError > for dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: JsonSchemaCompilationError) -> * const dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { compilation_error : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . compilation_error) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: JsonSchemaCompilationError > for dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . compilation_error) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError_ctor < > (compilation_error : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { compilation_error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError_destroy < > (ffi : * mut dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError_get_compilation_error < > (obj : * const dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError) -> * mut std :: os :: raw :: c_char { (* obj) . compilation_error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError_set_compilation_error < > (obj : * mut dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError , value : * mut std :: os :: raw :: c_char) { (* obj) . compilation_error = value ; } } pub mod unsupported_protocol_version_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: UnsupportedProtocolVersionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { pub parsed_protocol_version : u32 , pub latest_version : u32 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: UnsupportedProtocolVersionError > for dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) -> dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: UnsupportedProtocolVersionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: UnsupportedProtocolVersionError { parsed_protocol_version : ffi_ref . parsed_protocol_version , latest_version : ffi_ref . latest_version } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: UnsupportedProtocolVersionError > for dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: UnsupportedProtocolVersionError) -> * const dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { parsed_protocol_version : obj . parsed_protocol_version , latest_version : obj . latest_version }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: UnsupportedProtocolVersionError > for dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError_ctor < > (parsed_protocol_version : u32 , latest_version : u32) -> * mut dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { parsed_protocol_version , latest_version }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError_destroy < > (ffi : * mut dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError_get_parsed_protocol_version < > (obj : * const dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) -> u32 { (* obj) . parsed_protocol_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError_get_latest_version < > (obj : * const dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) -> u32 { (* obj) . latest_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError_set_parsed_protocol_version < > (obj : * mut dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError , value : u32) { (* obj) . parsed_protocol_version = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError_set_latest_version < > (obj : * mut dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError , value : u32) { (* obj) . latest_version = value ; } # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } } pub mod basic_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: errors :: consensus :: basic :: basic_error :: BasicError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_errors_consensus_basic_basic_error_BasicError { ProtocolVersionParsingError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError) , VersionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: version_error :: dpp_errors_consensus_basic_decode_version_error_VersionError) , ContractError (* mut crate :: fermented :: types :: dpp :: data_contract :: errors :: contract :: dpp_data_contract_errors_contract_DataContractError) , UnknownSecurityLevelError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_security_level_error :: dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError) , UnknownStorageKeyRequirementsError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_storage_key_requirements_error :: dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError) , UnknownTransferableTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_transferable_type_error :: dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError) , UnknownTradeModeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_trade_mode_error :: dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError) , UnknownDocumentCreationRestrictionModeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_document_creation_restriction_mode_error :: dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError) , SerializedObjectParsingError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError) , UnsupportedProtocolVersionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) , UnsupportedVersionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_version_error :: dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) , IncompatibleProtocolVersionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) , # [cfg (feature = "json-schema-validation")] JsonSchemaCompilationError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError) , # [cfg (feature = "json-schema-validation")] JsonSchemaError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) , InvalidIdentifierError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: invalid_identifier_error :: dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) , ValueError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: value_error :: dpp_errors_consensus_basic_value_error_ValueError) , DataContractMaxDepthExceedError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError) , DuplicateIndexError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) , IncompatibleRe2PatternError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) , InvalidCompoundIndexError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) , InvalidDataContractIdError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) , InvalidIndexedPropertyConstraintError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) , InvalidIndexPropertyTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) , # [cfg (feature = "json-schema-validation")] InvalidJsonSchemaRefError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError) , SystemPropertyIndexAlreadyPresentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) , UndefinedIndexPropertyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) , UniqueIndicesLimitReachedError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) , DuplicateIndexNameError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) , InvalidDataContractVersionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) , IncompatibleDataContractSchemaError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) , DataContractImmutablePropertiesUpdateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) , DataContractUniqueIndicesChangedError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) , DataContractInvalidIndexDefinitionUpdateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) , DataContractHaveNewUniqueIndexError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) , DataContractNotPresentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError) , DocumentCreationNotAllowedError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: document_creation_not_allowed_error :: dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError) , DataContractBoundsNotPresentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError) , DuplicateDocumentTransitionsWithIdsError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError) , DuplicateDocumentTransitionsWithIndicesError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError) , NonceOutOfBoundsError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: identity_contract_nonce_out_of_bounds_error :: dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError) , InconsistentCompoundIndexDataError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) , InvalidDocumentTransitionActionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError) , InvalidDocumentTransitionIdError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) , InvalidDocumentTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) , MissingPositionsInDocumentTypePropertiesError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) , MissingDataContractIdBasicError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError) , MissingDocumentTransitionActionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError) , MissingDocumentTransitionTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError) , MissingDocumentTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError) , MaxDocumentsTransitionsExceededError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError) , DuplicatedIdentityPublicKeyBasicError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError) , DuplicatedIdentityPublicKeyIdBasicError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError) , DisablingKeyIdAlsoBeingAddedInSameTransitionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: disabling_key_id_also_being_added_in_same_transition_error :: dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError) , IdentityAssetLockProofLockedTransactionMismatchError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) , IdentityAssetLockTransactionIsNotFoundError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError) , IdentityAssetLockTransactionOutPointAlreadyConsumedError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_consumed_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError) , IdentityAssetLockTransactionOutPointNotEnoughBalanceError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_not_enough_balance_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) , IdentityAssetLockStateTransitionReplayError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_state_transition_replay_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError) , IdentityAssetLockTransactionOutputNotFoundError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError) , InvalidAssetLockProofCoreChainHeightError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) , InvalidIdentityAssetLockProofChainLockValidationError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) , InvalidAssetLockProofTransactionHeightError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) , InvalidAssetLockTransactionOutputReturnSizeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError) , InvalidIdentityAssetLockTransactionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError) , InvalidIdentityAssetLockTransactionOutputError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError) , InvalidIdentityPublicKeyDataError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) , InvalidInstantAssetLockProofError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError) , InvalidInstantAssetLockProofSignatureError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError) , MissingMasterPublicKeyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError) , TooManyMasterPublicKeyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: too_many_master_public_key_error :: dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError) , MasterPublicKeyUpdateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: master_public_key_update_error :: dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError) , InvalidDocumentTypeRequiredSecurityLevelError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_required_security_level :: dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError) , InvalidIdentityPublicKeySecurityLevelError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) , InvalidIdentityKeySignatureError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError) , InvalidIdentityCreditTransferAmountError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) , InvalidIdentityCreditWithdrawalTransitionOutputScriptError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError) , InvalidIdentityCreditWithdrawalTransitionCoreFeeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) , InvalidIdentityCreditWithdrawalTransitionAmountError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) , InvalidIdentityUpdateTransitionEmptyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError) , InvalidIdentityUpdateTransitionDisableKeysError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError) , NotImplementedIdentityCreditWithdrawalTransitionPoolingError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError) , InvalidStateTransitionTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) , MissingStateTransitionTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError) , DocumentFieldMaxSizeExceededError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: document_field_max_size_exceeded_error :: dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError) , StateTransitionMaxSizeExceededError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) , DocumentTransitionsAreAbsentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError) , IdentityCreditTransferToSelfError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError) , InvalidDocumentTypeNameError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_name_error :: dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError) , IncompatibleDocumentTypeSchemaError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_document_type_schema_error :: dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError) , ContestedUniqueIndexOnMutableDocumentTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_on_mutable_document_type_error :: dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError) , ContestedUniqueIndexWithUniqueIndexError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_with_unique_index_error :: dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError) , OverflowError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: overflow_error :: dpp_errors_consensus_basic_overflow_error_OverflowError) , UnsupportedFeatureError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_feature_error :: dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError) } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: basic_error :: BasicError > for dpp_errors_consensus_basic_basic_error_BasicError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_basic_error_BasicError) -> dpp :: errors :: consensus :: basic :: basic_error :: BasicError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_consensus_basic_basic_error_BasicError :: ProtocolVersionParsingError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ProtocolVersionParsingError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: VersionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: VersionError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: ContractError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ContractError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UnknownSecurityLevelError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnknownSecurityLevelError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UnknownStorageKeyRequirementsError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnknownStorageKeyRequirementsError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UnknownTransferableTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnknownTransferableTypeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UnknownTradeModeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnknownTradeModeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UnknownDocumentCreationRestrictionModeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnknownDocumentCreationRestrictionModeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: SerializedObjectParsingError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: SerializedObjectParsingError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedProtocolVersionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnsupportedProtocolVersionError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedVersionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnsupportedVersionError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleProtocolVersionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleProtocolVersionError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , # [cfg (feature = "json-schema-validation")] dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaCompilationError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: JsonSchemaCompilationError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , # [cfg (feature = "json-schema-validation")] dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: JsonSchemaError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentifierError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentifierError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: ValueError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ValueError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractMaxDepthExceedError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractMaxDepthExceedError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateIndexError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleRe2PatternError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleRe2PatternError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidCompoundIndexError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidCompoundIndexError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractIdError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDataContractIdError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexedPropertyConstraintError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIndexedPropertyConstraintError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexPropertyTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIndexPropertyTypeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , # [cfg (feature = "json-schema-validation")] dpp_errors_consensus_basic_basic_error_BasicError :: InvalidJsonSchemaRefError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidJsonSchemaRefError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: SystemPropertyIndexAlreadyPresentError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: SystemPropertyIndexAlreadyPresentError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UndefinedIndexPropertyError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UndefinedIndexPropertyError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UniqueIndicesLimitReachedError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UniqueIndicesLimitReachedError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexNameError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateIndexNameError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractVersionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDataContractVersionError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleDataContractSchemaError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleDataContractSchemaError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractImmutablePropertiesUpdateError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractImmutablePropertiesUpdateError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractUniqueIndicesChangedError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractUniqueIndicesChangedError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractInvalidIndexDefinitionUpdateError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractInvalidIndexDefinitionUpdateError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractHaveNewUniqueIndexError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractHaveNewUniqueIndexError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractNotPresentError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractNotPresentError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DocumentCreationNotAllowedError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DocumentCreationNotAllowedError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractBoundsNotPresentError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractBoundsNotPresentError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIdsError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateDocumentTransitionsWithIdsError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIndicesError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateDocumentTransitionsWithIndicesError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: NonceOutOfBoundsError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: NonceOutOfBoundsError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InconsistentCompoundIndexDataError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InconsistentCompoundIndexDataError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionActionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTransitionActionError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionIdError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTransitionIdError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTypeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MissingPositionsInDocumentTypePropertiesError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingPositionsInDocumentTypePropertiesError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDataContractIdBasicError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDataContractIdBasicError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionActionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDocumentTransitionActionError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDocumentTransitionTypeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDocumentTypeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MaxDocumentsTransitionsExceededError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MaxDocumentsTransitionsExceededError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyBasicError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicatedIdentityPublicKeyBasicError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyIdBasicError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicatedIdentityPublicKeyIdBasicError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DisablingKeyIdAlsoBeingAddedInSameTransitionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DisablingKeyIdAlsoBeingAddedInSameTransitionError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockProofLockedTransactionMismatchError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockProofLockedTransactionMismatchError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionIsNotFoundError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionIsNotFoundError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutPointAlreadyConsumedError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionOutPointAlreadyConsumedError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockStateTransitionReplayError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockStateTransitionReplayError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutputNotFoundError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionOutputNotFoundError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofCoreChainHeightError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidAssetLockProofCoreChainHeightError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockProofChainLockValidationError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityAssetLockProofChainLockValidationError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofTransactionHeightError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidAssetLockProofTransactionHeightError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockTransactionOutputReturnSizeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidAssetLockTransactionOutputReturnSizeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityAssetLockTransactionError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionOutputError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityAssetLockTransactionOutputError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeyDataError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityPublicKeyDataError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidInstantAssetLockProofError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofSignatureError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidInstantAssetLockProofSignatureError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MissingMasterPublicKeyError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingMasterPublicKeyError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: TooManyMasterPublicKeyError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: TooManyMasterPublicKeyError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MasterPublicKeyUpdateError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MasterPublicKeyUpdateError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeRequiredSecurityLevelError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTypeRequiredSecurityLevelError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeySecurityLevelError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityPublicKeySecurityLevelError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityKeySignatureError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityKeySignatureError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditTransferAmountError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditTransferAmountError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionAmountError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditWithdrawalTransitionAmountError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionEmptyError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityUpdateTransitionEmptyError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionDisableKeysError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityUpdateTransitionDisableKeysError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidStateTransitionTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidStateTransitionTypeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MissingStateTransitionTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingStateTransitionTypeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DocumentFieldMaxSizeExceededError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DocumentFieldMaxSizeExceededError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: StateTransitionMaxSizeExceededError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: StateTransitionMaxSizeExceededError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DocumentTransitionsAreAbsentError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DocumentTransitionsAreAbsentError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityCreditTransferToSelfError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityCreditTransferToSelfError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeNameError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTypeNameError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleDocumentTypeSchemaError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleDocumentTypeSchemaError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: ContestedUniqueIndexOnMutableDocumentTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ContestedUniqueIndexOnMutableDocumentTypeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: ContestedUniqueIndexWithUniqueIndexError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ContestedUniqueIndexWithUniqueIndexError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: OverflowError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: OverflowError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedFeatureError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnsupportedFeatureError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: basic_error :: BasicError > for dpp_errors_consensus_basic_basic_error_BasicError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: basic_error :: BasicError) -> * const dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (match obj { dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ProtocolVersionParsingError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: ProtocolVersionParsingError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: VersionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: VersionError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ContractError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: ContractError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnknownSecurityLevelError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UnknownSecurityLevelError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnknownStorageKeyRequirementsError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UnknownStorageKeyRequirementsError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnknownTransferableTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UnknownTransferableTypeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnknownTradeModeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UnknownTradeModeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnknownDocumentCreationRestrictionModeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UnknownDocumentCreationRestrictionModeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: SerializedObjectParsingError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: SerializedObjectParsingError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnsupportedProtocolVersionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedProtocolVersionError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnsupportedVersionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedVersionError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleProtocolVersionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleProtocolVersionError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , # [cfg (feature = "json-schema-validation")] dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: JsonSchemaCompilationError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaCompilationError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , # [cfg (feature = "json-schema-validation")] dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: JsonSchemaError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentifierError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentifierError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ValueError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: ValueError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractMaxDepthExceedError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DataContractMaxDepthExceedError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateIndexError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleRe2PatternError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleRe2PatternError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidCompoundIndexError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidCompoundIndexError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDataContractIdError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractIdError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIndexedPropertyConstraintError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexedPropertyConstraintError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIndexPropertyTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexPropertyTypeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , # [cfg (feature = "json-schema-validation")] dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidJsonSchemaRefError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidJsonSchemaRefError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: SystemPropertyIndexAlreadyPresentError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: SystemPropertyIndexAlreadyPresentError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UndefinedIndexPropertyError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UndefinedIndexPropertyError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UniqueIndicesLimitReachedError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UniqueIndicesLimitReachedError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateIndexNameError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexNameError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDataContractVersionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractVersionError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleDataContractSchemaError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleDataContractSchemaError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractImmutablePropertiesUpdateError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DataContractImmutablePropertiesUpdateError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractUniqueIndicesChangedError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DataContractUniqueIndicesChangedError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractInvalidIndexDefinitionUpdateError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DataContractInvalidIndexDefinitionUpdateError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractHaveNewUniqueIndexError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DataContractHaveNewUniqueIndexError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractNotPresentError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DataContractNotPresentError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DocumentCreationNotAllowedError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DocumentCreationNotAllowedError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractBoundsNotPresentError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DataContractBoundsNotPresentError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateDocumentTransitionsWithIdsError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIdsError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateDocumentTransitionsWithIndicesError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIndicesError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: NonceOutOfBoundsError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: NonceOutOfBoundsError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InconsistentCompoundIndexDataError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InconsistentCompoundIndexDataError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTransitionActionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionActionError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTransitionIdError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionIdError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingPositionsInDocumentTypePropertiesError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MissingPositionsInDocumentTypePropertiesError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDataContractIdBasicError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MissingDataContractIdBasicError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDocumentTransitionActionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionActionError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDocumentTransitionTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionTypeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDocumentTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTypeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MaxDocumentsTransitionsExceededError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MaxDocumentsTransitionsExceededError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicatedIdentityPublicKeyBasicError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyBasicError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicatedIdentityPublicKeyIdBasicError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyIdBasicError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DisablingKeyIdAlsoBeingAddedInSameTransitionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DisablingKeyIdAlsoBeingAddedInSameTransitionError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockProofLockedTransactionMismatchError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockProofLockedTransactionMismatchError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionIsNotFoundError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionIsNotFoundError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionOutPointAlreadyConsumedError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutPointAlreadyConsumedError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockStateTransitionReplayError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockStateTransitionReplayError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionOutputNotFoundError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutputNotFoundError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidAssetLockProofCoreChainHeightError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofCoreChainHeightError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityAssetLockProofChainLockValidationError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockProofChainLockValidationError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidAssetLockProofTransactionHeightError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofTransactionHeightError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidAssetLockTransactionOutputReturnSizeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockTransactionOutputReturnSizeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityAssetLockTransactionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityAssetLockTransactionOutputError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionOutputError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityPublicKeyDataError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeyDataError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidInstantAssetLockProofError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidInstantAssetLockProofSignatureError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofSignatureError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingMasterPublicKeyError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MissingMasterPublicKeyError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: TooManyMasterPublicKeyError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: TooManyMasterPublicKeyError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MasterPublicKeyUpdateError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MasterPublicKeyUpdateError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTypeRequiredSecurityLevelError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeRequiredSecurityLevelError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityPublicKeySecurityLevelError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeySecurityLevelError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityKeySignatureError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityKeySignatureError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditTransferAmountError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditTransferAmountError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditWithdrawalTransitionAmountError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionAmountError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityUpdateTransitionEmptyError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionEmptyError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityUpdateTransitionDisableKeysError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionDisableKeysError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidStateTransitionTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidStateTransitionTypeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingStateTransitionTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MissingStateTransitionTypeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DocumentFieldMaxSizeExceededError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DocumentFieldMaxSizeExceededError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: StateTransitionMaxSizeExceededError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: StateTransitionMaxSizeExceededError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DocumentTransitionsAreAbsentError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DocumentTransitionsAreAbsentError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityCreditTransferToSelfError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IdentityCreditTransferToSelfError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTypeNameError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeNameError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleDocumentTypeSchemaError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleDocumentTypeSchemaError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ContestedUniqueIndexOnMutableDocumentTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: ContestedUniqueIndexOnMutableDocumentTypeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ContestedUniqueIndexWithUniqueIndexError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: ContestedUniqueIndexWithUniqueIndexError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: OverflowError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: OverflowError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnsupportedFeatureError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedFeatureError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: basic_error :: BasicError > for dpp_errors_consensus_basic_basic_error_BasicError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_basic_error_BasicError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_errors_consensus_basic_basic_error_BasicError { fn drop (& mut self) { unsafe { match self { dpp_errors_consensus_basic_basic_error_BasicError :: ProtocolVersionParsingError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: VersionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: ContractError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UnknownSecurityLevelError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UnknownStorageKeyRequirementsError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UnknownTransferableTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UnknownTradeModeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UnknownDocumentCreationRestrictionModeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: SerializedObjectParsingError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedProtocolVersionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedVersionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleProtocolVersionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , # [cfg (feature = "json-schema-validation")] dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaCompilationError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , # [cfg (feature = "json-schema-validation")] dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentifierError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: ValueError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractMaxDepthExceedError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleRe2PatternError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidCompoundIndexError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractIdError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexedPropertyConstraintError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexPropertyTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , # [cfg (feature = "json-schema-validation")] dpp_errors_consensus_basic_basic_error_BasicError :: InvalidJsonSchemaRefError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: SystemPropertyIndexAlreadyPresentError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UndefinedIndexPropertyError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UniqueIndicesLimitReachedError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexNameError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractVersionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleDataContractSchemaError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractImmutablePropertiesUpdateError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractUniqueIndicesChangedError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractInvalidIndexDefinitionUpdateError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractHaveNewUniqueIndexError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractNotPresentError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DocumentCreationNotAllowedError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractBoundsNotPresentError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIdsError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIndicesError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: NonceOutOfBoundsError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InconsistentCompoundIndexDataError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionActionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionIdError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MissingPositionsInDocumentTypePropertiesError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDataContractIdBasicError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionActionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MaxDocumentsTransitionsExceededError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyBasicError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyIdBasicError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DisablingKeyIdAlsoBeingAddedInSameTransitionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockProofLockedTransactionMismatchError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionIsNotFoundError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutPointAlreadyConsumedError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockStateTransitionReplayError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutputNotFoundError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofCoreChainHeightError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockProofChainLockValidationError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofTransactionHeightError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockTransactionOutputReturnSizeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionOutputError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeyDataError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofSignatureError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MissingMasterPublicKeyError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: TooManyMasterPublicKeyError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MasterPublicKeyUpdateError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeRequiredSecurityLevelError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeySecurityLevelError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityKeySignatureError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditTransferAmountError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionAmountError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionEmptyError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionDisableKeysError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidStateTransitionTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MissingStateTransitionTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DocumentFieldMaxSizeExceededError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: StateTransitionMaxSizeExceededError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DocumentTransitionsAreAbsentError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityCreditTransferToSelfError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeNameError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleDocumentTypeSchemaError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: ContestedUniqueIndexOnMutableDocumentTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: ContestedUniqueIndexWithUniqueIndexError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: OverflowError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedFeatureError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_ProtocolVersionParsingError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: ProtocolVersionParsingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_VersionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: version_error :: dpp_errors_consensus_basic_decode_version_error_VersionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: VersionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_ContractError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: errors :: contract :: dpp_data_contract_errors_contract_DataContractError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: ContractError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UnknownSecurityLevelError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_security_level_error :: dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UnknownSecurityLevelError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UnknownStorageKeyRequirementsError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_storage_key_requirements_error :: dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UnknownStorageKeyRequirementsError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UnknownTransferableTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_transferable_type_error :: dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UnknownTransferableTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UnknownTradeModeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_trade_mode_error :: dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UnknownTradeModeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UnknownDocumentCreationRestrictionModeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_document_creation_restriction_mode_error :: dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UnknownDocumentCreationRestrictionModeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_SerializedObjectParsingError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: SerializedObjectParsingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UnsupportedProtocolVersionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedProtocolVersionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UnsupportedVersionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_version_error :: dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedVersionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IncompatibleProtocolVersionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleProtocolVersionError (o_o_0)) } # [cfg (feature = "json-schema-validation")] # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_JsonSchemaCompilationError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaCompilationError (o_o_0)) } # [cfg (feature = "json-schema-validation")] # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_JsonSchemaError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentifierError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: invalid_identifier_error :: dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentifierError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_ValueError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: value_error :: dpp_errors_consensus_basic_value_error_ValueError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: ValueError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DataContractMaxDepthExceedError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DataContractMaxDepthExceedError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DuplicateIndexError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IncompatibleRe2PatternError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleRe2PatternError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidCompoundIndexError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidCompoundIndexError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidDataContractIdError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractIdError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIndexedPropertyConstraintError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexedPropertyConstraintError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIndexPropertyTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexPropertyTypeError (o_o_0)) } # [cfg (feature = "json-schema-validation")] # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidJsonSchemaRefError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidJsonSchemaRefError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_SystemPropertyIndexAlreadyPresentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: SystemPropertyIndexAlreadyPresentError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UndefinedIndexPropertyError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UndefinedIndexPropertyError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UniqueIndicesLimitReachedError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UniqueIndicesLimitReachedError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DuplicateIndexNameError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexNameError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidDataContractVersionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractVersionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IncompatibleDataContractSchemaError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleDataContractSchemaError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DataContractImmutablePropertiesUpdateError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DataContractImmutablePropertiesUpdateError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DataContractUniqueIndicesChangedError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DataContractUniqueIndicesChangedError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DataContractInvalidIndexDefinitionUpdateError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DataContractInvalidIndexDefinitionUpdateError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DataContractHaveNewUniqueIndexError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DataContractHaveNewUniqueIndexError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DataContractNotPresentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DataContractNotPresentError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DocumentCreationNotAllowedError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: document_creation_not_allowed_error :: dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DocumentCreationNotAllowedError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DataContractBoundsNotPresentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DataContractBoundsNotPresentError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DuplicateDocumentTransitionsWithIdsError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIdsError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DuplicateDocumentTransitionsWithIndicesError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIndicesError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_NonceOutOfBoundsError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: identity_contract_nonce_out_of_bounds_error :: dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: NonceOutOfBoundsError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InconsistentCompoundIndexDataError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InconsistentCompoundIndexDataError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidDocumentTransitionActionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionActionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidDocumentTransitionIdError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionIdError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidDocumentTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MissingPositionsInDocumentTypePropertiesError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MissingPositionsInDocumentTypePropertiesError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MissingDataContractIdBasicError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MissingDataContractIdBasicError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MissingDocumentTransitionActionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionActionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MissingDocumentTransitionTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MissingDocumentTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MaxDocumentsTransitionsExceededError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MaxDocumentsTransitionsExceededError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DuplicatedIdentityPublicKeyBasicError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyBasicError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DuplicatedIdentityPublicKeyIdBasicError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyIdBasicError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DisablingKeyIdAlsoBeingAddedInSameTransitionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: disabling_key_id_also_being_added_in_same_transition_error :: dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DisablingKeyIdAlsoBeingAddedInSameTransitionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IdentityAssetLockProofLockedTransactionMismatchError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockProofLockedTransactionMismatchError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IdentityAssetLockTransactionIsNotFoundError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionIsNotFoundError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IdentityAssetLockTransactionOutPointAlreadyConsumedError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_consumed_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutPointAlreadyConsumedError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_not_enough_balance_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IdentityAssetLockStateTransitionReplayError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_state_transition_replay_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockStateTransitionReplayError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IdentityAssetLockTransactionOutputNotFoundError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutputNotFoundError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidAssetLockProofCoreChainHeightError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofCoreChainHeightError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityAssetLockProofChainLockValidationError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockProofChainLockValidationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidAssetLockProofTransactionHeightError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofTransactionHeightError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidAssetLockTransactionOutputReturnSizeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockTransactionOutputReturnSizeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityAssetLockTransactionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityAssetLockTransactionOutputError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionOutputError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityPublicKeyDataError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeyDataError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidInstantAssetLockProofError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidInstantAssetLockProofSignatureError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofSignatureError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MissingMasterPublicKeyError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MissingMasterPublicKeyError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_TooManyMasterPublicKeyError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: too_many_master_public_key_error :: dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: TooManyMasterPublicKeyError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MasterPublicKeyUpdateError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: master_public_key_update_error :: dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MasterPublicKeyUpdateError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidDocumentTypeRequiredSecurityLevelError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_required_security_level :: dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeRequiredSecurityLevelError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityPublicKeySecurityLevelError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeySecurityLevelError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityKeySignatureError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityKeySignatureError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityCreditTransferAmountError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditTransferAmountError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityCreditWithdrawalTransitionOutputScriptError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityCreditWithdrawalTransitionCoreFeeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityCreditWithdrawalTransitionAmountError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionAmountError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityUpdateTransitionEmptyError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionEmptyError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityUpdateTransitionDisableKeysError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionDisableKeysError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_NotImplementedIdentityCreditWithdrawalTransitionPoolingError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidStateTransitionTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidStateTransitionTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MissingStateTransitionTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MissingStateTransitionTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DocumentFieldMaxSizeExceededError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: document_field_max_size_exceeded_error :: dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DocumentFieldMaxSizeExceededError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_StateTransitionMaxSizeExceededError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: StateTransitionMaxSizeExceededError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DocumentTransitionsAreAbsentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DocumentTransitionsAreAbsentError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IdentityCreditTransferToSelfError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IdentityCreditTransferToSelfError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidDocumentTypeNameError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_name_error :: dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeNameError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IncompatibleDocumentTypeSchemaError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_document_type_schema_error :: dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleDocumentTypeSchemaError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_ContestedUniqueIndexOnMutableDocumentTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_on_mutable_document_type_error :: dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: ContestedUniqueIndexOnMutableDocumentTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_ContestedUniqueIndexWithUniqueIndexError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_with_unique_index_error :: dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: ContestedUniqueIndexWithUniqueIndexError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_OverflowError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: overflow_error :: dpp_errors_consensus_basic_overflow_error_OverflowError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: OverflowError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UnsupportedFeatureError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_feature_error :: dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedFeatureError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_destroy < > (ffi : * mut dpp_errors_consensus_basic_basic_error_BasicError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod value_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: value_error :: ValueError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_value_error_ValueError { pub value_error : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: value_error :: ValueError > for dpp_errors_consensus_basic_value_error_ValueError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_value_error_ValueError) -> dpp :: errors :: consensus :: basic :: value_error :: ValueError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: value_error :: ValueError { value_error : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . value_error) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: value_error :: ValueError > for dpp_errors_consensus_basic_value_error_ValueError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: value_error :: ValueError) -> * const dpp_errors_consensus_basic_value_error_ValueError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_value_error_ValueError { value_error : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . value_error) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: value_error :: ValueError > for dpp_errors_consensus_basic_value_error_ValueError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_value_error_ValueError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_value_error_ValueError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . value_error) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_value_error_ValueError_ctor < > (value_error : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_value_error_ValueError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_value_error_ValueError { value_error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_value_error_ValueError_destroy < > (ffi : * mut dpp_errors_consensus_basic_value_error_ValueError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_value_error_ValueError_get_value_error < > (obj : * const dpp_errors_consensus_basic_value_error_ValueError) -> * mut std :: os :: raw :: c_char { (* obj) . value_error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_value_error_ValueError_set_value_error < > (obj : * mut dpp_errors_consensus_basic_value_error_ValueError , value : * mut std :: os :: raw :: c_char) { (* obj) . value_error = value ; } } pub mod document { use crate as ferment_example_platform ; pub mod invalid_document_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: InvalidDocumentTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { pub document_type : * mut std :: os :: raw :: c_char , pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: InvalidDocumentTypeError > for dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) -> dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: InvalidDocumentTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: InvalidDocumentTypeError { document_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type) , data_contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: InvalidDocumentTypeError > for dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: InvalidDocumentTypeError) -> * const dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { document_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type) , data_contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: InvalidDocumentTypeError > for dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type) ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError_ctor < > (document_type : * mut std :: os :: raw :: c_char , data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { document_type , data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError_get_document_type < > (obj : * const dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError_get_data_contract_id < > (obj : * const dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError_set_document_type < > (obj : * mut dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError_set_data_contract_id < > (obj : * mut dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } } pub mod duplicate_document_transitions_with_ids_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: DuplicateDocumentTransitionsWithIdsError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { pub references : * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: DuplicateDocumentTransitionsWithIdsError > for dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError) -> dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: DuplicateDocumentTransitionsWithIdsError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: DuplicateDocumentTransitionsWithIdsError { references : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . references) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: DuplicateDocumentTransitionsWithIdsError > for dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: DuplicateDocumentTransitionsWithIdsError) -> * const dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { references : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . references) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: DuplicateDocumentTransitionsWithIdsError > for dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . references) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError_ctor < > (references : * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32) -> * mut dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { references }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError_get_references < > (obj : * const dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError) -> * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32 { (* obj) . references } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError_set_references < > (obj : * mut dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError , value : * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32) { (* obj) . references = value ; } } pub mod document_field_max_size_exceeded_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: document :: document_field_max_size_exceeded_error :: DocumentFieldMaxSizeExceededError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError { pub field : * mut std :: os :: raw :: c_char , pub actual_size_bytes : u64 , pub max_size_bytes : u64 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: document_field_max_size_exceeded_error :: DocumentFieldMaxSizeExceededError > for dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError) -> dpp :: errors :: consensus :: basic :: document :: document_field_max_size_exceeded_error :: DocumentFieldMaxSizeExceededError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: document_field_max_size_exceeded_error :: DocumentFieldMaxSizeExceededError { field : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . field) , actual_size_bytes : ffi_ref . actual_size_bytes , max_size_bytes : ffi_ref . max_size_bytes } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: document_field_max_size_exceeded_error :: DocumentFieldMaxSizeExceededError > for dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: document_field_max_size_exceeded_error :: DocumentFieldMaxSizeExceededError) -> * const dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError { field : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . field) , actual_size_bytes : obj . actual_size_bytes , max_size_bytes : obj . max_size_bytes }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: document :: document_field_max_size_exceeded_error :: DocumentFieldMaxSizeExceededError > for dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . field) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError_ctor < > (field : * mut std :: os :: raw :: c_char , actual_size_bytes : u64 , max_size_bytes : u64) -> * mut dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError { field , actual_size_bytes , max_size_bytes }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError_get_field < > (obj : * const dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError) -> * mut std :: os :: raw :: c_char { (* obj) . field } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError_get_actual_size_bytes < > (obj : * const dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError) -> u64 { (* obj) . actual_size_bytes } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError_get_max_size_bytes < > (obj : * const dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError) -> u64 { (* obj) . max_size_bytes } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError_set_field < > (obj : * mut dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError , value : * mut std :: os :: raw :: c_char) { (* obj) . field = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError_set_actual_size_bytes < > (obj : * mut dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError , value : u64) { (* obj) . actual_size_bytes = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError_set_max_size_bytes < > (obj : * mut dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError , value : u64) { (* obj) . max_size_bytes = value ; } } pub mod data_contract_not_present_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: DataContractNotPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: DataContractNotPresentError > for dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError) -> dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: DataContractNotPresentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: DataContractNotPresentError { data_contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: DataContractNotPresentError > for dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: DataContractNotPresentError) -> * const dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { data_contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: DataContractNotPresentError > for dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError_get_data_contract_id < > (obj : * const dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError_set_data_contract_id < > (obj : * mut dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } } pub mod identity_contract_nonce_out_of_bounds_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: document :: identity_contract_nonce_out_of_bounds_error :: NonceOutOfBoundsError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError { pub nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: identity_contract_nonce_out_of_bounds_error :: NonceOutOfBoundsError > for dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError) -> dpp :: errors :: consensus :: basic :: document :: identity_contract_nonce_out_of_bounds_error :: NonceOutOfBoundsError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: identity_contract_nonce_out_of_bounds_error :: NonceOutOfBoundsError { nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . nonce) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: identity_contract_nonce_out_of_bounds_error :: NonceOutOfBoundsError > for dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: identity_contract_nonce_out_of_bounds_error :: NonceOutOfBoundsError) -> * const dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError { nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . nonce) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: document :: identity_contract_nonce_out_of_bounds_error :: NonceOutOfBoundsError > for dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . nonce) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError_ctor < > (nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce) -> * mut dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError { nonce }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError_get_nonce < > (obj : * const dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . nonce } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError_set_nonce < > (obj : * mut dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce) { (* obj) . nonce = value ; } } pub mod document_transitions_are_absent_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: DocumentTransitionsAreAbsentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: DocumentTransitionsAreAbsentError > for dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError) -> dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: DocumentTransitionsAreAbsentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: DocumentTransitionsAreAbsentError { } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: DocumentTransitionsAreAbsentError > for dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: DocumentTransitionsAreAbsentError) -> * const dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: DocumentTransitionsAreAbsentError > for dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError_ctor < > () -> * mut dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod inconsistent_compound_index_data_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: InconsistentCompoundIndexDataError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { pub document_type : * mut std :: os :: raw :: c_char , pub index_properties : * mut crate :: fermented :: generics :: Vec_String } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: InconsistentCompoundIndexDataError > for dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) -> dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: InconsistentCompoundIndexDataError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: InconsistentCompoundIndexDataError { document_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type) , index_properties : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . index_properties) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: InconsistentCompoundIndexDataError > for dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: InconsistentCompoundIndexDataError) -> * const dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { document_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type) , index_properties : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . index_properties) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: InconsistentCompoundIndexDataError > for dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type) ; ferment_interfaces :: unbox_any (ffi_ref . index_properties) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_properties : * mut crate :: fermented :: generics :: Vec_String) -> * mut dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { document_type , index_properties }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError_get_document_type < > (obj : * const dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError_get_index_properties < > (obj : * const dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) -> * mut crate :: fermented :: generics :: Vec_String { (* obj) . index_properties } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError_set_document_type < > (obj : * mut dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError_set_index_properties < > (obj : * mut dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError , value : * mut crate :: fermented :: generics :: Vec_String) { (* obj) . index_properties = value ; } } pub mod max_documents_transitions_exceeded_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: MaxDocumentsTransitionsExceededError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { pub max_transitions : u16 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: MaxDocumentsTransitionsExceededError > for dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError) -> dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: MaxDocumentsTransitionsExceededError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: MaxDocumentsTransitionsExceededError { max_transitions : ffi_ref . max_transitions } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: MaxDocumentsTransitionsExceededError > for dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: MaxDocumentsTransitionsExceededError) -> * const dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { max_transitions : obj . max_transitions }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: MaxDocumentsTransitionsExceededError > for dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError_ctor < > (max_transitions : u16) -> * mut dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { max_transitions }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError_get_max_transitions < > (obj : * const dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError) -> u16 { (* obj) . max_transitions } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError_set_max_transitions < > (obj : * mut dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError , value : u16) { (* obj) . max_transitions = value ; } } pub mod missing_positions_in_document_type_properties_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: MissingPositionsInDocumentTypePropertiesError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { pub missing_position : u32 , pub contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_type_name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: MissingPositionsInDocumentTypePropertiesError > for dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) -> dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: MissingPositionsInDocumentTypePropertiesError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: MissingPositionsInDocumentTypePropertiesError { missing_position : ffi_ref . missing_position , contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contract_id) , document_type_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type_name) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: MissingPositionsInDocumentTypePropertiesError > for dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: MissingPositionsInDocumentTypePropertiesError) -> * const dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { missing_position : obj . missing_position , contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contract_id) , document_type_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type_name) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: MissingPositionsInDocumentTypePropertiesError > for dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment_interfaces :: unbox_any (ffi_ref . contract_id) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_ctor < > (missing_position : u32 , contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { missing_position , contract_id , document_type_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_get_missing_position < > (obj : * const dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) -> u32 { (* obj) . missing_position } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_get_contract_id < > (obj : * const dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_get_document_type_name < > (obj : * const dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_set_missing_position < > (obj : * mut dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError , value : u32) { (* obj) . missing_position = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_set_contract_id < > (obj : * mut dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_set_document_type_name < > (obj : * mut dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type_name = value ; } } pub mod missing_document_transition_action_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: MissingDocumentTransitionActionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: MissingDocumentTransitionActionError > for dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError) -> dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: MissingDocumentTransitionActionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: MissingDocumentTransitionActionError { } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: MissingDocumentTransitionActionError > for dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: MissingDocumentTransitionActionError) -> * const dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: MissingDocumentTransitionActionError > for dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError_ctor < > () -> * mut dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod missing_document_transition_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: MissingDocumentTransitionTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: MissingDocumentTransitionTypeError > for dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError) -> dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: MissingDocumentTransitionTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: MissingDocumentTransitionTypeError { } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: MissingDocumentTransitionTypeError > for dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: MissingDocumentTransitionTypeError) -> * const dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: MissingDocumentTransitionTypeError > for dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError_ctor < > () -> * mut dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod invalid_document_transition_action_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: InvalidDocumentTransitionActionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { pub action : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: InvalidDocumentTransitionActionError > for dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError) -> dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: InvalidDocumentTransitionActionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: InvalidDocumentTransitionActionError { action : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . action) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: InvalidDocumentTransitionActionError > for dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: InvalidDocumentTransitionActionError) -> * const dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { action : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . action) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: InvalidDocumentTransitionActionError > for dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . action) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError_ctor < > (action : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { action }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError_get_action < > (obj : * const dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError) -> * mut std :: os :: raw :: c_char { (* obj) . action } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError_set_action < > (obj : * mut dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError , value : * mut std :: os :: raw :: c_char) { (* obj) . action = value ; } } pub mod duplicate_document_transitions_with_indices_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: DuplicateDocumentTransitionsWithIndicesError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { pub references : * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: DuplicateDocumentTransitionsWithIndicesError > for dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError) -> dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: DuplicateDocumentTransitionsWithIndicesError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: DuplicateDocumentTransitionsWithIndicesError { references : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . references) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: DuplicateDocumentTransitionsWithIndicesError > for dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: DuplicateDocumentTransitionsWithIndicesError) -> * const dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { references : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . references) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: DuplicateDocumentTransitionsWithIndicesError > for dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . references) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError_ctor < > (references : * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32) -> * mut dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { references }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError_get_references < > (obj : * const dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError) -> * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32 { (* obj) . references } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError_set_references < > (obj : * mut dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError , value : * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32) { (* obj) . references = value ; } } pub mod missing_data_contract_id_basic_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: MissingDataContractIdBasicError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: MissingDataContractIdBasicError > for dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError) -> dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: MissingDataContractIdBasicError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: MissingDataContractIdBasicError { } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: MissingDataContractIdBasicError > for dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: MissingDataContractIdBasicError) -> * const dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: MissingDataContractIdBasicError > for dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError_ctor < > () -> * mut dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod missing_document_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: MissingDocumentTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: MissingDocumentTypeError > for dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError) -> dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: MissingDocumentTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: MissingDocumentTypeError { } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: MissingDocumentTypeError > for dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: MissingDocumentTypeError) -> * const dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: MissingDocumentTypeError > for dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError_ctor < > () -> * mut dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod invalid_document_transition_id_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: InvalidDocumentTransitionIdError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { pub expected_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub invalid_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: InvalidDocumentTransitionIdError > for dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) -> dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: InvalidDocumentTransitionIdError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: InvalidDocumentTransitionIdError { expected_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . expected_id) , invalid_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . invalid_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: InvalidDocumentTransitionIdError > for dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: InvalidDocumentTransitionIdError) -> * const dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { expected_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . expected_id) , invalid_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . invalid_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: InvalidDocumentTransitionIdError > for dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . expected_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . invalid_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError_ctor < > (expected_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , invalid_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { expected_id , invalid_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError_get_expected_id < > (obj : * const dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . expected_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError_get_invalid_id < > (obj : * const dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . invalid_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError_set_expected_id < > (obj : * mut dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . expected_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError_set_invalid_id < > (obj : * mut dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . invalid_id = value ; } } pub mod document_creation_not_allowed_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: document :: document_creation_not_allowed_error :: DocumentCreationNotAllowedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_type_name : * mut std :: os :: raw :: c_char , pub creation_restriction_mode : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: restricted_creation :: dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: document_creation_not_allowed_error :: DocumentCreationNotAllowedError > for dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError) -> dpp :: errors :: consensus :: basic :: document :: document_creation_not_allowed_error :: DocumentCreationNotAllowedError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: document_creation_not_allowed_error :: DocumentCreationNotAllowedError { data_contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract_id) , document_type_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type_name) , creation_restriction_mode : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . creation_restriction_mode) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: document_creation_not_allowed_error :: DocumentCreationNotAllowedError > for dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: document_creation_not_allowed_error :: DocumentCreationNotAllowedError) -> * const dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError { data_contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract_id) , document_type_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type_name) , creation_restriction_mode : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . creation_restriction_mode) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: document :: document_creation_not_allowed_error :: DocumentCreationNotAllowedError > for dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type_name) ; ferment_interfaces :: unbox_any (ffi_ref . creation_restriction_mode) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type_name : * mut std :: os :: raw :: c_char , creation_restriction_mode : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: restricted_creation :: dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode) -> * mut dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError { data_contract_id , document_type_name , creation_restriction_mode }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError_get_data_contract_id < > (obj : * const dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError_get_document_type_name < > (obj : * const dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError_get_creation_restriction_mode < > (obj : * const dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: restricted_creation :: dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { (* obj) . creation_restriction_mode } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError_set_data_contract_id < > (obj : * mut dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError_set_document_type_name < > (obj : * mut dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError_set_creation_restriction_mode < > (obj : * mut dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError , value : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: restricted_creation :: dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode) { (* obj) . creation_restriction_mode = value ; } } } pub mod state_transition { use crate as ferment_example_platform ; pub mod state_transition_max_size_exceeded_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: StateTransitionMaxSizeExceededError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { pub actual_size_bytes : u64 , pub max_size_bytes : u64 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: StateTransitionMaxSizeExceededError > for dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) -> dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: StateTransitionMaxSizeExceededError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: StateTransitionMaxSizeExceededError { actual_size_bytes : ffi_ref . actual_size_bytes , max_size_bytes : ffi_ref . max_size_bytes } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: StateTransitionMaxSizeExceededError > for dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: StateTransitionMaxSizeExceededError) -> * const dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { actual_size_bytes : obj . actual_size_bytes , max_size_bytes : obj . max_size_bytes }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: StateTransitionMaxSizeExceededError > for dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError_ctor < > (actual_size_bytes : u64 , max_size_bytes : u64) -> * mut dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { actual_size_bytes , max_size_bytes }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError_destroy < > (ffi : * mut dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError_get_actual_size_bytes < > (obj : * const dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) -> u64 { (* obj) . actual_size_bytes } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError_get_max_size_bytes < > (obj : * const dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) -> u64 { (* obj) . max_size_bytes } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError_set_actual_size_bytes < > (obj : * mut dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError , value : u64) { (* obj) . actual_size_bytes = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError_set_max_size_bytes < > (obj : * mut dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError , value : u64) { (* obj) . max_size_bytes = value ; } } pub mod missing_state_transition_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: MissingStateTransitionTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: MissingStateTransitionTypeError > for dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError) -> dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: MissingStateTransitionTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: MissingStateTransitionTypeError { } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: MissingStateTransitionTypeError > for dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: MissingStateTransitionTypeError) -> * const dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: MissingStateTransitionTypeError > for dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError_ctor < > () -> * mut dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod invalid_state_transition_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: InvalidStateTransitionTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { pub transition_type : u8 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: InvalidStateTransitionTypeError > for dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) -> dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: InvalidStateTransitionTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: InvalidStateTransitionTypeError { transition_type : ffi_ref . transition_type } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: InvalidStateTransitionTypeError > for dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: InvalidStateTransitionTypeError) -> * const dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { transition_type : obj . transition_type }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: InvalidStateTransitionTypeError > for dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError_ctor < > (transition_type : u8) -> * mut dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { transition_type }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError_get_transition_type < > (obj : * const dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) -> u8 { (* obj) . transition_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError_set_transition_type < > (obj : * mut dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError , value : u8) { (* obj) . transition_type = value ; } } } pub mod data_contract { use crate as ferment_example_platform ; # [cfg (feature = "json-schema-validation")] pub mod invalid_json_schema_ref_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: InvalidJsonSchemaRefError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: InvalidJsonSchemaRefError > for dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: InvalidJsonSchemaRefError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: InvalidJsonSchemaRefError { message : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . message) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: InvalidJsonSchemaRefError > for dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: InvalidJsonSchemaRefError) -> * const dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { message : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . message) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: InvalidJsonSchemaRefError > for dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError_get_message < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError_set_message < > (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod invalid_index_property_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: InvalidIndexPropertyTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char , pub property_name : * mut std :: os :: raw :: c_char , pub property_type : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: InvalidIndexPropertyTypeError > for dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: InvalidIndexPropertyTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: InvalidIndexPropertyTypeError { document_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type) , index_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . index_name) , property_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . property_name) , property_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . property_type) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: InvalidIndexPropertyTypeError > for dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: InvalidIndexPropertyTypeError) -> * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { document_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type) , index_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . index_name) , property_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . property_name) , property_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . property_type) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: InvalidIndexPropertyTypeError > for dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . index_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . property_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . property_type) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char , property_name : * mut std :: os :: raw :: c_char , property_type : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { document_type , index_name , property_name , property_type }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_get_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_get_property_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_get_property_type < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . property_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_set_document_type < > (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_set_index_name < > (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError , value : * mut std :: os :: raw :: c_char) { (* obj) . index_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_set_property_name < > (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError , value : * mut std :: os :: raw :: c_char) { (* obj) . property_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_set_property_type < > (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError , value : * mut std :: os :: raw :: c_char) { (* obj) . property_type = value ; } } pub mod unknown_security_level_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: unknown_security_level_error :: UnknownSecurityLevelError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError { pub allowed_values : * mut crate :: fermented :: generics :: Vec_u8 , pub received : u8 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: unknown_security_level_error :: UnknownSecurityLevelError > for dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError) -> dpp :: errors :: consensus :: basic :: data_contract :: unknown_security_level_error :: UnknownSecurityLevelError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: unknown_security_level_error :: UnknownSecurityLevelError { allowed_values : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . allowed_values) , received : ffi_ref . received } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: unknown_security_level_error :: UnknownSecurityLevelError > for dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: unknown_security_level_error :: UnknownSecurityLevelError) -> * const dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError { allowed_values : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . allowed_values) , received : obj . received }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: unknown_security_level_error :: UnknownSecurityLevelError > for dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . allowed_values) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError_ctor < > (allowed_values : * mut crate :: fermented :: generics :: Vec_u8 , received : u8) -> * mut dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError { allowed_values , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError_get_allowed_values < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . allowed_values } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError_get_received < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError) -> u8 { (* obj) . received } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError_set_allowed_values < > (obj : * mut dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . allowed_values = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError_set_received < > (obj : * mut dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError , value : u8) { (* obj) . received = value ; } } pub mod unknown_document_creation_restriction_mode_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: unknown_document_creation_restriction_mode_error :: UnknownDocumentCreationRestrictionModeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError { pub allowed_values : * mut crate :: fermented :: generics :: Vec_u8 , pub received : u8 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: unknown_document_creation_restriction_mode_error :: UnknownDocumentCreationRestrictionModeError > for dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError) -> dpp :: errors :: consensus :: basic :: data_contract :: unknown_document_creation_restriction_mode_error :: UnknownDocumentCreationRestrictionModeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: unknown_document_creation_restriction_mode_error :: UnknownDocumentCreationRestrictionModeError { allowed_values : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . allowed_values) , received : ffi_ref . received } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: unknown_document_creation_restriction_mode_error :: UnknownDocumentCreationRestrictionModeError > for dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: unknown_document_creation_restriction_mode_error :: UnknownDocumentCreationRestrictionModeError) -> * const dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError { allowed_values : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . allowed_values) , received : obj . received }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: unknown_document_creation_restriction_mode_error :: UnknownDocumentCreationRestrictionModeError > for dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . allowed_values) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError_ctor < > (allowed_values : * mut crate :: fermented :: generics :: Vec_u8 , received : u8) -> * mut dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError { allowed_values , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError_get_allowed_values < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . allowed_values } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError_get_received < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError) -> u8 { (* obj) . received } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError_set_allowed_values < > (obj : * mut dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . allowed_values = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError_set_received < > (obj : * mut dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError , value : u8) { (* obj) . received = value ; } } pub mod contested_unique_index_with_unique_index_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_with_unique_index_error :: ContestedUniqueIndexWithUniqueIndexError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError { pub document_type : * mut std :: os :: raw :: c_char , pub contested_unique_index_name : * mut std :: os :: raw :: c_char , pub unique_index_name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_with_unique_index_error :: ContestedUniqueIndexWithUniqueIndexError > for dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError) -> dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_with_unique_index_error :: ContestedUniqueIndexWithUniqueIndexError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_with_unique_index_error :: ContestedUniqueIndexWithUniqueIndexError { document_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type) , contested_unique_index_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contested_unique_index_name) , unique_index_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . unique_index_name) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_with_unique_index_error :: ContestedUniqueIndexWithUniqueIndexError > for dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_with_unique_index_error :: ContestedUniqueIndexWithUniqueIndexError) -> * const dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError { document_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type) , contested_unique_index_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contested_unique_index_name) , unique_index_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . unique_index_name) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_with_unique_index_error :: ContestedUniqueIndexWithUniqueIndexError > for dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . contested_unique_index_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . unique_index_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError_ctor < > (document_type : * mut std :: os :: raw :: c_char , contested_unique_index_name : * mut std :: os :: raw :: c_char , unique_index_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError { document_type , contested_unique_index_name , unique_index_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError_get_contested_unique_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . contested_unique_index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError_get_unique_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . unique_index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError_set_document_type < > (obj : * mut dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError_set_contested_unique_index_name < > (obj : * mut dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError , value : * mut std :: os :: raw :: c_char) { (* obj) . contested_unique_index_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError_set_unique_index_name < > (obj : * mut dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError , value : * mut std :: os :: raw :: c_char) { (* obj) . unique_index_name = value ; } } pub mod incompatible_re2_pattern_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: IncompatibleRe2PatternError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { pub pattern : * mut std :: os :: raw :: c_char , pub path : * mut std :: os :: raw :: c_char , pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: IncompatibleRe2PatternError > for dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) -> dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: IncompatibleRe2PatternError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: IncompatibleRe2PatternError { pattern : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . pattern) , path : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . path) , message : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . message) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: IncompatibleRe2PatternError > for dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: IncompatibleRe2PatternError) -> * const dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { pattern : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . pattern) , path : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . path) , message : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . message) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: IncompatibleRe2PatternError > for dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . pattern) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . path) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_ctor < > (pattern : * mut std :: os :: raw :: c_char , path : * mut std :: os :: raw :: c_char , message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { pattern , path , message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_get_pattern < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) -> * mut std :: os :: raw :: c_char { (* obj) . pattern } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_get_path < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) -> * mut std :: os :: raw :: c_char { (* obj) . path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_get_message < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_set_pattern < > (obj : * mut dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError , value : * mut std :: os :: raw :: c_char) { (* obj) . pattern = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_set_path < > (obj : * mut dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError , value : * mut std :: os :: raw :: c_char) { (* obj) . path = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_set_message < > (obj : * mut dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod data_contract_invalid_index_definition_update_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: DataContractInvalidIndexDefinitionUpdateError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { pub document_type : * mut std :: os :: raw :: c_char , pub index_path : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: DataContractInvalidIndexDefinitionUpdateError > for dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) -> dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: DataContractInvalidIndexDefinitionUpdateError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: DataContractInvalidIndexDefinitionUpdateError { document_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type) , index_path : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . index_path) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: DataContractInvalidIndexDefinitionUpdateError > for dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: DataContractInvalidIndexDefinitionUpdateError) -> * const dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { document_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type) , index_path : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . index_path) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: DataContractInvalidIndexDefinitionUpdateError > for dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . index_path) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_path : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { document_type , index_path }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError_get_index_path < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . index_path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError_set_document_type < > (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError_set_index_path < > (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError , value : * mut std :: os :: raw :: c_char) { (* obj) . index_path = value ; } } pub mod unknown_trade_mode_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: unknown_trade_mode_error :: UnknownTradeModeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError { pub allowed_values : * mut crate :: fermented :: generics :: Vec_u8 , pub received : u8 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: unknown_trade_mode_error :: UnknownTradeModeError > for dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError) -> dpp :: errors :: consensus :: basic :: data_contract :: unknown_trade_mode_error :: UnknownTradeModeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: unknown_trade_mode_error :: UnknownTradeModeError { allowed_values : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . allowed_values) , received : ffi_ref . received } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: unknown_trade_mode_error :: UnknownTradeModeError > for dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: unknown_trade_mode_error :: UnknownTradeModeError) -> * const dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError { allowed_values : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . allowed_values) , received : obj . received }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: unknown_trade_mode_error :: UnknownTradeModeError > for dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . allowed_values) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError_ctor < > (allowed_values : * mut crate :: fermented :: generics :: Vec_u8 , received : u8) -> * mut dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError { allowed_values , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError_get_allowed_values < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . allowed_values } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError_get_received < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError) -> u8 { (* obj) . received } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError_set_allowed_values < > (obj : * mut dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . allowed_values = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError_set_received < > (obj : * mut dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError , value : u8) { (* obj) . received = value ; } } pub mod invalid_compound_index_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: InvalidCompoundIndexError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: InvalidCompoundIndexError > for dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: InvalidCompoundIndexError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: InvalidCompoundIndexError { document_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type) , index_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . index_name) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: InvalidCompoundIndexError > for dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: InvalidCompoundIndexError) -> * const dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { document_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type) , index_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . index_name) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: InvalidCompoundIndexError > for dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . index_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { document_type , index_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError_get_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError_set_document_type < > (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError_set_index_name < > (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError , value : * mut std :: os :: raw :: c_char) { (* obj) . index_name = value ; } } pub mod unknown_storage_key_requirements_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: unknown_storage_key_requirements_error :: UnknownStorageKeyRequirementsError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError { pub allowed_values : * mut crate :: fermented :: generics :: Vec_u8 , pub received : i128 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: unknown_storage_key_requirements_error :: UnknownStorageKeyRequirementsError > for dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError) -> dpp :: errors :: consensus :: basic :: data_contract :: unknown_storage_key_requirements_error :: UnknownStorageKeyRequirementsError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: unknown_storage_key_requirements_error :: UnknownStorageKeyRequirementsError { allowed_values : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . allowed_values) , received : ffi_ref . received } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: unknown_storage_key_requirements_error :: UnknownStorageKeyRequirementsError > for dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: unknown_storage_key_requirements_error :: UnknownStorageKeyRequirementsError) -> * const dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError { allowed_values : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . allowed_values) , received : obj . received }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: unknown_storage_key_requirements_error :: UnknownStorageKeyRequirementsError > for dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . allowed_values) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError_ctor < > (allowed_values : * mut crate :: fermented :: generics :: Vec_u8 , received : i128) -> * mut dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError { allowed_values , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError_get_allowed_values < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . allowed_values } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError_get_received < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError) -> i128 { (* obj) . received } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError_set_allowed_values < > (obj : * mut dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . allowed_values = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError_set_received < > (obj : * mut dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError , value : i128) { (* obj) . received = value ; } } pub mod system_property_index_already_present_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: SystemPropertyIndexAlreadyPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char , pub property_name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: SystemPropertyIndexAlreadyPresentError > for dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) -> dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: SystemPropertyIndexAlreadyPresentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: SystemPropertyIndexAlreadyPresentError { document_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type) , index_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . index_name) , property_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . property_name) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: SystemPropertyIndexAlreadyPresentError > for dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: SystemPropertyIndexAlreadyPresentError) -> * const dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { document_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type) , index_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . index_name) , property_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . property_name) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: SystemPropertyIndexAlreadyPresentError > for dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . index_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . property_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char , property_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { document_type , index_name , property_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_get_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_get_property_name < > (obj : * const dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_set_document_type < > (obj : * mut dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_set_index_name < > (obj : * mut dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError , value : * mut std :: os :: raw :: c_char) { (* obj) . index_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_set_property_name < > (obj : * mut dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError , value : * mut std :: os :: raw :: c_char) { (* obj) . property_name = value ; } } pub mod invalid_document_type_name_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_name_error :: InvalidDocumentTypeNameError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError { pub name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_name_error :: InvalidDocumentTypeNameError > for dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_name_error :: InvalidDocumentTypeNameError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_name_error :: InvalidDocumentTypeNameError { name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . name) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_name_error :: InvalidDocumentTypeNameError > for dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_name_error :: InvalidDocumentTypeNameError) -> * const dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError { name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . name) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_name_error :: InvalidDocumentTypeNameError > for dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError_ctor < > (name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError { name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError_get_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError) -> * mut std :: os :: raw :: c_char { (* obj) . name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError_set_name < > (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError , value : * mut std :: os :: raw :: c_char) { (* obj) . name = value ; } } pub mod data_contract_immutable_properties_update_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: DataContractImmutablePropertiesUpdateError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { pub operation : * mut std :: os :: raw :: c_char , pub field_path : * mut std :: os :: raw :: c_char , pub old_value : * mut crate :: fermented :: types :: platform_value :: platform_value_Value , pub new_value : * mut crate :: fermented :: types :: platform_value :: platform_value_Value } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: DataContractImmutablePropertiesUpdateError > for dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: DataContractImmutablePropertiesUpdateError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: DataContractImmutablePropertiesUpdateError { operation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . operation) , field_path : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . field_path) , old_value : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . old_value) , new_value : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . new_value) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: DataContractImmutablePropertiesUpdateError > for dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: DataContractImmutablePropertiesUpdateError) -> * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { operation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . operation) , field_path : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . field_path) , old_value : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . old_value) , new_value : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . new_value) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: DataContractImmutablePropertiesUpdateError > for dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . operation) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . field_path) ; ferment_interfaces :: unbox_any (ffi_ref . old_value) ; ; ferment_interfaces :: unbox_any (ffi_ref . new_value) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_ctor < > (operation : * mut std :: os :: raw :: c_char , field_path : * mut std :: os :: raw :: c_char , old_value : * mut crate :: fermented :: types :: platform_value :: platform_value_Value , new_value : * mut crate :: fermented :: types :: platform_value :: platform_value_Value) -> * mut dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { operation , field_path , old_value , new_value }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_get_operation < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . operation } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_get_field_path < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . field_path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_get_old_value < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> * mut crate :: fermented :: types :: platform_value :: platform_value_Value { (* obj) . old_value } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_get_new_value < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> * mut crate :: fermented :: types :: platform_value :: platform_value_Value { (* obj) . new_value } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_set_operation < > (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError , value : * mut std :: os :: raw :: c_char) { (* obj) . operation = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_set_field_path < > (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError , value : * mut std :: os :: raw :: c_char) { (* obj) . field_path = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_set_old_value < > (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError , value : * mut crate :: fermented :: types :: platform_value :: platform_value_Value) { (* obj) . old_value = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_set_new_value < > (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError , value : * mut crate :: fermented :: types :: platform_value :: platform_value_Value) { (* obj) . new_value = value ; } } pub mod invalid_data_contract_version_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: InvalidDataContractVersionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { pub expected_version : u32 , pub version : u32 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: InvalidDataContractVersionError > for dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: InvalidDataContractVersionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: InvalidDataContractVersionError { expected_version : ffi_ref . expected_version , version : ffi_ref . version } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: InvalidDataContractVersionError > for dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: InvalidDataContractVersionError) -> * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { expected_version : obj . expected_version , version : obj . version }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: InvalidDataContractVersionError > for dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError_ctor < > (expected_version : u32 , version : u32) -> * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { expected_version , version }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError_get_expected_version < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) -> u32 { (* obj) . expected_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError_get_version < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) -> u32 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError_set_expected_version < > (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError , value : u32) { (* obj) . expected_version = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError_set_version < > (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError , value : u32) { (* obj) . version = value ; } } pub mod incompatible_data_contract_schema_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: IncompatibleDataContractSchemaError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub operation : * mut std :: os :: raw :: c_char , pub field_path : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: IncompatibleDataContractSchemaError > for dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) -> dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: IncompatibleDataContractSchemaError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: IncompatibleDataContractSchemaError { data_contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract_id) , operation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . operation) , field_path : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . field_path) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: IncompatibleDataContractSchemaError > for dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: IncompatibleDataContractSchemaError) -> * const dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { data_contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract_id) , operation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . operation) , field_path : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . field_path) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: IncompatibleDataContractSchemaError > for dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . operation) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . field_path) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , operation : * mut std :: os :: raw :: c_char , field_path : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { data_contract_id , operation , field_path }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_get_data_contract_id < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_get_operation < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . operation } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_get_field_path < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . field_path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_set_data_contract_id < > (obj : * mut dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_set_operation < > (obj : * mut dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError , value : * mut std :: os :: raw :: c_char) { (* obj) . operation = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_set_field_path < > (obj : * mut dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError , value : * mut std :: os :: raw :: c_char) { (* obj) . field_path = value ; } } pub mod invalid_indexed_property_constraint_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: InvalidIndexedPropertyConstraintError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char , pub property_name : * mut std :: os :: raw :: c_char , pub constraint_name : * mut std :: os :: raw :: c_char , pub reason : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: InvalidIndexedPropertyConstraintError > for dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: InvalidIndexedPropertyConstraintError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: InvalidIndexedPropertyConstraintError { document_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type) , index_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . index_name) , property_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . property_name) , constraint_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . constraint_name) , reason : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . reason) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: InvalidIndexedPropertyConstraintError > for dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: InvalidIndexedPropertyConstraintError) -> * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { document_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type) , index_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . index_name) , property_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . property_name) , constraint_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . constraint_name) , reason : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . reason) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: InvalidIndexedPropertyConstraintError > for dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . index_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . property_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . constraint_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . reason) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char , property_name : * mut std :: os :: raw :: c_char , constraint_name : * mut std :: os :: raw :: c_char , reason : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { document_type , index_name , property_name , constraint_name , reason }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_get_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_get_property_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_get_constraint_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut std :: os :: raw :: c_char { (* obj) . constraint_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_get_reason < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut std :: os :: raw :: c_char { (* obj) . reason } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_set_document_type < > (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_set_index_name < > (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError , value : * mut std :: os :: raw :: c_char) { (* obj) . index_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_set_property_name < > (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError , value : * mut std :: os :: raw :: c_char) { (* obj) . property_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_set_constraint_name < > (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError , value : * mut std :: os :: raw :: c_char) { (* obj) . constraint_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_set_reason < > (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError , value : * mut std :: os :: raw :: c_char) { (* obj) . reason = value ; } } pub mod unique_indices_limit_reached_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: UniqueIndicesLimitReachedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { pub document_type : * mut std :: os :: raw :: c_char , pub index_limit : u16 , pub is_contested_limit : bool } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: UniqueIndicesLimitReachedError > for dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) -> dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: UniqueIndicesLimitReachedError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: UniqueIndicesLimitReachedError { document_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type) , index_limit : ffi_ref . index_limit , is_contested_limit : ffi_ref . is_contested_limit } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: UniqueIndicesLimitReachedError > for dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: UniqueIndicesLimitReachedError) -> * const dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { document_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type) , index_limit : obj . index_limit , is_contested_limit : obj . is_contested_limit }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: UniqueIndicesLimitReachedError > for dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_limit : u16 , is_contested_limit : bool) -> * mut dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { document_type , index_limit , is_contested_limit }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_get_index_limit < > (obj : * const dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) -> u16 { (* obj) . index_limit } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_get_is_contested_limit < > (obj : * const dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) -> bool { (* obj) . is_contested_limit } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_set_document_type < > (obj : * mut dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_set_index_limit < > (obj : * mut dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError , value : u16) { (* obj) . index_limit = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_set_is_contested_limit < > (obj : * mut dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError , value : bool) { (* obj) . is_contested_limit = value ; } } pub mod contested_unique_index_on_mutable_document_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_on_mutable_document_type_error :: ContestedUniqueIndexOnMutableDocumentTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError { pub document_type : * mut std :: os :: raw :: c_char , pub contested_unique_index_name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_on_mutable_document_type_error :: ContestedUniqueIndexOnMutableDocumentTypeError > for dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError) -> dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_on_mutable_document_type_error :: ContestedUniqueIndexOnMutableDocumentTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_on_mutable_document_type_error :: ContestedUniqueIndexOnMutableDocumentTypeError { document_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type) , contested_unique_index_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contested_unique_index_name) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_on_mutable_document_type_error :: ContestedUniqueIndexOnMutableDocumentTypeError > for dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_on_mutable_document_type_error :: ContestedUniqueIndexOnMutableDocumentTypeError) -> * const dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError { document_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type) , contested_unique_index_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contested_unique_index_name) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_on_mutable_document_type_error :: ContestedUniqueIndexOnMutableDocumentTypeError > for dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . contested_unique_index_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError_ctor < > (document_type : * mut std :: os :: raw :: c_char , contested_unique_index_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError { document_type , contested_unique_index_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError_get_contested_unique_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . contested_unique_index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError_set_document_type < > (obj : * mut dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError_set_contested_unique_index_name < > (obj : * mut dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError , value : * mut std :: os :: raw :: c_char) { (* obj) . contested_unique_index_name = value ; } } pub mod unknown_transferable_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: unknown_transferable_type_error :: UnknownTransferableTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError { pub allowed_values : * mut crate :: fermented :: generics :: Vec_u8 , pub received : u8 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: unknown_transferable_type_error :: UnknownTransferableTypeError > for dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError) -> dpp :: errors :: consensus :: basic :: data_contract :: unknown_transferable_type_error :: UnknownTransferableTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: unknown_transferable_type_error :: UnknownTransferableTypeError { allowed_values : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . allowed_values) , received : ffi_ref . received } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: unknown_transferable_type_error :: UnknownTransferableTypeError > for dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: unknown_transferable_type_error :: UnknownTransferableTypeError) -> * const dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError { allowed_values : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . allowed_values) , received : obj . received }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: unknown_transferable_type_error :: UnknownTransferableTypeError > for dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . allowed_values) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError_ctor < > (allowed_values : * mut crate :: fermented :: generics :: Vec_u8 , received : u8) -> * mut dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError { allowed_values , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError_get_allowed_values < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . allowed_values } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError_get_received < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError) -> u8 { (* obj) . received } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError_set_allowed_values < > (obj : * mut dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . allowed_values = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError_set_received < > (obj : * mut dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError , value : u8) { (* obj) . received = value ; } } pub mod invalid_data_contract_id_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: InvalidDataContractIdError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { pub expected_id : * mut crate :: fermented :: generics :: Vec_u8 , pub invalid_id : * mut crate :: fermented :: generics :: Vec_u8 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: InvalidDataContractIdError > for dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: InvalidDataContractIdError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: InvalidDataContractIdError { expected_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . expected_id) , invalid_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . invalid_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: InvalidDataContractIdError > for dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: InvalidDataContractIdError) -> * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { expected_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . expected_id) , invalid_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . invalid_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: InvalidDataContractIdError > for dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . expected_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . invalid_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError_ctor < > (expected_id : * mut crate :: fermented :: generics :: Vec_u8 , invalid_id : * mut crate :: fermented :: generics :: Vec_u8) -> * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { expected_id , invalid_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError_get_expected_id < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . expected_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError_get_invalid_id < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . invalid_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError_set_expected_id < > (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . expected_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError_set_invalid_id < > (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . invalid_id = value ; } } pub mod undefined_index_property_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: UndefinedIndexPropertyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char , pub property_name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: UndefinedIndexPropertyError > for dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) -> dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: UndefinedIndexPropertyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: UndefinedIndexPropertyError { document_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type) , index_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . index_name) , property_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . property_name) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: UndefinedIndexPropertyError > for dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: UndefinedIndexPropertyError) -> * const dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { document_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type) , index_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . index_name) , property_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . property_name) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: UndefinedIndexPropertyError > for dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . index_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . property_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char , property_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { document_type , index_name , property_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_get_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_get_property_name < > (obj : * const dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_set_document_type < > (obj : * mut dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_set_index_name < > (obj : * mut dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError , value : * mut std :: os :: raw :: c_char) { (* obj) . index_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_set_property_name < > (obj : * mut dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError , value : * mut std :: os :: raw :: c_char) { (* obj) . property_name = value ; } } pub mod duplicate_index_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: DuplicateIndexError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: DuplicateIndexError > for dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) -> dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: DuplicateIndexError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: DuplicateIndexError { document_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type) , index_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . index_name) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: DuplicateIndexError > for dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: DuplicateIndexError) -> * const dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { document_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type) , index_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . index_name) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: DuplicateIndexError > for dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . index_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { document_type , index_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError_get_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError_set_document_type < > (obj : * mut dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError_set_index_name < > (obj : * mut dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError , value : * mut std :: os :: raw :: c_char) { (* obj) . index_name = value ; } } pub mod data_contract_have_new_unique_index_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: DataContractHaveNewUniqueIndexError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: DataContractHaveNewUniqueIndexError > for dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) -> dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: DataContractHaveNewUniqueIndexError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: DataContractHaveNewUniqueIndexError { document_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type) , index_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . index_name) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: DataContractHaveNewUniqueIndexError > for dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: DataContractHaveNewUniqueIndexError) -> * const dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { document_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type) , index_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . index_name) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: DataContractHaveNewUniqueIndexError > for dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . index_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { document_type , index_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError_get_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError_set_document_type < > (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError_set_index_name < > (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError , value : * mut std :: os :: raw :: c_char) { (* obj) . index_name = value ; } } pub mod duplicate_index_name_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: DuplicateIndexNameError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { pub document_type : * mut std :: os :: raw :: c_char , pub duplicate_index_name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: DuplicateIndexNameError > for dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) -> dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: DuplicateIndexNameError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: DuplicateIndexNameError { document_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type) , duplicate_index_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . duplicate_index_name) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: DuplicateIndexNameError > for dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: DuplicateIndexNameError) -> * const dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { document_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type) , duplicate_index_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . duplicate_index_name) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: DuplicateIndexNameError > for dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . duplicate_index_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError_ctor < > (document_type : * mut std :: os :: raw :: c_char , duplicate_index_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { document_type , duplicate_index_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError_get_duplicate_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) -> * mut std :: os :: raw :: c_char { (* obj) . duplicate_index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError_set_document_type < > (obj : * mut dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError_set_duplicate_index_name < > (obj : * mut dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError , value : * mut std :: os :: raw :: c_char) { (* obj) . duplicate_index_name = value ; } } pub mod data_contract_max_depth_exceed_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: DataContractMaxDepthExceedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { pub max_depth : usize } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: DataContractMaxDepthExceedError > for dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError) -> dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: DataContractMaxDepthExceedError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: DataContractMaxDepthExceedError { max_depth : ffi_ref . max_depth } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: DataContractMaxDepthExceedError > for dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: DataContractMaxDepthExceedError) -> * const dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { max_depth : obj . max_depth }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: DataContractMaxDepthExceedError > for dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError_ctor < > (max_depth : usize) -> * mut dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { max_depth }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError_get_max_depth < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError) -> usize { (* obj) . max_depth } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError_set_max_depth < > (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError , value : usize) { (* obj) . max_depth = value ; } } pub mod invalid_document_type_required_security_level { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_required_security_level :: InvalidDocumentTypeRequiredSecurityLevelError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError { pub security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_type_name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_required_security_level :: InvalidDocumentTypeRequiredSecurityLevelError > for dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_required_security_level :: InvalidDocumentTypeRequiredSecurityLevelError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_required_security_level :: InvalidDocumentTypeRequiredSecurityLevelError { security_level : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . security_level) , contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contract_id) , document_type_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type_name) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_required_security_level :: InvalidDocumentTypeRequiredSecurityLevelError > for dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_required_security_level :: InvalidDocumentTypeRequiredSecurityLevelError) -> * const dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError { security_level : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . security_level) , contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contract_id) , document_type_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type_name) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_required_security_level :: InvalidDocumentTypeRequiredSecurityLevelError > for dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . security_level) ; ; ferment_interfaces :: unbox_any (ffi_ref . contract_id) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError_ctor < > (security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError { security_level , contract_id , document_type_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError_get_security_level < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . security_level } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError_get_contract_id < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError_get_document_type_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError_set_security_level < > (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . security_level = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError_set_contract_id < > (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError_set_document_type_name < > (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type_name = value ; } } pub mod data_contract_unique_indices_changed_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: DataContractUniqueIndicesChangedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: DataContractUniqueIndicesChangedError > for dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) -> dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: DataContractUniqueIndicesChangedError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: DataContractUniqueIndicesChangedError { document_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type) , index_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . index_name) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: DataContractUniqueIndicesChangedError > for dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: DataContractUniqueIndicesChangedError) -> * const dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { document_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type) , index_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . index_name) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: DataContractUniqueIndicesChangedError > for dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . index_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { document_type , index_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError_get_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError_set_document_type < > (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError_set_index_name < > (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError , value : * mut std :: os :: raw :: c_char) { (* obj) . index_name = value ; } } pub mod document_types_are_missing_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: document_types_are_missing_error :: DocumentTypesAreMissingError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: document_types_are_missing_error :: DocumentTypesAreMissingError > for dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError) -> dpp :: errors :: consensus :: basic :: data_contract :: document_types_are_missing_error :: DocumentTypesAreMissingError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: document_types_are_missing_error :: DocumentTypesAreMissingError { data_contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: document_types_are_missing_error :: DocumentTypesAreMissingError > for dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: document_types_are_missing_error :: DocumentTypesAreMissingError) -> * const dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError { data_contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: document_types_are_missing_error :: DocumentTypesAreMissingError > for dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError { data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError_get_data_contract_id < > (obj : * const dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError_set_data_contract_id < > (obj : * mut dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } } pub mod incompatible_document_type_schema_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: data_contract :: incompatible_document_type_schema_error :: IncompatibleDocumentTypeSchemaError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError { pub document_type_name : * mut std :: os :: raw :: c_char , pub operation : * mut std :: os :: raw :: c_char , pub property_path : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_document_type_schema_error :: IncompatibleDocumentTypeSchemaError > for dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError) -> dpp :: errors :: consensus :: basic :: data_contract :: incompatible_document_type_schema_error :: IncompatibleDocumentTypeSchemaError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: incompatible_document_type_schema_error :: IncompatibleDocumentTypeSchemaError { document_type_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type_name) , operation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . operation) , property_path : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . property_path) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_document_type_schema_error :: IncompatibleDocumentTypeSchemaError > for dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: incompatible_document_type_schema_error :: IncompatibleDocumentTypeSchemaError) -> * const dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError { document_type_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type_name) , operation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . operation) , property_path : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . property_path) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_document_type_schema_error :: IncompatibleDocumentTypeSchemaError > for dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . operation) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . property_path) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError_ctor < > (document_type_name : * mut std :: os :: raw :: c_char , operation : * mut std :: os :: raw :: c_char , property_path : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError { document_type_name , operation , property_path }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError_get_document_type_name < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError_get_operation < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . operation } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError_get_property_path < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . property_path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError_set_document_type_name < > (obj : * mut dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError_set_operation < > (obj : * mut dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError , value : * mut std :: os :: raw :: c_char) { (* obj) . operation = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError_set_property_path < > (obj : * mut dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError , value : * mut std :: os :: raw :: c_char) { (* obj) . property_path = value ; } } } pub mod decode { use crate as ferment_example_platform ; pub mod protocol_version_parsing_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: ProtocolVersionParsingError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { pub parsing_error : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: ProtocolVersionParsingError > for dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError) -> dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: ProtocolVersionParsingError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: ProtocolVersionParsingError { parsing_error : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . parsing_error) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: ProtocolVersionParsingError > for dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: ProtocolVersionParsingError) -> * const dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { parsing_error : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . parsing_error) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: ProtocolVersionParsingError > for dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . parsing_error) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError_ctor < > (parsing_error : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { parsing_error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError_destroy < > (ffi : * mut dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError_get_parsing_error < > (obj : * const dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError) -> * mut std :: os :: raw :: c_char { (* obj) . parsing_error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError_set_parsing_error < > (obj : * mut dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError , value : * mut std :: os :: raw :: c_char) { (* obj) . parsing_error = value ; } } pub mod version_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: decode :: version_error :: VersionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_decode_version_error_VersionError { pub error : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: decode :: version_error :: VersionError > for dpp_errors_consensus_basic_decode_version_error_VersionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_decode_version_error_VersionError) -> dpp :: errors :: consensus :: basic :: decode :: version_error :: VersionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: decode :: version_error :: VersionError { error : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . error) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: decode :: version_error :: VersionError > for dpp_errors_consensus_basic_decode_version_error_VersionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: decode :: version_error :: VersionError) -> * const dpp_errors_consensus_basic_decode_version_error_VersionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_decode_version_error_VersionError { error : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . error) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: decode :: version_error :: VersionError > for dpp_errors_consensus_basic_decode_version_error_VersionError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_decode_version_error_VersionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_decode_version_error_VersionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . error) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_version_error_VersionError_ctor < > (error : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_decode_version_error_VersionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_decode_version_error_VersionError { error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_version_error_VersionError_destroy < > (ffi : * mut dpp_errors_consensus_basic_decode_version_error_VersionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_version_error_VersionError_get_error < > (obj : * const dpp_errors_consensus_basic_decode_version_error_VersionError) -> * mut std :: os :: raw :: c_char { (* obj) . error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_version_error_VersionError_set_error < > (obj : * mut dpp_errors_consensus_basic_decode_version_error_VersionError , value : * mut std :: os :: raw :: c_char) { (* obj) . error = value ; } } pub mod serialized_object_parsing_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: SerializedObjectParsingError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { pub parsing_error : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: SerializedObjectParsingError > for dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError) -> dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: SerializedObjectParsingError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: SerializedObjectParsingError { parsing_error : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . parsing_error) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: SerializedObjectParsingError > for dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: SerializedObjectParsingError) -> * const dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { parsing_error : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . parsing_error) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: SerializedObjectParsingError > for dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . parsing_error) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError_ctor < > (parsing_error : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { parsing_error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError_destroy < > (ffi : * mut dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError_get_parsing_error < > (obj : * const dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError) -> * mut std :: os :: raw :: c_char { (* obj) . parsing_error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError_set_parsing_error < > (obj : * mut dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError , value : * mut std :: os :: raw :: c_char) { (* obj) . parsing_error = value ; } } pub mod decoding_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: basic :: decode :: decoding_error :: DecodingError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_decode_decoding_error_DecodingError { pub error : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: decode :: decoding_error :: DecodingError > for dpp_errors_consensus_basic_decode_decoding_error_DecodingError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_decode_decoding_error_DecodingError) -> dpp :: errors :: consensus :: basic :: decode :: decoding_error :: DecodingError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: decode :: decoding_error :: DecodingError { error : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . error) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: basic :: decode :: decoding_error :: DecodingError > for dpp_errors_consensus_basic_decode_decoding_error_DecodingError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: decode :: decoding_error :: DecodingError) -> * const dpp_errors_consensus_basic_decode_decoding_error_DecodingError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_decode_decoding_error_DecodingError { error : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . error) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: basic :: decode :: decoding_error :: DecodingError > for dpp_errors_consensus_basic_decode_decoding_error_DecodingError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_decode_decoding_error_DecodingError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_decode_decoding_error_DecodingError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . error) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_decoding_error_DecodingError_ctor < > (error : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_decode_decoding_error_DecodingError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_decode_decoding_error_DecodingError { error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_decoding_error_DecodingError_destroy < > (ffi : * mut dpp_errors_consensus_basic_decode_decoding_error_DecodingError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_decoding_error_DecodingError_get_error < > (obj : * const dpp_errors_consensus_basic_decode_decoding_error_DecodingError) -> * mut std :: os :: raw :: c_char { (* obj) . error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_decoding_error_DecodingError_set_error < > (obj : * mut dpp_errors_consensus_basic_decode_decoding_error_DecodingError , value : * mut std :: os :: raw :: c_char) { (* obj) . error = value ; } } } } pub mod state { use crate as ferment_example_platform ; pub mod prefunded_specialized_balances { use crate as ferment_example_platform ; pub mod prefunded_specialized_balance_not_found_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_not_found_error :: PrefundedSpecializedBalanceNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError { pub balance_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_not_found_error :: PrefundedSpecializedBalanceNotFoundError > for dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError) -> dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_not_found_error :: PrefundedSpecializedBalanceNotFoundError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_not_found_error :: PrefundedSpecializedBalanceNotFoundError { balance_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . balance_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_not_found_error :: PrefundedSpecializedBalanceNotFoundError > for dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_not_found_error :: PrefundedSpecializedBalanceNotFoundError) -> * const dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError { balance_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . balance_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_not_found_error :: PrefundedSpecializedBalanceNotFoundError > for dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . balance_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError_ctor < > (balance_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError { balance_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError_destroy < > (ffi : * mut dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError_get_balance_id < > (obj : * const dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . balance_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError_set_balance_id < > (obj : * mut dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . balance_id = value ; } } pub mod prefunded_specialized_balance_insufficient_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_insufficient_error :: PrefundedSpecializedBalanceInsufficientError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError { pub balance_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub balance : u64 , pub required_balance : u64 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_insufficient_error :: PrefundedSpecializedBalanceInsufficientError > for dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError) -> dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_insufficient_error :: PrefundedSpecializedBalanceInsufficientError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_insufficient_error :: PrefundedSpecializedBalanceInsufficientError { balance_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . balance_id) , balance : ffi_ref . balance , required_balance : ffi_ref . required_balance } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_insufficient_error :: PrefundedSpecializedBalanceInsufficientError > for dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_insufficient_error :: PrefundedSpecializedBalanceInsufficientError) -> * const dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError { ferment_interfaces :: boxed (dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError { balance_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . balance_id) , balance : obj . balance , required_balance : obj . required_balance }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_insufficient_error :: PrefundedSpecializedBalanceInsufficientError > for dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . balance_id) ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError_ctor < > (balance_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , balance : u64 , required_balance : u64) -> * mut dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError { ferment_interfaces :: boxed (dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError { balance_id , balance , required_balance }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError_destroy < > (ffi : * mut dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError_get_balance_id < > (obj : * const dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . balance_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError_get_balance < > (obj : * const dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError) -> u64 { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError_get_required_balance < > (obj : * const dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError) -> u64 { (* obj) . required_balance } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError_set_balance_id < > (obj : * mut dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . balance_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError_set_balance < > (obj : * mut dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError , value : u64) { (* obj) . balance = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError_set_required_balance < > (obj : * mut dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError , value : u64) { (* obj) . required_balance = value ; } } } pub mod voting { use crate as ferment_example_platform ; pub mod masternode_incorrect_voter_identity_id_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voter_identity_id_error :: MasternodeIncorrectVoterIdentityIdError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError { pub pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub expected_voter_identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub provided_voter_identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voter_identity_id_error :: MasternodeIncorrectVoterIdentityIdError > for dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError) -> dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voter_identity_id_error :: MasternodeIncorrectVoterIdentityIdError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voter_identity_id_error :: MasternodeIncorrectVoterIdentityIdError { pro_tx_hash : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . pro_tx_hash) , expected_voter_identity_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . expected_voter_identity_id) , provided_voter_identity_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . provided_voter_identity_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voter_identity_id_error :: MasternodeIncorrectVoterIdentityIdError > for dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voter_identity_id_error :: MasternodeIncorrectVoterIdentityIdError) -> * const dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError { ferment_interfaces :: boxed (dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError { pro_tx_hash : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . pro_tx_hash) , expected_voter_identity_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . expected_voter_identity_id) , provided_voter_identity_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . provided_voter_identity_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voter_identity_id_error :: MasternodeIncorrectVoterIdentityIdError > for dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . pro_tx_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . expected_voter_identity_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . provided_voter_identity_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError_ctor < > (pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , expected_voter_identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , provided_voter_identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError { ferment_interfaces :: boxed (dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError { pro_tx_hash , expected_voter_identity_id , provided_voter_identity_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError_destroy < > (ffi : * mut dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError_get_pro_tx_hash < > (obj : * const dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError_get_expected_voter_identity_id < > (obj : * const dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . expected_voter_identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError_get_provided_voter_identity_id < > (obj : * const dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . provided_voter_identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError_set_pro_tx_hash < > (obj : * mut dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . pro_tx_hash = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError_set_expected_voter_identity_id < > (obj : * mut dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . expected_voter_identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError_set_provided_voter_identity_id < > (obj : * mut dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . provided_voter_identity_id = value ; } } pub mod vote_poll_not_available_for_voting_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: voting :: vote_poll_not_available_for_voting_error :: VotePollNotAvailableForVotingError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError { pub vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll , pub status : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: voting :: vote_poll_not_available_for_voting_error :: VotePollNotAvailableForVotingError > for dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError) -> dpp :: errors :: consensus :: state :: voting :: vote_poll_not_available_for_voting_error :: VotePollNotAvailableForVotingError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: voting :: vote_poll_not_available_for_voting_error :: VotePollNotAvailableForVotingError { vote_poll : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . vote_poll) , status : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . status) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: voting :: vote_poll_not_available_for_voting_error :: VotePollNotAvailableForVotingError > for dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: voting :: vote_poll_not_available_for_voting_error :: VotePollNotAvailableForVotingError) -> * const dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError { ferment_interfaces :: boxed (dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError { vote_poll : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . vote_poll) , status : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . status) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: voting :: vote_poll_not_available_for_voting_error :: VotePollNotAvailableForVotingError > for dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . vote_poll) ; ; ferment_interfaces :: unbox_any (ffi_ref . status) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError_ctor < > (vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll , status : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus) -> * mut dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError { ferment_interfaces :: boxed (dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError { vote_poll , status }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError_destroy < > (ffi : * mut dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError_get_vote_poll < > (obj : * const dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll { (* obj) . vote_poll } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError_get_status < > (obj : * const dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { (* obj) . status } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError_set_vote_poll < > (obj : * mut dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError , value : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll) { (* obj) . vote_poll = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError_set_status < > (obj : * mut dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError , value : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus) { (* obj) . status = value ; } } pub mod masternode_not_found_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: voting :: masternode_not_found_error :: MasternodeNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError { pub pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: voting :: masternode_not_found_error :: MasternodeNotFoundError > for dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError) -> dpp :: errors :: consensus :: state :: voting :: masternode_not_found_error :: MasternodeNotFoundError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: voting :: masternode_not_found_error :: MasternodeNotFoundError { pro_tx_hash : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . pro_tx_hash) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: voting :: masternode_not_found_error :: MasternodeNotFoundError > for dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: voting :: masternode_not_found_error :: MasternodeNotFoundError) -> * const dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError { pro_tx_hash : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . pro_tx_hash) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: voting :: masternode_not_found_error :: MasternodeNotFoundError > for dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . pro_tx_hash) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError_ctor < > (pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError { pro_tx_hash }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError_destroy < > (ffi : * mut dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError_get_pro_tx_hash < > (obj : * const dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError_set_pro_tx_hash < > (obj : * mut dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . pro_tx_hash = value ; } } pub mod masternode_incorrect_voting_address_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voting_address_error :: MasternodeIncorrectVotingAddressError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError { pub pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub current_voting_address : * mut crate :: fermented :: types :: platform_value :: types :: bytes_20 :: platform_value_types_bytes_20_Bytes20 , pub given_voting_address : * mut crate :: fermented :: types :: platform_value :: types :: bytes_20 :: platform_value_types_bytes_20_Bytes20 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voting_address_error :: MasternodeIncorrectVotingAddressError > for dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError) -> dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voting_address_error :: MasternodeIncorrectVotingAddressError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voting_address_error :: MasternodeIncorrectVotingAddressError { pro_tx_hash : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . pro_tx_hash) , current_voting_address : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . current_voting_address) , given_voting_address : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . given_voting_address) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voting_address_error :: MasternodeIncorrectVotingAddressError > for dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voting_address_error :: MasternodeIncorrectVotingAddressError) -> * const dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError { ferment_interfaces :: boxed (dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError { pro_tx_hash : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . pro_tx_hash) , current_voting_address : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . current_voting_address) , given_voting_address : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . given_voting_address) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voting_address_error :: MasternodeIncorrectVotingAddressError > for dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . pro_tx_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . current_voting_address) ; ; ferment_interfaces :: unbox_any (ffi_ref . given_voting_address) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError_ctor < > (pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , current_voting_address : * mut crate :: fermented :: types :: platform_value :: types :: bytes_20 :: platform_value_types_bytes_20_Bytes20 , given_voting_address : * mut crate :: fermented :: types :: platform_value :: types :: bytes_20 :: platform_value_types_bytes_20_Bytes20) -> * mut dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError { ferment_interfaces :: boxed (dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError { pro_tx_hash , current_voting_address , given_voting_address }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError_destroy < > (ffi : * mut dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError_get_pro_tx_hash < > (obj : * const dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError_get_current_voting_address < > (obj : * const dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError) -> * mut crate :: fermented :: types :: platform_value :: types :: bytes_20 :: platform_value_types_bytes_20_Bytes20 { (* obj) . current_voting_address } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError_get_given_voting_address < > (obj : * const dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError) -> * mut crate :: fermented :: types :: platform_value :: types :: bytes_20 :: platform_value_types_bytes_20_Bytes20 { (* obj) . given_voting_address } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError_set_pro_tx_hash < > (obj : * mut dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . pro_tx_hash = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError_set_current_voting_address < > (obj : * mut dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError , value : * mut crate :: fermented :: types :: platform_value :: types :: bytes_20 :: platform_value_types_bytes_20_Bytes20) { (* obj) . current_voting_address = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError_set_given_voting_address < > (obj : * mut dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError , value : * mut crate :: fermented :: types :: platform_value :: types :: bytes_20 :: platform_value_types_bytes_20_Bytes20) { (* obj) . given_voting_address = value ; } } pub mod masternode_voted_too_many_times { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: voting :: masternode_voted_too_many_times :: MasternodeVotedTooManyTimesError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError { pub pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub times_already_voted : u16 , pub max_times_allowed : u16 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: voting :: masternode_voted_too_many_times :: MasternodeVotedTooManyTimesError > for dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError) -> dpp :: errors :: consensus :: state :: voting :: masternode_voted_too_many_times :: MasternodeVotedTooManyTimesError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: voting :: masternode_voted_too_many_times :: MasternodeVotedTooManyTimesError { pro_tx_hash : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . pro_tx_hash) , times_already_voted : ffi_ref . times_already_voted , max_times_allowed : ffi_ref . max_times_allowed } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: voting :: masternode_voted_too_many_times :: MasternodeVotedTooManyTimesError > for dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: voting :: masternode_voted_too_many_times :: MasternodeVotedTooManyTimesError) -> * const dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError { ferment_interfaces :: boxed (dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError { pro_tx_hash : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . pro_tx_hash) , times_already_voted : obj . times_already_voted , max_times_allowed : obj . max_times_allowed }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: voting :: masternode_voted_too_many_times :: MasternodeVotedTooManyTimesError > for dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . pro_tx_hash) ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError_ctor < > (pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , times_already_voted : u16 , max_times_allowed : u16) -> * mut dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError { ferment_interfaces :: boxed (dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError { pro_tx_hash , times_already_voted , max_times_allowed }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError_destroy < > (ffi : * mut dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError_get_pro_tx_hash < > (obj : * const dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError_get_times_already_voted < > (obj : * const dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError) -> u16 { (* obj) . times_already_voted } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError_get_max_times_allowed < > (obj : * const dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError) -> u16 { (* obj) . max_times_allowed } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError_set_pro_tx_hash < > (obj : * mut dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . pro_tx_hash = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError_set_times_already_voted < > (obj : * mut dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError , value : u16) { (* obj) . times_already_voted = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError_set_max_times_allowed < > (obj : * mut dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError , value : u16) { (* obj) . max_times_allowed = value ; } } pub mod vote_poll_not_found_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: voting :: vote_poll_not_found_error :: VotePollNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError { pub vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: voting :: vote_poll_not_found_error :: VotePollNotFoundError > for dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError) -> dpp :: errors :: consensus :: state :: voting :: vote_poll_not_found_error :: VotePollNotFoundError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: voting :: vote_poll_not_found_error :: VotePollNotFoundError { vote_poll : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . vote_poll) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: voting :: vote_poll_not_found_error :: VotePollNotFoundError > for dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: voting :: vote_poll_not_found_error :: VotePollNotFoundError) -> * const dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError { vote_poll : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . vote_poll) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: voting :: vote_poll_not_found_error :: VotePollNotFoundError > for dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . vote_poll) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError_ctor < > (vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll) -> * mut dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError { vote_poll }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError_destroy < > (ffi : * mut dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError_get_vote_poll < > (obj : * const dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll { (* obj) . vote_poll } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError_set_vote_poll < > (obj : * mut dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError , value : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll) { (* obj) . vote_poll = value ; } } pub mod masternode_vote_already_present_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: voting :: masternode_vote_already_present_error :: MasternodeVoteAlreadyPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError { pub pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: voting :: masternode_vote_already_present_error :: MasternodeVoteAlreadyPresentError > for dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError) -> dpp :: errors :: consensus :: state :: voting :: masternode_vote_already_present_error :: MasternodeVoteAlreadyPresentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: voting :: masternode_vote_already_present_error :: MasternodeVoteAlreadyPresentError { pro_tx_hash : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . pro_tx_hash) , vote_poll : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . vote_poll) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: voting :: masternode_vote_already_present_error :: MasternodeVoteAlreadyPresentError > for dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: voting :: masternode_vote_already_present_error :: MasternodeVoteAlreadyPresentError) -> * const dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError { pro_tx_hash : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . pro_tx_hash) , vote_poll : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . vote_poll) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: voting :: masternode_vote_already_present_error :: MasternodeVoteAlreadyPresentError > for dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . pro_tx_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . vote_poll) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError_ctor < > (pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll) -> * mut dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError { pro_tx_hash , vote_poll }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError_destroy < > (ffi : * mut dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError_get_pro_tx_hash < > (obj : * const dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError_get_vote_poll < > (obj : * const dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll { (* obj) . vote_poll } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError_set_pro_tx_hash < > (obj : * mut dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . pro_tx_hash = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError_set_vote_poll < > (obj : * mut dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError , value : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll) { (* obj) . vote_poll = value ; } } } pub mod document { use crate as ferment_example_platform ; pub mod duplicate_unique_index_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: DuplicateUniqueIndexError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub duplicating_properties : * mut crate :: fermented :: generics :: Vec_String } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: DuplicateUniqueIndexError > for dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) -> dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: DuplicateUniqueIndexError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: DuplicateUniqueIndexError { document_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_id) , duplicating_properties : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . duplicating_properties) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: DuplicateUniqueIndexError > for dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: DuplicateUniqueIndexError) -> * const dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { document_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_id) , duplicating_properties : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . duplicating_properties) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: DuplicateUniqueIndexError > for dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . duplicating_properties) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError_ctor < > (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , duplicating_properties : * mut crate :: fermented :: generics :: Vec_String) -> * mut dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { document_id , duplicating_properties }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError_get_duplicating_properties < > (obj : * const dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) -> * mut crate :: fermented :: generics :: Vec_String { (* obj) . duplicating_properties } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError_set_document_id < > (obj : * mut dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError_set_duplicating_properties < > (obj : * mut dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError , value : * mut crate :: fermented :: generics :: Vec_String) { (* obj) . duplicating_properties = value ; } } pub mod document_incorrect_purchase_price_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: document :: document_incorrect_purchase_price_error :: DocumentIncorrectPurchasePriceError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub trying_to_purchase_at_price : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , pub actual_price : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_incorrect_purchase_price_error :: DocumentIncorrectPurchasePriceError > for dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError) -> dpp :: errors :: consensus :: state :: document :: document_incorrect_purchase_price_error :: DocumentIncorrectPurchasePriceError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_incorrect_purchase_price_error :: DocumentIncorrectPurchasePriceError { document_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_id) , trying_to_purchase_at_price : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . trying_to_purchase_at_price) , actual_price : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . actual_price) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_incorrect_purchase_price_error :: DocumentIncorrectPurchasePriceError > for dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_incorrect_purchase_price_error :: DocumentIncorrectPurchasePriceError) -> * const dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError { document_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_id) , trying_to_purchase_at_price : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . trying_to_purchase_at_price) , actual_price : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . actual_price) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: document :: document_incorrect_purchase_price_error :: DocumentIncorrectPurchasePriceError > for dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . trying_to_purchase_at_price) ; ; ferment_interfaces :: unbox_any (ffi_ref . actual_price) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError_ctor < > (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , trying_to_purchase_at_price : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , actual_price : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) -> * mut dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError { document_id , trying_to_purchase_at_price , actual_price }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError_get_trying_to_purchase_at_price < > (obj : * const dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . trying_to_purchase_at_price } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError_get_actual_price < > (obj : * const dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . actual_price } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError_set_document_id < > (obj : * mut dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError_set_trying_to_purchase_at_price < > (obj : * mut dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError , value : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) { (* obj) . trying_to_purchase_at_price = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError_set_actual_price < > (obj : * mut dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError , value : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) { (* obj) . actual_price = value ; } } pub mod document_contest_not_joinable_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: document :: document_contest_not_joinable_error :: DocumentContestNotJoinableError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError { pub vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll , pub stored_info : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo , pub start_time : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , pub current_time : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , pub joinable_time : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_contest_not_joinable_error :: DocumentContestNotJoinableError > for dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) -> dpp :: errors :: consensus :: state :: document :: document_contest_not_joinable_error :: DocumentContestNotJoinableError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_contest_not_joinable_error :: DocumentContestNotJoinableError { vote_poll : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . vote_poll) , stored_info : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . stored_info) , start_time : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . start_time) , current_time : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . current_time) , joinable_time : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . joinable_time) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_contest_not_joinable_error :: DocumentContestNotJoinableError > for dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_contest_not_joinable_error :: DocumentContestNotJoinableError) -> * const dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError { vote_poll : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . vote_poll) , stored_info : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . stored_info) , start_time : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . start_time) , current_time : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . current_time) , joinable_time : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . joinable_time) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: document :: document_contest_not_joinable_error :: DocumentContestNotJoinableError > for dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . vote_poll) ; ; ferment_interfaces :: unbox_any (ffi_ref . stored_info) ; ; ferment_interfaces :: unbox_any (ffi_ref . start_time) ; ; ferment_interfaces :: unbox_any (ffi_ref . current_time) ; ; ferment_interfaces :: unbox_any (ffi_ref . joinable_time) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_ctor < > (vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll , stored_info : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo , start_time : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , current_time : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , joinable_time : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis) -> * mut dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError { vote_poll , stored_info , start_time , current_time , joinable_time }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_get_vote_poll < > (obj : * const dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { (* obj) . vote_poll } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_get_stored_info < > (obj : * const dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo { (* obj) . stored_info } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_get_start_time < > (obj : * const dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis { (* obj) . start_time } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_get_current_time < > (obj : * const dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis { (* obj) . current_time } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_get_joinable_time < > (obj : * const dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis { (* obj) . joinable_time } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_set_vote_poll < > (obj : * mut dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError , value : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) { (* obj) . vote_poll = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_set_stored_info < > (obj : * mut dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError , value : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo) { (* obj) . stored_info = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_set_start_time < > (obj : * mut dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis) { (* obj) . start_time = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_set_current_time < > (obj : * mut dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis) { (* obj) . current_time = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_set_joinable_time < > (obj : * mut dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis) { (* obj) . joinable_time = value ; } } pub mod invalid_document_revision_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: InvalidDocumentRevisionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub previous_revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub desired_revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: InvalidDocumentRevisionError > for dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) -> dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: InvalidDocumentRevisionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: InvalidDocumentRevisionError { document_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_id) , previous_revision : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . previous_revision) , desired_revision : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . desired_revision) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: InvalidDocumentRevisionError > for dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: InvalidDocumentRevisionError) -> * const dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { document_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_id) , previous_revision : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . previous_revision) , desired_revision : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . desired_revision) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: InvalidDocumentRevisionError > for dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; ferment_interfaces :: unbox_any_opt (ffi_ref . previous_revision) ; ferment_interfaces :: unbox_any (ffi_ref . desired_revision) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_ctor < > (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , previous_revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , desired_revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) -> * mut dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { document_id , previous_revision , desired_revision }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_get_previous_revision < > (obj : * const dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . previous_revision } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_get_desired_revision < > (obj : * const dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . desired_revision } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_set_document_id < > (obj : * mut dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_set_previous_revision < > (obj : * mut dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . previous_revision = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_set_desired_revision < > (obj : * mut dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . desired_revision = value ; } } pub mod document_timestamps_mismatch_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: DocumentTimestampsMismatchError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: DocumentTimestampsMismatchError > for dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError) -> dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: DocumentTimestampsMismatchError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: DocumentTimestampsMismatchError { document_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: DocumentTimestampsMismatchError > for dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: DocumentTimestampsMismatchError) -> * const dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { document_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: DocumentTimestampsMismatchError > for dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError_ctor < > (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { document_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError_set_document_id < > (obj : * mut dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } } pub mod document_timestamps_are_equal_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: DocumentTimestampsAreEqualError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: DocumentTimestampsAreEqualError > for dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError) -> dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: DocumentTimestampsAreEqualError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: DocumentTimestampsAreEqualError { document_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: DocumentTimestampsAreEqualError > for dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: DocumentTimestampsAreEqualError) -> * const dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { document_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: DocumentTimestampsAreEqualError > for dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError_ctor < > (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { document_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError_set_document_id < > (obj : * mut dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } } pub mod document_already_present_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: document :: document_already_present_error :: DocumentAlreadyPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_already_present_error :: DocumentAlreadyPresentError > for dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError) -> dpp :: errors :: consensus :: state :: document :: document_already_present_error :: DocumentAlreadyPresentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_already_present_error :: DocumentAlreadyPresentError { document_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_already_present_error :: DocumentAlreadyPresentError > for dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_already_present_error :: DocumentAlreadyPresentError) -> * const dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { document_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: document :: document_already_present_error :: DocumentAlreadyPresentError > for dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError_ctor < > (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { document_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError_set_document_id < > (obj : * mut dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } } pub mod document_contest_identity_already_contestant { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: document :: document_contest_identity_already_contestant :: DocumentContestIdentityAlreadyContestantError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError { pub vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll , pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_contest_identity_already_contestant :: DocumentContestIdentityAlreadyContestantError > for dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError) -> dpp :: errors :: consensus :: state :: document :: document_contest_identity_already_contestant :: DocumentContestIdentityAlreadyContestantError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_contest_identity_already_contestant :: DocumentContestIdentityAlreadyContestantError { vote_poll : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . vote_poll) , identity_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_contest_identity_already_contestant :: DocumentContestIdentityAlreadyContestantError > for dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_contest_identity_already_contestant :: DocumentContestIdentityAlreadyContestantError) -> * const dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError { vote_poll : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . vote_poll) , identity_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: document :: document_contest_identity_already_contestant :: DocumentContestIdentityAlreadyContestantError > for dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . vote_poll) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError_ctor < > (vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll , identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError { vote_poll , identity_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError_get_vote_poll < > (obj : * const dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { (* obj) . vote_poll } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError_get_identity_id < > (obj : * const dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError_set_vote_poll < > (obj : * mut dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError , value : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) { (* obj) . vote_poll = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError_set_identity_id < > (obj : * mut dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } } pub mod document_timestamp_window_violation_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: DocumentTimestampWindowViolationError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { pub timestamp_name : * mut std :: os :: raw :: c_char , pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub timestamp : i64 , pub time_window_start : i64 , pub time_window_end : i64 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: DocumentTimestampWindowViolationError > for dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: DocumentTimestampWindowViolationError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: DocumentTimestampWindowViolationError { timestamp_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . timestamp_name) , document_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_id) , timestamp : ffi_ref . timestamp , time_window_start : ffi_ref . time_window_start , time_window_end : ffi_ref . time_window_end } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: DocumentTimestampWindowViolationError > for dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: DocumentTimestampWindowViolationError) -> * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { timestamp_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . timestamp_name) , document_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_id) , timestamp : obj . timestamp , time_window_start : obj . time_window_start , time_window_end : obj . time_window_end }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: DocumentTimestampWindowViolationError > for dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . timestamp_name) ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_ctor < > (timestamp_name : * mut std :: os :: raw :: c_char , document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , timestamp : i64 , time_window_start : i64 , time_window_end : i64) -> * mut dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { timestamp_name , document_id , timestamp , time_window_start , time_window_end }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_get_timestamp_name < > (obj : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> * mut std :: os :: raw :: c_char { (* obj) . timestamp_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_get_timestamp < > (obj : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> i64 { (* obj) . timestamp } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_get_time_window_start < > (obj : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> i64 { (* obj) . time_window_start } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_get_time_window_end < > (obj : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> i64 { (* obj) . time_window_end } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_set_timestamp_name < > (obj : * mut dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError , value : * mut std :: os :: raw :: c_char) { (* obj) . timestamp_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_set_document_id < > (obj : * mut dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_set_timestamp < > (obj : * mut dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError , value : i64) { (* obj) . timestamp = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_set_time_window_start < > (obj : * mut dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError , value : i64) { (* obj) . time_window_start = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_set_time_window_end < > (obj : * mut dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError , value : i64) { (* obj) . time_window_end = value ; } } pub mod document_contest_currently_locked_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: document :: document_contest_currently_locked_error :: DocumentContestCurrentlyLockedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError { pub vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll , pub stored_info : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo , pub unlock_cost : u64 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_contest_currently_locked_error :: DocumentContestCurrentlyLockedError > for dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError) -> dpp :: errors :: consensus :: state :: document :: document_contest_currently_locked_error :: DocumentContestCurrentlyLockedError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_contest_currently_locked_error :: DocumentContestCurrentlyLockedError { vote_poll : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . vote_poll) , stored_info : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . stored_info) , unlock_cost : ffi_ref . unlock_cost } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_contest_currently_locked_error :: DocumentContestCurrentlyLockedError > for dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_contest_currently_locked_error :: DocumentContestCurrentlyLockedError) -> * const dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError { vote_poll : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . vote_poll) , stored_info : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . stored_info) , unlock_cost : obj . unlock_cost }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: document :: document_contest_currently_locked_error :: DocumentContestCurrentlyLockedError > for dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . vote_poll) ; ; ferment_interfaces :: unbox_any (ffi_ref . stored_info) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError_ctor < > (vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll , stored_info : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo , unlock_cost : u64) -> * mut dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError { vote_poll , stored_info , unlock_cost }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError_get_vote_poll < > (obj : * const dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { (* obj) . vote_poll } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError_get_stored_info < > (obj : * const dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo { (* obj) . stored_info } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError_get_unlock_cost < > (obj : * const dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError) -> u64 { (* obj) . unlock_cost } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError_set_vote_poll < > (obj : * mut dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError , value : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) { (* obj) . vote_poll = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError_set_stored_info < > (obj : * mut dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError , value : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo) { (* obj) . stored_info = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError_set_unlock_cost < > (obj : * mut dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError , value : u64) { (* obj) . unlock_cost = value ; } } pub mod document_owner_id_mismatch_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: DocumentOwnerIdMismatchError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub existing_document_owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: DocumentOwnerIdMismatchError > for dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) -> dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: DocumentOwnerIdMismatchError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: DocumentOwnerIdMismatchError { document_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_id) , document_owner_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_owner_id) , existing_document_owner_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . existing_document_owner_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: DocumentOwnerIdMismatchError > for dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: DocumentOwnerIdMismatchError) -> * const dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { document_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_id) , document_owner_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_owner_id) , existing_document_owner_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . existing_document_owner_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: DocumentOwnerIdMismatchError > for dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_owner_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . existing_document_owner_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_ctor < > (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , existing_document_owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { document_id , document_owner_id , existing_document_owner_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_get_document_owner_id < > (obj : * const dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_get_existing_document_owner_id < > (obj : * const dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . existing_document_owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_set_document_id < > (obj : * mut dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_set_document_owner_id < > (obj : * mut dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_owner_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_set_existing_document_owner_id < > (obj : * mut dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . existing_document_owner_id = value ; } } pub mod document_not_for_sale_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: document :: document_not_for_sale_error :: DocumentNotForSaleError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_not_for_sale_error :: DocumentNotForSaleError > for dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError) -> dpp :: errors :: consensus :: state :: document :: document_not_for_sale_error :: DocumentNotForSaleError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_not_for_sale_error :: DocumentNotForSaleError { document_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_not_for_sale_error :: DocumentNotForSaleError > for dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_not_for_sale_error :: DocumentNotForSaleError) -> * const dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError { document_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: document :: document_not_for_sale_error :: DocumentNotForSaleError > for dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError_ctor < > (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError { document_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError_set_document_id < > (obj : * mut dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } } pub mod document_not_found_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: document :: document_not_found_error :: DocumentNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_not_found_error :: DocumentNotFoundError > for dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError) -> dpp :: errors :: consensus :: state :: document :: document_not_found_error :: DocumentNotFoundError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_not_found_error :: DocumentNotFoundError { document_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_not_found_error :: DocumentNotFoundError > for dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_not_found_error :: DocumentNotFoundError) -> * const dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { document_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: document :: document_not_found_error :: DocumentNotFoundError > for dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError_ctor < > (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { document_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError_set_document_id < > (obj : * mut dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } } } pub mod data_contract { use crate as ferment_example_platform ; pub mod data_contract_is_readonly_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: DataContractIsReadonlyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: DataContractIsReadonlyError > for dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError) -> dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: DataContractIsReadonlyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: DataContractIsReadonlyError { data_contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: DataContractIsReadonlyError > for dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: DataContractIsReadonlyError) -> * const dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { data_contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: DataContractIsReadonlyError > for dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError_destroy < > (ffi : * mut dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError_get_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError_set_data_contract_id < > (obj : * mut dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } } pub mod data_contract_config_update_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: DataContractConfigUpdateError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub additional_message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: DataContractConfigUpdateError > for dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) -> dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: DataContractConfigUpdateError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: DataContractConfigUpdateError { data_contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract_id) , additional_message : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . additional_message) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: DataContractConfigUpdateError > for dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: DataContractConfigUpdateError) -> * const dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { data_contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract_id) , additional_message : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . additional_message) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: DataContractConfigUpdateError > for dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . additional_message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , additional_message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { data_contract_id , additional_message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError_destroy < > (ffi : * mut dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError_get_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError_get_additional_message < > (obj : * const dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . additional_message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError_set_data_contract_id < > (obj : * mut dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError_set_additional_message < > (obj : * mut dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError , value : * mut std :: os :: raw :: c_char) { (* obj) . additional_message = value ; } } pub mod data_contract_update_permission_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: data_contract :: data_contract_update_permission_error :: DataContractUpdatePermissionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_contract :: data_contract_update_permission_error :: DataContractUpdatePermissionError > for dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError) -> dpp :: errors :: consensus :: state :: data_contract :: data_contract_update_permission_error :: DataContractUpdatePermissionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_contract :: data_contract_update_permission_error :: DataContractUpdatePermissionError { data_contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract_id) , identity_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_contract :: data_contract_update_permission_error :: DataContractUpdatePermissionError > for dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_contract :: data_contract_update_permission_error :: DataContractUpdatePermissionError) -> * const dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError { data_contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract_id) , identity_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: data_contract :: data_contract_update_permission_error :: DataContractUpdatePermissionError > for dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError { data_contract_id , identity_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError_destroy < > (ffi : * mut dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError_get_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError_get_identity_id < > (obj : * const dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError_set_data_contract_id < > (obj : * mut dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError_set_identity_id < > (obj : * mut dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } } pub mod data_contract_already_present_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: DataContractAlreadyPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: DataContractAlreadyPresentError > for dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError) -> dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: DataContractAlreadyPresentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: DataContractAlreadyPresentError { data_contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: DataContractAlreadyPresentError > for dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: DataContractAlreadyPresentError) -> * const dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { data_contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: DataContractAlreadyPresentError > for dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError_destroy < > (ffi : * mut dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError_get_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError_set_data_contract_id < > (obj : * mut dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } } pub mod document_type_update_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: data_contract :: document_type_update_error :: DocumentTypeUpdateError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_type_name : * mut std :: os :: raw :: c_char , pub additional_message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_contract :: document_type_update_error :: DocumentTypeUpdateError > for dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError) -> dpp :: errors :: consensus :: state :: data_contract :: document_type_update_error :: DocumentTypeUpdateError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_contract :: document_type_update_error :: DocumentTypeUpdateError { data_contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract_id) , document_type_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type_name) , additional_message : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . additional_message) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_contract :: document_type_update_error :: DocumentTypeUpdateError > for dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_contract :: document_type_update_error :: DocumentTypeUpdateError) -> * const dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError { data_contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract_id) , document_type_name : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type_name) , additional_message : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . additional_message) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: data_contract :: document_type_update_error :: DocumentTypeUpdateError > for dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . document_type_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . additional_message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type_name : * mut std :: os :: raw :: c_char , additional_message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError { data_contract_id , document_type_name , additional_message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError_destroy < > (ffi : * mut dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError_get_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError_get_document_type_name < > (obj : * const dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError_get_additional_message < > (obj : * const dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . additional_message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError_set_data_contract_id < > (obj : * mut dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError_set_document_type_name < > (obj : * mut dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError_set_additional_message < > (obj : * mut dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError , value : * mut std :: os :: raw :: c_char) { (* obj) . additional_message = value ; } } } # [cfg (feature = "state-transition-validation")] pub mod data_trigger { use crate as ferment_example_platform ; pub mod data_trigger_invalid_result_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: DataTriggerInvalidResultError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: DataTriggerInvalidResultError > for dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) -> dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: DataTriggerInvalidResultError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: DataTriggerInvalidResultError { data_contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract_id) , document_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: DataTriggerInvalidResultError > for dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: DataTriggerInvalidResultError) -> * const dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { data_contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract_id) , document_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: DataTriggerInvalidResultError > for dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { data_contract_id , document_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError_destroy < > (ffi : * mut dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError_get_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError_get_document_id < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError_set_data_contract_id < > (obj : * mut dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError_set_document_id < > (obj : * mut dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_errors_consensus_state_data_trigger_DataTriggerError { DataTriggerConditionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) , DataTriggerExecutionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) , DataTriggerInvalidResultError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError > for dpp_errors_consensus_state_data_trigger_DataTriggerError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_trigger_DataTriggerError) -> dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerConditionError (o_0) => dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError :: DataTriggerConditionError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerExecutionError (o_0) => dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError :: DataTriggerExecutionError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerInvalidResultError (o_0) => dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError :: DataTriggerInvalidResultError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError > for dpp_errors_consensus_state_data_trigger_DataTriggerError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError) -> * const dpp_errors_consensus_state_data_trigger_DataTriggerError { ferment_interfaces :: boxed (match obj { dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError :: DataTriggerConditionError (o_0) => dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerConditionError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError :: DataTriggerExecutionError (o_0) => dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerExecutionError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError :: DataTriggerInvalidResultError (o_0) => dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerInvalidResultError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError > for dpp_errors_consensus_state_data_trigger_DataTriggerError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_data_trigger_DataTriggerError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_errors_consensus_state_data_trigger_DataTriggerError { fn drop (& mut self) { unsafe { match self { dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerConditionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerExecutionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerInvalidResultError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_DataTriggerError_DataTriggerConditionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) -> * mut dpp_errors_consensus_state_data_trigger_DataTriggerError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerConditionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_DataTriggerError_DataTriggerExecutionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) -> * mut dpp_errors_consensus_state_data_trigger_DataTriggerError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerExecutionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_DataTriggerError_DataTriggerInvalidResultError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) -> * mut dpp_errors_consensus_state_data_trigger_DataTriggerError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerInvalidResultError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_DataTriggerError_destroy < > (ffi : * mut dpp_errors_consensus_state_data_trigger_DataTriggerError) { ferment_interfaces :: unbox_any (ffi) ; } pub mod data_trigger_condition_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: DataTriggerConditionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: DataTriggerConditionError > for dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) -> dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: DataTriggerConditionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: DataTriggerConditionError { data_contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract_id) , document_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_id) , message : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . message) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: DataTriggerConditionError > for dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: DataTriggerConditionError) -> * const dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { data_contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract_id) , document_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_id) , message : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . message) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: DataTriggerConditionError > for dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { data_contract_id , document_id , message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_destroy < > (ffi : * mut dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_get_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_get_document_id < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_get_message < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_set_data_contract_id < > (obj : * mut dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_set_document_id < > (obj : * mut dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_set_message < > (obj : * mut dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod data_trigger_execution_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: DataTriggerExecutionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: DataTriggerExecutionError > for dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) -> dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: DataTriggerExecutionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: DataTriggerExecutionError { data_contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract_id) , document_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_id) , message : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . message) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: DataTriggerExecutionError > for dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: DataTriggerExecutionError) -> * const dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { data_contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract_id) , document_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_id) , message : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . message) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: DataTriggerExecutionError > for dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { data_contract_id , document_id , message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_destroy < > (ffi : * mut dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_get_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_get_document_id < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_get_message < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_set_data_contract_id < > (obj : * mut dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_set_document_id < > (obj : * mut dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_set_message < > (obj : * mut dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } } pub mod identity { use crate as ferment_example_platform ; pub mod identity_public_key_already_exists_for_unique_contract_bounds_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , pub new_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub old_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError > for dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { identity_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_id) , contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contract_id) , purpose : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . purpose) , new_key_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . new_key_id) , old_key_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . old_key_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError > for dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { identity_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_id) , contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contract_id) , purpose : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . purpose) , new_key_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . new_key_id) , old_key_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . old_key_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError > for dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . contract_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . purpose) ; ; ferment_interfaces :: unbox_any (ffi_ref . new_key_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . old_key_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_ctor < > (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , new_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , old_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { identity_id , contract_id , purpose , new_key_id , old_key_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_get_identity_id < > (obj : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_get_contract_id < > (obj : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_get_purpose < > (obj : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . purpose } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_get_new_key_id < > (obj : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . new_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_get_old_key_id < > (obj : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . old_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_set_identity_id < > (obj : * mut dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_set_contract_id < > (obj : * mut dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_set_purpose < > (obj : * mut dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) { (* obj) . purpose = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_set_new_key_id < > (obj : * mut dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . new_key_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_set_old_key_id < > (obj : * mut dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . old_key_id = value ; } } pub mod identity_public_key_is_read_only_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: IdentityPublicKeyIsReadOnlyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { pub public_key_index : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: IdentityPublicKeyIsReadOnlyError > for dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError) -> dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: IdentityPublicKeyIsReadOnlyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: IdentityPublicKeyIsReadOnlyError { public_key_index : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . public_key_index) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: IdentityPublicKeyIsReadOnlyError > for dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: IdentityPublicKeyIsReadOnlyError) -> * const dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { public_key_index : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . public_key_index) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: IdentityPublicKeyIsReadOnlyError > for dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_index) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError_ctor < > (public_key_index : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { public_key_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError_get_public_key_index < > (obj : * const dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError_set_public_key_index < > (obj : * mut dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . public_key_index = value ; } } pub mod invalid_identity_public_key_id_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: InvalidIdentityPublicKeyIdError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { pub id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: InvalidIdentityPublicKeyIdError > for dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError) -> dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: InvalidIdentityPublicKeyIdError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: InvalidIdentityPublicKeyIdError { id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: InvalidIdentityPublicKeyIdError > for dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: InvalidIdentityPublicKeyIdError) -> * const dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: InvalidIdentityPublicKeyIdError > for dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError_ctor < > (id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError_get_id < > (obj : * const dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError_set_id < > (obj : * mut dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . id = value ; } } pub mod identity_public_key_is_disabled_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: IdentityPublicKeyIsDisabledError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { pub public_key_index : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: IdentityPublicKeyIsDisabledError > for dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError) -> dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: IdentityPublicKeyIsDisabledError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: IdentityPublicKeyIsDisabledError { public_key_index : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . public_key_index) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: IdentityPublicKeyIsDisabledError > for dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: IdentityPublicKeyIsDisabledError) -> * const dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { public_key_index : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . public_key_index) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: IdentityPublicKeyIsDisabledError > for dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_index) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError_ctor < > (public_key_index : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { public_key_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError_get_public_key_index < > (obj : * const dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError_set_public_key_index < > (obj : * mut dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . public_key_index = value ; } } pub mod duplicated_identity_public_key_state_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: DuplicatedIdentityPublicKeyStateError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { pub duplicated_public_key_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: DuplicatedIdentityPublicKeyStateError > for dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError) -> dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: DuplicatedIdentityPublicKeyStateError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: DuplicatedIdentityPublicKeyStateError { duplicated_public_key_ids : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . duplicated_public_key_ids) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: DuplicatedIdentityPublicKeyStateError > for dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: DuplicatedIdentityPublicKeyStateError) -> * const dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { duplicated_public_key_ids : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . duplicated_public_key_ids) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: DuplicatedIdentityPublicKeyStateError > for dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . duplicated_public_key_ids) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError_ctor < > (duplicated_public_key_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { duplicated_public_key_ids }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError_get_duplicated_public_key_ids < > (obj : * const dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . duplicated_public_key_ids } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError_set_duplicated_public_key_ids < > (obj : * mut dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError , value : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) { (* obj) . duplicated_public_key_ids = value ; } } pub mod invalid_identity_contract_nonce_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: identity :: invalid_identity_contract_nonce_error :: InvalidIdentityNonceError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub current_identity_nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , pub setting_identity_nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , pub error : * mut crate :: fermented :: types :: dpp :: identity :: identity_nonce :: dpp_identity_identity_nonce_MergeIdentityNonceResult } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: invalid_identity_contract_nonce_error :: InvalidIdentityNonceError > for dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError) -> dpp :: errors :: consensus :: state :: identity :: invalid_identity_contract_nonce_error :: InvalidIdentityNonceError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: invalid_identity_contract_nonce_error :: InvalidIdentityNonceError { identity_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_id) , current_identity_nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . current_identity_nonce) , setting_identity_nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . setting_identity_nonce) , error : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . error) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: invalid_identity_contract_nonce_error :: InvalidIdentityNonceError > for dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: invalid_identity_contract_nonce_error :: InvalidIdentityNonceError) -> * const dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError { identity_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_id) , current_identity_nonce : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . current_identity_nonce) , setting_identity_nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . setting_identity_nonce) , error : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . error) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: identity :: invalid_identity_contract_nonce_error :: InvalidIdentityNonceError > for dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; ferment_interfaces :: unbox_any_opt (ffi_ref . current_identity_nonce) ; ferment_interfaces :: unbox_any (ffi_ref . setting_identity_nonce) ; ; ferment_interfaces :: unbox_any (ffi_ref . error) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError_ctor < > (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , current_identity_nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , setting_identity_nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , error : * mut crate :: fermented :: types :: dpp :: identity :: identity_nonce :: dpp_identity_identity_nonce_MergeIdentityNonceResult) -> * mut dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError { identity_id , current_identity_nonce , setting_identity_nonce , error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError_get_identity_id < > (obj : * const dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError_get_current_identity_nonce < > (obj : * const dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . current_identity_nonce } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError_get_setting_identity_nonce < > (obj : * const dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . setting_identity_nonce } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError_get_error < > (obj : * const dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_nonce :: dpp_identity_identity_nonce_MergeIdentityNonceResult { (* obj) . error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError_set_identity_id < > (obj : * mut dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError_set_current_identity_nonce < > (obj : * mut dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce) { (* obj) . current_identity_nonce = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError_set_setting_identity_nonce < > (obj : * mut dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce) { (* obj) . setting_identity_nonce = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError_set_error < > (obj : * mut dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_nonce :: dpp_identity_identity_nonce_MergeIdentityNonceResult) { (* obj) . error = value ; } } pub mod duplicated_identity_public_key_id_state_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: DuplicatedIdentityPublicKeyIdStateError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { pub duplicated_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: DuplicatedIdentityPublicKeyIdStateError > for dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError) -> dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: DuplicatedIdentityPublicKeyIdStateError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: DuplicatedIdentityPublicKeyIdStateError { duplicated_ids : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . duplicated_ids) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: DuplicatedIdentityPublicKeyIdStateError > for dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: DuplicatedIdentityPublicKeyIdStateError) -> * const dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { duplicated_ids : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . duplicated_ids) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: DuplicatedIdentityPublicKeyIdStateError > for dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . duplicated_ids) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError_ctor < > (duplicated_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { duplicated_ids }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError_get_duplicated_ids < > (obj : * const dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . duplicated_ids } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError_set_duplicated_ids < > (obj : * mut dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError , value : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) { (* obj) . duplicated_ids = value ; } } pub mod identity_insufficient_balance_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: IdentityInsufficientBalanceError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub balance : u64 , pub required_balance : u64 } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: IdentityInsufficientBalanceError > for dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) -> dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: IdentityInsufficientBalanceError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: IdentityInsufficientBalanceError { identity_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_id) , balance : ffi_ref . balance , required_balance : ffi_ref . required_balance } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: IdentityInsufficientBalanceError > for dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: IdentityInsufficientBalanceError) -> * const dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { identity_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_id) , balance : obj . balance , required_balance : obj . required_balance }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: IdentityInsufficientBalanceError > for dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_ctor < > (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , balance : u64 , required_balance : u64) -> * mut dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { identity_id , balance , required_balance }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_get_identity_id < > (obj : * const dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_get_balance < > (obj : * const dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) -> u64 { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_get_required_balance < > (obj : * const dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) -> u64 { (* obj) . required_balance } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_set_identity_id < > (obj : * mut dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_set_balance < > (obj : * mut dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError , value : u64) { (* obj) . balance = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_set_required_balance < > (obj : * mut dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError , value : u64) { (* obj) . required_balance = value ; } } pub mod missing_identity_public_key_ids_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: MissingIdentityPublicKeyIdsError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { pub ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: MissingIdentityPublicKeyIdsError > for dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError) -> dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: MissingIdentityPublicKeyIdsError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: MissingIdentityPublicKeyIdsError { ids : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . ids) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: MissingIdentityPublicKeyIdsError > for dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: MissingIdentityPublicKeyIdsError) -> * const dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { ids : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . ids) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: MissingIdentityPublicKeyIdsError > for dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . ids) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError_ctor < > (ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { ids }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError_get_ids < > (obj : * const dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . ids } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError_set_ids < > (obj : * mut dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError , value : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) { (* obj) . ids = value ; } } pub mod identity_already_exists_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: IdentityAlreadyExistsError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: IdentityAlreadyExistsError > for dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError) -> dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: IdentityAlreadyExistsError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: IdentityAlreadyExistsError { identity_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: IdentityAlreadyExistsError > for dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: IdentityAlreadyExistsError) -> * const dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { identity_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: IdentityAlreadyExistsError > for dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError_ctor < > (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { identity_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError_get_identity_id < > (obj : * const dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError_set_identity_id < > (obj : * mut dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } } pub mod max_identity_public_key_limit_reached_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: MaxIdentityPublicKeyLimitReachedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { pub max_items : usize } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: MaxIdentityPublicKeyLimitReachedError > for dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError) -> dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: MaxIdentityPublicKeyLimitReachedError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: MaxIdentityPublicKeyLimitReachedError { max_items : ffi_ref . max_items } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: MaxIdentityPublicKeyLimitReachedError > for dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: MaxIdentityPublicKeyLimitReachedError) -> * const dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { max_items : obj . max_items }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: MaxIdentityPublicKeyLimitReachedError > for dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError_ctor < > (max_items : usize) -> * mut dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { max_items }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError_get_max_items < > (obj : * const dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError) -> usize { (* obj) . max_items } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError_set_max_items < > (obj : * mut dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError , value : usize) { (* obj) . max_items = value ; } } pub mod invalid_identity_revision_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: InvalidIdentityRevisionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub current_revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: InvalidIdentityRevisionError > for dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) -> dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: InvalidIdentityRevisionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: InvalidIdentityRevisionError { identity_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_id) , current_revision : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . current_revision) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: InvalidIdentityRevisionError > for dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: InvalidIdentityRevisionError) -> * const dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { identity_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_id) , current_revision : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . current_revision) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: InvalidIdentityRevisionError > for dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . current_revision) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError_ctor < > (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , current_revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) -> * mut dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { identity_id , current_revision }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError_get_identity_id < > (obj : * const dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError_get_current_revision < > (obj : * const dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . current_revision } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError_set_identity_id < > (obj : * mut dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError_set_current_revision < > (obj : * mut dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . current_revision = value ; } } pub mod master_public_key_update_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: state :: identity :: master_public_key_update_error :: MasterPublicKeyUpdateError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError { pub adding : usize , pub removing : usize , pub description : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: master_public_key_update_error :: MasterPublicKeyUpdateError > for dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError) -> dpp :: errors :: consensus :: state :: identity :: master_public_key_update_error :: MasterPublicKeyUpdateError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: master_public_key_update_error :: MasterPublicKeyUpdateError { adding : ffi_ref . adding , removing : ffi_ref . removing , description : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . description) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: master_public_key_update_error :: MasterPublicKeyUpdateError > for dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: master_public_key_update_error :: MasterPublicKeyUpdateError) -> * const dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError { adding : obj . adding , removing : obj . removing , description : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . description) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: identity :: master_public_key_update_error :: MasterPublicKeyUpdateError > for dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . description) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError_ctor < > (adding : usize , removing : usize , description : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError { adding , removing , description }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError_get_adding < > (obj : * const dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError) -> usize { (* obj) . adding } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError_get_removing < > (obj : * const dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError) -> usize { (* obj) . removing } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError_get_description < > (obj : * const dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . description } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError_set_adding < > (obj : * mut dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError , value : usize) { (* obj) . adding = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError_set_removing < > (obj : * mut dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError , value : usize) { (* obj) . removing = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError_set_description < > (obj : * mut dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError , value : * mut std :: os :: raw :: c_char) { (* obj) . description = value ; } } } pub mod state_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: errors :: consensus :: state :: state_error :: StateError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_errors_consensus_state_state_error_StateError { DataContractAlreadyPresentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError) , # [cfg (feature = "state-transition-validation")] DataTriggerError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: dpp_errors_consensus_state_data_trigger_DataTriggerError) , DocumentAlreadyPresentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_already_present_error :: dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError) , DocumentContestCurrentlyLockedError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_currently_locked_error :: dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError) , DocumentContestNotJoinableError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_not_joinable_error :: dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) , DocumentContestIdentityAlreadyContestantError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_identity_already_contestant :: dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError) , DocumentNotFoundError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_not_found_error :: dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError) , DocumentNotForSaleError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_not_for_sale_error :: dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError) , DocumentIncorrectPurchasePriceError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_incorrect_purchase_price_error :: dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError) , DocumentOwnerIdMismatchError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) , DocumentTimestampsMismatchError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError) , DocumentTimestampWindowViolationError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) , DuplicateUniqueIndexError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) , InvalidDocumentRevisionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) , IdentityAlreadyExistsError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError) , IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) , IdentityPublicKeyIsReadOnlyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError) , MissingIdentityPublicKeyIdsError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError) , InvalidIdentityPublicKeyIdError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError) , InvalidIdentityRevisionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) , InvalidIdentityNonceError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_contract_nonce_error :: dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError) , MaxIdentityPublicKeyLimitReachedError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError) , DuplicatedIdentityPublicKeyStateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError) , DuplicatedIdentityPublicKeyIdStateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError) , IdentityPublicKeyIsDisabledError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError) , IdentityInsufficientBalanceError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) , DocumentTimestampsAreEqualError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError) , DataContractIsReadonlyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError) , DataContractConfigUpdateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) , DocumentTypeUpdateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: document_type_update_error :: dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError) , PrefundedSpecializedBalanceInsufficientError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_insufficient_error :: dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError) , PrefundedSpecializedBalanceNotFoundError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_not_found_error :: dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError) , DataContractUpdatePermissionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_update_permission_error :: dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError) , MasternodeNotFoundError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_not_found_error :: dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError) , MasternodeIncorrectVoterIdentityIdError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voter_identity_id_error :: dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError) , MasternodeIncorrectVotingAddressError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voting_address_error :: dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError) , VotePollNotFoundError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: vote_poll_not_found_error :: dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError) , VotePollNotAvailableForVotingError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: vote_poll_not_available_for_voting_error :: dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError) , MasternodeVotedTooManyTimesError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_voted_too_many_times :: dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError) , MasternodeVoteAlreadyPresentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_vote_already_present_error :: dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError) } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: state :: state_error :: StateError > for dpp_errors_consensus_state_state_error_StateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_state_error_StateError) -> dpp :: errors :: consensus :: state :: state_error :: StateError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_consensus_state_state_error_StateError :: DataContractAlreadyPresentError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractAlreadyPresentError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , # [cfg (feature = "state-transition-validation")] dpp_errors_consensus_state_state_error_StateError :: DataTriggerError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DataTriggerError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentAlreadyPresentError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentAlreadyPresentError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentContestCurrentlyLockedError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentContestCurrentlyLockedError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentContestNotJoinableError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentContestNotJoinableError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentContestIdentityAlreadyContestantError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentContestIdentityAlreadyContestantError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentNotFoundError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentNotFoundError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentNotForSaleError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentNotForSaleError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentIncorrectPurchasePriceError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentIncorrectPurchasePriceError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentOwnerIdMismatchError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentOwnerIdMismatchError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsMismatchError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTimestampsMismatchError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampWindowViolationError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTimestampWindowViolationError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DuplicateUniqueIndexError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DuplicateUniqueIndexError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: InvalidDocumentRevisionError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidDocumentRevisionError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: IdentityAlreadyExistsError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityAlreadyExistsError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsReadOnlyError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityPublicKeyIsReadOnlyError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: MissingIdentityPublicKeyIdsError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: MissingIdentityPublicKeyIdsError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityPublicKeyIdError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidIdentityPublicKeyIdError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityRevisionError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidIdentityRevisionError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityNonceError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidIdentityNonceError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: MaxIdentityPublicKeyLimitReachedError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: MaxIdentityPublicKeyLimitReachedError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyStateError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DuplicatedIdentityPublicKeyStateError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyIdStateError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DuplicatedIdentityPublicKeyIdStateError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsDisabledError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityPublicKeyIsDisabledError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: IdentityInsufficientBalanceError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityInsufficientBalanceError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsAreEqualError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTimestampsAreEqualError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DataContractIsReadonlyError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractIsReadonlyError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DataContractConfigUpdateError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractConfigUpdateError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentTypeUpdateError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTypeUpdateError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: PrefundedSpecializedBalanceInsufficientError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: PrefundedSpecializedBalanceInsufficientError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: PrefundedSpecializedBalanceNotFoundError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: PrefundedSpecializedBalanceNotFoundError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DataContractUpdatePermissionError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractUpdatePermissionError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: MasternodeNotFoundError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: MasternodeNotFoundError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: MasternodeIncorrectVoterIdentityIdError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: MasternodeIncorrectVoterIdentityIdError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: MasternodeIncorrectVotingAddressError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: MasternodeIncorrectVotingAddressError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: VotePollNotFoundError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: VotePollNotFoundError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: VotePollNotAvailableForVotingError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: VotePollNotAvailableForVotingError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: MasternodeVotedTooManyTimesError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: MasternodeVotedTooManyTimesError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: MasternodeVoteAlreadyPresentError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: MasternodeVoteAlreadyPresentError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: state :: state_error :: StateError > for dpp_errors_consensus_state_state_error_StateError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: state_error :: StateError) -> * const dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (match obj { dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractAlreadyPresentError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DataContractAlreadyPresentError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , # [cfg (feature = "state-transition-validation")] dpp :: errors :: consensus :: state :: state_error :: StateError :: DataTriggerError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DataTriggerError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentAlreadyPresentError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentAlreadyPresentError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentContestCurrentlyLockedError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentContestCurrentlyLockedError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentContestNotJoinableError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentContestNotJoinableError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentContestIdentityAlreadyContestantError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentContestIdentityAlreadyContestantError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentNotFoundError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentNotFoundError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentNotForSaleError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentNotForSaleError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentIncorrectPurchasePriceError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentIncorrectPurchasePriceError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentOwnerIdMismatchError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentOwnerIdMismatchError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTimestampsMismatchError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsMismatchError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTimestampWindowViolationError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampWindowViolationError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DuplicateUniqueIndexError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DuplicateUniqueIndexError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidDocumentRevisionError (o_0) => dpp_errors_consensus_state_state_error_StateError :: InvalidDocumentRevisionError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityAlreadyExistsError (o_0) => dpp_errors_consensus_state_state_error_StateError :: IdentityAlreadyExistsError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError (o_0) => dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityPublicKeyIsReadOnlyError (o_0) => dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsReadOnlyError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: MissingIdentityPublicKeyIdsError (o_0) => dpp_errors_consensus_state_state_error_StateError :: MissingIdentityPublicKeyIdsError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidIdentityPublicKeyIdError (o_0) => dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityPublicKeyIdError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidIdentityRevisionError (o_0) => dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityRevisionError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidIdentityNonceError (o_0) => dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityNonceError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: MaxIdentityPublicKeyLimitReachedError (o_0) => dpp_errors_consensus_state_state_error_StateError :: MaxIdentityPublicKeyLimitReachedError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DuplicatedIdentityPublicKeyStateError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyStateError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DuplicatedIdentityPublicKeyIdStateError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyIdStateError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityPublicKeyIsDisabledError (o_0) => dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsDisabledError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityInsufficientBalanceError (o_0) => dpp_errors_consensus_state_state_error_StateError :: IdentityInsufficientBalanceError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTimestampsAreEqualError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsAreEqualError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractIsReadonlyError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DataContractIsReadonlyError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractConfigUpdateError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DataContractConfigUpdateError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTypeUpdateError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentTypeUpdateError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: PrefundedSpecializedBalanceInsufficientError (o_0) => dpp_errors_consensus_state_state_error_StateError :: PrefundedSpecializedBalanceInsufficientError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: PrefundedSpecializedBalanceNotFoundError (o_0) => dpp_errors_consensus_state_state_error_StateError :: PrefundedSpecializedBalanceNotFoundError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractUpdatePermissionError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DataContractUpdatePermissionError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: MasternodeNotFoundError (o_0) => dpp_errors_consensus_state_state_error_StateError :: MasternodeNotFoundError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: MasternodeIncorrectVoterIdentityIdError (o_0) => dpp_errors_consensus_state_state_error_StateError :: MasternodeIncorrectVoterIdentityIdError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: MasternodeIncorrectVotingAddressError (o_0) => dpp_errors_consensus_state_state_error_StateError :: MasternodeIncorrectVotingAddressError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: VotePollNotFoundError (o_0) => dpp_errors_consensus_state_state_error_StateError :: VotePollNotFoundError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: VotePollNotAvailableForVotingError (o_0) => dpp_errors_consensus_state_state_error_StateError :: VotePollNotAvailableForVotingError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: MasternodeVotedTooManyTimesError (o_0) => dpp_errors_consensus_state_state_error_StateError :: MasternodeVotedTooManyTimesError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: MasternodeVoteAlreadyPresentError (o_0) => dpp_errors_consensus_state_state_error_StateError :: MasternodeVoteAlreadyPresentError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: state :: state_error :: StateError > for dpp_errors_consensus_state_state_error_StateError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_state_error_StateError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_errors_consensus_state_state_error_StateError { fn drop (& mut self) { unsafe { match self { dpp_errors_consensus_state_state_error_StateError :: DataContractAlreadyPresentError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , # [cfg (feature = "state-transition-validation")] dpp_errors_consensus_state_state_error_StateError :: DataTriggerError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentAlreadyPresentError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentContestCurrentlyLockedError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentContestNotJoinableError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentContestIdentityAlreadyContestantError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentNotFoundError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentNotForSaleError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentIncorrectPurchasePriceError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentOwnerIdMismatchError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsMismatchError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampWindowViolationError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: DuplicateUniqueIndexError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: InvalidDocumentRevisionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: IdentityAlreadyExistsError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsReadOnlyError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: MissingIdentityPublicKeyIdsError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityPublicKeyIdError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityRevisionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityNonceError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: MaxIdentityPublicKeyLimitReachedError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyStateError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyIdStateError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsDisabledError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: IdentityInsufficientBalanceError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsAreEqualError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: DataContractIsReadonlyError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: DataContractConfigUpdateError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentTypeUpdateError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: PrefundedSpecializedBalanceInsufficientError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: PrefundedSpecializedBalanceNotFoundError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: DataContractUpdatePermissionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: MasternodeNotFoundError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: MasternodeIncorrectVoterIdentityIdError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: MasternodeIncorrectVotingAddressError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: VotePollNotFoundError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: VotePollNotAvailableForVotingError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: MasternodeVotedTooManyTimesError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_state_state_error_StateError :: MasternodeVoteAlreadyPresentError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DataContractAlreadyPresentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DataContractAlreadyPresentError (o_o_0)) } # [cfg (feature = "state-transition-validation")] # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DataTriggerError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: dpp_errors_consensus_state_data_trigger_DataTriggerError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DataTriggerError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentAlreadyPresentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_already_present_error :: dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentAlreadyPresentError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentContestCurrentlyLockedError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_currently_locked_error :: dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentContestCurrentlyLockedError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentContestNotJoinableError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_not_joinable_error :: dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentContestNotJoinableError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentContestIdentityAlreadyContestantError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_identity_already_contestant :: dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentContestIdentityAlreadyContestantError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentNotFoundError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_not_found_error :: dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentNotFoundError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentNotForSaleError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_not_for_sale_error :: dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentNotForSaleError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentIncorrectPurchasePriceError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_incorrect_purchase_price_error :: dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentIncorrectPurchasePriceError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentOwnerIdMismatchError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentOwnerIdMismatchError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentTimestampsMismatchError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsMismatchError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentTimestampWindowViolationError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampWindowViolationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DuplicateUniqueIndexError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DuplicateUniqueIndexError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_InvalidDocumentRevisionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: InvalidDocumentRevisionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_IdentityAlreadyExistsError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: IdentityAlreadyExistsError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_IdentityPublicKeyIsReadOnlyError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsReadOnlyError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_MissingIdentityPublicKeyIdsError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: MissingIdentityPublicKeyIdsError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_InvalidIdentityPublicKeyIdError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityPublicKeyIdError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_InvalidIdentityRevisionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityRevisionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_InvalidIdentityNonceError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_contract_nonce_error :: dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityNonceError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_MaxIdentityPublicKeyLimitReachedError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: MaxIdentityPublicKeyLimitReachedError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DuplicatedIdentityPublicKeyStateError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyStateError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DuplicatedIdentityPublicKeyIdStateError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyIdStateError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_IdentityPublicKeyIsDisabledError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsDisabledError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_IdentityInsufficientBalanceError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: IdentityInsufficientBalanceError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentTimestampsAreEqualError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsAreEqualError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DataContractIsReadonlyError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DataContractIsReadonlyError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DataContractConfigUpdateError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DataContractConfigUpdateError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentTypeUpdateError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: document_type_update_error :: dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentTypeUpdateError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_PrefundedSpecializedBalanceInsufficientError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_insufficient_error :: dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: PrefundedSpecializedBalanceInsufficientError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_PrefundedSpecializedBalanceNotFoundError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_not_found_error :: dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: PrefundedSpecializedBalanceNotFoundError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DataContractUpdatePermissionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_update_permission_error :: dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DataContractUpdatePermissionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_MasternodeNotFoundError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_not_found_error :: dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: MasternodeNotFoundError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_MasternodeIncorrectVoterIdentityIdError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voter_identity_id_error :: dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: MasternodeIncorrectVoterIdentityIdError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_MasternodeIncorrectVotingAddressError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voting_address_error :: dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: MasternodeIncorrectVotingAddressError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_VotePollNotFoundError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: vote_poll_not_found_error :: dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: VotePollNotFoundError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_VotePollNotAvailableForVotingError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: vote_poll_not_available_for_voting_error :: dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: VotePollNotAvailableForVotingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_MasternodeVotedTooManyTimesError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_voted_too_many_times :: dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: MasternodeVotedTooManyTimesError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_MasternodeVoteAlreadyPresentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_vote_already_present_error :: dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: MasternodeVoteAlreadyPresentError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_destroy < > (ffi : * mut dpp_errors_consensus_state_state_error_StateError) { ferment_interfaces :: unbox_any (ffi) ; } } } pub mod signature { use crate as ferment_example_platform ; pub mod invalid_identity_public_key_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { pub public_key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError > for dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) -> dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError { public_key_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . public_key_type) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError > for dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError) -> * const dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { public_key_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . public_key_type) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError > for dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_type) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_ctor < > (public_key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType) -> * mut dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { public_key_type }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_destroy < > (ffi : * mut dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_get_public_key_type < > (obj : * const dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType { (* obj) . public_key_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_set_public_key_type < > (obj : * mut dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType) { (* obj) . public_key_type = value ; } } pub mod signature_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: errors :: consensus :: signature :: signature_error :: SignatureError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_errors_consensus_signature_signature_error_SignatureError { IdentityNotFoundError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: identity_not_found_error :: dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError) , InvalidIdentityPublicKeyTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) , InvalidStateTransitionSignatureError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError) , MissingPublicKeyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: missing_public_key_error :: dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError) , InvalidSignaturePublicKeyPurposeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_purpose_error :: dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError) , InvalidSignaturePublicKeySecurityLevelError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) , WrongPublicKeyPurposeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) , PublicKeyIsDisabledError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) , PublicKeySecurityLevelNotMetError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) , SignatureShouldNotBePresentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError) , BasicECDSAError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError) , BasicBLSError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: basic_bls_error :: dpp_errors_consensus_signature_basic_bls_error_BasicBLSError) } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: signature_error :: SignatureError > for dpp_errors_consensus_signature_signature_error_SignatureError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_signature_error_SignatureError) -> dpp :: errors :: consensus :: signature :: signature_error :: SignatureError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_consensus_signature_signature_error_SignatureError :: IdentityNotFoundError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: IdentityNotFoundError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidIdentityPublicKeyTypeError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidIdentityPublicKeyTypeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidStateTransitionSignatureError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidStateTransitionSignatureError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: MissingPublicKeyError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: MissingPublicKeyError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidSignaturePublicKeyPurposeError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidSignaturePublicKeyPurposeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidSignaturePublicKeySecurityLevelError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidSignaturePublicKeySecurityLevelError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: WrongPublicKeyPurposeError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: WrongPublicKeyPurposeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeyIsDisabledError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: PublicKeyIsDisabledError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeySecurityLevelNotMetError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: PublicKeySecurityLevelNotMetError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: SignatureShouldNotBePresentError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: SignatureShouldNotBePresentError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: BasicECDSAError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: BasicECDSAError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: BasicBLSError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: BasicBLSError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: signature :: signature_error :: SignatureError > for dpp_errors_consensus_signature_signature_error_SignatureError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: signature_error :: SignatureError) -> * const dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (match obj { dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: IdentityNotFoundError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: IdentityNotFoundError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidIdentityPublicKeyTypeError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidIdentityPublicKeyTypeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidStateTransitionSignatureError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidStateTransitionSignatureError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: MissingPublicKeyError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: MissingPublicKeyError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidSignaturePublicKeyPurposeError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidSignaturePublicKeyPurposeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidSignaturePublicKeySecurityLevelError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidSignaturePublicKeySecurityLevelError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: WrongPublicKeyPurposeError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: WrongPublicKeyPurposeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: PublicKeyIsDisabledError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeyIsDisabledError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: PublicKeySecurityLevelNotMetError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeySecurityLevelNotMetError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: SignatureShouldNotBePresentError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: SignatureShouldNotBePresentError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: BasicECDSAError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: BasicECDSAError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: BasicBLSError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: BasicBLSError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: signature :: signature_error :: SignatureError > for dpp_errors_consensus_signature_signature_error_SignatureError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_signature_error_SignatureError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_errors_consensus_signature_signature_error_SignatureError { fn drop (& mut self) { unsafe { match self { dpp_errors_consensus_signature_signature_error_SignatureError :: IdentityNotFoundError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidIdentityPublicKeyTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidStateTransitionSignatureError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: MissingPublicKeyError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidSignaturePublicKeyPurposeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidSignaturePublicKeySecurityLevelError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: WrongPublicKeyPurposeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeyIsDisabledError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeySecurityLevelNotMetError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: SignatureShouldNotBePresentError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: BasicECDSAError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: BasicBLSError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_IdentityNotFoundError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: identity_not_found_error :: dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: IdentityNotFoundError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_InvalidIdentityPublicKeyTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidIdentityPublicKeyTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_InvalidStateTransitionSignatureError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidStateTransitionSignatureError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_MissingPublicKeyError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: missing_public_key_error :: dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: MissingPublicKeyError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_InvalidSignaturePublicKeyPurposeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_purpose_error :: dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidSignaturePublicKeyPurposeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_InvalidSignaturePublicKeySecurityLevelError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidSignaturePublicKeySecurityLevelError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_WrongPublicKeyPurposeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: WrongPublicKeyPurposeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_PublicKeyIsDisabledError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeyIsDisabledError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_PublicKeySecurityLevelNotMetError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeySecurityLevelNotMetError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_SignatureShouldNotBePresentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: SignatureShouldNotBePresentError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_BasicECDSAError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: BasicECDSAError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_BasicBLSError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: basic_bls_error :: dpp_errors_consensus_signature_basic_bls_error_BasicBLSError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: BasicBLSError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_destroy < > (ffi : * mut dpp_errors_consensus_signature_signature_error_SignatureError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod public_key_is_disabled_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: PublicKeyIsDisabledError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { pub public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: PublicKeyIsDisabledError > for dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) -> dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: PublicKeyIsDisabledError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: PublicKeyIsDisabledError { public_key_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . public_key_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: PublicKeyIsDisabledError > for dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: PublicKeyIsDisabledError) -> * const dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { public_key_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . public_key_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: PublicKeyIsDisabledError > for dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError_ctor < > (public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { public_key_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError_destroy < > (ffi : * mut dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError_get_public_key_id < > (obj : * const dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError_set_public_key_id < > (obj : * mut dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . public_key_id = value ; } } pub mod basic_ecdsa_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: BasicECDSAError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: BasicECDSAError > for dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError) -> dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: BasicECDSAError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: BasicECDSAError { message : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . message) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: BasicECDSAError > for dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: BasicECDSAError) -> * const dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { message : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . message) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: BasicECDSAError > for dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError_destroy < > (ffi : * mut dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError_get_message < > (obj : * const dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError_set_message < > (obj : * mut dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod invalid_signature_public_key_security_level_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: InvalidSignaturePublicKeySecurityLevelError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { pub public_key_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub allowed_key_security_levels : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_security_level_SecurityLevel } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: InvalidSignaturePublicKeySecurityLevelError > for dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) -> dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: InvalidSignaturePublicKeySecurityLevelError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: InvalidSignaturePublicKeySecurityLevelError { public_key_security_level : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . public_key_security_level) , allowed_key_security_levels : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . allowed_key_security_levels) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: InvalidSignaturePublicKeySecurityLevelError > for dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: InvalidSignaturePublicKeySecurityLevelError) -> * const dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { public_key_security_level : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . public_key_security_level) , allowed_key_security_levels : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . allowed_key_security_levels) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: InvalidSignaturePublicKeySecurityLevelError > for dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_security_level) ; ; ferment_interfaces :: unbox_any (ffi_ref . allowed_key_security_levels) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError_ctor < > (public_key_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , allowed_key_security_levels : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_security_level_SecurityLevel) -> * mut dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { public_key_security_level , allowed_key_security_levels }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError_destroy < > (ffi : * mut dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError_get_public_key_security_level < > (obj : * const dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . public_key_security_level } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError_get_allowed_key_security_levels < > (obj : * const dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . allowed_key_security_levels } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError_set_public_key_security_level < > (obj : * mut dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . public_key_security_level = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError_set_allowed_key_security_levels < > (obj : * mut dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError , value : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . allowed_key_security_levels = value ; } } pub mod invalid_signature_public_key_purpose_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: signature :: invalid_signature_public_key_purpose_error :: InvalidSignaturePublicKeyPurposeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError { pub public_key_purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , pub allowed_key_purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: invalid_signature_public_key_purpose_error :: InvalidSignaturePublicKeyPurposeError > for dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError) -> dpp :: errors :: consensus :: signature :: invalid_signature_public_key_purpose_error :: InvalidSignaturePublicKeyPurposeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: invalid_signature_public_key_purpose_error :: InvalidSignaturePublicKeyPurposeError { public_key_purpose : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . public_key_purpose) , allowed_key_purpose : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . allowed_key_purpose) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: signature :: invalid_signature_public_key_purpose_error :: InvalidSignaturePublicKeyPurposeError > for dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: invalid_signature_public_key_purpose_error :: InvalidSignaturePublicKeyPurposeError) -> * const dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError { public_key_purpose : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . public_key_purpose) , allowed_key_purpose : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . allowed_key_purpose) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: signature :: invalid_signature_public_key_purpose_error :: InvalidSignaturePublicKeyPurposeError > for dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_purpose) ; ; ferment_interfaces :: unbox_any (ffi_ref . allowed_key_purpose) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError_ctor < > (public_key_purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , allowed_key_purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) -> * mut dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError { public_key_purpose , allowed_key_purpose }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError_destroy < > (ffi : * mut dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError_get_public_key_purpose < > (obj : * const dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . public_key_purpose } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError_get_allowed_key_purpose < > (obj : * const dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . allowed_key_purpose } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError_set_public_key_purpose < > (obj : * mut dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) { (* obj) . public_key_purpose = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError_set_allowed_key_purpose < > (obj : * mut dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) { (* obj) . allowed_key_purpose = value ; } } pub mod basic_bls_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: signature :: basic_bls_error :: BasicBLSError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: basic_bls_error :: BasicBLSError > for dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_basic_bls_error_BasicBLSError) -> dpp :: errors :: consensus :: signature :: basic_bls_error :: BasicBLSError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: basic_bls_error :: BasicBLSError { message : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . message) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: signature :: basic_bls_error :: BasicBLSError > for dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: basic_bls_error :: BasicBLSError) -> * const dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { message : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . message) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: signature :: basic_bls_error :: BasicBLSError > for dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_basic_bls_error_BasicBLSError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_bls_error_BasicBLSError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_bls_error_BasicBLSError_destroy < > (ffi : * mut dpp_errors_consensus_signature_basic_bls_error_BasicBLSError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_bls_error_BasicBLSError_get_message < > (obj : * const dpp_errors_consensus_signature_basic_bls_error_BasicBLSError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_bls_error_BasicBLSError_set_message < > (obj : * mut dpp_errors_consensus_signature_basic_bls_error_BasicBLSError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod identity_not_found_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: signature :: identity_not_found_error :: IdentityNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: identity_not_found_error :: IdentityNotFoundError > for dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError) -> dpp :: errors :: consensus :: signature :: identity_not_found_error :: IdentityNotFoundError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: identity_not_found_error :: IdentityNotFoundError { identity_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: signature :: identity_not_found_error :: IdentityNotFoundError > for dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: identity_not_found_error :: IdentityNotFoundError) -> * const dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { identity_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: signature :: identity_not_found_error :: IdentityNotFoundError > for dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError_ctor < > (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { identity_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError_destroy < > (ffi : * mut dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError_get_identity_id < > (obj : * const dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError_set_identity_id < > (obj : * mut dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } } pub mod wrong_public_key_purpose_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { pub public_key_purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , pub key_purpose_requirement : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError > for dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError { public_key_purpose : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . public_key_purpose) , key_purpose_requirement : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . key_purpose_requirement) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError > for dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError) -> * const dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { public_key_purpose : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . public_key_purpose) , key_purpose_requirement : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . key_purpose_requirement) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError > for dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_purpose) ; ; ferment_interfaces :: unbox_any (ffi_ref . key_purpose_requirement) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_ctor < > (public_key_purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , key_purpose_requirement : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) -> * mut dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { public_key_purpose , key_purpose_requirement }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_destroy < > (ffi : * mut dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_get_public_key_purpose < > (obj : * const dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . public_key_purpose } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_get_key_purpose_requirement < > (obj : * const dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . key_purpose_requirement } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_set_public_key_purpose < > (obj : * mut dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) { (* obj) . public_key_purpose = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_set_key_purpose_requirement < > (obj : * mut dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) { (* obj) . key_purpose_requirement = value ; } } pub mod invalid_state_transition_signature_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: InvalidStateTransitionSignatureError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: InvalidStateTransitionSignatureError > for dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError) -> dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: InvalidStateTransitionSignatureError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: InvalidStateTransitionSignatureError { message : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . message) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: InvalidStateTransitionSignatureError > for dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: InvalidStateTransitionSignatureError) -> * const dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { message : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . message) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: InvalidStateTransitionSignatureError > for dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError_destroy < > (ffi : * mut dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError_get_message < > (obj : * const dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError_set_message < > (obj : * mut dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod public_key_security_level_not_met_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { pub public_key_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub required_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError > for dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError { public_key_security_level : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . public_key_security_level) , required_security_level : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . required_security_level) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError > for dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError) -> * const dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { public_key_security_level : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . public_key_security_level) , required_security_level : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . required_security_level) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError > for dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_security_level) ; ; ferment_interfaces :: unbox_any (ffi_ref . required_security_level) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_ctor < > (public_key_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , required_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) -> * mut dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { public_key_security_level , required_security_level }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_destroy < > (ffi : * mut dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_get_public_key_security_level < > (obj : * const dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . public_key_security_level } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_get_required_security_level < > (obj : * const dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . required_security_level } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_set_public_key_security_level < > (obj : * mut dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . public_key_security_level = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_set_required_security_level < > (obj : * mut dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . required_security_level = value ; } } pub mod signature_should_not_be_present_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: SignatureShouldNotBePresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: SignatureShouldNotBePresentError > for dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError) -> dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: SignatureShouldNotBePresentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: SignatureShouldNotBePresentError { message : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . message) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: SignatureShouldNotBePresentError > for dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: SignatureShouldNotBePresentError) -> * const dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { message : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . message) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: SignatureShouldNotBePresentError > for dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError_destroy < > (ffi : * mut dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError_get_message < > (obj : * const dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError_set_message < > (obj : * mut dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod missing_public_key_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: consensus :: signature :: missing_public_key_error :: MissingPublicKeyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { pub public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: missing_public_key_error :: MissingPublicKeyError > for dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError) -> dpp :: errors :: consensus :: signature :: missing_public_key_error :: MissingPublicKeyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: missing_public_key_error :: MissingPublicKeyError { public_key_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . public_key_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: consensus :: signature :: missing_public_key_error :: MissingPublicKeyError > for dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: missing_public_key_error :: MissingPublicKeyError) -> * const dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { public_key_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . public_key_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: consensus :: signature :: missing_public_key_error :: MissingPublicKeyError > for dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError_ctor < > (public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { public_key_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError_destroy < > (ffi : * mut dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError_get_public_key_id < > (obj : * const dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError_set_public_key_id < > (obj : * mut dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . public_key_id = value ; } } } } pub mod non_consensus_error { use crate as ferment_example_platform ; pub mod object_names { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: errors :: non_consensus_error :: NonConsensusError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_errors_non_consensus_error_NonConsensusError { ValueError (* mut crate :: fermented :: types :: platform_value :: error :: platform_value_error_Error) , UnknownVersionMismatch { method : * mut std :: os :: raw :: c_char , known_versions : * mut crate :: fermented :: generics :: Vec_platform_version_version_protocol_version_FeatureVersion , received : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } , SerdeParsingError (* mut crate :: fermented :: types :: dpp :: errors :: serde_parsing_error :: dpp_errors_serde_parsing_error_SerdeParsingError) , CompatibleProtocolVersionIsNotDefinedError (* mut crate :: fermented :: types :: dpp :: errors :: compatible_protocol_version_is_not_defined_error :: dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) , SerdeJsonError (* mut std :: os :: raw :: c_char) , InvalidVectorSizeError (* mut crate :: fermented :: types :: dpp :: errors :: invalid_vector_size_error :: dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) , StateRepositoryFetchError (* mut std :: os :: raw :: c_char) , WithdrawalError (* mut std :: os :: raw :: c_char) , IdentifierCreateError (* mut std :: os :: raw :: c_char) , StateTransitionCreationError (* mut std :: os :: raw :: c_char) , IdentityPublicKeyCreateError (* mut std :: os :: raw :: c_char) , RequiredPropertyError { property_name : * mut std :: os :: raw :: c_char } , InvalidDataProcessedError (* mut std :: os :: raw :: c_char) , ObjectCreationError { object_name : * mut std :: os :: raw :: c_char , details : * mut std :: os :: raw :: c_char } , DPPError (* mut crate :: fermented :: types :: dpp :: errors :: dpp_error :: dpp_errors_dpp_error_DPPError) , Error (* mut ferment_example_platform :: custom :: anyhow :: anyhow_Error) , Overflow (* mut std :: os :: raw :: c_char) } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: non_consensus_error :: NonConsensusError > for dpp_errors_non_consensus_error_NonConsensusError { unsafe fn ffi_from_const (ffi : * const dpp_errors_non_consensus_error_NonConsensusError) -> dpp :: errors :: non_consensus_error :: NonConsensusError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_non_consensus_error_NonConsensusError :: ValueError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: ValueError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: UnknownVersionMismatch { method , known_versions , received } => dpp :: errors :: non_consensus_error :: NonConsensusError :: UnknownVersionMismatch { method : ferment_interfaces :: FFIConversionFrom :: ffi_from (* method) , known_versions : ferment_interfaces :: FFIConversionFrom :: ffi_from (* known_versions) , received : ferment_interfaces :: FFIConversionFrom :: ffi_from (* received) } , dpp_errors_non_consensus_error_NonConsensusError :: SerdeParsingError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: SerdeParsingError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: CompatibleProtocolVersionIsNotDefinedError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: CompatibleProtocolVersionIsNotDefinedError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: SerdeJsonError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: SerdeJsonError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: InvalidVectorSizeError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: InvalidVectorSizeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: StateRepositoryFetchError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: StateRepositoryFetchError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: WithdrawalError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: WithdrawalError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: IdentifierCreateError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: IdentifierCreateError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: StateTransitionCreationError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: StateTransitionCreationError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: IdentityPublicKeyCreateError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: IdentityPublicKeyCreateError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: RequiredPropertyError { property_name } => dpp :: errors :: non_consensus_error :: NonConsensusError :: RequiredPropertyError { property_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (* property_name) } , dpp_errors_non_consensus_error_NonConsensusError :: InvalidDataProcessedError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: InvalidDataProcessedError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: ObjectCreationError { object_name , details } => dpp :: errors :: non_consensus_error :: NonConsensusError :: ObjectCreationError { object_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (* object_name) , details : ferment_interfaces :: FFIConversionFrom :: ffi_from (* details) } , dpp_errors_non_consensus_error_NonConsensusError :: DPPError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: DPPError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: Error (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: Error (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: Overflow (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: Overflow (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: non_consensus_error :: NonConsensusError > for dpp_errors_non_consensus_error_NonConsensusError { unsafe fn ffi_to_const (obj : dpp :: errors :: non_consensus_error :: NonConsensusError) -> * const dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (match obj { dpp :: errors :: non_consensus_error :: NonConsensusError :: ValueError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: ValueError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: UnknownVersionMismatch { method , known_versions , received } => dpp_errors_non_consensus_error_NonConsensusError :: UnknownVersionMismatch { method : ferment_interfaces :: FFIConversionTo :: ffi_to (method) , known_versions : ferment_interfaces :: FFIConversionTo :: ffi_to (known_versions) , received : ferment_interfaces :: FFIConversionTo :: ffi_to (received) } , dpp :: errors :: non_consensus_error :: NonConsensusError :: SerdeParsingError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: SerdeParsingError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: CompatibleProtocolVersionIsNotDefinedError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: CompatibleProtocolVersionIsNotDefinedError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: SerdeJsonError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: SerdeJsonError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: InvalidVectorSizeError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: InvalidVectorSizeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: StateRepositoryFetchError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: StateRepositoryFetchError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: WithdrawalError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: WithdrawalError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: IdentifierCreateError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: IdentifierCreateError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: StateTransitionCreationError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: StateTransitionCreationError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: IdentityPublicKeyCreateError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: IdentityPublicKeyCreateError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: RequiredPropertyError { property_name } => dpp_errors_non_consensus_error_NonConsensusError :: RequiredPropertyError { property_name : ferment_interfaces :: FFIConversionTo :: ffi_to (property_name) } , dpp :: errors :: non_consensus_error :: NonConsensusError :: InvalidDataProcessedError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: InvalidDataProcessedError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: ObjectCreationError { object_name , details } => dpp_errors_non_consensus_error_NonConsensusError :: ObjectCreationError { object_name : ferment_interfaces :: FFIConversionTo :: ffi_to (object_name) , details : ferment_interfaces :: FFIConversionTo :: ffi_to (details) } , dpp :: errors :: non_consensus_error :: NonConsensusError :: DPPError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: DPPError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: Error (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: Error (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: Overflow (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: Overflow (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: non_consensus_error :: NonConsensusError > for dpp_errors_non_consensus_error_NonConsensusError { unsafe fn destroy (ffi : * mut dpp_errors_non_consensus_error_NonConsensusError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_errors_non_consensus_error_NonConsensusError { fn drop (& mut self) { unsafe { match self { dpp_errors_non_consensus_error_NonConsensusError :: ValueError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_non_consensus_error_NonConsensusError :: UnknownVersionMismatch { method , known_versions , received } => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* method) ; ; ferment_interfaces :: unbox_any (* known_versions) ; ; ; ferment_interfaces :: unbox_any (* received) ; ; } , dpp_errors_non_consensus_error_NonConsensusError :: SerdeParsingError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_non_consensus_error_NonConsensusError :: CompatibleProtocolVersionIsNotDefinedError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_non_consensus_error_NonConsensusError :: SerdeJsonError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: InvalidVectorSizeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_non_consensus_error_NonConsensusError :: StateRepositoryFetchError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: WithdrawalError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: IdentifierCreateError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: StateTransitionCreationError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: IdentityPublicKeyCreateError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: RequiredPropertyError { property_name } => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* property_name) ; } , dpp_errors_non_consensus_error_NonConsensusError :: InvalidDataProcessedError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: ObjectCreationError { object_name , details } => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < & str >> :: destroy (* object_name) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* details) ; } , dpp_errors_non_consensus_error_NonConsensusError :: DPPError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_non_consensus_error_NonConsensusError :: Error (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_non_consensus_error_NonConsensusError :: Overflow (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < & str >> :: destroy (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_ValueError_ctor (o_o_0 : * mut crate :: fermented :: types :: platform_value :: error :: platform_value_error_Error) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: ValueError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_UnknownVersionMismatch_ctor (method : * mut std :: os :: raw :: c_char , known_versions : * mut crate :: fermented :: generics :: Vec_platform_version_version_protocol_version_FeatureVersion , received : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: UnknownVersionMismatch { method , known_versions , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_SerdeParsingError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: serde_parsing_error :: dpp_errors_serde_parsing_error_SerdeParsingError) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: SerdeParsingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_CompatibleProtocolVersionIsNotDefinedError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: compatible_protocol_version_is_not_defined_error :: dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: CompatibleProtocolVersionIsNotDefinedError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_SerdeJsonError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: SerdeJsonError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_InvalidVectorSizeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: invalid_vector_size_error :: dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: InvalidVectorSizeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_StateRepositoryFetchError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: StateRepositoryFetchError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_WithdrawalError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: WithdrawalError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_IdentifierCreateError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: IdentifierCreateError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_StateTransitionCreationError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: StateTransitionCreationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_IdentityPublicKeyCreateError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: IdentityPublicKeyCreateError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_RequiredPropertyError_ctor (property_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: RequiredPropertyError { property_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_InvalidDataProcessedError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: InvalidDataProcessedError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_ObjectCreationError_ctor (object_name : * mut std :: os :: raw :: c_char , details : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: ObjectCreationError { object_name , details }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_DPPError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: dpp_error :: dpp_errors_dpp_error_DPPError) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: DPPError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_Error_ctor (o_o_0 : * mut ferment_example_platform :: custom :: anyhow :: anyhow_Error) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: Error (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_Overflow_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: Overflow (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_destroy < > (ffi : * mut dpp_errors_non_consensus_error_NonConsensusError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod dpp_init_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_errors_dpp_init_error_DashPlatformProtocolInitError { SchemaDeserializationError (* mut ferment_example_platform :: custom :: serde_json :: serde_json_Error) , InvalidSchemaError (* mut std :: os :: raw :: c_char) , UnknownVersionMismatch { method : * mut std :: os :: raw :: c_char , known_versions : * mut crate :: fermented :: generics :: Vec_platform_version_version_protocol_version_FeatureVersion , received : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError > for dpp_errors_dpp_init_error_DashPlatformProtocolInitError { unsafe fn ffi_from_const (ffi : * const dpp_errors_dpp_init_error_DashPlatformProtocolInitError) -> dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: SchemaDeserializationError (o_0) => dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError :: SchemaDeserializationError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: InvalidSchemaError (o_0) => dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError :: InvalidSchemaError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: UnknownVersionMismatch { method , known_versions , received } => dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError :: UnknownVersionMismatch { method : ferment_interfaces :: FFIConversionFrom :: ffi_from (* method) , known_versions : ferment_interfaces :: FFIConversionFrom :: ffi_from (* known_versions) , received : ferment_interfaces :: FFIConversionFrom :: ffi_from (* received) } } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError > for dpp_errors_dpp_init_error_DashPlatformProtocolInitError { unsafe fn ffi_to_const (obj : dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError) -> * const dpp_errors_dpp_init_error_DashPlatformProtocolInitError { ferment_interfaces :: boxed (match obj { dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError :: SchemaDeserializationError (o_0) => dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: SchemaDeserializationError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError :: InvalidSchemaError (o_0) => dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: InvalidSchemaError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError :: UnknownVersionMismatch { method , known_versions , received } => dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: UnknownVersionMismatch { method : ferment_interfaces :: FFIConversionTo :: ffi_to (method) , known_versions : ferment_interfaces :: FFIConversionTo :: ffi_to (known_versions) , received : ferment_interfaces :: FFIConversionTo :: ffi_to (received) } , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError > for dpp_errors_dpp_init_error_DashPlatformProtocolInitError { unsafe fn destroy (ffi : * mut dpp_errors_dpp_init_error_DashPlatformProtocolInitError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_errors_dpp_init_error_DashPlatformProtocolInitError { fn drop (& mut self) { unsafe { match self { dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: SchemaDeserializationError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: InvalidSchemaError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < & str >> :: destroy (* o_0) ; } , dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: UnknownVersionMismatch { method , known_versions , received } => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* method) ; ; ferment_interfaces :: unbox_any (* known_versions) ; ; ; ferment_interfaces :: unbox_any (* received) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_init_error_DashPlatformProtocolInitError_SchemaDeserializationError_ctor (o_o_0 : * mut ferment_example_platform :: custom :: serde_json :: serde_json_Error) -> * mut dpp_errors_dpp_init_error_DashPlatformProtocolInitError { ferment_interfaces :: boxed (dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: SchemaDeserializationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_init_error_DashPlatformProtocolInitError_InvalidSchemaError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_dpp_init_error_DashPlatformProtocolInitError { ferment_interfaces :: boxed (dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: InvalidSchemaError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_init_error_DashPlatformProtocolInitError_UnknownVersionMismatch_ctor (method : * mut std :: os :: raw :: c_char , known_versions : * mut crate :: fermented :: generics :: Vec_platform_version_version_protocol_version_FeatureVersion , received : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut dpp_errors_dpp_init_error_DashPlatformProtocolInitError { ferment_interfaces :: boxed (dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: UnknownVersionMismatch { method , known_versions , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_init_error_DashPlatformProtocolInitError_destroy < > (ffi : * mut dpp_errors_dpp_init_error_DashPlatformProtocolInitError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod invalid_vector_size_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: errors :: invalid_vector_size_error :: InvalidVectorSizeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { pub expected_size : usize , pub actual_size : usize } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: invalid_vector_size_error :: InvalidVectorSizeError > for dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) -> dpp :: errors :: invalid_vector_size_error :: InvalidVectorSizeError { let ffi_ref = & * ffi ; dpp :: errors :: invalid_vector_size_error :: InvalidVectorSizeError { expected_size : ffi_ref . expected_size , actual_size : ffi_ref . actual_size } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: invalid_vector_size_error :: InvalidVectorSizeError > for dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { unsafe fn ffi_to_const (obj : dpp :: errors :: invalid_vector_size_error :: InvalidVectorSizeError) -> * const dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { ferment_interfaces :: boxed (dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { expected_size : obj . expected_size , actual_size : obj . actual_size }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: invalid_vector_size_error :: InvalidVectorSizeError > for dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { unsafe fn destroy (ffi : * mut dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_invalid_vector_size_error_InvalidVectorSizeError_ctor < > (expected_size : usize , actual_size : usize) -> * mut dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { ferment_interfaces :: boxed (dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { expected_size , actual_size }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_invalid_vector_size_error_InvalidVectorSizeError_destroy < > (ffi : * mut dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_invalid_vector_size_error_InvalidVectorSizeError_get_expected_size < > (obj : * const dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) -> usize { (* obj) . expected_size } # [no_mangle] pub unsafe extern "C" fn dpp_errors_invalid_vector_size_error_InvalidVectorSizeError_get_actual_size < > (obj : * const dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) -> usize { (* obj) . actual_size } # [no_mangle] pub unsafe extern "C" fn dpp_errors_invalid_vector_size_error_InvalidVectorSizeError_set_expected_size < > (obj : * mut dpp_errors_invalid_vector_size_error_InvalidVectorSizeError , value : usize) { (* obj) . expected_size = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_invalid_vector_size_error_InvalidVectorSizeError_set_actual_size < > (obj : * mut dpp_errors_invalid_vector_size_error_InvalidVectorSizeError , value : usize) { (* obj) . actual_size = value ; } } pub mod protocol_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: errors :: protocol_error :: ProtocolError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_errors_protocol_error_ProtocolError { IdentifierError (* mut std :: os :: raw :: c_char) , StringDecodeError (* mut std :: os :: raw :: c_char) , EmptyPublicKeyDataError , MaxEncodedBytesReachedError { max_size_kbytes : usize , size_hit : usize } , EncodingError (* mut std :: os :: raw :: c_char) , DecodingError (* mut std :: os :: raw :: c_char) , FileNotFound (* mut std :: os :: raw :: c_char) , UnsupportedVersionMismatch { method : * mut std :: os :: raw :: c_char , allowed_versions : * mut crate :: fermented :: generics :: Vec_platform_version_version_protocol_version_FeatureVersion , received : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } , UnknownVersionMismatch { method : * mut std :: os :: raw :: c_char , known_versions : * mut crate :: fermented :: generics :: Vec_platform_version_version_protocol_version_FeatureVersion , received : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } , CurrentProtocolVersionNotInitialized , UnknownVersionError (* mut std :: os :: raw :: c_char) , UnknownProtocolVersionError (* mut std :: os :: raw :: c_char) , NoProtocolVersionError , ParsingError (* mut std :: os :: raw :: c_char) , ParsingJsonError (* mut ferment_example_platform :: custom :: serde_json :: serde_json_Error) , Error (* mut ferment_example_platform :: custom :: anyhow :: anyhow_Error) , InvalidKeyContractBoundsError (* mut std :: os :: raw :: c_char) , UnknownStorageKeyRequirements (* mut std :: os :: raw :: c_char) , UnknownContestedIndexResolution (* mut std :: os :: raw :: c_char) , DataContractError (* mut crate :: fermented :: types :: dpp :: data_contract :: errors :: contract :: dpp_data_contract_errors_contract_DataContractError) , # [cfg (all (feature = "state-transitions" , feature = "validation"))] StateTransitionError (* mut crate :: fermented :: types :: dpp :: state_transition :: errors :: state_transition_error :: dpp_state_transition_errors_state_transition_error_StateTransitionError) , InvalidStateTransitionType (* mut std :: os :: raw :: c_char) , PlatformVersionError (* mut crate :: fermented :: types :: platform_version :: error :: platform_version_error_PlatformVersionError) , ConsensusError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: consensus_error :: dpp_errors_consensus_consensus_error_ConsensusError) , Document (* mut crate :: fermented :: types :: dpp :: document :: errors :: dpp_document_errors_DocumentError) , Generic (* mut std :: os :: raw :: c_char) , NotSupported (* mut std :: os :: raw :: c_char) , # [cfg (feature = "message-signing")] InvalidSigningKeyTypeError (* mut std :: os :: raw :: c_char) , # [cfg (any (feature = "state-transition-validation" , feature = "state-transition-signing"))] InvalidIdentityPublicKeyTypeError (* mut crate :: fermented :: types :: dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) , # [cfg (feature = "state-transition-validation")] StateTransitionIsNotSignedError (* mut crate :: fermented :: types :: dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError) , # [cfg (feature = "state-transition-validation")] PublicKeySecurityLevelNotMetError (* mut crate :: fermented :: types :: dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) , # [cfg (any (all (feature = "state-transitions" , feature = "validation") , feature = "state-transition-validation" , feature = "state-transition-signing" , feature = "state-transition-validation"))] WrongPublicKeyPurposeError (* mut crate :: fermented :: types :: dpp :: state_transition :: errors :: wrong_public_key_purpose_error :: dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) , # [cfg (feature = "state-transition-validation")] PublicKeyMismatchError (* mut crate :: fermented :: types :: dpp :: state_transition :: errors :: public_key_mismatch_error :: dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError) , # [cfg (feature = "state-transition-validation")] InvalidSignaturePublicKeyError (* mut crate :: fermented :: types :: dpp :: state_transition :: errors :: invalid_signature_public_key_error :: dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError) , NonConsensusError (* mut crate :: fermented :: types :: dpp :: errors :: non_consensus_error :: dpp_errors_non_consensus_error_NonConsensusError) , CompatibleProtocolVersionIsNotDefinedError (* mut crate :: fermented :: types :: dpp :: errors :: compatible_protocol_version_is_not_defined_error :: dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) , InvalidDocumentTypeError (* mut crate :: fermented :: types :: dpp :: data_contract :: errors :: invalid_document_type_error :: dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) , DataContractNotPresentError (* mut crate :: fermented :: types :: dpp :: data_contract :: errors :: data_contract_not_present_error :: dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError) , InvalidSignaturePublicKeySecurityLevelError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) , InvalidStateTransitionTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) , PublicKeyIsDisabledError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) , IdentityNotPresentError (* mut crate :: fermented :: types :: dpp :: data_contract :: errors :: identity_not_present_error :: dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError) , Overflow (* mut std :: os :: raw :: c_char) , DesiredKeyWithTypePurposeSecurityLevelMissing (* mut std :: os :: raw :: c_char) , ValueError (* mut crate :: fermented :: types :: platform_value :: error :: platform_value_error_Error) , PlatformSerializationError (* mut std :: os :: raw :: c_char) , PlatformDeserializationError (* mut std :: os :: raw :: c_char) , DashCoreError (* mut ferment_example_platform :: custom :: dashcore :: dashcore_consensus_encode_Error) , InvalidIdentityError { errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , raw_identity : * mut crate :: fermented :: types :: platform_value :: platform_value_Value } , VoteError (* mut std :: os :: raw :: c_char) , PublicKeyGenerationError (* mut std :: os :: raw :: c_char) , CorruptedCodeExecution (* mut std :: os :: raw :: c_char) , CorruptedSerialization (* mut std :: os :: raw :: c_char) , CriticalCorruptedCreditsCodeExecution (* mut std :: os :: raw :: c_char) , InvalidVectorSizeError (* mut crate :: fermented :: types :: dpp :: errors :: invalid_vector_size_error :: dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) , InvalidCBOR (* mut std :: os :: raw :: c_char) } impl ferment_interfaces :: FFIConversionFrom < dpp :: errors :: protocol_error :: ProtocolError > for dpp_errors_protocol_error_ProtocolError { unsafe fn ffi_from_const (ffi : * const dpp_errors_protocol_error_ProtocolError) -> dpp :: errors :: protocol_error :: ProtocolError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_protocol_error_ProtocolError :: IdentifierError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: IdentifierError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: StringDecodeError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: StringDecodeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: EmptyPublicKeyDataError => dpp :: errors :: protocol_error :: ProtocolError :: EmptyPublicKeyDataError , dpp_errors_protocol_error_ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes , size_hit } => dpp :: errors :: protocol_error :: ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes : * max_size_kbytes , size_hit : * size_hit } , dpp_errors_protocol_error_ProtocolError :: EncodingError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: EncodingError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: DecodingError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: DecodingError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: FileNotFound (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: FileNotFound (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: UnsupportedVersionMismatch { method , allowed_versions , received } => dpp :: errors :: protocol_error :: ProtocolError :: UnsupportedVersionMismatch { method : ferment_interfaces :: FFIConversionFrom :: ffi_from (* method) , allowed_versions : ferment_interfaces :: FFIConversionFrom :: ffi_from (* allowed_versions) , received : ferment_interfaces :: FFIConversionFrom :: ffi_from (* received) } , dpp_errors_protocol_error_ProtocolError :: UnknownVersionMismatch { method , known_versions , received } => dpp :: errors :: protocol_error :: ProtocolError :: UnknownVersionMismatch { method : ferment_interfaces :: FFIConversionFrom :: ffi_from (* method) , known_versions : ferment_interfaces :: FFIConversionFrom :: ffi_from (* known_versions) , received : ferment_interfaces :: FFIConversionFrom :: ffi_from (* received) } , dpp_errors_protocol_error_ProtocolError :: CurrentProtocolVersionNotInitialized => dpp :: errors :: protocol_error :: ProtocolError :: CurrentProtocolVersionNotInitialized , dpp_errors_protocol_error_ProtocolError :: UnknownVersionError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: UnknownVersionError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: UnknownProtocolVersionError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: UnknownProtocolVersionError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: NoProtocolVersionError => dpp :: errors :: protocol_error :: ProtocolError :: NoProtocolVersionError , dpp_errors_protocol_error_ProtocolError :: ParsingError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: ParsingError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: ParsingJsonError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: ParsingJsonError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: Error (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: Error (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidKeyContractBoundsError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidKeyContractBoundsError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: UnknownStorageKeyRequirements (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: UnknownStorageKeyRequirements (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: UnknownContestedIndexResolution (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: UnknownContestedIndexResolution (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: DataContractError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: DataContractError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , # [cfg (all (feature = "state-transitions" , feature = "validation"))] dpp_errors_protocol_error_ProtocolError :: StateTransitionError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: StateTransitionError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidStateTransitionType (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidStateTransitionType (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: PlatformVersionError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: PlatformVersionError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: ConsensusError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: ConsensusError (Box :: new (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0))) , dpp_errors_protocol_error_ProtocolError :: Document (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: Document (Box :: new (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0))) , dpp_errors_protocol_error_ProtocolError :: Generic (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: Generic (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: NotSupported (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: NotSupported (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , # [cfg (feature = "message-signing")] dpp_errors_protocol_error_ProtocolError :: InvalidSigningKeyTypeError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidSigningKeyTypeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , # [cfg (any (feature = "state-transition-validation" , feature = "state-transition-signing"))] dpp_errors_protocol_error_ProtocolError :: InvalidIdentityPublicKeyTypeError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidIdentityPublicKeyTypeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , # [cfg (feature = "state-transition-validation")] dpp_errors_protocol_error_ProtocolError :: StateTransitionIsNotSignedError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: StateTransitionIsNotSignedError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , # [cfg (feature = "state-transition-validation")] dpp_errors_protocol_error_ProtocolError :: PublicKeySecurityLevelNotMetError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: PublicKeySecurityLevelNotMetError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , # [cfg (any (all (feature = "state-transitions" , feature = "validation") , feature = "state-transition-validation" , feature = "state-transition-signing" , feature = "state-transition-validation"))] dpp_errors_protocol_error_ProtocolError :: WrongPublicKeyPurposeError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: WrongPublicKeyPurposeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , # [cfg (feature = "state-transition-validation")] dpp_errors_protocol_error_ProtocolError :: PublicKeyMismatchError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: PublicKeyMismatchError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , # [cfg (feature = "state-transition-validation")] dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeyError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidSignaturePublicKeyError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: NonConsensusError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: NonConsensusError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: CompatibleProtocolVersionIsNotDefinedError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: CompatibleProtocolVersionIsNotDefinedError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidDocumentTypeError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidDocumentTypeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: DataContractNotPresentError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: DataContractNotPresentError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeySecurityLevelError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidSignaturePublicKeySecurityLevelError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidStateTransitionTypeError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidStateTransitionTypeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: PublicKeyIsDisabledError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: PublicKeyIsDisabledError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: IdentityNotPresentError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: IdentityNotPresentError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: Overflow (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: Overflow (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: DesiredKeyWithTypePurposeSecurityLevelMissing (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: DesiredKeyWithTypePurposeSecurityLevelMissing (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: ValueError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: ValueError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: PlatformSerializationError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: PlatformSerializationError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: PlatformDeserializationError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: PlatformDeserializationError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: DashCoreError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: DashCoreError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidIdentityError { errors , raw_identity } => dpp :: errors :: protocol_error :: ProtocolError :: InvalidIdentityError { errors : ferment_interfaces :: FFIConversionFrom :: ffi_from (* errors) , raw_identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (* raw_identity) } , dpp_errors_protocol_error_ProtocolError :: VoteError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: VoteError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: PublicKeyGenerationError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: PublicKeyGenerationError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: CorruptedCodeExecution (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: CorruptedCodeExecution (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: CorruptedSerialization (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: CorruptedSerialization (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: CriticalCorruptedCreditsCodeExecution (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: CriticalCorruptedCreditsCodeExecution (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidVectorSizeError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidVectorSizeError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidCBOR (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidCBOR (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: errors :: protocol_error :: ProtocolError > for dpp_errors_protocol_error_ProtocolError { unsafe fn ffi_to_const (obj : dpp :: errors :: protocol_error :: ProtocolError) -> * const dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (match obj { dpp :: errors :: protocol_error :: ProtocolError :: IdentifierError (o_0) => dpp_errors_protocol_error_ProtocolError :: IdentifierError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: StringDecodeError (o_0) => dpp_errors_protocol_error_ProtocolError :: StringDecodeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: EmptyPublicKeyDataError => dpp_errors_protocol_error_ProtocolError :: EmptyPublicKeyDataError , dpp :: errors :: protocol_error :: ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes , size_hit } => dpp_errors_protocol_error_ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes : max_size_kbytes , size_hit : size_hit } , dpp :: errors :: protocol_error :: ProtocolError :: EncodingError (o_0) => dpp_errors_protocol_error_ProtocolError :: EncodingError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: DecodingError (o_0) => dpp_errors_protocol_error_ProtocolError :: DecodingError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: FileNotFound (o_0) => dpp_errors_protocol_error_ProtocolError :: FileNotFound (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: UnsupportedVersionMismatch { method , allowed_versions , received } => dpp_errors_protocol_error_ProtocolError :: UnsupportedVersionMismatch { method : ferment_interfaces :: FFIConversionTo :: ffi_to (method) , allowed_versions : ferment_interfaces :: FFIConversionTo :: ffi_to (allowed_versions) , received : ferment_interfaces :: FFIConversionTo :: ffi_to (received) } , dpp :: errors :: protocol_error :: ProtocolError :: UnknownVersionMismatch { method , known_versions , received } => dpp_errors_protocol_error_ProtocolError :: UnknownVersionMismatch { method : ferment_interfaces :: FFIConversionTo :: ffi_to (method) , known_versions : ferment_interfaces :: FFIConversionTo :: ffi_to (known_versions) , received : ferment_interfaces :: FFIConversionTo :: ffi_to (received) } , dpp :: errors :: protocol_error :: ProtocolError :: CurrentProtocolVersionNotInitialized => dpp_errors_protocol_error_ProtocolError :: CurrentProtocolVersionNotInitialized , dpp :: errors :: protocol_error :: ProtocolError :: UnknownVersionError (o_0) => dpp_errors_protocol_error_ProtocolError :: UnknownVersionError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: UnknownProtocolVersionError (o_0) => dpp_errors_protocol_error_ProtocolError :: UnknownProtocolVersionError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: NoProtocolVersionError => dpp_errors_protocol_error_ProtocolError :: NoProtocolVersionError , dpp :: errors :: protocol_error :: ProtocolError :: ParsingError (o_0) => dpp_errors_protocol_error_ProtocolError :: ParsingError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: ParsingJsonError (o_0) => dpp_errors_protocol_error_ProtocolError :: ParsingJsonError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: Error (o_0) => dpp_errors_protocol_error_ProtocolError :: Error (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidKeyContractBoundsError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidKeyContractBoundsError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: UnknownStorageKeyRequirements (o_0) => dpp_errors_protocol_error_ProtocolError :: UnknownStorageKeyRequirements (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: UnknownContestedIndexResolution (o_0) => dpp_errors_protocol_error_ProtocolError :: UnknownContestedIndexResolution (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: DataContractError (o_0) => dpp_errors_protocol_error_ProtocolError :: DataContractError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , # [cfg (all (feature = "state-transitions" , feature = "validation"))] dpp :: errors :: protocol_error :: ProtocolError :: StateTransitionError (o_0) => dpp_errors_protocol_error_ProtocolError :: StateTransitionError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidStateTransitionType (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidStateTransitionType (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: PlatformVersionError (o_0) => dpp_errors_protocol_error_ProtocolError :: PlatformVersionError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: ConsensusError (o_0) => dpp_errors_protocol_error_ProtocolError :: ConsensusError (ferment_interfaces :: FFIConversionTo :: ffi_to (* o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: Document (o_0) => dpp_errors_protocol_error_ProtocolError :: Document (ferment_interfaces :: FFIConversionTo :: ffi_to (* o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: Generic (o_0) => dpp_errors_protocol_error_ProtocolError :: Generic (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: NotSupported (o_0) => dpp_errors_protocol_error_ProtocolError :: NotSupported (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , # [cfg (feature = "message-signing")] dpp :: errors :: protocol_error :: ProtocolError :: InvalidSigningKeyTypeError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidSigningKeyTypeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , # [cfg (any (feature = "state-transition-validation" , feature = "state-transition-signing"))] dpp :: errors :: protocol_error :: ProtocolError :: InvalidIdentityPublicKeyTypeError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidIdentityPublicKeyTypeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , # [cfg (feature = "state-transition-validation")] dpp :: errors :: protocol_error :: ProtocolError :: StateTransitionIsNotSignedError (o_0) => dpp_errors_protocol_error_ProtocolError :: StateTransitionIsNotSignedError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , # [cfg (feature = "state-transition-validation")] dpp :: errors :: protocol_error :: ProtocolError :: PublicKeySecurityLevelNotMetError (o_0) => dpp_errors_protocol_error_ProtocolError :: PublicKeySecurityLevelNotMetError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , # [cfg (any (all (feature = "state-transitions" , feature = "validation") , feature = "state-transition-validation" , feature = "state-transition-signing" , feature = "state-transition-validation"))] dpp :: errors :: protocol_error :: ProtocolError :: WrongPublicKeyPurposeError (o_0) => dpp_errors_protocol_error_ProtocolError :: WrongPublicKeyPurposeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , # [cfg (feature = "state-transition-validation")] dpp :: errors :: protocol_error :: ProtocolError :: PublicKeyMismatchError (o_0) => dpp_errors_protocol_error_ProtocolError :: PublicKeyMismatchError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , # [cfg (feature = "state-transition-validation")] dpp :: errors :: protocol_error :: ProtocolError :: InvalidSignaturePublicKeyError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeyError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: NonConsensusError (o_0) => dpp_errors_protocol_error_ProtocolError :: NonConsensusError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: CompatibleProtocolVersionIsNotDefinedError (o_0) => dpp_errors_protocol_error_ProtocolError :: CompatibleProtocolVersionIsNotDefinedError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidDocumentTypeError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidDocumentTypeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: DataContractNotPresentError (o_0) => dpp_errors_protocol_error_ProtocolError :: DataContractNotPresentError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidSignaturePublicKeySecurityLevelError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeySecurityLevelError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidStateTransitionTypeError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidStateTransitionTypeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: PublicKeyIsDisabledError (o_0) => dpp_errors_protocol_error_ProtocolError :: PublicKeyIsDisabledError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: IdentityNotPresentError (o_0) => dpp_errors_protocol_error_ProtocolError :: IdentityNotPresentError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: Overflow (o_0) => dpp_errors_protocol_error_ProtocolError :: Overflow (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: DesiredKeyWithTypePurposeSecurityLevelMissing (o_0) => dpp_errors_protocol_error_ProtocolError :: DesiredKeyWithTypePurposeSecurityLevelMissing (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: ValueError (o_0) => dpp_errors_protocol_error_ProtocolError :: ValueError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: PlatformSerializationError (o_0) => dpp_errors_protocol_error_ProtocolError :: PlatformSerializationError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: PlatformDeserializationError (o_0) => dpp_errors_protocol_error_ProtocolError :: PlatformDeserializationError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: DashCoreError (o_0) => dpp_errors_protocol_error_ProtocolError :: DashCoreError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidIdentityError { errors , raw_identity } => dpp_errors_protocol_error_ProtocolError :: InvalidIdentityError { errors : ferment_interfaces :: FFIConversionTo :: ffi_to (errors) , raw_identity : ferment_interfaces :: FFIConversionTo :: ffi_to (raw_identity) } , dpp :: errors :: protocol_error :: ProtocolError :: VoteError (o_0) => dpp_errors_protocol_error_ProtocolError :: VoteError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: PublicKeyGenerationError (o_0) => dpp_errors_protocol_error_ProtocolError :: PublicKeyGenerationError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: CorruptedCodeExecution (o_0) => dpp_errors_protocol_error_ProtocolError :: CorruptedCodeExecution (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: CorruptedSerialization (o_0) => dpp_errors_protocol_error_ProtocolError :: CorruptedSerialization (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: CriticalCorruptedCreditsCodeExecution (o_0) => dpp_errors_protocol_error_ProtocolError :: CriticalCorruptedCreditsCodeExecution (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidVectorSizeError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidVectorSizeError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidCBOR (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidCBOR (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: errors :: protocol_error :: ProtocolError > for dpp_errors_protocol_error_ProtocolError { unsafe fn destroy (ffi : * mut dpp_errors_protocol_error_ProtocolError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_errors_protocol_error_ProtocolError { fn drop (& mut self) { unsafe { match self { dpp_errors_protocol_error_ProtocolError :: IdentifierError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: StringDecodeError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: EmptyPublicKeyDataError => { } , dpp_errors_protocol_error_ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes , size_hit } => { ; ; ; } , dpp_errors_protocol_error_ProtocolError :: EncodingError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: DecodingError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: FileNotFound (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: UnsupportedVersionMismatch { method , allowed_versions , received } => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* method) ; ; ferment_interfaces :: unbox_any (* allowed_versions) ; ; ; ferment_interfaces :: unbox_any (* received) ; ; } , dpp_errors_protocol_error_ProtocolError :: UnknownVersionMismatch { method , known_versions , received } => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* method) ; ; ferment_interfaces :: unbox_any (* known_versions) ; ; ; ferment_interfaces :: unbox_any (* received) ; ; } , dpp_errors_protocol_error_ProtocolError :: CurrentProtocolVersionNotInitialized => { } , dpp_errors_protocol_error_ProtocolError :: UnknownVersionError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: UnknownProtocolVersionError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: NoProtocolVersionError => { } , dpp_errors_protocol_error_ProtocolError :: ParsingError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: ParsingJsonError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_protocol_error_ProtocolError :: Error (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_protocol_error_ProtocolError :: InvalidKeyContractBoundsError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: UnknownStorageKeyRequirements (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: UnknownContestedIndexResolution (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: DataContractError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , # [cfg (all (feature = "state-transitions" , feature = "validation"))] dpp_errors_protocol_error_ProtocolError :: StateTransitionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_protocol_error_ProtocolError :: InvalidStateTransitionType (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: PlatformVersionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_protocol_error_ProtocolError :: ConsensusError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_protocol_error_ProtocolError :: Document (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_protocol_error_ProtocolError :: Generic (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: NotSupported (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , # [cfg (feature = "message-signing")] dpp_errors_protocol_error_ProtocolError :: InvalidSigningKeyTypeError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , # [cfg (any (feature = "state-transition-validation" , feature = "state-transition-signing"))] dpp_errors_protocol_error_ProtocolError :: InvalidIdentityPublicKeyTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , # [cfg (feature = "state-transition-validation")] dpp_errors_protocol_error_ProtocolError :: StateTransitionIsNotSignedError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , # [cfg (feature = "state-transition-validation")] dpp_errors_protocol_error_ProtocolError :: PublicKeySecurityLevelNotMetError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , # [cfg (any (all (feature = "state-transitions" , feature = "validation") , feature = "state-transition-validation" , feature = "state-transition-signing" , feature = "state-transition-validation"))] dpp_errors_protocol_error_ProtocolError :: WrongPublicKeyPurposeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , # [cfg (feature = "state-transition-validation")] dpp_errors_protocol_error_ProtocolError :: PublicKeyMismatchError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , # [cfg (feature = "state-transition-validation")] dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeyError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_protocol_error_ProtocolError :: NonConsensusError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_protocol_error_ProtocolError :: CompatibleProtocolVersionIsNotDefinedError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_protocol_error_ProtocolError :: InvalidDocumentTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_protocol_error_ProtocolError :: DataContractNotPresentError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeySecurityLevelError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_protocol_error_ProtocolError :: InvalidStateTransitionTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_protocol_error_ProtocolError :: PublicKeyIsDisabledError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_protocol_error_ProtocolError :: IdentityNotPresentError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_protocol_error_ProtocolError :: Overflow (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < & str >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: DesiredKeyWithTypePurposeSecurityLevelMissing (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: ValueError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_protocol_error_ProtocolError :: PlatformSerializationError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: PlatformDeserializationError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: DashCoreError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_protocol_error_ProtocolError :: InvalidIdentityError { errors , raw_identity } => { ferment_interfaces :: unbox_any (* errors) ; ; ; ferment_interfaces :: unbox_any (* raw_identity) ; ; } , dpp_errors_protocol_error_ProtocolError :: VoteError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: PublicKeyGenerationError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: CorruptedCodeExecution (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: CorruptedSerialization (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: CriticalCorruptedCreditsCodeExecution (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: InvalidVectorSizeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_errors_protocol_error_ProtocolError :: InvalidCBOR (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_IdentifierError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: IdentifierError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_StringDecodeError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: StringDecodeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_EmptyPublicKeyDataError_ctor () -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: EmptyPublicKeyDataError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_MaxEncodedBytesReachedError_ctor (max_size_kbytes : usize , size_hit : usize) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes , size_hit }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_EncodingError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: EncodingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_DecodingError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: DecodingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_FileNotFound_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: FileNotFound (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_UnsupportedVersionMismatch_ctor (method : * mut std :: os :: raw :: c_char , allowed_versions : * mut crate :: fermented :: generics :: Vec_platform_version_version_protocol_version_FeatureVersion , received : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: UnsupportedVersionMismatch { method , allowed_versions , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_UnknownVersionMismatch_ctor (method : * mut std :: os :: raw :: c_char , known_versions : * mut crate :: fermented :: generics :: Vec_platform_version_version_protocol_version_FeatureVersion , received : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: UnknownVersionMismatch { method , known_versions , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_CurrentProtocolVersionNotInitialized_ctor () -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: CurrentProtocolVersionNotInitialized { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_UnknownVersionError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: UnknownVersionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_UnknownProtocolVersionError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: UnknownProtocolVersionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_NoProtocolVersionError_ctor () -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: NoProtocolVersionError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_ParsingError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: ParsingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_ParsingJsonError_ctor (o_o_0 : * mut ferment_example_platform :: custom :: serde_json :: serde_json_Error) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: ParsingJsonError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_Error_ctor (o_o_0 : * mut ferment_example_platform :: custom :: anyhow :: anyhow_Error) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: Error (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidKeyContractBoundsError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidKeyContractBoundsError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_UnknownStorageKeyRequirements_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: UnknownStorageKeyRequirements (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_UnknownContestedIndexResolution_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: UnknownContestedIndexResolution (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_DataContractError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: errors :: contract :: dpp_data_contract_errors_contract_DataContractError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: DataContractError (o_o_0)) } # [cfg (all (feature = "state-transitions" , feature = "validation"))] # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_StateTransitionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: errors :: state_transition_error :: dpp_state_transition_errors_state_transition_error_StateTransitionError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: StateTransitionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidStateTransitionType_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidStateTransitionType (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PlatformVersionError_ctor (o_o_0 : * mut crate :: fermented :: types :: platform_version :: error :: platform_version_error_PlatformVersionError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: PlatformVersionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_ConsensusError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: consensus_error :: dpp_errors_consensus_consensus_error_ConsensusError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: ConsensusError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_Document_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: document :: errors :: dpp_document_errors_DocumentError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: Document (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_Generic_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: Generic (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_NotSupported_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: NotSupported (o_o_0)) } # [cfg (feature = "message-signing")] # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidSigningKeyTypeError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidSigningKeyTypeError (o_o_0)) } # [cfg (any (feature = "state-transition-validation" , feature = "state-transition-signing"))] # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidIdentityPublicKeyTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidIdentityPublicKeyTypeError (o_o_0)) } # [cfg (feature = "state-transition-validation")] # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_StateTransitionIsNotSignedError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: StateTransitionIsNotSignedError (o_o_0)) } # [cfg (feature = "state-transition-validation")] # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PublicKeySecurityLevelNotMetError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: PublicKeySecurityLevelNotMetError (o_o_0)) } # [cfg (any (all (feature = "state-transitions" , feature = "validation") , feature = "state-transition-validation" , feature = "state-transition-signing" , feature = "state-transition-validation"))] # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_WrongPublicKeyPurposeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: errors :: wrong_public_key_purpose_error :: dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: WrongPublicKeyPurposeError (o_o_0)) } # [cfg (feature = "state-transition-validation")] # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PublicKeyMismatchError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: errors :: public_key_mismatch_error :: dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: PublicKeyMismatchError (o_o_0)) } # [cfg (feature = "state-transition-validation")] # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidSignaturePublicKeyError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: errors :: invalid_signature_public_key_error :: dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeyError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_NonConsensusError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: non_consensus_error :: dpp_errors_non_consensus_error_NonConsensusError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: NonConsensusError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_CompatibleProtocolVersionIsNotDefinedError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: compatible_protocol_version_is_not_defined_error :: dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: CompatibleProtocolVersionIsNotDefinedError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidDocumentTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: errors :: invalid_document_type_error :: dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidDocumentTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_DataContractNotPresentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: errors :: data_contract_not_present_error :: dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: DataContractNotPresentError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidSignaturePublicKeySecurityLevelError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeySecurityLevelError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidStateTransitionTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidStateTransitionTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PublicKeyIsDisabledError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: PublicKeyIsDisabledError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_IdentityNotPresentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: errors :: identity_not_present_error :: dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: IdentityNotPresentError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_Overflow_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: Overflow (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_DesiredKeyWithTypePurposeSecurityLevelMissing_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: DesiredKeyWithTypePurposeSecurityLevelMissing (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_ValueError_ctor (o_o_0 : * mut crate :: fermented :: types :: platform_value :: error :: platform_value_error_Error) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: ValueError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PlatformSerializationError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: PlatformSerializationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PlatformDeserializationError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: PlatformDeserializationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_DashCoreError_ctor (o_o_0 : * mut ferment_example_platform :: custom :: dashcore :: dashcore_consensus_encode_Error) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: DashCoreError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidIdentityError_ctor (errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , raw_identity : * mut crate :: fermented :: types :: platform_value :: platform_value_Value) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidIdentityError { errors , raw_identity }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_VoteError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: VoteError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PublicKeyGenerationError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: PublicKeyGenerationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_CorruptedCodeExecution_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: CorruptedCodeExecution (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_CorruptedSerialization_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: CorruptedSerialization (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_CriticalCorruptedCreditsCodeExecution_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: CriticalCorruptedCreditsCodeExecution (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidVectorSizeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: invalid_vector_size_error :: dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidVectorSizeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidCBOR_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidCBOR (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_destroy < > (ffi : * mut dpp_errors_protocol_error_ProtocolError) { ferment_interfaces :: unbox_any (ffi) ; } } } pub mod balances { use crate as ferment_example_platform ; pub mod credits { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: balances :: credits :: Credits`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_balances_credits_Credits (u64) ; impl ferment_interfaces :: FFIConversionFrom < dpp :: balances :: credits :: Credits > for dpp_balances_credits_Credits { unsafe fn ffi_from_const (ffi : * const dpp_balances_credits_Credits) -> dpp :: balances :: credits :: Credits { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment_interfaces :: FFIConversionTo < dpp :: balances :: credits :: Credits > for dpp_balances_credits_Credits { unsafe fn ffi_to_const (obj : dpp :: balances :: credits :: Credits) -> * const dpp_balances_credits_Credits { ferment_interfaces :: boxed (dpp_balances_credits_Credits (obj)) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: balances :: credits :: Credits > for dpp_balances_credits_Credits { unsafe fn destroy (ffi : * mut dpp_balances_credits_Credits) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_balances_credits_Credits { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_Credits_ctor < > (o_0 : u64) -> * mut dpp_balances_credits_Credits { ferment_interfaces :: boxed (dpp_balances_credits_Credits (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_Credits_destroy < > (ffi : * mut dpp_balances_credits_Credits) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_Credits_get_0 < > (obj : * const dpp_balances_credits_Credits) -> u64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_Credits_set_0 < > (obj : * mut dpp_balances_credits_Credits , value : u64) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`dpp :: balances :: credits :: SignedCredits`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_balances_credits_SignedCredits (i64) ; impl ferment_interfaces :: FFIConversionFrom < dpp :: balances :: credits :: SignedCredits > for dpp_balances_credits_SignedCredits { unsafe fn ffi_from_const (ffi : * const dpp_balances_credits_SignedCredits) -> dpp :: balances :: credits :: SignedCredits { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment_interfaces :: FFIConversionTo < dpp :: balances :: credits :: SignedCredits > for dpp_balances_credits_SignedCredits { unsafe fn ffi_to_const (obj : dpp :: balances :: credits :: SignedCredits) -> * const dpp_balances_credits_SignedCredits { ferment_interfaces :: boxed (dpp_balances_credits_SignedCredits (obj)) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: balances :: credits :: SignedCredits > for dpp_balances_credits_SignedCredits { unsafe fn destroy (ffi : * mut dpp_balances_credits_SignedCredits) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_balances_credits_SignedCredits { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_SignedCredits_ctor < > (o_0 : i64) -> * mut dpp_balances_credits_SignedCredits { ferment_interfaces :: boxed (dpp_balances_credits_SignedCredits (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_SignedCredits_destroy < > (ffi : * mut dpp_balances_credits_SignedCredits) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_SignedCredits_get_0 < > (obj : * const dpp_balances_credits_SignedCredits) -> i64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_SignedCredits_set_0 < > (obj : * mut dpp_balances_credits_SignedCredits , value : i64) { (* obj) . 0 = value ; } } } pub mod prelude { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: prelude :: IdentityNonce`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_prelude_IdentityNonce (u64) ; impl ferment_interfaces :: FFIConversionFrom < dpp :: prelude :: IdentityNonce > for dpp_prelude_IdentityNonce { unsafe fn ffi_from_const (ffi : * const dpp_prelude_IdentityNonce) -> dpp :: prelude :: IdentityNonce { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment_interfaces :: FFIConversionTo < dpp :: prelude :: IdentityNonce > for dpp_prelude_IdentityNonce { unsafe fn ffi_to_const (obj : dpp :: prelude :: IdentityNonce) -> * const dpp_prelude_IdentityNonce { ferment_interfaces :: boxed (dpp_prelude_IdentityNonce (obj)) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: prelude :: IdentityNonce > for dpp_prelude_IdentityNonce { unsafe fn destroy (ffi : * mut dpp_prelude_IdentityNonce) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_prelude_IdentityNonce { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_IdentityNonce_ctor < > (o_0 : u64) -> * mut dpp_prelude_IdentityNonce { ferment_interfaces :: boxed (dpp_prelude_IdentityNonce (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_IdentityNonce_destroy < > (ffi : * mut dpp_prelude_IdentityNonce) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_IdentityNonce_get_0 < > (obj : * const dpp_prelude_IdentityNonce) -> u64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_IdentityNonce_set_0 < > (obj : * mut dpp_prelude_IdentityNonce , value : u64) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`dpp :: prelude :: Revision`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_prelude_Revision (u64) ; impl ferment_interfaces :: FFIConversionFrom < dpp :: prelude :: Revision > for dpp_prelude_Revision { unsafe fn ffi_from_const (ffi : * const dpp_prelude_Revision) -> dpp :: prelude :: Revision { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment_interfaces :: FFIConversionTo < dpp :: prelude :: Revision > for dpp_prelude_Revision { unsafe fn ffi_to_const (obj : dpp :: prelude :: Revision) -> * const dpp_prelude_Revision { ferment_interfaces :: boxed (dpp_prelude_Revision (obj)) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: prelude :: Revision > for dpp_prelude_Revision { unsafe fn destroy (ffi : * mut dpp_prelude_Revision) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_prelude_Revision { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_Revision_ctor < > (o_0 : u64) -> * mut dpp_prelude_Revision { ferment_interfaces :: boxed (dpp_prelude_Revision (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_Revision_destroy < > (ffi : * mut dpp_prelude_Revision) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_Revision_get_0 < > (obj : * const dpp_prelude_Revision) -> u64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_Revision_set_0 < > (obj : * mut dpp_prelude_Revision , value : u64) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`dpp :: prelude :: BlockHeight`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_prelude_BlockHeight (u64) ; impl ferment_interfaces :: FFIConversionFrom < dpp :: prelude :: BlockHeight > for dpp_prelude_BlockHeight { unsafe fn ffi_from_const (ffi : * const dpp_prelude_BlockHeight) -> dpp :: prelude :: BlockHeight { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment_interfaces :: FFIConversionTo < dpp :: prelude :: BlockHeight > for dpp_prelude_BlockHeight { unsafe fn ffi_to_const (obj : dpp :: prelude :: BlockHeight) -> * const dpp_prelude_BlockHeight { ferment_interfaces :: boxed (dpp_prelude_BlockHeight (obj)) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: prelude :: BlockHeight > for dpp_prelude_BlockHeight { unsafe fn destroy (ffi : * mut dpp_prelude_BlockHeight) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_prelude_BlockHeight { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_BlockHeight_ctor < > (o_0 : u64) -> * mut dpp_prelude_BlockHeight { ferment_interfaces :: boxed (dpp_prelude_BlockHeight (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_BlockHeight_destroy < > (ffi : * mut dpp_prelude_BlockHeight) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_BlockHeight_get_0 < > (obj : * const dpp_prelude_BlockHeight) -> u64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_BlockHeight_set_0 < > (obj : * mut dpp_prelude_BlockHeight , value : u64) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`dpp :: prelude :: TimestampMillis`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_prelude_TimestampMillis (u64) ; impl ferment_interfaces :: FFIConversionFrom < dpp :: prelude :: TimestampMillis > for dpp_prelude_TimestampMillis { unsafe fn ffi_from_const (ffi : * const dpp_prelude_TimestampMillis) -> dpp :: prelude :: TimestampMillis { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment_interfaces :: FFIConversionTo < dpp :: prelude :: TimestampMillis > for dpp_prelude_TimestampMillis { unsafe fn ffi_to_const (obj : dpp :: prelude :: TimestampMillis) -> * const dpp_prelude_TimestampMillis { ferment_interfaces :: boxed (dpp_prelude_TimestampMillis (obj)) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: prelude :: TimestampMillis > for dpp_prelude_TimestampMillis { unsafe fn destroy (ffi : * mut dpp_prelude_TimestampMillis) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_prelude_TimestampMillis { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_TimestampMillis_ctor < > (o_0 : u64) -> * mut dpp_prelude_TimestampMillis { ferment_interfaces :: boxed (dpp_prelude_TimestampMillis (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_TimestampMillis_destroy < > (ffi : * mut dpp_prelude_TimestampMillis) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_TimestampMillis_get_0 < > (obj : * const dpp_prelude_TimestampMillis) -> u64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_TimestampMillis_set_0 < > (obj : * mut dpp_prelude_TimestampMillis , value : u64) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`dpp :: prelude :: CoreBlockHeight`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_prelude_CoreBlockHeight (u32) ; impl ferment_interfaces :: FFIConversionFrom < dpp :: prelude :: CoreBlockHeight > for dpp_prelude_CoreBlockHeight { unsafe fn ffi_from_const (ffi : * const dpp_prelude_CoreBlockHeight) -> dpp :: prelude :: CoreBlockHeight { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment_interfaces :: FFIConversionTo < dpp :: prelude :: CoreBlockHeight > for dpp_prelude_CoreBlockHeight { unsafe fn ffi_to_const (obj : dpp :: prelude :: CoreBlockHeight) -> * const dpp_prelude_CoreBlockHeight { ferment_interfaces :: boxed (dpp_prelude_CoreBlockHeight (obj)) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: prelude :: CoreBlockHeight > for dpp_prelude_CoreBlockHeight { unsafe fn destroy (ffi : * mut dpp_prelude_CoreBlockHeight) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_prelude_CoreBlockHeight { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_CoreBlockHeight_ctor < > (o_0 : u32) -> * mut dpp_prelude_CoreBlockHeight { ferment_interfaces :: boxed (dpp_prelude_CoreBlockHeight (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_CoreBlockHeight_destroy < > (ffi : * mut dpp_prelude_CoreBlockHeight) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_CoreBlockHeight_get_0 < > (obj : * const dpp_prelude_CoreBlockHeight) -> u32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_CoreBlockHeight_set_0 < > (obj : * mut dpp_prelude_CoreBlockHeight , value : u32) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`dpp :: prelude :: UserFeeIncrease`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_prelude_UserFeeIncrease (u16) ; impl ferment_interfaces :: FFIConversionFrom < dpp :: prelude :: UserFeeIncrease > for dpp_prelude_UserFeeIncrease { unsafe fn ffi_from_const (ffi : * const dpp_prelude_UserFeeIncrease) -> dpp :: prelude :: UserFeeIncrease { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment_interfaces :: FFIConversionTo < dpp :: prelude :: UserFeeIncrease > for dpp_prelude_UserFeeIncrease { unsafe fn ffi_to_const (obj : dpp :: prelude :: UserFeeIncrease) -> * const dpp_prelude_UserFeeIncrease { ferment_interfaces :: boxed (dpp_prelude_UserFeeIncrease (obj)) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: prelude :: UserFeeIncrease > for dpp_prelude_UserFeeIncrease { unsafe fn destroy (ffi : * mut dpp_prelude_UserFeeIncrease) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_prelude_UserFeeIncrease { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_UserFeeIncrease_ctor < > (o_0 : u16) -> * mut dpp_prelude_UserFeeIncrease { ferment_interfaces :: boxed (dpp_prelude_UserFeeIncrease (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_UserFeeIncrease_destroy < > (ffi : * mut dpp_prelude_UserFeeIncrease) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_UserFeeIncrease_get_0 < > (obj : * const dpp_prelude_UserFeeIncrease) -> u16 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_UserFeeIncrease_set_0 < > (obj : * mut dpp_prelude_UserFeeIncrease , value : u16) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`dpp :: prelude :: TimestampIncluded`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_prelude_TimestampIncluded (bool) ; impl ferment_interfaces :: FFIConversionFrom < dpp :: prelude :: TimestampIncluded > for dpp_prelude_TimestampIncluded { unsafe fn ffi_from_const (ffi : * const dpp_prelude_TimestampIncluded) -> dpp :: prelude :: TimestampIncluded { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment_interfaces :: FFIConversionTo < dpp :: prelude :: TimestampIncluded > for dpp_prelude_TimestampIncluded { unsafe fn ffi_to_const (obj : dpp :: prelude :: TimestampIncluded) -> * const dpp_prelude_TimestampIncluded { ferment_interfaces :: boxed (dpp_prelude_TimestampIncluded (obj)) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: prelude :: TimestampIncluded > for dpp_prelude_TimestampIncluded { unsafe fn destroy (ffi : * mut dpp_prelude_TimestampIncluded) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_prelude_TimestampIncluded { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_TimestampIncluded_ctor < > (o_0 : bool) -> * mut dpp_prelude_TimestampIncluded { ferment_interfaces :: boxed (dpp_prelude_TimestampIncluded (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_TimestampIncluded_destroy < > (ffi : * mut dpp_prelude_TimestampIncluded) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_TimestampIncluded_get_0 < > (obj : * const dpp_prelude_TimestampIncluded) -> bool { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_TimestampIncluded_set_0 < > (obj : * mut dpp_prelude_TimestampIncluded , value : bool) { (* obj) . 0 = value ; } } pub mod identity { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: identity :: v0 :: IdentityV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_v0_IdentityV0 { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey , pub balance : u64 , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision } impl ferment_interfaces :: FFIConversionFrom < dpp :: identity :: v0 :: IdentityV0 > for dpp_identity_v0_IdentityV0 { unsafe fn ffi_from_const (ffi : * const dpp_identity_v0_IdentityV0) -> dpp :: identity :: v0 :: IdentityV0 { let ffi_ref = & * ffi ; dpp :: identity :: v0 :: IdentityV0 { id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . id) , public_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . public_keys) , balance : ffi_ref . balance , revision : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . revision) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: identity :: v0 :: IdentityV0 > for dpp_identity_v0_IdentityV0 { unsafe fn ffi_to_const (obj : dpp :: identity :: v0 :: IdentityV0) -> * const dpp_identity_v0_IdentityV0 { ferment_interfaces :: boxed (dpp_identity_v0_IdentityV0 { id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . id) , public_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . public_keys) , balance : obj . balance , revision : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . revision) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: identity :: v0 :: IdentityV0 > for dpp_identity_v0_IdentityV0 { unsafe fn destroy (ffi : * mut dpp_identity_v0_IdentityV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_v0_IdentityV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; ferment_interfaces :: unbox_any (ffi_ref . public_keys) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . revision) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_ctor < > (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey , balance : u64 , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) -> * mut dpp_identity_v0_IdentityV0 { ferment_interfaces :: boxed (dpp_identity_v0_IdentityV0 { id , public_keys , balance , revision }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_destroy < > (ffi : * mut dpp_identity_v0_IdentityV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_get_id < > (obj : * const dpp_identity_v0_IdentityV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_get_public_keys < > (obj : * const dpp_identity_v0_IdentityV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { (* obj) . public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_get_balance < > (obj : * const dpp_identity_v0_IdentityV0) -> u64 { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_get_revision < > (obj : * const dpp_identity_v0_IdentityV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_set_id < > (obj : * mut dpp_identity_v0_IdentityV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_set_public_keys < > (obj : * mut dpp_identity_v0_IdentityV0 , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey) { (* obj) . public_keys = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_set_balance < > (obj : * mut dpp_identity_v0_IdentityV0 , value : u64) { (* obj) . balance = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_set_revision < > (obj : * mut dpp_identity_v0_IdentityV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . revision = value ; } pub mod conversion { use crate as ferment_example_platform ; } pub mod public_key_serialization { use crate as ferment_example_platform ; } } pub mod fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } pub mod accessors { use crate as ferment_example_platform ; } pub mod identity_public_key { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: identity :: identity_public_key :: IdentityPublicKey`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_identity_identity_public_key_IdentityPublicKey { V0 (* mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: v0 :: dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: identity :: identity_public_key :: IdentityPublicKey > for dpp_identity_identity_public_key_IdentityPublicKey { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_IdentityPublicKey) -> dpp :: identity :: identity_public_key :: IdentityPublicKey { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_public_key_IdentityPublicKey :: V0 (o_0) => dpp :: identity :: identity_public_key :: IdentityPublicKey :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: identity :: identity_public_key :: IdentityPublicKey > for dpp_identity_identity_public_key_IdentityPublicKey { unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: IdentityPublicKey) -> * const dpp_identity_identity_public_key_IdentityPublicKey { ferment_interfaces :: boxed (match obj { dpp :: identity :: identity_public_key :: IdentityPublicKey :: V0 (o_0) => dpp_identity_identity_public_key_IdentityPublicKey :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: identity :: identity_public_key :: IdentityPublicKey > for dpp_identity_identity_public_key_IdentityPublicKey { unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_IdentityPublicKey) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_identity_identity_public_key_IdentityPublicKey { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_public_key_IdentityPublicKey :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_IdentityPublicKey_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: v0 :: dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut dpp_identity_identity_public_key_IdentityPublicKey { ferment_interfaces :: boxed (dpp_identity_identity_public_key_IdentityPublicKey :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_IdentityPublicKey_destroy < > (ffi : * mut dpp_identity_identity_public_key_IdentityPublicKey) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`dpp :: identity :: identity_public_key :: KeyCount`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_identity_public_key_KeyCount (* mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) ; impl ferment_interfaces :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyCount > for dpp_identity_identity_public_key_KeyCount { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_KeyCount) -> dpp :: identity :: identity_public_key :: KeyCount { let ffi_ref = & * ffi ; ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . 0) } } impl ferment_interfaces :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyCount > for dpp_identity_identity_public_key_KeyCount { unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: KeyCount) -> * const dpp_identity_identity_public_key_KeyCount { ferment_interfaces :: boxed (dpp_identity_identity_public_key_KeyCount (ferment_interfaces :: FFIConversionTo :: ffi_to (obj))) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: identity :: identity_public_key :: KeyCount > for dpp_identity_identity_public_key_KeyCount { unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_KeyCount) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_identity_public_key_KeyCount { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyCount_ctor < > (o_0 : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_identity_identity_public_key_KeyCount { ferment_interfaces :: boxed (dpp_identity_identity_public_key_KeyCount (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyCount_destroy < > (ffi : * mut dpp_identity_identity_public_key_KeyCount) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyCount_get_0 < > (obj : * const dpp_identity_identity_public_key_KeyCount) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyCount_set_0 < > (obj : * mut dpp_identity_identity_public_key_KeyCount , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`dpp :: identity :: identity_public_key :: KeyID`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_identity_public_key_KeyID (u32) ; impl ferment_interfaces :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID > for dpp_identity_identity_public_key_KeyID { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_KeyID) -> dpp :: identity :: identity_public_key :: KeyID { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment_interfaces :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID > for dpp_identity_identity_public_key_KeyID { unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: KeyID) -> * const dpp_identity_identity_public_key_KeyID { ferment_interfaces :: boxed (dpp_identity_identity_public_key_KeyID (obj)) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: identity :: identity_public_key :: KeyID > for dpp_identity_identity_public_key_KeyID { unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_KeyID) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_identity_public_key_KeyID { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyID_ctor < > (o_0 : u32) -> * mut dpp_identity_identity_public_key_KeyID { ferment_interfaces :: boxed (dpp_identity_identity_public_key_KeyID (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyID_destroy < > (ffi : * mut dpp_identity_identity_public_key_KeyID) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyID_get_0 < > (obj : * const dpp_identity_identity_public_key_KeyID) -> u32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyID_set_0 < > (obj : * mut dpp_identity_identity_public_key_KeyID , value : u32) { (* obj) . 0 = value ; } pub mod v0 { use crate as ferment_example_platform ; pub mod conversion { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { pub id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , pub security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub contract_bounds : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds , pub key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType , pub read_only : bool , pub data : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , pub disabled_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis } impl ferment_interfaces :: FFIConversionFrom < dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0 > for dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0 { let ffi_ref = & * ffi ; dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0 { id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . id) , purpose : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . purpose) , security_level : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . security_level) , contract_bounds : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . contract_bounds) , key_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . key_type) , read_only : ffi_ref . read_only , data : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data) , disabled_at : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . disabled_at) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0 > for dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0) -> * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { ferment_interfaces :: boxed (dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . id) , purpose : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . purpose) , security_level : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . security_level) , contract_bounds : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . contract_bounds) , key_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . key_type) , read_only : obj . read_only , data : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data) , disabled_at : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . disabled_at) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0 > for dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; ferment_interfaces :: unbox_any (ffi_ref . purpose) ; ; ferment_interfaces :: unbox_any (ffi_ref . security_level) ; ; ferment_interfaces :: unbox_any_opt (ffi_ref . contract_bounds) ; ferment_interfaces :: unbox_any (ffi_ref . key_type) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . data) ; ; ferment_interfaces :: unbox_any_opt (ffi_ref . disabled_at) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_ctor < > (id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , contract_bounds : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds , key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType , read_only : bool , data : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , disabled_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis) -> * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { ferment_interfaces :: boxed (dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { id , purpose , security_level , contract_bounds , key_type , read_only , data , disabled_at }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_destroy < > (ffi : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_id < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_purpose < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . purpose } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_security_level < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . security_level } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_contract_bounds < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds { (* obj) . contract_bounds } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_key_type < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType { (* obj) . key_type } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_read_only < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> bool { (* obj) . read_only } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_data < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . data } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_disabled_at < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis { (* obj) . disabled_at } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_id < > (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_purpose < > (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) { (* obj) . purpose = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_security_level < > (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . security_level = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_contract_bounds < > (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds) { (* obj) . contract_bounds = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_key_type < > (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType) { (* obj) . key_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_read_only < > (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : bool) { (* obj) . read_only = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_data < > (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . data = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_disabled_at < > (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis) { (* obj) . disabled_at = value ; } } pub mod purpose { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: identity :: identity_public_key :: purpose :: Purpose`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_identity_identity_public_key_purpose_Purpose { AUTHENTICATION = 0 , ENCRYPTION = 1 , DECRYPTION = 2 , TRANSFER = 3 , SYSTEM = 4 , VOTING = 5 } impl ferment_interfaces :: FFIConversionFrom < dpp :: identity :: identity_public_key :: purpose :: Purpose > for dpp_identity_identity_public_key_purpose_Purpose { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_purpose_Purpose) -> dpp :: identity :: identity_public_key :: purpose :: Purpose { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_public_key_purpose_Purpose :: AUTHENTICATION => dpp :: identity :: identity_public_key :: purpose :: Purpose :: AUTHENTICATION , dpp_identity_identity_public_key_purpose_Purpose :: ENCRYPTION => dpp :: identity :: identity_public_key :: purpose :: Purpose :: ENCRYPTION , dpp_identity_identity_public_key_purpose_Purpose :: DECRYPTION => dpp :: identity :: identity_public_key :: purpose :: Purpose :: DECRYPTION , dpp_identity_identity_public_key_purpose_Purpose :: TRANSFER => dpp :: identity :: identity_public_key :: purpose :: Purpose :: TRANSFER , dpp_identity_identity_public_key_purpose_Purpose :: SYSTEM => dpp :: identity :: identity_public_key :: purpose :: Purpose :: SYSTEM , dpp_identity_identity_public_key_purpose_Purpose :: VOTING => dpp :: identity :: identity_public_key :: purpose :: Purpose :: VOTING } } } impl ferment_interfaces :: FFIConversionTo < dpp :: identity :: identity_public_key :: purpose :: Purpose > for dpp_identity_identity_public_key_purpose_Purpose { unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: purpose :: Purpose) -> * const dpp_identity_identity_public_key_purpose_Purpose { ferment_interfaces :: boxed (match obj { dpp :: identity :: identity_public_key :: purpose :: Purpose :: AUTHENTICATION => dpp_identity_identity_public_key_purpose_Purpose :: AUTHENTICATION , dpp :: identity :: identity_public_key :: purpose :: Purpose :: ENCRYPTION => dpp_identity_identity_public_key_purpose_Purpose :: ENCRYPTION , dpp :: identity :: identity_public_key :: purpose :: Purpose :: DECRYPTION => dpp_identity_identity_public_key_purpose_Purpose :: DECRYPTION , dpp :: identity :: identity_public_key :: purpose :: Purpose :: TRANSFER => dpp_identity_identity_public_key_purpose_Purpose :: TRANSFER , dpp :: identity :: identity_public_key :: purpose :: Purpose :: SYSTEM => dpp_identity_identity_public_key_purpose_Purpose :: SYSTEM , dpp :: identity :: identity_public_key :: purpose :: Purpose :: VOTING => dpp_identity_identity_public_key_purpose_Purpose :: VOTING , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: identity :: identity_public_key :: purpose :: Purpose > for dpp_identity_identity_public_key_purpose_Purpose { unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_purpose_Purpose) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_identity_identity_public_key_purpose_Purpose { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_public_key_purpose_Purpose :: AUTHENTICATION => { } , dpp_identity_identity_public_key_purpose_Purpose :: ENCRYPTION => { } , dpp_identity_identity_public_key_purpose_Purpose :: DECRYPTION => { } , dpp_identity_identity_public_key_purpose_Purpose :: TRANSFER => { } , dpp_identity_identity_public_key_purpose_Purpose :: SYSTEM => { } , dpp_identity_identity_public_key_purpose_Purpose :: VOTING => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_AUTHENTICATION_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment_interfaces :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: AUTHENTICATION { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_ENCRYPTION_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment_interfaces :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: ENCRYPTION { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_DECRYPTION_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment_interfaces :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: DECRYPTION { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_TRANSFER_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment_interfaces :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: TRANSFER { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_SYSTEM_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment_interfaces :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: SYSTEM { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_VOTING_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment_interfaces :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: VOTING { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_destroy < > (ffi : * mut dpp_identity_identity_public_key_purpose_Purpose) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod conversion { use crate as ferment_example_platform ; # [cfg (feature = "json-object")] pub mod json { use crate as ferment_example_platform ; } # [cfg (feature = "platform-value")] pub mod platform_value { use crate as ferment_example_platform ; } } pub mod security_level { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: identity :: identity_public_key :: security_level :: SecurityLevel`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_identity_identity_public_key_security_level_SecurityLevel { MASTER = 0 , CRITICAL = 1 , HIGH = 2 , MEDIUM = 3 } impl ferment_interfaces :: FFIConversionFrom < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel > for dpp_identity_identity_public_key_security_level_SecurityLevel { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_security_level_SecurityLevel) -> dpp :: identity :: identity_public_key :: security_level :: SecurityLevel { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_public_key_security_level_SecurityLevel :: MASTER => dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: MASTER , dpp_identity_identity_public_key_security_level_SecurityLevel :: CRITICAL => dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: CRITICAL , dpp_identity_identity_public_key_security_level_SecurityLevel :: HIGH => dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: HIGH , dpp_identity_identity_public_key_security_level_SecurityLevel :: MEDIUM => dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: MEDIUM } } } impl ferment_interfaces :: FFIConversionTo < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel > for dpp_identity_identity_public_key_security_level_SecurityLevel { unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: security_level :: SecurityLevel) -> * const dpp_identity_identity_public_key_security_level_SecurityLevel { ferment_interfaces :: boxed (match obj { dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: MASTER => dpp_identity_identity_public_key_security_level_SecurityLevel :: MASTER , dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: CRITICAL => dpp_identity_identity_public_key_security_level_SecurityLevel :: CRITICAL , dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: HIGH => dpp_identity_identity_public_key_security_level_SecurityLevel :: HIGH , dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: MEDIUM => dpp_identity_identity_public_key_security_level_SecurityLevel :: MEDIUM , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel > for dpp_identity_identity_public_key_security_level_SecurityLevel { unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_security_level_SecurityLevel) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_identity_identity_public_key_security_level_SecurityLevel { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_public_key_security_level_SecurityLevel :: MASTER => { } , dpp_identity_identity_public_key_security_level_SecurityLevel :: CRITICAL => { } , dpp_identity_identity_public_key_security_level_SecurityLevel :: HIGH => { } , dpp_identity_identity_public_key_security_level_SecurityLevel :: MEDIUM => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_security_level_SecurityLevel_MASTER_ctor () -> * mut dpp_identity_identity_public_key_security_level_SecurityLevel { ferment_interfaces :: boxed (dpp_identity_identity_public_key_security_level_SecurityLevel :: MASTER { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_security_level_SecurityLevel_CRITICAL_ctor () -> * mut dpp_identity_identity_public_key_security_level_SecurityLevel { ferment_interfaces :: boxed (dpp_identity_identity_public_key_security_level_SecurityLevel :: CRITICAL { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_security_level_SecurityLevel_HIGH_ctor () -> * mut dpp_identity_identity_public_key_security_level_SecurityLevel { ferment_interfaces :: boxed (dpp_identity_identity_public_key_security_level_SecurityLevel :: HIGH { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_security_level_SecurityLevel_MEDIUM_ctor () -> * mut dpp_identity_identity_public_key_security_level_SecurityLevel { ferment_interfaces :: boxed (dpp_identity_identity_public_key_security_level_SecurityLevel :: MEDIUM { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_security_level_SecurityLevel_destroy < > (ffi : * mut dpp_identity_identity_public_key_security_level_SecurityLevel) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod accessors { use crate as ferment_example_platform ; } pub mod key_type { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: identity :: identity_public_key :: key_type :: KeyType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_identity_identity_public_key_key_type_KeyType { ECDSA_SECP256K1 = 0 , BLS12_381 = 1 , ECDSA_HASH160 = 2 , BIP13_SCRIPT_HASH = 3 , EDDSA_25519_HASH160 = 4 } impl ferment_interfaces :: FFIConversionFrom < dpp :: identity :: identity_public_key :: key_type :: KeyType > for dpp_identity_identity_public_key_key_type_KeyType { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_key_type_KeyType) -> dpp :: identity :: identity_public_key :: key_type :: KeyType { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_SECP256K1 => dpp :: identity :: identity_public_key :: key_type :: KeyType :: ECDSA_SECP256K1 , dpp_identity_identity_public_key_key_type_KeyType :: BLS12_381 => dpp :: identity :: identity_public_key :: key_type :: KeyType :: BLS12_381 , dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_HASH160 => dpp :: identity :: identity_public_key :: key_type :: KeyType :: ECDSA_HASH160 , dpp_identity_identity_public_key_key_type_KeyType :: BIP13_SCRIPT_HASH => dpp :: identity :: identity_public_key :: key_type :: KeyType :: BIP13_SCRIPT_HASH , dpp_identity_identity_public_key_key_type_KeyType :: EDDSA_25519_HASH160 => dpp :: identity :: identity_public_key :: key_type :: KeyType :: EDDSA_25519_HASH160 } } } impl ferment_interfaces :: FFIConversionTo < dpp :: identity :: identity_public_key :: key_type :: KeyType > for dpp_identity_identity_public_key_key_type_KeyType { unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: key_type :: KeyType) -> * const dpp_identity_identity_public_key_key_type_KeyType { ferment_interfaces :: boxed (match obj { dpp :: identity :: identity_public_key :: key_type :: KeyType :: ECDSA_SECP256K1 => dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_SECP256K1 , dpp :: identity :: identity_public_key :: key_type :: KeyType :: BLS12_381 => dpp_identity_identity_public_key_key_type_KeyType :: BLS12_381 , dpp :: identity :: identity_public_key :: key_type :: KeyType :: ECDSA_HASH160 => dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_HASH160 , dpp :: identity :: identity_public_key :: key_type :: KeyType :: BIP13_SCRIPT_HASH => dpp_identity_identity_public_key_key_type_KeyType :: BIP13_SCRIPT_HASH , dpp :: identity :: identity_public_key :: key_type :: KeyType :: EDDSA_25519_HASH160 => dpp_identity_identity_public_key_key_type_KeyType :: EDDSA_25519_HASH160 , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: identity :: identity_public_key :: key_type :: KeyType > for dpp_identity_identity_public_key_key_type_KeyType { unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_key_type_KeyType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_identity_identity_public_key_key_type_KeyType { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_SECP256K1 => { } , dpp_identity_identity_public_key_key_type_KeyType :: BLS12_381 => { } , dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_HASH160 => { } , dpp_identity_identity_public_key_key_type_KeyType :: BIP13_SCRIPT_HASH => { } , dpp_identity_identity_public_key_key_type_KeyType :: EDDSA_25519_HASH160 => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_ECDSA_SECP256K1_ctor () -> * mut dpp_identity_identity_public_key_key_type_KeyType { ferment_interfaces :: boxed (dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_SECP256K1 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_BLS12_381_ctor () -> * mut dpp_identity_identity_public_key_key_type_KeyType { ferment_interfaces :: boxed (dpp_identity_identity_public_key_key_type_KeyType :: BLS12_381 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_ECDSA_HASH160_ctor () -> * mut dpp_identity_identity_public_key_key_type_KeyType { ferment_interfaces :: boxed (dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_HASH160 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_BIP13_SCRIPT_HASH_ctor () -> * mut dpp_identity_identity_public_key_key_type_KeyType { ferment_interfaces :: boxed (dpp_identity_identity_public_key_key_type_KeyType :: BIP13_SCRIPT_HASH { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_EDDSA_25519_HASH160_ctor () -> * mut dpp_identity_identity_public_key_key_type_KeyType { ferment_interfaces :: boxed (dpp_identity_identity_public_key_key_type_KeyType :: EDDSA_25519_HASH160 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_destroy < > (ffi : * mut dpp_identity_identity_public_key_key_type_KeyType) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod contract_bounds { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_identity_identity_public_key_contract_bounds_ContractBounds { SingleContract { id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } , SingleContractDocumentType { id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type_name : * mut std :: os :: raw :: c_char } } impl ferment_interfaces :: FFIConversionFrom < dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds > for dpp_identity_identity_public_key_contract_bounds_ContractBounds { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_contract_bounds_ContractBounds) -> dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContract { id } => dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds :: SingleContract { id : ferment_interfaces :: FFIConversionFrom :: ffi_from (* id) } , dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContractDocumentType { id , document_type_name } => dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds :: SingleContractDocumentType { id : ferment_interfaces :: FFIConversionFrom :: ffi_from (* id) , document_type_name : ferment_interfaces :: FFIConversionFrom :: ffi_from (* document_type_name) } } } } impl ferment_interfaces :: FFIConversionTo < dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds > for dpp_identity_identity_public_key_contract_bounds_ContractBounds { unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds) -> * const dpp_identity_identity_public_key_contract_bounds_ContractBounds { ferment_interfaces :: boxed (match obj { dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds :: SingleContract { id } => dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContract { id : ferment_interfaces :: FFIConversionTo :: ffi_to (id) } , dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds :: SingleContractDocumentType { id , document_type_name } => dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContractDocumentType { id : ferment_interfaces :: FFIConversionTo :: ffi_to (id) , document_type_name : ferment_interfaces :: FFIConversionTo :: ffi_to (document_type_name) } , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds > for dpp_identity_identity_public_key_contract_bounds_ContractBounds { unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_contract_bounds_ContractBounds) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_identity_identity_public_key_contract_bounds_ContractBounds { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContract { id } => { ferment_interfaces :: unbox_any (* id) ; ; } , dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContractDocumentType { id , document_type_name } => { ferment_interfaces :: unbox_any (* id) ; ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* document_type_name) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_contract_bounds_ContractBounds_SingleContract_ctor (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_identity_identity_public_key_contract_bounds_ContractBounds { ferment_interfaces :: boxed (dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContract { id }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_contract_bounds_ContractBounds_SingleContractDocumentType_ctor (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type_name : * mut std :: os :: raw :: c_char) -> * mut dpp_identity_identity_public_key_contract_bounds_ContractBounds { ferment_interfaces :: boxed (dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContractDocumentType { id , document_type_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_contract_bounds_ContractBounds_destroy < > (ffi : * mut dpp_identity_identity_public_key_contract_bounds_ContractBounds) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod methods { use crate as ferment_example_platform ; pub mod hash { use crate as ferment_example_platform ; } } # [doc = "FFI-representation of the [`dpp :: identity :: identity_public_key :: TimestampMillis`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_identity_public_key_TimestampMillis (u64) ; impl ferment_interfaces :: FFIConversionFrom < dpp :: identity :: identity_public_key :: TimestampMillis > for dpp_identity_identity_public_key_TimestampMillis { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_TimestampMillis) -> dpp :: identity :: identity_public_key :: TimestampMillis { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment_interfaces :: FFIConversionTo < dpp :: identity :: identity_public_key :: TimestampMillis > for dpp_identity_identity_public_key_TimestampMillis { unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: TimestampMillis) -> * const dpp_identity_identity_public_key_TimestampMillis { ferment_interfaces :: boxed (dpp_identity_identity_public_key_TimestampMillis (obj)) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: identity :: identity_public_key :: TimestampMillis > for dpp_identity_identity_public_key_TimestampMillis { unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_TimestampMillis) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_identity_public_key_TimestampMillis { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_TimestampMillis_ctor < > (o_0 : u64) -> * mut dpp_identity_identity_public_key_TimestampMillis { ferment_interfaces :: boxed (dpp_identity_identity_public_key_TimestampMillis (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_TimestampMillis_destroy < > (ffi : * mut dpp_identity_identity_public_key_TimestampMillis) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_TimestampMillis_get_0 < > (obj : * const dpp_identity_identity_public_key_TimestampMillis) -> u64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_TimestampMillis_set_0 < > (obj : * mut dpp_identity_identity_public_key_TimestampMillis , value : u64) { (* obj) . 0 = value ; } } pub mod state_transition { use crate as ferment_example_platform ; pub mod asset_lock_proof { use crate as ferment_example_platform ; pub mod instant { use crate as ferment_example_platform ; pub mod instant_asset_lock_proof { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: InstantAssetLockProof`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { pub instant_lock : * mut ferment_example_platform :: custom :: dashcore :: InstantLock , pub transaction : * mut ferment_example_platform :: custom :: dashcore :: Transaction , pub output_index : u32 } impl ferment_interfaces :: FFIConversionFrom < dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: InstantAssetLockProof > for dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { unsafe fn ffi_from_const (ffi : * const dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) -> dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: InstantAssetLockProof { let ffi_ref = & * ffi ; dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: InstantAssetLockProof { instant_lock : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . instant_lock) , transaction : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . transaction) , output_index : ffi_ref . output_index } } } impl ferment_interfaces :: FFIConversionTo < dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: InstantAssetLockProof > for dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { unsafe fn ffi_to_const (obj : dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: InstantAssetLockProof) -> * const dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { ferment_interfaces :: boxed (dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { instant_lock : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . instant_lock) , transaction : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . transaction) , output_index : obj . output_index }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: InstantAssetLockProof > for dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { unsafe fn destroy (ffi : * mut dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . instant_lock) ; ; ferment_interfaces :: unbox_any (ffi_ref . transaction) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_ctor < > (instant_lock : * mut ferment_example_platform :: custom :: dashcore :: InstantLock , transaction : * mut ferment_example_platform :: custom :: dashcore :: Transaction , output_index : u32) -> * mut dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { ferment_interfaces :: boxed (dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { instant_lock , transaction , output_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_destroy < > (ffi : * mut dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_get_instant_lock < > (obj : * const dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) -> * mut ferment_example_platform :: custom :: dashcore :: InstantLock { (* obj) . instant_lock } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_get_transaction < > (obj : * const dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) -> * mut ferment_example_platform :: custom :: dashcore :: Transaction { (* obj) . transaction } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_get_output_index < > (obj : * const dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) -> u32 { (* obj) . output_index } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_set_instant_lock < > (obj : * mut dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof , value : * mut ferment_example_platform :: custom :: dashcore :: InstantLock) { (* obj) . instant_lock = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_set_transaction < > (obj : * mut dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof , value : * mut ferment_example_platform :: custom :: dashcore :: Transaction) { (* obj) . transaction = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_set_output_index < > (obj : * mut dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof , value : u32) { (* obj) . output_index = value ; } } pub mod methods { use crate as ferment_example_platform ; pub mod validate_structure { use crate as ferment_example_platform ; } } } pub mod validate_asset_lock_transaction_structure { use crate as ferment_example_platform ; } pub mod chain { use crate as ferment_example_platform ; pub mod chain_asset_lock_proof { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: ChainAssetLockProof`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { pub core_chain_locked_height : u32 , pub out_point : * mut ferment_example_platform :: custom :: dashcore :: OutPoint } impl ferment_interfaces :: FFIConversionFrom < dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: ChainAssetLockProof > for dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { unsafe fn ffi_from_const (ffi : * const dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) -> dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: ChainAssetLockProof { let ffi_ref = & * ffi ; dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: ChainAssetLockProof { core_chain_locked_height : ffi_ref . core_chain_locked_height , out_point : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . out_point) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: ChainAssetLockProof > for dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { unsafe fn ffi_to_const (obj : dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: ChainAssetLockProof) -> * const dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { ferment_interfaces :: boxed (dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { core_chain_locked_height : obj . core_chain_locked_height , out_point : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . out_point) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: ChainAssetLockProof > for dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { unsafe fn destroy (ffi : * mut dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment_interfaces :: unbox_any (ffi_ref . out_point) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof_ctor < > (core_chain_locked_height : u32 , out_point : * mut ferment_example_platform :: custom :: dashcore :: OutPoint) -> * mut dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { ferment_interfaces :: boxed (dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { core_chain_locked_height , out_point }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof_destroy < > (ffi : * mut dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof_get_core_chain_locked_height < > (obj : * const dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) -> u32 { (* obj) . core_chain_locked_height } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof_get_out_point < > (obj : * const dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) -> * mut ferment_example_platform :: custom :: dashcore :: OutPoint { (* obj) . out_point } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof_set_core_chain_locked_height < > (obj : * mut dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof , value : u32) { (* obj) . core_chain_locked_height = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof_set_out_point < > (obj : * mut dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof , value : * mut ferment_example_platform :: custom :: dashcore :: OutPoint) { (* obj) . out_point = value ; } } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_identity_state_transition_asset_lock_proof_AssetLockProof { Instant (* mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) , Chain (* mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) } impl ferment_interfaces :: FFIConversionFrom < dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof > for dpp_identity_state_transition_asset_lock_proof_AssetLockProof { unsafe fn ffi_from_const (ffi : * const dpp_identity_state_transition_asset_lock_proof_AssetLockProof) -> dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Instant (o_0) => dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof :: Instant (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) , dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Chain (o_0) => dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof :: Chain (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof > for dpp_identity_state_transition_asset_lock_proof_AssetLockProof { unsafe fn ffi_to_const (obj : dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof) -> * const dpp_identity_state_transition_asset_lock_proof_AssetLockProof { ferment_interfaces :: boxed (match obj { dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof :: Instant (o_0) => dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Instant (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof :: Chain (o_0) => dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Chain (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof > for dpp_identity_state_transition_asset_lock_proof_AssetLockProof { unsafe fn destroy (ffi : * mut dpp_identity_state_transition_asset_lock_proof_AssetLockProof) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_identity_state_transition_asset_lock_proof_AssetLockProof { fn drop (& mut self) { unsafe { match self { dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Instant (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Chain (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_AssetLockProof_Instant_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) -> * mut dpp_identity_state_transition_asset_lock_proof_AssetLockProof { ferment_interfaces :: boxed (dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Instant (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_AssetLockProof_Chain_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) -> * mut dpp_identity_state_transition_asset_lock_proof_AssetLockProof { ferment_interfaces :: boxed (dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Chain (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_AssetLockProof_destroy < > (ffi : * mut dpp_identity_state_transition_asset_lock_proof_AssetLockProof) { ferment_interfaces :: unbox_any (ffi) ; } } } pub mod identity_nonce { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: identity :: identity_nonce :: MergeIdentityNonceResult`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_identity_identity_nonce_MergeIdentityNonceResult { InvalidNonce , NonceTooFarInFuture , NonceTooFarInPast , NonceAlreadyPresentAtTip , NonceAlreadyPresentInPast (u64) , MergeIdentityNonceSuccess (* mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce) } impl ferment_interfaces :: FFIConversionFrom < dpp :: identity :: identity_nonce :: MergeIdentityNonceResult > for dpp_identity_identity_nonce_MergeIdentityNonceResult { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_nonce_MergeIdentityNonceResult) -> dpp :: identity :: identity_nonce :: MergeIdentityNonceResult { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_nonce_MergeIdentityNonceResult :: InvalidNonce => dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: InvalidNonce , dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceTooFarInFuture => dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: NonceTooFarInFuture , dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceTooFarInPast => dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: NonceTooFarInPast , dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceAlreadyPresentAtTip => dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: NonceAlreadyPresentAtTip , dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceAlreadyPresentInPast (o_0) => dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: NonceAlreadyPresentInPast (* o_0) , dpp_identity_identity_nonce_MergeIdentityNonceResult :: MergeIdentityNonceSuccess (o_0) => dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: MergeIdentityNonceSuccess (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: identity :: identity_nonce :: MergeIdentityNonceResult > for dpp_identity_identity_nonce_MergeIdentityNonceResult { unsafe fn ffi_to_const (obj : dpp :: identity :: identity_nonce :: MergeIdentityNonceResult) -> * const dpp_identity_identity_nonce_MergeIdentityNonceResult { ferment_interfaces :: boxed (match obj { dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: InvalidNonce => dpp_identity_identity_nonce_MergeIdentityNonceResult :: InvalidNonce , dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: NonceTooFarInFuture => dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceTooFarInFuture , dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: NonceTooFarInPast => dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceTooFarInPast , dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: NonceAlreadyPresentAtTip => dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceAlreadyPresentAtTip , dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: NonceAlreadyPresentInPast (o_0) => dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceAlreadyPresentInPast (o_0) , dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: MergeIdentityNonceSuccess (o_0) => dpp_identity_identity_nonce_MergeIdentityNonceResult :: MergeIdentityNonceSuccess (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: identity :: identity_nonce :: MergeIdentityNonceResult > for dpp_identity_identity_nonce_MergeIdentityNonceResult { unsafe fn destroy (ffi : * mut dpp_identity_identity_nonce_MergeIdentityNonceResult) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_identity_identity_nonce_MergeIdentityNonceResult { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_nonce_MergeIdentityNonceResult :: InvalidNonce => { } , dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceTooFarInFuture => { } , dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceTooFarInPast => { } , dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceAlreadyPresentAtTip => { } , dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceAlreadyPresentInPast (o_0) => { ; } , dpp_identity_identity_nonce_MergeIdentityNonceResult :: MergeIdentityNonceSuccess (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_nonce_MergeIdentityNonceResult_InvalidNonce_ctor () -> * mut dpp_identity_identity_nonce_MergeIdentityNonceResult { ferment_interfaces :: boxed (dpp_identity_identity_nonce_MergeIdentityNonceResult :: InvalidNonce { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_nonce_MergeIdentityNonceResult_NonceTooFarInFuture_ctor () -> * mut dpp_identity_identity_nonce_MergeIdentityNonceResult { ferment_interfaces :: boxed (dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceTooFarInFuture { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_nonce_MergeIdentityNonceResult_NonceTooFarInPast_ctor () -> * mut dpp_identity_identity_nonce_MergeIdentityNonceResult { ferment_interfaces :: boxed (dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceTooFarInPast { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_nonce_MergeIdentityNonceResult_NonceAlreadyPresentAtTip_ctor () -> * mut dpp_identity_identity_nonce_MergeIdentityNonceResult { ferment_interfaces :: boxed (dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceAlreadyPresentAtTip { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_nonce_MergeIdentityNonceResult_NonceAlreadyPresentInPast_ctor (o_o_0 : u64) -> * mut dpp_identity_identity_nonce_MergeIdentityNonceResult { ferment_interfaces :: boxed (dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceAlreadyPresentInPast (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_nonce_MergeIdentityNonceResult_MergeIdentityNonceSuccess_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce) -> * mut dpp_identity_identity_nonce_MergeIdentityNonceResult { ferment_interfaces :: boxed (dpp_identity_identity_nonce_MergeIdentityNonceResult :: MergeIdentityNonceSuccess (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_nonce_MergeIdentityNonceResult_destroy < > (ffi : * mut dpp_identity_identity_nonce_MergeIdentityNonceResult) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod conversion { use crate as ferment_example_platform ; # [cfg (feature = "identity-json-conversion")] pub mod json { use crate as ferment_example_platform ; } # [cfg (feature = "identity-cbor-conversion")] pub mod cbor { use crate as ferment_example_platform ; } # [cfg (feature = "identity-value-conversion")] pub mod platform_value { use crate as ferment_example_platform ; } } pub mod identity { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp :: identity :: identity :: Identity`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_identity_identity_Identity { V0 (* mut crate :: fermented :: types :: dpp :: identity :: v0 :: dpp_identity_v0_IdentityV0) } impl ferment_interfaces :: FFIConversionFrom < dpp :: identity :: identity :: Identity > for dpp_identity_identity_Identity { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_Identity) -> dpp :: identity :: identity :: Identity { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_Identity :: V0 (o_0) => dpp :: identity :: identity :: Identity :: V0 (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: identity :: identity :: Identity > for dpp_identity_identity_Identity { unsafe fn ffi_to_const (obj : dpp :: identity :: identity :: Identity) -> * const dpp_identity_identity_Identity { ferment_interfaces :: boxed (match obj { dpp :: identity :: identity :: Identity :: V0 (o_0) => dpp_identity_identity_Identity :: V0 (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: identity :: identity :: Identity > for dpp_identity_identity_Identity { unsafe fn destroy (ffi : * mut dpp_identity_identity_Identity) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_identity_identity_Identity { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_Identity :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_Identity_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: identity :: v0 :: dpp_identity_v0_IdentityV0) -> * mut dpp_identity_identity_Identity { ferment_interfaces :: boxed (dpp_identity_identity_Identity :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_Identity_destroy < > (ffi : * mut dpp_identity_identity_Identity) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`dpp :: identity :: identity :: PartialIdentity`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_identity_PartialIdentity { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub loaded_public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey , pub balance : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub not_found_public_keys : * mut crate :: fermented :: generics :: std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversionFrom < dpp :: identity :: identity :: PartialIdentity > for dpp_identity_identity_PartialIdentity { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_PartialIdentity) -> dpp :: identity :: identity :: PartialIdentity { let ffi_ref = & * ffi ; dpp :: identity :: identity :: PartialIdentity { id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . id) , loaded_public_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . loaded_public_keys) , balance : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . balance) , revision : ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (ffi_ref . revision) , not_found_public_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . not_found_public_keys) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: identity :: identity :: PartialIdentity > for dpp_identity_identity_PartialIdentity { unsafe fn ffi_to_const (obj : dpp :: identity :: identity :: PartialIdentity) -> * const dpp_identity_identity_PartialIdentity { ferment_interfaces :: boxed (dpp_identity_identity_PartialIdentity { id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . id) , loaded_public_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . loaded_public_keys) , balance : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . balance) , revision : ferment_interfaces :: FFIConversionTo :: ffi_to_opt (obj . revision) , not_found_public_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . not_found_public_keys) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: identity :: identity :: PartialIdentity > for dpp_identity_identity_PartialIdentity { unsafe fn destroy (ffi : * mut dpp_identity_identity_PartialIdentity) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_identity_PartialIdentity { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; ferment_interfaces :: unbox_any (ffi_ref . loaded_public_keys) ; ; ferment_interfaces :: unbox_any_opt (ffi_ref . balance) ; ferment_interfaces :: unbox_any_opt (ffi_ref . revision) ; ferment_interfaces :: unbox_any (ffi_ref . not_found_public_keys) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_ctor < > (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , loaded_public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey , balance : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , not_found_public_keys : * mut crate :: fermented :: generics :: std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID) -> * mut dpp_identity_identity_PartialIdentity { ferment_interfaces :: boxed (dpp_identity_identity_PartialIdentity { id , loaded_public_keys , balance , revision , not_found_public_keys }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_destroy < > (ffi : * mut dpp_identity_identity_PartialIdentity) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_get_id < > (obj : * const dpp_identity_identity_PartialIdentity) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_get_loaded_public_keys < > (obj : * const dpp_identity_identity_PartialIdentity) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { (* obj) . loaded_public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_get_balance < > (obj : * const dpp_identity_identity_PartialIdentity) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_get_revision < > (obj : * const dpp_identity_identity_PartialIdentity) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_get_not_found_public_keys < > (obj : * const dpp_identity_identity_PartialIdentity) -> * mut crate :: fermented :: generics :: std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { (* obj) . not_found_public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_set_id < > (obj : * mut dpp_identity_identity_PartialIdentity , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_set_loaded_public_keys < > (obj : * mut dpp_identity_identity_PartialIdentity , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey) { (* obj) . loaded_public_keys = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_set_balance < > (obj : * mut dpp_identity_identity_PartialIdentity , value : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) { (* obj) . balance = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_set_revision < > (obj : * mut dpp_identity_identity_PartialIdentity , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . revision = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_set_not_found_public_keys < > (obj : * mut dpp_identity_identity_PartialIdentity , value : * mut crate :: fermented :: generics :: std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID) { (* obj) . not_found_public_keys = value ; } } pub mod methods { use crate as ferment_example_platform ; pub mod create_basic_identity { use crate as ferment_example_platform ; } } pub mod errors { use crate as ferment_example_platform ; pub mod unknown_asset_lock_proof_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: identity :: errors :: unknown_asset_lock_proof_type_error :: UnknownAssetLockProofTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { pub asset_lock_type : * mut u8 } impl ferment_interfaces :: FFIConversionFrom < dpp :: identity :: errors :: unknown_asset_lock_proof_type_error :: UnknownAssetLockProofTypeError > for dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { unsafe fn ffi_from_const (ffi : * const dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError) -> dpp :: identity :: errors :: unknown_asset_lock_proof_type_error :: UnknownAssetLockProofTypeError { let ffi_ref = & * ffi ; dpp :: identity :: errors :: unknown_asset_lock_proof_type_error :: UnknownAssetLockProofTypeError { asset_lock_type : ferment_interfaces :: from_opt_primitive (ffi_ref . asset_lock_type) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: identity :: errors :: unknown_asset_lock_proof_type_error :: UnknownAssetLockProofTypeError > for dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { unsafe fn ffi_to_const (obj : dpp :: identity :: errors :: unknown_asset_lock_proof_type_error :: UnknownAssetLockProofTypeError) -> * const dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { ferment_interfaces :: boxed (dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { asset_lock_type : ferment_interfaces :: to_opt_primitive (obj . asset_lock_type) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: identity :: errors :: unknown_asset_lock_proof_type_error :: UnknownAssetLockProofTypeError > for dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { unsafe fn destroy (ffi : * mut dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError_ctor < > (asset_lock_type : * mut u8) -> * mut dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { ferment_interfaces :: boxed (dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { asset_lock_type }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError_destroy < > (ffi : * mut dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError_get_asset_lock_type < > (obj : * const dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError) -> * mut u8 { (* obj) . asset_lock_type } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError_set_asset_lock_type < > (obj : * mut dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError , value : * mut u8) { (* obj) . asset_lock_type = value ; } } pub mod asset_lock_transaction_is_not_found_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: AssetLockTransactionIsNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { pub transaction_id : * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid } impl ferment_interfaces :: FFIConversionFrom < dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: AssetLockTransactionIsNotFoundError > for dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError) -> dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: AssetLockTransactionIsNotFoundError { let ffi_ref = & * ffi ; dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: AssetLockTransactionIsNotFoundError { transaction_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . transaction_id) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: AssetLockTransactionIsNotFoundError > for dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { unsafe fn ffi_to_const (obj : dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: AssetLockTransactionIsNotFoundError) -> * const dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { ferment_interfaces :: boxed (dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { transaction_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . transaction_id) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: AssetLockTransactionIsNotFoundError > for dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { unsafe fn destroy (ffi : * mut dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . transaction_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError_ctor < > (transaction_id : * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid) -> * mut dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { ferment_interfaces :: boxed (dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { transaction_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError_destroy < > (ffi : * mut dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError_get_transaction_id < > (obj : * const dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError) -> * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid { (* obj) . transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError_set_transaction_id < > (obj : * mut dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError , value : * mut ferment_example_platform :: custom :: dashcore :: dashcore_Txid) { (* obj) . transaction_id = value ; } } pub mod asset_lock_output_not_found_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: identity :: errors :: asset_lock_output_not_found_error :: AssetLockOutputNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { } impl ferment_interfaces :: FFIConversionFrom < dpp :: identity :: errors :: asset_lock_output_not_found_error :: AssetLockOutputNotFoundError > for dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError) -> dpp :: identity :: errors :: asset_lock_output_not_found_error :: AssetLockOutputNotFoundError { let ffi_ref = & * ffi ; dpp :: identity :: errors :: asset_lock_output_not_found_error :: AssetLockOutputNotFoundError { } } } impl ferment_interfaces :: FFIConversionTo < dpp :: identity :: errors :: asset_lock_output_not_found_error :: AssetLockOutputNotFoundError > for dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { unsafe fn ffi_to_const (obj : dpp :: identity :: errors :: asset_lock_output_not_found_error :: AssetLockOutputNotFoundError) -> * const dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { ferment_interfaces :: boxed (dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: identity :: errors :: asset_lock_output_not_found_error :: AssetLockOutputNotFoundError > for dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { unsafe fn destroy (ffi : * mut dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError_ctor < > () -> * mut dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { ferment_interfaces :: boxed (dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError_destroy < > (ffi : * mut dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } } } pub mod credits_converter { use crate as ferment_example_platform ; # [cfg (test)] pub mod test { use crate as ferment_example_platform ; } } } pub mod metadata { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp :: metadata :: Metadata`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_metadata_Metadata { pub block_height : u64 , pub core_chain_locked_height : u64 , pub time_ms : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , pub protocol_version : * mut crate :: fermented :: types :: dpp :: util :: deserializer :: dpp_util_deserializer_ProtocolVersion } impl ferment_interfaces :: FFIConversionFrom < dpp :: metadata :: Metadata > for dpp_metadata_Metadata { unsafe fn ffi_from_const (ffi : * const dpp_metadata_Metadata) -> dpp :: metadata :: Metadata { let ffi_ref = & * ffi ; dpp :: metadata :: Metadata { block_height : ffi_ref . block_height , core_chain_locked_height : ffi_ref . core_chain_locked_height , time_ms : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . time_ms) , protocol_version : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . protocol_version) } } } impl ferment_interfaces :: FFIConversionTo < dpp :: metadata :: Metadata > for dpp_metadata_Metadata { unsafe fn ffi_to_const (obj : dpp :: metadata :: Metadata) -> * const dpp_metadata_Metadata { ferment_interfaces :: boxed (dpp_metadata_Metadata { block_height : obj . block_height , core_chain_locked_height : obj . core_chain_locked_height , time_ms : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . time_ms) , protocol_version : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . protocol_version) }) } } impl ferment_interfaces :: FFIConversionDestroy < dpp :: metadata :: Metadata > for dpp_metadata_Metadata { unsafe fn destroy (ffi : * mut dpp_metadata_Metadata) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_metadata_Metadata { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ferment_interfaces :: unbox_any (ffi_ref . time_ms) ; ; ferment_interfaces :: unbox_any (ffi_ref . protocol_version) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_ctor < > (block_height : u64 , core_chain_locked_height : u64 , time_ms : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , protocol_version : * mut crate :: fermented :: types :: dpp :: util :: deserializer :: dpp_util_deserializer_ProtocolVersion) -> * mut dpp_metadata_Metadata { ferment_interfaces :: boxed (dpp_metadata_Metadata { block_height , core_chain_locked_height , time_ms , protocol_version }) } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_destroy < > (ffi : * mut dpp_metadata_Metadata) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_get_block_height < > (obj : * const dpp_metadata_Metadata) -> u64 { (* obj) . block_height } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_get_core_chain_locked_height < > (obj : * const dpp_metadata_Metadata) -> u64 { (* obj) . core_chain_locked_height } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_get_time_ms < > (obj : * const dpp_metadata_Metadata) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis { (* obj) . time_ms } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_get_protocol_version < > (obj : * const dpp_metadata_Metadata) -> * mut crate :: fermented :: types :: dpp :: util :: deserializer :: dpp_util_deserializer_ProtocolVersion { (* obj) . protocol_version } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_set_block_height < > (obj : * mut dpp_metadata_Metadata , value : u64) { (* obj) . block_height = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_set_core_chain_locked_height < > (obj : * mut dpp_metadata_Metadata , value : u64) { (* obj) . core_chain_locked_height = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_set_time_ms < > (obj : * mut dpp_metadata_Metadata , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis) { (* obj) . time_ms = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_set_protocol_version < > (obj : * mut dpp_metadata_Metadata , value : * mut crate :: fermented :: types :: dpp :: util :: deserializer :: dpp_util_deserializer_ProtocolVersion) { (* obj) . protocol_version = value ; } } } pub mod platform_version { use crate as ferment_example_platform ; pub mod version { use crate as ferment_example_platform ; pub mod limits { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_version :: version :: limits :: SystemLimits`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_limits_SystemLimits { pub estimated_contract_max_serialized_size : u16 , pub max_field_value_size : u32 , pub max_state_transition_size : u64 , pub max_transitions_in_documents_batch : u16 } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: limits :: SystemLimits > for platform_version_version_limits_SystemLimits { unsafe fn ffi_from_const (ffi : * const platform_version_version_limits_SystemLimits) -> platform_version :: version :: limits :: SystemLimits { let ffi_ref = & * ffi ; platform_version :: version :: limits :: SystemLimits { estimated_contract_max_serialized_size : ffi_ref . estimated_contract_max_serialized_size , max_field_value_size : ffi_ref . max_field_value_size , max_state_transition_size : ffi_ref . max_state_transition_size , max_transitions_in_documents_batch : ffi_ref . max_transitions_in_documents_batch } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: limits :: SystemLimits > for platform_version_version_limits_SystemLimits { unsafe fn ffi_to_const (obj : platform_version :: version :: limits :: SystemLimits) -> * const platform_version_version_limits_SystemLimits { ferment_interfaces :: boxed (platform_version_version_limits_SystemLimits { estimated_contract_max_serialized_size : obj . estimated_contract_max_serialized_size , max_field_value_size : obj . max_field_value_size , max_state_transition_size : obj . max_state_transition_size , max_transitions_in_documents_batch : obj . max_transitions_in_documents_batch }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: limits :: SystemLimits > for platform_version_version_limits_SystemLimits { unsafe fn destroy (ffi : * mut platform_version_version_limits_SystemLimits) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_limits_SystemLimits { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_limits_SystemLimits_ctor < > (estimated_contract_max_serialized_size : u16 , max_field_value_size : u32 , max_state_transition_size : u64 , max_transitions_in_documents_batch : u16) -> * mut platform_version_version_limits_SystemLimits { ferment_interfaces :: boxed (platform_version_version_limits_SystemLimits { estimated_contract_max_serialized_size , max_field_value_size , max_state_transition_size , max_transitions_in_documents_batch }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_limits_SystemLimits_destroy < > (ffi : * mut platform_version_version_limits_SystemLimits) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_limits_SystemLimits_get_estimated_contract_max_serialized_size < > (obj : * const platform_version_version_limits_SystemLimits) -> u16 { (* obj) . estimated_contract_max_serialized_size } # [no_mangle] pub unsafe extern "C" fn platform_version_version_limits_SystemLimits_get_max_field_value_size < > (obj : * const platform_version_version_limits_SystemLimits) -> u32 { (* obj) . max_field_value_size } # [no_mangle] pub unsafe extern "C" fn platform_version_version_limits_SystemLimits_get_max_state_transition_size < > (obj : * const platform_version_version_limits_SystemLimits) -> u64 { (* obj) . max_state_transition_size } # [no_mangle] pub unsafe extern "C" fn platform_version_version_limits_SystemLimits_get_max_transitions_in_documents_batch < > (obj : * const platform_version_version_limits_SystemLimits) -> u16 { (* obj) . max_transitions_in_documents_batch } # [no_mangle] pub unsafe extern "C" fn platform_version_version_limits_SystemLimits_set_estimated_contract_max_serialized_size < > (obj : * mut platform_version_version_limits_SystemLimits , value : u16) { (* obj) . estimated_contract_max_serialized_size = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_limits_SystemLimits_set_max_field_value_size < > (obj : * mut platform_version_version_limits_SystemLimits , value : u32) { (* obj) . max_field_value_size = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_limits_SystemLimits_set_max_state_transition_size < > (obj : * mut platform_version_version_limits_SystemLimits , value : u64) { (* obj) . max_state_transition_size = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_limits_SystemLimits_set_max_transitions_in_documents_batch < > (obj : * mut platform_version_version_limits_SystemLimits , value : u16) { (* obj) . max_transitions_in_documents_batch = value ; } } pub mod protocol_version { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_version :: version :: protocol_version :: OptionalFeatureVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_protocol_version_OptionalFeatureVersion (* mut u16) ; impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: protocol_version :: OptionalFeatureVersion > for platform_version_version_protocol_version_OptionalFeatureVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_protocol_version_OptionalFeatureVersion) -> platform_version :: version :: protocol_version :: OptionalFeatureVersion { let ffi_ref = & * ffi ; ferment_interfaces :: from_opt_primitive (ffi_ref . 0) } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: protocol_version :: OptionalFeatureVersion > for platform_version_version_protocol_version_OptionalFeatureVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: protocol_version :: OptionalFeatureVersion) -> * const platform_version_version_protocol_version_OptionalFeatureVersion { ferment_interfaces :: boxed (platform_version_version_protocol_version_OptionalFeatureVersion (ferment_interfaces :: to_opt_primitive (obj))) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: protocol_version :: OptionalFeatureVersion > for platform_version_version_protocol_version_OptionalFeatureVersion { unsafe fn destroy (ffi : * mut platform_version_version_protocol_version_OptionalFeatureVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_protocol_version_OptionalFeatureVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_OptionalFeatureVersion_ctor < > (o_0 : * mut u16) -> * mut platform_version_version_protocol_version_OptionalFeatureVersion { ferment_interfaces :: boxed (platform_version_version_protocol_version_OptionalFeatureVersion (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_OptionalFeatureVersion_destroy < > (ffi : * mut platform_version_version_protocol_version_OptionalFeatureVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_OptionalFeatureVersion_get_0 < > (obj : * const platform_version_version_protocol_version_OptionalFeatureVersion) -> * mut u16 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_OptionalFeatureVersion_set_0 < > (obj : * mut platform_version_version_protocol_version_OptionalFeatureVersion , value : * mut u16) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: protocol_version :: FeatureVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_protocol_version_FeatureVersion (u16) ; impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: protocol_version :: FeatureVersion > for platform_version_version_protocol_version_FeatureVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_protocol_version_FeatureVersion) -> platform_version :: version :: protocol_version :: FeatureVersion { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: protocol_version :: FeatureVersion > for platform_version_version_protocol_version_FeatureVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: protocol_version :: FeatureVersion) -> * const platform_version_version_protocol_version_FeatureVersion { ferment_interfaces :: boxed (platform_version_version_protocol_version_FeatureVersion (obj)) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: protocol_version :: FeatureVersion > for platform_version_version_protocol_version_FeatureVersion { unsafe fn destroy (ffi : * mut platform_version_version_protocol_version_FeatureVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_protocol_version_FeatureVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersion_ctor < > (o_0 : u16) -> * mut platform_version_version_protocol_version_FeatureVersion { ferment_interfaces :: boxed (platform_version_version_protocol_version_FeatureVersion (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersion_destroy < > (ffi : * mut platform_version_version_protocol_version_FeatureVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersion_get_0 < > (obj : * const platform_version_version_protocol_version_FeatureVersion) -> u16 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersion_set_0 < > (obj : * mut platform_version_version_protocol_version_FeatureVersion , value : u16) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: protocol_version :: FeatureVersionBounds`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_protocol_version_FeatureVersionBounds { pub min_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub max_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub default_current_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: protocol_version :: FeatureVersionBounds > for platform_version_version_protocol_version_FeatureVersionBounds { unsafe fn ffi_from_const (ffi : * const platform_version_version_protocol_version_FeatureVersionBounds) -> platform_version :: version :: protocol_version :: FeatureVersionBounds { let ffi_ref = & * ffi ; platform_version :: version :: protocol_version :: FeatureVersionBounds { min_version : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . min_version) , max_version : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . max_version) , default_current_version : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . default_current_version) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: protocol_version :: FeatureVersionBounds > for platform_version_version_protocol_version_FeatureVersionBounds { unsafe fn ffi_to_const (obj : platform_version :: version :: protocol_version :: FeatureVersionBounds) -> * const platform_version_version_protocol_version_FeatureVersionBounds { ferment_interfaces :: boxed (platform_version_version_protocol_version_FeatureVersionBounds { min_version : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . min_version) , max_version : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . max_version) , default_current_version : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . default_current_version) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: protocol_version :: FeatureVersionBounds > for platform_version_version_protocol_version_FeatureVersionBounds { unsafe fn destroy (ffi : * mut platform_version_version_protocol_version_FeatureVersionBounds) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_protocol_version_FeatureVersionBounds { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . min_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . max_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . default_current_version) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersionBounds_ctor < > (min_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , max_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , default_current_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_protocol_version_FeatureVersionBounds { ferment_interfaces :: boxed (platform_version_version_protocol_version_FeatureVersionBounds { min_version , max_version , default_current_version }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersionBounds_destroy < > (ffi : * mut platform_version_version_protocol_version_FeatureVersionBounds) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersionBounds_get_min_version < > (obj : * const platform_version_version_protocol_version_FeatureVersionBounds) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . min_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersionBounds_get_max_version < > (obj : * const platform_version_version_protocol_version_FeatureVersionBounds) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . max_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersionBounds_get_default_current_version < > (obj : * const platform_version_version_protocol_version_FeatureVersionBounds) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . default_current_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersionBounds_set_min_version < > (obj : * mut platform_version_version_protocol_version_FeatureVersionBounds , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . min_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersionBounds_set_max_version < > (obj : * mut platform_version_version_protocol_version_FeatureVersionBounds , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . max_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersionBounds_set_default_current_version < > (obj : * mut platform_version_version_protocol_version_FeatureVersionBounds , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . default_current_version = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: protocol_version :: AbciStructureVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_protocol_version_AbciStructureVersion { pub extended_block_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: protocol_version :: AbciStructureVersion > for platform_version_version_protocol_version_AbciStructureVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_protocol_version_AbciStructureVersion) -> platform_version :: version :: protocol_version :: AbciStructureVersion { let ffi_ref = & * ffi ; platform_version :: version :: protocol_version :: AbciStructureVersion { extended_block_info : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . extended_block_info) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: protocol_version :: AbciStructureVersion > for platform_version_version_protocol_version_AbciStructureVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: protocol_version :: AbciStructureVersion) -> * const platform_version_version_protocol_version_AbciStructureVersion { ferment_interfaces :: boxed (platform_version_version_protocol_version_AbciStructureVersion { extended_block_info : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . extended_block_info) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: protocol_version :: AbciStructureVersion > for platform_version_version_protocol_version_AbciStructureVersion { unsafe fn destroy (ffi : * mut platform_version_version_protocol_version_AbciStructureVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_protocol_version_AbciStructureVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . extended_block_info) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_AbciStructureVersion_ctor < > (extended_block_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) -> * mut platform_version_version_protocol_version_AbciStructureVersion { ferment_interfaces :: boxed (platform_version_version_protocol_version_AbciStructureVersion { extended_block_info }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_AbciStructureVersion_destroy < > (ffi : * mut platform_version_version_protocol_version_AbciStructureVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_AbciStructureVersion_get_extended_block_info < > (obj : * const platform_version_version_protocol_version_AbciStructureVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . extended_block_info } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_AbciStructureVersion_set_extended_block_info < > (obj : * mut platform_version_version_protocol_version_AbciStructureVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . extended_block_info = value ; } } pub mod fee { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_version :: version :: fee :: FeeVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_fee_FeeVersion { pub uses_version_fee_multiplier_permille : * mut u64 , pub storage : * mut crate :: fermented :: types :: platform_version :: version :: fee :: storage :: platform_version_version_fee_storage_FeeStorageVersion , pub signature : * mut crate :: fermented :: types :: platform_version :: version :: fee :: signature :: platform_version_version_fee_signature_FeeSignatureVersion , pub hashing : * mut crate :: fermented :: types :: platform_version :: version :: fee :: hashing :: platform_version_version_fee_hashing_FeeHashingVersion , pub processing : * mut crate :: fermented :: types :: platform_version :: version :: fee :: processing :: platform_version_version_fee_processing_FeeProcessingVersion , pub data_contract : * mut crate :: fermented :: types :: platform_version :: version :: fee :: data_contract :: platform_version_version_fee_data_contract_FeeDataContractValidationVersion , pub state_transition_min_fees : * mut crate :: fermented :: types :: platform_version :: version :: fee :: state_transition_min_fees :: platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees , pub vote_resolution_fund_fees : * mut crate :: fermented :: types :: platform_version :: version :: fee :: vote_resolution_fund_fees :: platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: fee :: FeeVersion > for platform_version_version_fee_FeeVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_fee_FeeVersion) -> platform_version :: version :: fee :: FeeVersion { let ffi_ref = & * ffi ; platform_version :: version :: fee :: FeeVersion { uses_version_fee_multiplier_permille : ferment_interfaces :: from_opt_primitive (ffi_ref . uses_version_fee_multiplier_permille) , storage : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . storage) , signature : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . signature) , hashing : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . hashing) , processing : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . processing) , data_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract) , state_transition_min_fees : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . state_transition_min_fees) , vote_resolution_fund_fees : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . vote_resolution_fund_fees) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: fee :: FeeVersion > for platform_version_version_fee_FeeVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: fee :: FeeVersion) -> * const platform_version_version_fee_FeeVersion { ferment_interfaces :: boxed (platform_version_version_fee_FeeVersion { uses_version_fee_multiplier_permille : ferment_interfaces :: to_opt_primitive (obj . uses_version_fee_multiplier_permille) , storage : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . storage) , signature : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . signature) , hashing : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . hashing) , processing : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . processing) , data_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract) , state_transition_min_fees : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . state_transition_min_fees) , vote_resolution_fund_fees : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . vote_resolution_fund_fees) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: fee :: FeeVersion > for platform_version_version_fee_FeeVersion { unsafe fn destroy (ffi : * mut platform_version_version_fee_FeeVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_fee_FeeVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment_interfaces :: unbox_any (ffi_ref . storage) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature) ; ; ferment_interfaces :: unbox_any (ffi_ref . hashing) ; ; ferment_interfaces :: unbox_any (ffi_ref . processing) ; ; ferment_interfaces :: unbox_any (ffi_ref . data_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . state_transition_min_fees) ; ; ferment_interfaces :: unbox_any (ffi_ref . vote_resolution_fund_fees) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_ctor < > (uses_version_fee_multiplier_permille : * mut u64 , storage : * mut crate :: fermented :: types :: platform_version :: version :: fee :: storage :: platform_version_version_fee_storage_FeeStorageVersion , signature : * mut crate :: fermented :: types :: platform_version :: version :: fee :: signature :: platform_version_version_fee_signature_FeeSignatureVersion , hashing : * mut crate :: fermented :: types :: platform_version :: version :: fee :: hashing :: platform_version_version_fee_hashing_FeeHashingVersion , processing : * mut crate :: fermented :: types :: platform_version :: version :: fee :: processing :: platform_version_version_fee_processing_FeeProcessingVersion , data_contract : * mut crate :: fermented :: types :: platform_version :: version :: fee :: data_contract :: platform_version_version_fee_data_contract_FeeDataContractValidationVersion , state_transition_min_fees : * mut crate :: fermented :: types :: platform_version :: version :: fee :: state_transition_min_fees :: platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees , vote_resolution_fund_fees : * mut crate :: fermented :: types :: platform_version :: version :: fee :: vote_resolution_fund_fees :: platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees) -> * mut platform_version_version_fee_FeeVersion { ferment_interfaces :: boxed (platform_version_version_fee_FeeVersion { uses_version_fee_multiplier_permille , storage , signature , hashing , processing , data_contract , state_transition_min_fees , vote_resolution_fund_fees }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_destroy < > (ffi : * mut platform_version_version_fee_FeeVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_get_uses_version_fee_multiplier_permille < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut u64 { (* obj) . uses_version_fee_multiplier_permille } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_get_storage < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: fee :: storage :: platform_version_version_fee_storage_FeeStorageVersion { (* obj) . storage } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_get_signature < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: fee :: signature :: platform_version_version_fee_signature_FeeSignatureVersion { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_get_hashing < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: fee :: hashing :: platform_version_version_fee_hashing_FeeHashingVersion { (* obj) . hashing } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_get_processing < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: fee :: processing :: platform_version_version_fee_processing_FeeProcessingVersion { (* obj) . processing } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_get_data_contract < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: fee :: data_contract :: platform_version_version_fee_data_contract_FeeDataContractValidationVersion { (* obj) . data_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_get_state_transition_min_fees < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: fee :: state_transition_min_fees :: platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees { (* obj) . state_transition_min_fees } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_get_vote_resolution_fund_fees < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: fee :: vote_resolution_fund_fees :: platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees { (* obj) . vote_resolution_fund_fees } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_set_uses_version_fee_multiplier_permille < > (obj : * mut platform_version_version_fee_FeeVersion , value : * mut u64) { (* obj) . uses_version_fee_multiplier_permille = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_set_storage < > (obj : * mut platform_version_version_fee_FeeVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: fee :: storage :: platform_version_version_fee_storage_FeeStorageVersion) { (* obj) . storage = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_set_signature < > (obj : * mut platform_version_version_fee_FeeVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: fee :: signature :: platform_version_version_fee_signature_FeeSignatureVersion) { (* obj) . signature = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_set_hashing < > (obj : * mut platform_version_version_fee_FeeVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: fee :: hashing :: platform_version_version_fee_hashing_FeeHashingVersion) { (* obj) . hashing = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_set_processing < > (obj : * mut platform_version_version_fee_FeeVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: fee :: processing :: platform_version_version_fee_processing_FeeProcessingVersion) { (* obj) . processing = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_set_data_contract < > (obj : * mut platform_version_version_fee_FeeVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: fee :: data_contract :: platform_version_version_fee_data_contract_FeeDataContractValidationVersion) { (* obj) . data_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_set_state_transition_min_fees < > (obj : * mut platform_version_version_fee_FeeVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: fee :: state_transition_min_fees :: platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) { (* obj) . state_transition_min_fees = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_set_vote_resolution_fund_fees < > (obj : * mut platform_version_version_fee_FeeVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: fee :: vote_resolution_fund_fees :: platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees) { (* obj) . vote_resolution_fund_fees = value ; } pub mod hashing { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`platform_version :: version :: fee :: hashing :: FeeHashingVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_fee_hashing_FeeHashingVersion { pub blake3_base : u64 , pub blake3_per_block : u64 , pub sha256_per_block : u64 , pub sha256_ripe_md160_base : u64 , pub single_sha256_base : u64 } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: fee :: hashing :: FeeHashingVersion > for platform_version_version_fee_hashing_FeeHashingVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_fee_hashing_FeeHashingVersion) -> platform_version :: version :: fee :: hashing :: FeeHashingVersion { let ffi_ref = & * ffi ; platform_version :: version :: fee :: hashing :: FeeHashingVersion { blake3_base : ffi_ref . blake3_base , blake3_per_block : ffi_ref . blake3_per_block , sha256_per_block : ffi_ref . sha256_per_block , sha256_ripe_md160_base : ffi_ref . sha256_ripe_md160_base , single_sha256_base : ffi_ref . single_sha256_base } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: fee :: hashing :: FeeHashingVersion > for platform_version_version_fee_hashing_FeeHashingVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: fee :: hashing :: FeeHashingVersion) -> * const platform_version_version_fee_hashing_FeeHashingVersion { ferment_interfaces :: boxed (platform_version_version_fee_hashing_FeeHashingVersion { blake3_base : obj . blake3_base , blake3_per_block : obj . blake3_per_block , sha256_per_block : obj . sha256_per_block , sha256_ripe_md160_base : obj . sha256_ripe_md160_base , single_sha256_base : obj . single_sha256_base }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: fee :: hashing :: FeeHashingVersion > for platform_version_version_fee_hashing_FeeHashingVersion { unsafe fn destroy (ffi : * mut platform_version_version_fee_hashing_FeeHashingVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_fee_hashing_FeeHashingVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_ctor < > (blake3_base : u64 , blake3_per_block : u64 , sha256_per_block : u64 , sha256_ripe_md160_base : u64 , single_sha256_base : u64) -> * mut platform_version_version_fee_hashing_FeeHashingVersion { ferment_interfaces :: boxed (platform_version_version_fee_hashing_FeeHashingVersion { blake3_base , blake3_per_block , sha256_per_block , sha256_ripe_md160_base , single_sha256_base }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_destroy < > (ffi : * mut platform_version_version_fee_hashing_FeeHashingVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_get_blake3_base < > (obj : * const platform_version_version_fee_hashing_FeeHashingVersion) -> u64 { (* obj) . blake3_base } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_get_blake3_per_block < > (obj : * const platform_version_version_fee_hashing_FeeHashingVersion) -> u64 { (* obj) . blake3_per_block } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_get_sha256_per_block < > (obj : * const platform_version_version_fee_hashing_FeeHashingVersion) -> u64 { (* obj) . sha256_per_block } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_get_sha256_ripe_md160_base < > (obj : * const platform_version_version_fee_hashing_FeeHashingVersion) -> u64 { (* obj) . sha256_ripe_md160_base } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_get_single_sha256_base < > (obj : * const platform_version_version_fee_hashing_FeeHashingVersion) -> u64 { (* obj) . single_sha256_base } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_set_blake3_base < > (obj : * mut platform_version_version_fee_hashing_FeeHashingVersion , value : u64) { (* obj) . blake3_base = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_set_blake3_per_block < > (obj : * mut platform_version_version_fee_hashing_FeeHashingVersion , value : u64) { (* obj) . blake3_per_block = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_set_sha256_per_block < > (obj : * mut platform_version_version_fee_hashing_FeeHashingVersion , value : u64) { (* obj) . sha256_per_block = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_set_sha256_ripe_md160_base < > (obj : * mut platform_version_version_fee_hashing_FeeHashingVersion , value : u64) { (* obj) . sha256_ripe_md160_base = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_set_single_sha256_base < > (obj : * mut platform_version_version_fee_hashing_FeeHashingVersion , value : u64) { (* obj) . single_sha256_base = value ; } } pub mod data_contract { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`platform_version :: version :: fee :: data_contract :: FeeDataContractValidationVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_fee_data_contract_FeeDataContractValidationVersion { pub document_type_base_fee : u64 , pub document_type_size_fee : u64 , pub document_type_per_property_fee : u64 , pub document_type_base_non_unique_index_fee : u64 , pub document_type_non_unique_index_per_property_fee : u64 , pub document_type_base_unique_index_fee : u64 , pub document_type_unique_index_per_property_fee : u64 } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: fee :: data_contract :: FeeDataContractValidationVersion > for platform_version_version_fee_data_contract_FeeDataContractValidationVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> platform_version :: version :: fee :: data_contract :: FeeDataContractValidationVersion { let ffi_ref = & * ffi ; platform_version :: version :: fee :: data_contract :: FeeDataContractValidationVersion { document_type_base_fee : ffi_ref . document_type_base_fee , document_type_size_fee : ffi_ref . document_type_size_fee , document_type_per_property_fee : ffi_ref . document_type_per_property_fee , document_type_base_non_unique_index_fee : ffi_ref . document_type_base_non_unique_index_fee , document_type_non_unique_index_per_property_fee : ffi_ref . document_type_non_unique_index_per_property_fee , document_type_base_unique_index_fee : ffi_ref . document_type_base_unique_index_fee , document_type_unique_index_per_property_fee : ffi_ref . document_type_unique_index_per_property_fee } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: fee :: data_contract :: FeeDataContractValidationVersion > for platform_version_version_fee_data_contract_FeeDataContractValidationVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: fee :: data_contract :: FeeDataContractValidationVersion) -> * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion { ferment_interfaces :: boxed (platform_version_version_fee_data_contract_FeeDataContractValidationVersion { document_type_base_fee : obj . document_type_base_fee , document_type_size_fee : obj . document_type_size_fee , document_type_per_property_fee : obj . document_type_per_property_fee , document_type_base_non_unique_index_fee : obj . document_type_base_non_unique_index_fee , document_type_non_unique_index_per_property_fee : obj . document_type_non_unique_index_per_property_fee , document_type_base_unique_index_fee : obj . document_type_base_unique_index_fee , document_type_unique_index_per_property_fee : obj . document_type_unique_index_per_property_fee }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: fee :: data_contract :: FeeDataContractValidationVersion > for platform_version_version_fee_data_contract_FeeDataContractValidationVersion { unsafe fn destroy (ffi : * mut platform_version_version_fee_data_contract_FeeDataContractValidationVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_fee_data_contract_FeeDataContractValidationVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_ctor < > (document_type_base_fee : u64 , document_type_size_fee : u64 , document_type_per_property_fee : u64 , document_type_base_non_unique_index_fee : u64 , document_type_non_unique_index_per_property_fee : u64 , document_type_base_unique_index_fee : u64 , document_type_unique_index_per_property_fee : u64) -> * mut platform_version_version_fee_data_contract_FeeDataContractValidationVersion { ferment_interfaces :: boxed (platform_version_version_fee_data_contract_FeeDataContractValidationVersion { document_type_base_fee , document_type_size_fee , document_type_per_property_fee , document_type_base_non_unique_index_fee , document_type_non_unique_index_per_property_fee , document_type_base_unique_index_fee , document_type_unique_index_per_property_fee }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_destroy < > (ffi : * mut platform_version_version_fee_data_contract_FeeDataContractValidationVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_get_document_type_base_fee < > (obj : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> u64 { (* obj) . document_type_base_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_get_document_type_size_fee < > (obj : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> u64 { (* obj) . document_type_size_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_get_document_type_per_property_fee < > (obj : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> u64 { (* obj) . document_type_per_property_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_get_document_type_base_non_unique_index_fee < > (obj : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> u64 { (* obj) . document_type_base_non_unique_index_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_get_document_type_non_unique_index_per_property_fee < > (obj : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> u64 { (* obj) . document_type_non_unique_index_per_property_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_get_document_type_base_unique_index_fee < > (obj : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> u64 { (* obj) . document_type_base_unique_index_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_get_document_type_unique_index_per_property_fee < > (obj : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> u64 { (* obj) . document_type_unique_index_per_property_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_set_document_type_base_fee < > (obj : * mut platform_version_version_fee_data_contract_FeeDataContractValidationVersion , value : u64) { (* obj) . document_type_base_fee = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_set_document_type_size_fee < > (obj : * mut platform_version_version_fee_data_contract_FeeDataContractValidationVersion , value : u64) { (* obj) . document_type_size_fee = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_set_document_type_per_property_fee < > (obj : * mut platform_version_version_fee_data_contract_FeeDataContractValidationVersion , value : u64) { (* obj) . document_type_per_property_fee = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_set_document_type_base_non_unique_index_fee < > (obj : * mut platform_version_version_fee_data_contract_FeeDataContractValidationVersion , value : u64) { (* obj) . document_type_base_non_unique_index_fee = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_set_document_type_non_unique_index_per_property_fee < > (obj : * mut platform_version_version_fee_data_contract_FeeDataContractValidationVersion , value : u64) { (* obj) . document_type_non_unique_index_per_property_fee = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_set_document_type_base_unique_index_fee < > (obj : * mut platform_version_version_fee_data_contract_FeeDataContractValidationVersion , value : u64) { (* obj) . document_type_base_unique_index_fee = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_set_document_type_unique_index_per_property_fee < > (obj : * mut platform_version_version_fee_data_contract_FeeDataContractValidationVersion , value : u64) { (* obj) . document_type_unique_index_per_property_fee = value ; } } # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } pub mod vote_resolution_fund_fees { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`platform_version :: version :: fee :: vote_resolution_fund_fees :: VoteResolutionFundFees`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees { pub contested_document_vote_resolution_fund_required_amount : u64 , pub contested_document_vote_resolution_unlock_fund_required_amount : u64 , pub contested_document_single_vote_cost : u64 } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: fee :: vote_resolution_fund_fees :: VoteResolutionFundFees > for platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees { unsafe fn ffi_from_const (ffi : * const platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees) -> platform_version :: version :: fee :: vote_resolution_fund_fees :: VoteResolutionFundFees { let ffi_ref = & * ffi ; platform_version :: version :: fee :: vote_resolution_fund_fees :: VoteResolutionFundFees { contested_document_vote_resolution_fund_required_amount : ffi_ref . contested_document_vote_resolution_fund_required_amount , contested_document_vote_resolution_unlock_fund_required_amount : ffi_ref . contested_document_vote_resolution_unlock_fund_required_amount , contested_document_single_vote_cost : ffi_ref . contested_document_single_vote_cost } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: fee :: vote_resolution_fund_fees :: VoteResolutionFundFees > for platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees { unsafe fn ffi_to_const (obj : platform_version :: version :: fee :: vote_resolution_fund_fees :: VoteResolutionFundFees) -> * const platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees { ferment_interfaces :: boxed (platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees { contested_document_vote_resolution_fund_required_amount : obj . contested_document_vote_resolution_fund_required_amount , contested_document_vote_resolution_unlock_fund_required_amount : obj . contested_document_vote_resolution_unlock_fund_required_amount , contested_document_single_vote_cost : obj . contested_document_single_vote_cost }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: fee :: vote_resolution_fund_fees :: VoteResolutionFundFees > for platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees { unsafe fn destroy (ffi : * mut platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees_ctor < > (contested_document_vote_resolution_fund_required_amount : u64 , contested_document_vote_resolution_unlock_fund_required_amount : u64 , contested_document_single_vote_cost : u64) -> * mut platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees { ferment_interfaces :: boxed (platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees { contested_document_vote_resolution_fund_required_amount , contested_document_vote_resolution_unlock_fund_required_amount , contested_document_single_vote_cost }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees_destroy < > (ffi : * mut platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees_get_contested_document_vote_resolution_fund_required_amount < > (obj : * const platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees) -> u64 { (* obj) . contested_document_vote_resolution_fund_required_amount } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees_get_contested_document_vote_resolution_unlock_fund_required_amount < > (obj : * const platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees) -> u64 { (* obj) . contested_document_vote_resolution_unlock_fund_required_amount } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees_get_contested_document_single_vote_cost < > (obj : * const platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees) -> u64 { (* obj) . contested_document_single_vote_cost } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees_set_contested_document_vote_resolution_fund_required_amount < > (obj : * mut platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees , value : u64) { (* obj) . contested_document_vote_resolution_fund_required_amount = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees_set_contested_document_vote_resolution_unlock_fund_required_amount < > (obj : * mut platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees , value : u64) { (* obj) . contested_document_vote_resolution_unlock_fund_required_amount = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees_set_contested_document_single_vote_cost < > (obj : * mut platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees , value : u64) { (* obj) . contested_document_single_vote_cost = value ; } } pub mod state_transition_min_fees { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`platform_version :: version :: fee :: state_transition_min_fees :: StateTransitionMinFees`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees { pub credit_transfer : u64 , pub credit_withdrawal : u64 , pub identity_update : u64 , pub document_batch_sub_transition : u64 , pub contract_create : u64 , pub contract_update : u64 , pub masternode_vote : u64 } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: fee :: state_transition_min_fees :: StateTransitionMinFees > for platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees { unsafe fn ffi_from_const (ffi : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> platform_version :: version :: fee :: state_transition_min_fees :: StateTransitionMinFees { let ffi_ref = & * ffi ; platform_version :: version :: fee :: state_transition_min_fees :: StateTransitionMinFees { credit_transfer : ffi_ref . credit_transfer , credit_withdrawal : ffi_ref . credit_withdrawal , identity_update : ffi_ref . identity_update , document_batch_sub_transition : ffi_ref . document_batch_sub_transition , contract_create : ffi_ref . contract_create , contract_update : ffi_ref . contract_update , masternode_vote : ffi_ref . masternode_vote } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: fee :: state_transition_min_fees :: StateTransitionMinFees > for platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees { unsafe fn ffi_to_const (obj : platform_version :: version :: fee :: state_transition_min_fees :: StateTransitionMinFees) -> * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees { ferment_interfaces :: boxed (platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees { credit_transfer : obj . credit_transfer , credit_withdrawal : obj . credit_withdrawal , identity_update : obj . identity_update , document_batch_sub_transition : obj . document_batch_sub_transition , contract_create : obj . contract_create , contract_update : obj . contract_update , masternode_vote : obj . masternode_vote }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: fee :: state_transition_min_fees :: StateTransitionMinFees > for platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees { unsafe fn destroy (ffi : * mut platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_ctor < > (credit_transfer : u64 , credit_withdrawal : u64 , identity_update : u64 , document_batch_sub_transition : u64 , contract_create : u64 , contract_update : u64 , masternode_vote : u64) -> * mut platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees { ferment_interfaces :: boxed (platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees { credit_transfer , credit_withdrawal , identity_update , document_batch_sub_transition , contract_create , contract_update , masternode_vote }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_destroy < > (ffi : * mut platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_get_credit_transfer < > (obj : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> u64 { (* obj) . credit_transfer } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_get_credit_withdrawal < > (obj : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> u64 { (* obj) . credit_withdrawal } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_get_identity_update < > (obj : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> u64 { (* obj) . identity_update } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_get_document_batch_sub_transition < > (obj : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> u64 { (* obj) . document_batch_sub_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_get_contract_create < > (obj : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> u64 { (* obj) . contract_create } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_get_contract_update < > (obj : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> u64 { (* obj) . contract_update } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_get_masternode_vote < > (obj : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> u64 { (* obj) . masternode_vote } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_set_credit_transfer < > (obj : * mut platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees , value : u64) { (* obj) . credit_transfer = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_set_credit_withdrawal < > (obj : * mut platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees , value : u64) { (* obj) . credit_withdrawal = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_set_identity_update < > (obj : * mut platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees , value : u64) { (* obj) . identity_update = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_set_document_batch_sub_transition < > (obj : * mut platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees , value : u64) { (* obj) . document_batch_sub_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_set_contract_create < > (obj : * mut platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees , value : u64) { (* obj) . contract_create = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_set_contract_update < > (obj : * mut platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees , value : u64) { (* obj) . contract_update = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_set_masternode_vote < > (obj : * mut platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees , value : u64) { (* obj) . masternode_vote = value ; } } pub mod processing { use crate as ferment_example_platform ; # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`platform_version :: version :: fee :: processing :: FeeProcessingVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_fee_processing_FeeProcessingVersion { pub fetch_identity_balance_processing_cost : u64 , pub fetch_identity_revision_processing_cost : u64 , pub fetch_identity_balance_and_revision_processing_cost : u64 , pub fetch_identity_cost_per_look_up_key_by_id : u64 , pub fetch_prefunded_specialized_balance_processing_cost : u64 , pub fetch_single_identity_key_processing_cost : u64 , pub validate_key_structure : u64 } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: fee :: processing :: FeeProcessingVersion > for platform_version_version_fee_processing_FeeProcessingVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_fee_processing_FeeProcessingVersion) -> platform_version :: version :: fee :: processing :: FeeProcessingVersion { let ffi_ref = & * ffi ; platform_version :: version :: fee :: processing :: FeeProcessingVersion { fetch_identity_balance_processing_cost : ffi_ref . fetch_identity_balance_processing_cost , fetch_identity_revision_processing_cost : ffi_ref . fetch_identity_revision_processing_cost , fetch_identity_balance_and_revision_processing_cost : ffi_ref . fetch_identity_balance_and_revision_processing_cost , fetch_identity_cost_per_look_up_key_by_id : ffi_ref . fetch_identity_cost_per_look_up_key_by_id , fetch_prefunded_specialized_balance_processing_cost : ffi_ref . fetch_prefunded_specialized_balance_processing_cost , fetch_single_identity_key_processing_cost : ffi_ref . fetch_single_identity_key_processing_cost , validate_key_structure : ffi_ref . validate_key_structure } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: fee :: processing :: FeeProcessingVersion > for platform_version_version_fee_processing_FeeProcessingVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: fee :: processing :: FeeProcessingVersion) -> * const platform_version_version_fee_processing_FeeProcessingVersion { ferment_interfaces :: boxed (platform_version_version_fee_processing_FeeProcessingVersion { fetch_identity_balance_processing_cost : obj . fetch_identity_balance_processing_cost , fetch_identity_revision_processing_cost : obj . fetch_identity_revision_processing_cost , fetch_identity_balance_and_revision_processing_cost : obj . fetch_identity_balance_and_revision_processing_cost , fetch_identity_cost_per_look_up_key_by_id : obj . fetch_identity_cost_per_look_up_key_by_id , fetch_prefunded_specialized_balance_processing_cost : obj . fetch_prefunded_specialized_balance_processing_cost , fetch_single_identity_key_processing_cost : obj . fetch_single_identity_key_processing_cost , validate_key_structure : obj . validate_key_structure }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: fee :: processing :: FeeProcessingVersion > for platform_version_version_fee_processing_FeeProcessingVersion { unsafe fn destroy (ffi : * mut platform_version_version_fee_processing_FeeProcessingVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_fee_processing_FeeProcessingVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_ctor < > (fetch_identity_balance_processing_cost : u64 , fetch_identity_revision_processing_cost : u64 , fetch_identity_balance_and_revision_processing_cost : u64 , fetch_identity_cost_per_look_up_key_by_id : u64 , fetch_prefunded_specialized_balance_processing_cost : u64 , fetch_single_identity_key_processing_cost : u64 , validate_key_structure : u64) -> * mut platform_version_version_fee_processing_FeeProcessingVersion { ferment_interfaces :: boxed (platform_version_version_fee_processing_FeeProcessingVersion { fetch_identity_balance_processing_cost , fetch_identity_revision_processing_cost , fetch_identity_balance_and_revision_processing_cost , fetch_identity_cost_per_look_up_key_by_id , fetch_prefunded_specialized_balance_processing_cost , fetch_single_identity_key_processing_cost , validate_key_structure }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_destroy < > (ffi : * mut platform_version_version_fee_processing_FeeProcessingVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_get_fetch_identity_balance_processing_cost < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . fetch_identity_balance_processing_cost } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_get_fetch_identity_revision_processing_cost < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . fetch_identity_revision_processing_cost } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_get_fetch_identity_balance_and_revision_processing_cost < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . fetch_identity_balance_and_revision_processing_cost } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_get_fetch_identity_cost_per_look_up_key_by_id < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . fetch_identity_cost_per_look_up_key_by_id } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_get_fetch_prefunded_specialized_balance_processing_cost < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . fetch_prefunded_specialized_balance_processing_cost } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_get_fetch_single_identity_key_processing_cost < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . fetch_single_identity_key_processing_cost } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_get_validate_key_structure < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . validate_key_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_set_fetch_identity_balance_processing_cost < > (obj : * mut platform_version_version_fee_processing_FeeProcessingVersion , value : u64) { (* obj) . fetch_identity_balance_processing_cost = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_set_fetch_identity_revision_processing_cost < > (obj : * mut platform_version_version_fee_processing_FeeProcessingVersion , value : u64) { (* obj) . fetch_identity_revision_processing_cost = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_set_fetch_identity_balance_and_revision_processing_cost < > (obj : * mut platform_version_version_fee_processing_FeeProcessingVersion , value : u64) { (* obj) . fetch_identity_balance_and_revision_processing_cost = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_set_fetch_identity_cost_per_look_up_key_by_id < > (obj : * mut platform_version_version_fee_processing_FeeProcessingVersion , value : u64) { (* obj) . fetch_identity_cost_per_look_up_key_by_id = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_set_fetch_prefunded_specialized_balance_processing_cost < > (obj : * mut platform_version_version_fee_processing_FeeProcessingVersion , value : u64) { (* obj) . fetch_prefunded_specialized_balance_processing_cost = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_set_fetch_single_identity_key_processing_cost < > (obj : * mut platform_version_version_fee_processing_FeeProcessingVersion , value : u64) { (* obj) . fetch_single_identity_key_processing_cost = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_set_validate_key_structure < > (obj : * mut platform_version_version_fee_processing_FeeProcessingVersion , value : u64) { (* obj) . validate_key_structure = value ; } } pub mod storage { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_version :: version :: fee :: storage :: FeeStorageVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_fee_storage_FeeStorageVersion { pub storage_disk_usage_credit_per_byte : u64 , pub storage_processing_credit_per_byte : u64 , pub storage_load_credit_per_byte : u64 , pub non_storage_load_credit_per_byte : u64 , pub storage_seek_cost : u64 } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: fee :: storage :: FeeStorageVersion > for platform_version_version_fee_storage_FeeStorageVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_fee_storage_FeeStorageVersion) -> platform_version :: version :: fee :: storage :: FeeStorageVersion { let ffi_ref = & * ffi ; platform_version :: version :: fee :: storage :: FeeStorageVersion { storage_disk_usage_credit_per_byte : ffi_ref . storage_disk_usage_credit_per_byte , storage_processing_credit_per_byte : ffi_ref . storage_processing_credit_per_byte , storage_load_credit_per_byte : ffi_ref . storage_load_credit_per_byte , non_storage_load_credit_per_byte : ffi_ref . non_storage_load_credit_per_byte , storage_seek_cost : ffi_ref . storage_seek_cost } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: fee :: storage :: FeeStorageVersion > for platform_version_version_fee_storage_FeeStorageVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: fee :: storage :: FeeStorageVersion) -> * const platform_version_version_fee_storage_FeeStorageVersion { ferment_interfaces :: boxed (platform_version_version_fee_storage_FeeStorageVersion { storage_disk_usage_credit_per_byte : obj . storage_disk_usage_credit_per_byte , storage_processing_credit_per_byte : obj . storage_processing_credit_per_byte , storage_load_credit_per_byte : obj . storage_load_credit_per_byte , non_storage_load_credit_per_byte : obj . non_storage_load_credit_per_byte , storage_seek_cost : obj . storage_seek_cost }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: fee :: storage :: FeeStorageVersion > for platform_version_version_fee_storage_FeeStorageVersion { unsafe fn destroy (ffi : * mut platform_version_version_fee_storage_FeeStorageVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_fee_storage_FeeStorageVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_ctor < > (storage_disk_usage_credit_per_byte : u64 , storage_processing_credit_per_byte : u64 , storage_load_credit_per_byte : u64 , non_storage_load_credit_per_byte : u64 , storage_seek_cost : u64) -> * mut platform_version_version_fee_storage_FeeStorageVersion { ferment_interfaces :: boxed (platform_version_version_fee_storage_FeeStorageVersion { storage_disk_usage_credit_per_byte , storage_processing_credit_per_byte , storage_load_credit_per_byte , non_storage_load_credit_per_byte , storage_seek_cost }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_destroy < > (ffi : * mut platform_version_version_fee_storage_FeeStorageVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_get_storage_disk_usage_credit_per_byte < > (obj : * const platform_version_version_fee_storage_FeeStorageVersion) -> u64 { (* obj) . storage_disk_usage_credit_per_byte } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_get_storage_processing_credit_per_byte < > (obj : * const platform_version_version_fee_storage_FeeStorageVersion) -> u64 { (* obj) . storage_processing_credit_per_byte } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_get_storage_load_credit_per_byte < > (obj : * const platform_version_version_fee_storage_FeeStorageVersion) -> u64 { (* obj) . storage_load_credit_per_byte } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_get_non_storage_load_credit_per_byte < > (obj : * const platform_version_version_fee_storage_FeeStorageVersion) -> u64 { (* obj) . non_storage_load_credit_per_byte } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_get_storage_seek_cost < > (obj : * const platform_version_version_fee_storage_FeeStorageVersion) -> u64 { (* obj) . storage_seek_cost } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_set_storage_disk_usage_credit_per_byte < > (obj : * mut platform_version_version_fee_storage_FeeStorageVersion , value : u64) { (* obj) . storage_disk_usage_credit_per_byte = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_set_storage_processing_credit_per_byte < > (obj : * mut platform_version_version_fee_storage_FeeStorageVersion , value : u64) { (* obj) . storage_processing_credit_per_byte = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_set_storage_load_credit_per_byte < > (obj : * mut platform_version_version_fee_storage_FeeStorageVersion , value : u64) { (* obj) . storage_load_credit_per_byte = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_set_non_storage_load_credit_per_byte < > (obj : * mut platform_version_version_fee_storage_FeeStorageVersion , value : u64) { (* obj) . non_storage_load_credit_per_byte = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_set_storage_seek_cost < > (obj : * mut platform_version_version_fee_storage_FeeStorageVersion , value : u64) { (* obj) . storage_seek_cost = value ; } # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } } pub mod signature { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_version :: version :: fee :: signature :: FeeSignatureVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_fee_signature_FeeSignatureVersion { pub verify_signature_ecdsa_secp256k1 : u64 , pub verify_signature_bls12_381 : u64 , pub verify_signature_ecdsa_hash160 : u64 , pub verify_signature_bip13_script_hash : u64 , pub verify_signature_eddsa25519_hash160 : u64 } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: fee :: signature :: FeeSignatureVersion > for platform_version_version_fee_signature_FeeSignatureVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_fee_signature_FeeSignatureVersion) -> platform_version :: version :: fee :: signature :: FeeSignatureVersion { let ffi_ref = & * ffi ; platform_version :: version :: fee :: signature :: FeeSignatureVersion { verify_signature_ecdsa_secp256k1 : ffi_ref . verify_signature_ecdsa_secp256k1 , verify_signature_bls12_381 : ffi_ref . verify_signature_bls12_381 , verify_signature_ecdsa_hash160 : ffi_ref . verify_signature_ecdsa_hash160 , verify_signature_bip13_script_hash : ffi_ref . verify_signature_bip13_script_hash , verify_signature_eddsa25519_hash160 : ffi_ref . verify_signature_eddsa25519_hash160 } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: fee :: signature :: FeeSignatureVersion > for platform_version_version_fee_signature_FeeSignatureVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: fee :: signature :: FeeSignatureVersion) -> * const platform_version_version_fee_signature_FeeSignatureVersion { ferment_interfaces :: boxed (platform_version_version_fee_signature_FeeSignatureVersion { verify_signature_ecdsa_secp256k1 : obj . verify_signature_ecdsa_secp256k1 , verify_signature_bls12_381 : obj . verify_signature_bls12_381 , verify_signature_ecdsa_hash160 : obj . verify_signature_ecdsa_hash160 , verify_signature_bip13_script_hash : obj . verify_signature_bip13_script_hash , verify_signature_eddsa25519_hash160 : obj . verify_signature_eddsa25519_hash160 }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: fee :: signature :: FeeSignatureVersion > for platform_version_version_fee_signature_FeeSignatureVersion { unsafe fn destroy (ffi : * mut platform_version_version_fee_signature_FeeSignatureVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_fee_signature_FeeSignatureVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_ctor < > (verify_signature_ecdsa_secp256k1 : u64 , verify_signature_bls12_381 : u64 , verify_signature_ecdsa_hash160 : u64 , verify_signature_bip13_script_hash : u64 , verify_signature_eddsa25519_hash160 : u64) -> * mut platform_version_version_fee_signature_FeeSignatureVersion { ferment_interfaces :: boxed (platform_version_version_fee_signature_FeeSignatureVersion { verify_signature_ecdsa_secp256k1 , verify_signature_bls12_381 , verify_signature_ecdsa_hash160 , verify_signature_bip13_script_hash , verify_signature_eddsa25519_hash160 }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_destroy < > (ffi : * mut platform_version_version_fee_signature_FeeSignatureVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_get_verify_signature_ecdsa_secp256k1 < > (obj : * const platform_version_version_fee_signature_FeeSignatureVersion) -> u64 { (* obj) . verify_signature_ecdsa_secp256k1 } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_get_verify_signature_bls12_381 < > (obj : * const platform_version_version_fee_signature_FeeSignatureVersion) -> u64 { (* obj) . verify_signature_bls12_381 } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_get_verify_signature_ecdsa_hash160 < > (obj : * const platform_version_version_fee_signature_FeeSignatureVersion) -> u64 { (* obj) . verify_signature_ecdsa_hash160 } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_get_verify_signature_bip13_script_hash < > (obj : * const platform_version_version_fee_signature_FeeSignatureVersion) -> u64 { (* obj) . verify_signature_bip13_script_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_get_verify_signature_eddsa25519_hash160 < > (obj : * const platform_version_version_fee_signature_FeeSignatureVersion) -> u64 { (* obj) . verify_signature_eddsa25519_hash160 } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_set_verify_signature_ecdsa_secp256k1 < > (obj : * mut platform_version_version_fee_signature_FeeSignatureVersion , value : u64) { (* obj) . verify_signature_ecdsa_secp256k1 = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_set_verify_signature_bls12_381 < > (obj : * mut platform_version_version_fee_signature_FeeSignatureVersion , value : u64) { (* obj) . verify_signature_bls12_381 = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_set_verify_signature_ecdsa_hash160 < > (obj : * mut platform_version_version_fee_signature_FeeSignatureVersion , value : u64) { (* obj) . verify_signature_ecdsa_hash160 = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_set_verify_signature_bip13_script_hash < > (obj : * mut platform_version_version_fee_signature_FeeSignatureVersion , value : u64) { (* obj) . verify_signature_bip13_script_hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_set_verify_signature_eddsa25519_hash160 < > (obj : * mut platform_version_version_fee_signature_FeeSignatureVersion , value : u64) { (* obj) . verify_signature_eddsa25519_hash160 = value ; } # [cfg (test)] pub mod tests { use crate as ferment_example_platform ; } } } # [cfg (feature = "mock-versions")] pub mod mocks { use crate as ferment_example_platform ; } pub mod drive_abci_versions { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: PenaltyAmounts`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_PenaltyAmounts { pub identity_id_not_correct : u64 , pub unique_key_already_present : u64 , pub validation_of_added_keys_structure_failure : u64 , pub validation_of_added_keys_proof_of_possession_failure : u64 } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: PenaltyAmounts > for platform_version_version_drive_abci_versions_PenaltyAmounts { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_PenaltyAmounts) -> platform_version :: version :: drive_abci_versions :: PenaltyAmounts { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: PenaltyAmounts { identity_id_not_correct : ffi_ref . identity_id_not_correct , unique_key_already_present : ffi_ref . unique_key_already_present , validation_of_added_keys_structure_failure : ffi_ref . validation_of_added_keys_structure_failure , validation_of_added_keys_proof_of_possession_failure : ffi_ref . validation_of_added_keys_proof_of_possession_failure } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: PenaltyAmounts > for platform_version_version_drive_abci_versions_PenaltyAmounts { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: PenaltyAmounts) -> * const platform_version_version_drive_abci_versions_PenaltyAmounts { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_PenaltyAmounts { identity_id_not_correct : obj . identity_id_not_correct , unique_key_already_present : obj . unique_key_already_present , validation_of_added_keys_structure_failure : obj . validation_of_added_keys_structure_failure , validation_of_added_keys_proof_of_possession_failure : obj . validation_of_added_keys_proof_of_possession_failure }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: PenaltyAmounts > for platform_version_version_drive_abci_versions_PenaltyAmounts { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_PenaltyAmounts) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_PenaltyAmounts { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_PenaltyAmounts_ctor < > (identity_id_not_correct : u64 , unique_key_already_present : u64 , validation_of_added_keys_structure_failure : u64 , validation_of_added_keys_proof_of_possession_failure : u64) -> * mut platform_version_version_drive_abci_versions_PenaltyAmounts { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_PenaltyAmounts { identity_id_not_correct , unique_key_already_present , validation_of_added_keys_structure_failure , validation_of_added_keys_proof_of_possession_failure }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_PenaltyAmounts_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_PenaltyAmounts) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_PenaltyAmounts_get_identity_id_not_correct < > (obj : * const platform_version_version_drive_abci_versions_PenaltyAmounts) -> u64 { (* obj) . identity_id_not_correct } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_PenaltyAmounts_get_unique_key_already_present < > (obj : * const platform_version_version_drive_abci_versions_PenaltyAmounts) -> u64 { (* obj) . unique_key_already_present } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_PenaltyAmounts_get_validation_of_added_keys_structure_failure < > (obj : * const platform_version_version_drive_abci_versions_PenaltyAmounts) -> u64 { (* obj) . validation_of_added_keys_structure_failure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_PenaltyAmounts_get_validation_of_added_keys_proof_of_possession_failure < > (obj : * const platform_version_version_drive_abci_versions_PenaltyAmounts) -> u64 { (* obj) . validation_of_added_keys_proof_of_possession_failure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_PenaltyAmounts_set_identity_id_not_correct < > (obj : * mut platform_version_version_drive_abci_versions_PenaltyAmounts , value : u64) { (* obj) . identity_id_not_correct = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_PenaltyAmounts_set_unique_key_already_present < > (obj : * mut platform_version_version_drive_abci_versions_PenaltyAmounts , value : u64) { (* obj) . unique_key_already_present = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_PenaltyAmounts_set_validation_of_added_keys_structure_failure < > (obj : * mut platform_version_version_drive_abci_versions_PenaltyAmounts , value : u64) { (* obj) . validation_of_added_keys_structure_failure = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_PenaltyAmounts_set_validation_of_added_keys_proof_of_possession_failure < > (obj : * mut platform_version_version_drive_abci_versions_PenaltyAmounts , value : u64) { (* obj) . validation_of_added_keys_proof_of_possession_failure = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciBlockFeeProcessingMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions { pub add_process_epoch_change_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub process_block_fees : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciBlockFeeProcessingMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciBlockFeeProcessingMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciBlockFeeProcessingMethodVersions { add_process_epoch_change_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_process_epoch_change_operations) , process_block_fees : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . process_block_fees) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciBlockFeeProcessingMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciBlockFeeProcessingMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions { add_process_epoch_change_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_process_epoch_change_operations) , process_block_fees : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . process_block_fees) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciBlockFeeProcessingMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_process_epoch_change_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . process_block_fees) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions_ctor < > (add_process_epoch_change_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , process_block_fees : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions { add_process_epoch_change_operations , process_block_fees }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions_get_add_process_epoch_change_operations < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_process_epoch_change_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions_get_process_block_fees < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . process_block_fees } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions_set_add_process_epoch_change_operations < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_process_epoch_change_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions_set_process_block_fees < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . process_block_fees = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciQueryPrefundedSpecializedBalancesVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions { pub balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciQueryPrefundedSpecializedBalancesVersions > for platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciQueryPrefundedSpecializedBalancesVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciQueryPrefundedSpecializedBalancesVersions { balance : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . balance) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciQueryPrefundedSpecializedBalancesVersions > for platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciQueryPrefundedSpecializedBalancesVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions { balance : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . balance) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciQueryPrefundedSpecializedBalancesVersions > for platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . balance) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions_ctor < > (balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) -> * mut platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions { balance }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions_get_balance < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions_set_balance < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . balance = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciStructureVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciStructureVersions { pub platform_state_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub platform_state_for_saving_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub state_transition_execution_context : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub commit : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub masternode : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub signature_verification_quorum_set : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciStructureVersions > for platform_version_version_drive_abci_versions_DriveAbciStructureVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciStructureVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciStructureVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciStructureVersions { platform_state_structure : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . platform_state_structure) , platform_state_for_saving_structure : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . platform_state_for_saving_structure) , state_transition_execution_context : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . state_transition_execution_context) , commit : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . commit) , masternode : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . masternode) , signature_verification_quorum_set : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . signature_verification_quorum_set) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciStructureVersions > for platform_version_version_drive_abci_versions_DriveAbciStructureVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciStructureVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciStructureVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciStructureVersions { platform_state_structure : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . platform_state_structure) , platform_state_for_saving_structure : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . platform_state_for_saving_structure) , state_transition_execution_context : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . state_transition_execution_context) , commit : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . commit) , masternode : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . masternode) , signature_verification_quorum_set : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . signature_verification_quorum_set) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciStructureVersions > for platform_version_version_drive_abci_versions_DriveAbciStructureVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciStructureVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciStructureVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . platform_state_structure) ; ; ferment_interfaces :: unbox_any (ffi_ref . platform_state_for_saving_structure) ; ; ferment_interfaces :: unbox_any (ffi_ref . state_transition_execution_context) ; ; ferment_interfaces :: unbox_any (ffi_ref . commit) ; ; ferment_interfaces :: unbox_any (ffi_ref . masternode) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature_verification_quorum_set) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_ctor < > (platform_state_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , platform_state_for_saving_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , state_transition_execution_context : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , commit : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , masternode : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , signature_verification_quorum_set : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciStructureVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciStructureVersions { platform_state_structure , platform_state_for_saving_structure , state_transition_execution_context , commit , masternode , signature_verification_quorum_set }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciStructureVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_get_platform_state_structure < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStructureVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . platform_state_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_get_platform_state_for_saving_structure < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStructureVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . platform_state_for_saving_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_get_state_transition_execution_context < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStructureVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . state_transition_execution_context } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_get_commit < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStructureVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . commit } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_get_masternode < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStructureVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . masternode } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_get_signature_verification_quorum_set < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStructureVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . signature_verification_quorum_set } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_set_platform_state_structure < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStructureVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . platform_state_structure = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_set_platform_state_for_saving_structure < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStructureVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . platform_state_for_saving_structure = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_set_state_transition_execution_context < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStructureVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . state_transition_execution_context = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_set_commit < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStructureVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . commit = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_set_masternode < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStructureVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . masternode = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_set_signature_verification_quorum_set < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStructureVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . signature_verification_quorum_set = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciMasternodeIdentitiesUpdatesMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions { pub get_voter_identity_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_operator_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_owner_identity_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_voter_identifier_from_masternode_list_item : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_operator_identifier_from_masternode_list_item : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_operator_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_owner_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_voter_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub disable_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_masternode_identities : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_operator_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_owner_withdrawal_address : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_voter_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciMasternodeIdentitiesUpdatesMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciMasternodeIdentitiesUpdatesMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciMasternodeIdentitiesUpdatesMethodVersions { get_voter_identity_key : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_voter_identity_key) , get_operator_identity_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_operator_identity_keys) , get_owner_identity_key : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_owner_identity_key) , get_voter_identifier_from_masternode_list_item : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_voter_identifier_from_masternode_list_item) , get_operator_identifier_from_masternode_list_item : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_operator_identifier_from_masternode_list_item) , create_operator_identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . create_operator_identity) , create_owner_identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . create_owner_identity) , create_voter_identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . create_voter_identity) , disable_identity_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . disable_identity_keys) , update_masternode_identities : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update_masternode_identities) , update_operator_identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update_operator_identity) , update_owner_withdrawal_address : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update_owner_withdrawal_address) , update_voter_identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update_voter_identity) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciMasternodeIdentitiesUpdatesMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions { get_voter_identity_key : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_voter_identity_key) , get_operator_identity_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_operator_identity_keys) , get_owner_identity_key : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_owner_identity_key) , get_voter_identifier_from_masternode_list_item : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_voter_identifier_from_masternode_list_item) , get_operator_identifier_from_masternode_list_item : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_operator_identifier_from_masternode_list_item) , create_operator_identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . create_operator_identity) , create_owner_identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . create_owner_identity) , create_voter_identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . create_voter_identity) , disable_identity_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . disable_identity_keys) , update_masternode_identities : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update_masternode_identities) , update_operator_identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update_operator_identity) , update_owner_withdrawal_address : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update_owner_withdrawal_address) , update_voter_identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update_voter_identity) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciMasternodeIdentitiesUpdatesMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . get_voter_identity_key) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_operator_identity_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_owner_identity_key) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_voter_identifier_from_masternode_list_item) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_operator_identifier_from_masternode_list_item) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_operator_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_owner_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_voter_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . disable_identity_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_masternode_identities) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_operator_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_owner_withdrawal_address) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_voter_identity) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_ctor < > (get_voter_identity_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_operator_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_owner_identity_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_voter_identifier_from_masternode_list_item : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_operator_identifier_from_masternode_list_item : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_operator_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_owner_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_voter_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , disable_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_masternode_identities : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_operator_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_owner_withdrawal_address : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_voter_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions { get_voter_identity_key , get_operator_identity_keys , get_owner_identity_key , get_voter_identifier_from_masternode_list_item , get_operator_identifier_from_masternode_list_item , create_operator_identity , create_owner_identity , create_voter_identity , disable_identity_keys , update_masternode_identities , update_operator_identity , update_owner_withdrawal_address , update_voter_identity }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_get_voter_identity_key < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_voter_identity_key } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_get_operator_identity_keys < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_operator_identity_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_get_owner_identity_key < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_owner_identity_key } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_get_voter_identifier_from_masternode_list_item < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_voter_identifier_from_masternode_list_item } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_get_operator_identifier_from_masternode_list_item < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_operator_identifier_from_masternode_list_item } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_create_operator_identity < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_operator_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_create_owner_identity < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_owner_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_create_voter_identity < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_voter_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_disable_identity_keys < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . disable_identity_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_update_masternode_identities < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_masternode_identities } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_update_operator_identity < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_operator_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_update_owner_withdrawal_address < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_owner_withdrawal_address } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_update_voter_identity < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_voter_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_get_voter_identity_key < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_voter_identity_key = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_get_operator_identity_keys < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_operator_identity_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_get_owner_identity_key < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_owner_identity_key = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_get_voter_identifier_from_masternode_list_item < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_voter_identifier_from_masternode_list_item = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_get_operator_identifier_from_masternode_list_item < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_operator_identifier_from_masternode_list_item = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_create_operator_identity < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_operator_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_create_owner_identity < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_owner_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_create_voter_identity < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_voter_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_disable_identity_keys < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . disable_identity_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_update_masternode_identities < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_masternode_identities = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_update_operator_identity < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_operator_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_update_owner_withdrawal_address < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_owner_withdrawal_address = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_update_voter_identity < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_voter_identity = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciIdentityCreditWithdrawalMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions { pub build_untied_withdrawal_transactions_from_documents : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub dequeue_and_build_unsigned_withdrawal_transactions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_transactions_block_inclusion_status : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub pool_withdrawals_into_transactions_queue : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_broadcasted_withdrawal_statuses : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub append_signatures_and_broadcast_withdrawal_transactions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciIdentityCreditWithdrawalMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciIdentityCreditWithdrawalMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciIdentityCreditWithdrawalMethodVersions { build_untied_withdrawal_transactions_from_documents : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . build_untied_withdrawal_transactions_from_documents) , dequeue_and_build_unsigned_withdrawal_transactions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . dequeue_and_build_unsigned_withdrawal_transactions) , fetch_transactions_block_inclusion_status : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_transactions_block_inclusion_status) , pool_withdrawals_into_transactions_queue : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . pool_withdrawals_into_transactions_queue) , update_broadcasted_withdrawal_statuses : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update_broadcasted_withdrawal_statuses) , append_signatures_and_broadcast_withdrawal_transactions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . append_signatures_and_broadcast_withdrawal_transactions) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciIdentityCreditWithdrawalMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciIdentityCreditWithdrawalMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions { build_untied_withdrawal_transactions_from_documents : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . build_untied_withdrawal_transactions_from_documents) , dequeue_and_build_unsigned_withdrawal_transactions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . dequeue_and_build_unsigned_withdrawal_transactions) , fetch_transactions_block_inclusion_status : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_transactions_block_inclusion_status) , pool_withdrawals_into_transactions_queue : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . pool_withdrawals_into_transactions_queue) , update_broadcasted_withdrawal_statuses : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update_broadcasted_withdrawal_statuses) , append_signatures_and_broadcast_withdrawal_transactions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . append_signatures_and_broadcast_withdrawal_transactions) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciIdentityCreditWithdrawalMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . build_untied_withdrawal_transactions_from_documents) ; ; ferment_interfaces :: unbox_any (ffi_ref . dequeue_and_build_unsigned_withdrawal_transactions) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_transactions_block_inclusion_status) ; ; ferment_interfaces :: unbox_any (ffi_ref . pool_withdrawals_into_transactions_queue) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_broadcasted_withdrawal_statuses) ; ; ferment_interfaces :: unbox_any (ffi_ref . append_signatures_and_broadcast_withdrawal_transactions) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_ctor < > (build_untied_withdrawal_transactions_from_documents : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , dequeue_and_build_unsigned_withdrawal_transactions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_transactions_block_inclusion_status : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pool_withdrawals_into_transactions_queue : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_broadcasted_withdrawal_statuses : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , append_signatures_and_broadcast_withdrawal_transactions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions { build_untied_withdrawal_transactions_from_documents , dequeue_and_build_unsigned_withdrawal_transactions , fetch_transactions_block_inclusion_status , pool_withdrawals_into_transactions_queue , update_broadcasted_withdrawal_statuses , append_signatures_and_broadcast_withdrawal_transactions }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_get_build_untied_withdrawal_transactions_from_documents < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . build_untied_withdrawal_transactions_from_documents } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_get_dequeue_and_build_unsigned_withdrawal_transactions < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . dequeue_and_build_unsigned_withdrawal_transactions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_get_fetch_transactions_block_inclusion_status < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_transactions_block_inclusion_status } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_get_pool_withdrawals_into_transactions_queue < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . pool_withdrawals_into_transactions_queue } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_get_update_broadcasted_withdrawal_statuses < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_broadcasted_withdrawal_statuses } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_get_append_signatures_and_broadcast_withdrawal_transactions < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . append_signatures_and_broadcast_withdrawal_transactions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_set_build_untied_withdrawal_transactions_from_documents < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . build_untied_withdrawal_transactions_from_documents = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_set_dequeue_and_build_unsigned_withdrawal_transactions < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . dequeue_and_build_unsigned_withdrawal_transactions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_set_fetch_transactions_block_inclusion_status < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_transactions_block_inclusion_status = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_set_pool_withdrawals_into_transactions_queue < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . pool_withdrawals_into_transactions_queue = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_set_update_broadcasted_withdrawal_statuses < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_broadcasted_withdrawal_statuses = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_set_append_signatures_and_broadcast_withdrawal_transactions < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . append_signatures_and_broadcast_withdrawal_transactions = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciCoreInstantSendLockMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions { pub verify_recent_signature_locally : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciCoreInstantSendLockMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciCoreInstantSendLockMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciCoreInstantSendLockMethodVersions { verify_recent_signature_locally : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_recent_signature_locally) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciCoreInstantSendLockMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciCoreInstantSendLockMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions { verify_recent_signature_locally : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_recent_signature_locally) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciCoreInstantSendLockMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . verify_recent_signature_locally) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions_ctor < > (verify_recent_signature_locally : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions { verify_recent_signature_locally }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions_get_verify_recent_signature_locally < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_recent_signature_locally } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions_set_verify_recent_signature_locally < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_recent_signature_locally = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciInitializationMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions { pub initial_core_height_and_time : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_genesis_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciInitializationMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciInitializationMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciInitializationMethodVersions { initial_core_height_and_time : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . initial_core_height_and_time) , create_genesis_state : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . create_genesis_state) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciInitializationMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciInitializationMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions { initial_core_height_and_time : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . initial_core_height_and_time) , create_genesis_state : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . create_genesis_state) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciInitializationMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . initial_core_height_and_time) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_genesis_state) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions_ctor < > (initial_core_height_and_time : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_genesis_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions { initial_core_height_and_time , create_genesis_state }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions_get_initial_core_height_and_time < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . initial_core_height_and_time } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions_get_create_genesis_state < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_genesis_state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions_set_initial_core_height_and_time < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . initial_core_height_and_time = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions_set_create_genesis_state < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_genesis_state = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciQueryIdentityVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions { pub identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub identities_contract_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub identity_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub identity_contract_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub balance_and_revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub identity_by_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciQueryIdentityVersions > for platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciQueryIdentityVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciQueryIdentityVersions { identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity) , identities_contract_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identities_contract_keys) , keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . keys) , identity_nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_nonce) , identity_contract_nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_contract_nonce) , balance : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . balance) , balance_and_revision : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . balance_and_revision) , identity_by_public_key_hash : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_by_public_key_hash) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciQueryIdentityVersions > for platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciQueryIdentityVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions { identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity) , identities_contract_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identities_contract_keys) , keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . keys) , identity_nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_nonce) , identity_contract_nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_contract_nonce) , balance : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . balance) , balance_and_revision : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . balance_and_revision) , identity_by_public_key_hash : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_by_public_key_hash) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciQueryIdentityVersions > for platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . identities_contract_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_nonce) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_contract_nonce) ; ; ferment_interfaces :: unbox_any (ffi_ref . balance) ; ; ferment_interfaces :: unbox_any (ffi_ref . balance_and_revision) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_by_public_key_hash) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_ctor < > (identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , identities_contract_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , identity_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , identity_contract_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , balance_and_revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , identity_by_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) -> * mut platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions { identity , identities_contract_keys , keys , identity_nonce , identity_contract_nonce , balance , balance_and_revision , identity_by_public_key_hash }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_get_identity < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_get_identities_contract_keys < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identities_contract_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_get_keys < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_get_identity_nonce < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identity_nonce } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_get_identity_contract_nonce < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identity_contract_nonce } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_get_balance < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_get_balance_and_revision < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . balance_and_revision } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_get_identity_by_public_key_hash < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identity_by_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_set_identity < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_set_identities_contract_keys < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identities_contract_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_set_keys < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_set_identity_nonce < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identity_nonce = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_set_identity_contract_nonce < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identity_contract_nonce = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_set_balance < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . balance = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_set_balance_and_revision < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . balance_and_revision = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_set_identity_by_public_key_hash < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identity_by_public_key_hash = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciEpochMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions { pub gather_epoch_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_genesis_time : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciEpochMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciEpochMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciEpochMethodVersions { gather_epoch_info : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . gather_epoch_info) , get_genesis_time : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_genesis_time) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciEpochMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciEpochMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions { gather_epoch_info : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . gather_epoch_info) , get_genesis_time : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_genesis_time) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciEpochMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . gather_epoch_info) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_genesis_time) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions_ctor < > (gather_epoch_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_genesis_time : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions { gather_epoch_info , get_genesis_time }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions_get_gather_epoch_info < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . gather_epoch_info } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions_get_get_genesis_time < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_genesis_time } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions_set_gather_epoch_info < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . gather_epoch_info = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions_set_get_genesis_time < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_genesis_time = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciQueryVotingVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions { pub vote_polls_by_end_date_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub contested_resource_vote_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub contested_resource_voters_for_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub contested_resource_identity_vote_status : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub contested_resources : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciQueryVotingVersions > for platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciQueryVotingVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciQueryVotingVersions { vote_polls_by_end_date_query : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . vote_polls_by_end_date_query) , contested_resource_vote_state : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contested_resource_vote_state) , contested_resource_voters_for_identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contested_resource_voters_for_identity) , contested_resource_identity_vote_status : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contested_resource_identity_vote_status) , contested_resources : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contested_resources) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciQueryVotingVersions > for platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciQueryVotingVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions { vote_polls_by_end_date_query : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . vote_polls_by_end_date_query) , contested_resource_vote_state : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contested_resource_vote_state) , contested_resource_voters_for_identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contested_resource_voters_for_identity) , contested_resource_identity_vote_status : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contested_resource_identity_vote_status) , contested_resources : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contested_resources) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciQueryVotingVersions > for platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . vote_polls_by_end_date_query) ; ; ferment_interfaces :: unbox_any (ffi_ref . contested_resource_vote_state) ; ; ferment_interfaces :: unbox_any (ffi_ref . contested_resource_voters_for_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . contested_resource_identity_vote_status) ; ; ferment_interfaces :: unbox_any (ffi_ref . contested_resources) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions_ctor < > (vote_polls_by_end_date_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , contested_resource_vote_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , contested_resource_voters_for_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , contested_resource_identity_vote_status : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , contested_resources : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) -> * mut platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions { vote_polls_by_end_date_query , contested_resource_vote_state , contested_resource_voters_for_identity , contested_resource_identity_vote_status , contested_resources }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions_get_vote_polls_by_end_date_query < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . vote_polls_by_end_date_query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions_get_contested_resource_vote_state < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . contested_resource_vote_state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions_get_contested_resource_voters_for_identity < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . contested_resource_voters_for_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions_get_contested_resource_identity_vote_status < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . contested_resource_identity_vote_status } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions_get_contested_resources < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . contested_resources } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions_set_vote_polls_by_end_date_query < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . vote_polls_by_end_date_query = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions_set_contested_resource_vote_state < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . contested_resource_vote_state = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions_set_contested_resource_voters_for_identity < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . contested_resource_voters_for_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions_set_contested_resource_identity_vote_status < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . contested_resource_identity_vote_status = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions_set_contested_resources < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . contested_resources = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionProcessingMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions { pub execute_event : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub process_raw_state_transitions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub decode_raw_state_transitions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_fees_of_event : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionProcessingMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionProcessingMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionProcessingMethodVersions { execute_event : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . execute_event) , process_raw_state_transitions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . process_raw_state_transitions) , decode_raw_state_transitions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . decode_raw_state_transitions) , validate_fees_of_event : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_fees_of_event) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionProcessingMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionProcessingMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions { execute_event : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . execute_event) , process_raw_state_transitions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . process_raw_state_transitions) , decode_raw_state_transitions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . decode_raw_state_transitions) , validate_fees_of_event : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_fees_of_event) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionProcessingMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . execute_event) ; ; ferment_interfaces :: unbox_any (ffi_ref . process_raw_state_transitions) ; ; ferment_interfaces :: unbox_any (ffi_ref . decode_raw_state_transitions) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_fees_of_event) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions_ctor < > (execute_event : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , process_raw_state_transitions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , decode_raw_state_transitions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_fees_of_event : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions { execute_event , process_raw_state_transitions , decode_raw_state_transitions , validate_fees_of_event }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions_get_execute_event < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . execute_event } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions_get_process_raw_state_transitions < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . process_raw_state_transitions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions_get_decode_raw_state_transitions < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . decode_raw_state_transitions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions_get_validate_fees_of_event < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_fees_of_event } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions_set_execute_event < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . execute_event = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions_set_process_raw_state_transitions < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . process_raw_state_transitions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions_set_decode_raw_state_transitions < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . decode_raw_state_transitions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions_set_validate_fees_of_event < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_fees_of_event = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciAssetLockValidationVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions { pub fetch_asset_lock_transaction_output_sync : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_asset_lock_is_not_spent_and_has_enough_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciAssetLockValidationVersions > for platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciAssetLockValidationVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciAssetLockValidationVersions { fetch_asset_lock_transaction_output_sync : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_asset_lock_transaction_output_sync) , verify_asset_lock_is_not_spent_and_has_enough_balance : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_asset_lock_is_not_spent_and_has_enough_balance) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciAssetLockValidationVersions > for platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciAssetLockValidationVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions { fetch_asset_lock_transaction_output_sync : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_asset_lock_transaction_output_sync) , verify_asset_lock_is_not_spent_and_has_enough_balance : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_asset_lock_is_not_spent_and_has_enough_balance) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciAssetLockValidationVersions > for platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_asset_lock_transaction_output_sync) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_asset_lock_is_not_spent_and_has_enough_balance) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions_ctor < > (fetch_asset_lock_transaction_output_sync : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_asset_lock_is_not_spent_and_has_enough_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions { fetch_asset_lock_transaction_output_sync , verify_asset_lock_is_not_spent_and_has_enough_balance }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions_get_fetch_asset_lock_transaction_output_sync < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_asset_lock_transaction_output_sync } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions_get_verify_asset_lock_is_not_spent_and_has_enough_balance < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_asset_lock_is_not_spent_and_has_enough_balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions_set_fetch_asset_lock_transaction_output_sync < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_asset_lock_transaction_output_sync = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions_set_verify_asset_lock_is_not_spent_and_has_enough_balance < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_asset_lock_is_not_spent_and_has_enough_balance = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolOutwardsDistributionMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions { pub add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_epoch_pool_to_proposers_payout_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub find_oldest_epoch_needing_payment : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_reward_shares_list_for_masternode : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolOutwardsDistributionMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolOutwardsDistributionMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolOutwardsDistributionMethodVersions { add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations) , add_epoch_pool_to_proposers_payout_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_epoch_pool_to_proposers_payout_operations) , find_oldest_epoch_needing_payment : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . find_oldest_epoch_needing_payment) , fetch_reward_shares_list_for_masternode : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_reward_shares_list_for_masternode) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolOutwardsDistributionMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolOutwardsDistributionMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions { add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations) , add_epoch_pool_to_proposers_payout_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_epoch_pool_to_proposers_payout_operations) , find_oldest_epoch_needing_payment : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . find_oldest_epoch_needing_payment) , fetch_reward_shares_list_for_masternode : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_reward_shares_list_for_masternode) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolOutwardsDistributionMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_epoch_pool_to_proposers_payout_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . find_oldest_epoch_needing_payment) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_reward_shares_list_for_masternode) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions_ctor < > (add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_epoch_pool_to_proposers_payout_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , find_oldest_epoch_needing_payment : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_reward_shares_list_for_masternode : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions { add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations , add_epoch_pool_to_proposers_payout_operations , find_oldest_epoch_needing_payment , fetch_reward_shares_list_for_masternode }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions_get_add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions_get_add_epoch_pool_to_proposers_payout_operations < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_epoch_pool_to_proposers_payout_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions_get_find_oldest_epoch_needing_payment < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . find_oldest_epoch_needing_payment } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions_get_fetch_reward_shares_list_for_masternode < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_reward_shares_list_for_masternode } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions_set_add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions_set_add_epoch_pool_to_proposers_payout_operations < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_epoch_pool_to_proposers_payout_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions_set_find_oldest_epoch_needing_payment < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . find_oldest_epoch_needing_payment = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions_set_fetch_reward_shares_list_for_masternode < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_reward_shares_list_for_masternode = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciMethodVersions { pub engine : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions , pub initialization : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions , pub core_based_updates : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions , pub protocol_upgrade : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions , pub block_fee_processing : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions , pub core_subsidy : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions , pub core_chain_lock : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants , pub core_instant_send_lock : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions , pub fee_pool_inwards_distribution : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions , pub fee_pool_outwards_distribution : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions , pub withdrawals : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions , pub voting : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions , pub state_transition_processing : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions , pub epoch : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions , pub block_start : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions , pub block_end : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions , pub platform_state_storage : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciMethodVersions { engine : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . engine) , initialization : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . initialization) , core_based_updates : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . core_based_updates) , protocol_upgrade : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . protocol_upgrade) , block_fee_processing : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . block_fee_processing) , core_subsidy : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . core_subsidy) , core_chain_lock : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . core_chain_lock) , core_instant_send_lock : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . core_instant_send_lock) , fee_pool_inwards_distribution : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fee_pool_inwards_distribution) , fee_pool_outwards_distribution : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fee_pool_outwards_distribution) , withdrawals : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . withdrawals) , voting : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . voting) , state_transition_processing : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . state_transition_processing) , epoch : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . epoch) , block_start : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . block_start) , block_end : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . block_end) , platform_state_storage : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . platform_state_storage) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciMethodVersions { engine : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . engine) , initialization : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . initialization) , core_based_updates : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . core_based_updates) , protocol_upgrade : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . protocol_upgrade) , block_fee_processing : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . block_fee_processing) , core_subsidy : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . core_subsidy) , core_chain_lock : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . core_chain_lock) , core_instant_send_lock : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . core_instant_send_lock) , fee_pool_inwards_distribution : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fee_pool_inwards_distribution) , fee_pool_outwards_distribution : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fee_pool_outwards_distribution) , withdrawals : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . withdrawals) , voting : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . voting) , state_transition_processing : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . state_transition_processing) , epoch : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . epoch) , block_start : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . block_start) , block_end : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . block_end) , platform_state_storage : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . platform_state_storage) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . engine) ; ; ferment_interfaces :: unbox_any (ffi_ref . initialization) ; ; ferment_interfaces :: unbox_any (ffi_ref . core_based_updates) ; ; ferment_interfaces :: unbox_any (ffi_ref . protocol_upgrade) ; ; ferment_interfaces :: unbox_any (ffi_ref . block_fee_processing) ; ; ferment_interfaces :: unbox_any (ffi_ref . core_subsidy) ; ; ferment_interfaces :: unbox_any (ffi_ref . core_chain_lock) ; ; ferment_interfaces :: unbox_any (ffi_ref . core_instant_send_lock) ; ; ferment_interfaces :: unbox_any (ffi_ref . fee_pool_inwards_distribution) ; ; ferment_interfaces :: unbox_any (ffi_ref . fee_pool_outwards_distribution) ; ; ferment_interfaces :: unbox_any (ffi_ref . withdrawals) ; ; ferment_interfaces :: unbox_any (ffi_ref . voting) ; ; ferment_interfaces :: unbox_any (ffi_ref . state_transition_processing) ; ; ferment_interfaces :: unbox_any (ffi_ref . epoch) ; ; ferment_interfaces :: unbox_any (ffi_ref . block_start) ; ; ferment_interfaces :: unbox_any (ffi_ref . block_end) ; ; ferment_interfaces :: unbox_any (ffi_ref . platform_state_storage) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_ctor < > (engine : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions , initialization : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions , core_based_updates : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions , protocol_upgrade : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions , block_fee_processing : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions , core_subsidy : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions , core_chain_lock : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants , core_instant_send_lock : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions , fee_pool_inwards_distribution : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions , fee_pool_outwards_distribution : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions , withdrawals : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions , voting : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions , state_transition_processing : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions , epoch : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions , block_start : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions , block_end : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions , platform_state_storage : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions) -> * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciMethodVersions { engine , initialization , core_based_updates , protocol_upgrade , block_fee_processing , core_subsidy , core_chain_lock , core_instant_send_lock , fee_pool_inwards_distribution , fee_pool_outwards_distribution , withdrawals , voting , state_transition_processing , epoch , block_start , block_end , platform_state_storage }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_engine < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions { (* obj) . engine } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_initialization < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions { (* obj) . initialization } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_core_based_updates < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions { (* obj) . core_based_updates } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_protocol_upgrade < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions { (* obj) . protocol_upgrade } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_block_fee_processing < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions { (* obj) . block_fee_processing } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_core_subsidy < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions { (* obj) . core_subsidy } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_core_chain_lock < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants { (* obj) . core_chain_lock } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_core_instant_send_lock < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions { (* obj) . core_instant_send_lock } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_fee_pool_inwards_distribution < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions { (* obj) . fee_pool_inwards_distribution } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_fee_pool_outwards_distribution < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions { (* obj) . fee_pool_outwards_distribution } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_withdrawals < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions { (* obj) . withdrawals } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_voting < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions { (* obj) . voting } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_state_transition_processing < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions { (* obj) . state_transition_processing } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_epoch < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions { (* obj) . epoch } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_block_start < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions { (* obj) . block_start } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_block_end < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions { (* obj) . block_end } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_platform_state_storage < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions { (* obj) . platform_state_storage } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_engine < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions) { (* obj) . engine = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_initialization < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions) { (* obj) . initialization = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_core_based_updates < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions) { (* obj) . core_based_updates = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_protocol_upgrade < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions) { (* obj) . protocol_upgrade = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_block_fee_processing < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions) { (* obj) . block_fee_processing = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_core_subsidy < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions) { (* obj) . core_subsidy = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_core_chain_lock < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants) { (* obj) . core_chain_lock = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_core_instant_send_lock < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreInstantSendLockMethodVersions) { (* obj) . core_instant_send_lock = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_fee_pool_inwards_distribution < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions) { (* obj) . fee_pool_inwards_distribution = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_fee_pool_outwards_distribution < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions) { (* obj) . fee_pool_outwards_distribution = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_withdrawals < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions) { (* obj) . withdrawals = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_voting < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions) { (* obj) . voting = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_state_transition_processing < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions) { (* obj) . state_transition_processing = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_epoch < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions) { (* obj) . epoch = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_block_start < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions) { (* obj) . block_start = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_block_end < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions) { (* obj) . block_end = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_platform_state_storage < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions) { (* obj) . platform_state_storage = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciQueryVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciQueryVersions { pub max_returned_elements : u16 , pub response_metadata : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub proofs_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub document_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub prefunded_specialized_balances : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions , pub identity_based_queries : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions , pub data_contract_based_queries : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions , pub voting_based_queries : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions , pub system : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciQueryVersions > for platform_version_version_drive_abci_versions_DriveAbciQueryVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciQueryVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciQueryVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciQueryVersions { max_returned_elements : ffi_ref . max_returned_elements , response_metadata : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . response_metadata) , proofs_query : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . proofs_query) , document_query : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_query) , prefunded_specialized_balances : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . prefunded_specialized_balances) , identity_based_queries : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_based_queries) , data_contract_based_queries : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract_based_queries) , voting_based_queries : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . voting_based_queries) , system : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . system) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciQueryVersions > for platform_version_version_drive_abci_versions_DriveAbciQueryVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciQueryVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciQueryVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciQueryVersions { max_returned_elements : obj . max_returned_elements , response_metadata : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . response_metadata) , proofs_query : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . proofs_query) , document_query : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_query) , prefunded_specialized_balances : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . prefunded_specialized_balances) , identity_based_queries : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_based_queries) , data_contract_based_queries : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract_based_queries) , voting_based_queries : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . voting_based_queries) , system : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . system) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciQueryVersions > for platform_version_version_drive_abci_versions_DriveAbciQueryVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciQueryVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment_interfaces :: unbox_any (ffi_ref . response_metadata) ; ; ferment_interfaces :: unbox_any (ffi_ref . proofs_query) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_query) ; ; ferment_interfaces :: unbox_any (ffi_ref . prefunded_specialized_balances) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_based_queries) ; ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_based_queries) ; ; ferment_interfaces :: unbox_any (ffi_ref . voting_based_queries) ; ; ferment_interfaces :: unbox_any (ffi_ref . system) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_ctor < > (max_returned_elements : u16 , response_metadata : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , proofs_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , document_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , prefunded_specialized_balances : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions , identity_based_queries : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions , data_contract_based_queries : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions , voting_based_queries : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions , system : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions) -> * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciQueryVersions { max_returned_elements , response_metadata , proofs_query , document_query , prefunded_specialized_balances , identity_based_queries , data_contract_based_queries , voting_based_queries , system }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_get_max_returned_elements < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryVersions) -> u16 { (* obj) . max_returned_elements } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_get_response_metadata < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . response_metadata } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_get_proofs_query < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . proofs_query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_get_document_query < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . document_query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_get_prefunded_specialized_balances < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions { (* obj) . prefunded_specialized_balances } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_get_identity_based_queries < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions { (* obj) . identity_based_queries } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_get_data_contract_based_queries < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions { (* obj) . data_contract_based_queries } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_get_voting_based_queries < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions { (* obj) . voting_based_queries } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_get_system < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions { (* obj) . system } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_set_max_returned_elements < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions , value : u16) { (* obj) . max_returned_elements = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_set_response_metadata < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . response_metadata = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_set_proofs_query < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . proofs_query = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_set_document_query < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . document_query = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_set_prefunded_specialized_balances < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryPrefundedSpecializedBalancesVersions) { (* obj) . prefunded_specialized_balances = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_set_identity_based_queries < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) { (* obj) . identity_based_queries = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_set_data_contract_based_queries < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions) { (* obj) . data_contract_based_queries = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_set_voting_based_queries < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryVotingVersions) { (* obj) . voting_based_queries = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_set_system < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions) { (* obj) . system = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciQuerySystemVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions { pub version_upgrade_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub version_upgrade_vote_status : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub epoch_infos : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub path_elements : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciQuerySystemVersions > for platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciQuerySystemVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciQuerySystemVersions { version_upgrade_state : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . version_upgrade_state) , version_upgrade_vote_status : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . version_upgrade_vote_status) , epoch_infos : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . epoch_infos) , path_elements : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . path_elements) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciQuerySystemVersions > for platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciQuerySystemVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions { version_upgrade_state : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . version_upgrade_state) , version_upgrade_vote_status : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . version_upgrade_vote_status) , epoch_infos : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . epoch_infos) , path_elements : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . path_elements) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciQuerySystemVersions > for platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . version_upgrade_state) ; ; ferment_interfaces :: unbox_any (ffi_ref . version_upgrade_vote_status) ; ; ferment_interfaces :: unbox_any (ffi_ref . epoch_infos) ; ; ferment_interfaces :: unbox_any (ffi_ref . path_elements) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions_ctor < > (version_upgrade_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , version_upgrade_vote_status : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , epoch_infos : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , path_elements : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) -> * mut platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions { version_upgrade_state , version_upgrade_vote_status , epoch_infos , path_elements }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions_get_version_upgrade_state < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . version_upgrade_state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions_get_version_upgrade_vote_status < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . version_upgrade_vote_status } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions_get_epoch_infos < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . epoch_infos } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions_get_path_elements < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . path_elements } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions_set_version_upgrade_state < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . version_upgrade_state = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions_set_version_upgrade_vote_status < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . version_upgrade_vote_status = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions_set_epoch_infos < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . epoch_infos = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions_set_path_elements < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . path_elements = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciDocumentsStateTransitionValidationVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions { pub balance_pre_check : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub basic_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub advanced_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub transform_into_action : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub data_triggers : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions , pub document_create_transition_structure_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_delete_transition_structure_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_replace_transition_structure_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_transfer_transition_structure_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_purchase_transition_structure_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_update_price_transition_structure_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_create_transition_state_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_delete_transition_state_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_replace_transition_state_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_transfer_transition_state_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_purchase_transition_state_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_update_price_transition_state_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciDocumentsStateTransitionValidationVersions > for platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciDocumentsStateTransitionValidationVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciDocumentsStateTransitionValidationVersions { balance_pre_check : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . balance_pre_check) , basic_structure : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . basic_structure) , advanced_structure : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . advanced_structure) , revision : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . revision) , state : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . state) , transform_into_action : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . transform_into_action) , data_triggers : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_triggers) , document_create_transition_structure_validation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_create_transition_structure_validation) , document_delete_transition_structure_validation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_delete_transition_structure_validation) , document_replace_transition_structure_validation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_replace_transition_structure_validation) , document_transfer_transition_structure_validation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_transfer_transition_structure_validation) , document_purchase_transition_structure_validation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_purchase_transition_structure_validation) , document_update_price_transition_structure_validation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_update_price_transition_structure_validation) , document_create_transition_state_validation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_create_transition_state_validation) , document_delete_transition_state_validation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_delete_transition_state_validation) , document_replace_transition_state_validation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_replace_transition_state_validation) , document_transfer_transition_state_validation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_transfer_transition_state_validation) , document_purchase_transition_state_validation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_purchase_transition_state_validation) , document_update_price_transition_state_validation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_update_price_transition_state_validation) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciDocumentsStateTransitionValidationVersions > for platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciDocumentsStateTransitionValidationVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions { balance_pre_check : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . balance_pre_check) , basic_structure : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . basic_structure) , advanced_structure : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . advanced_structure) , revision : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . revision) , state : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . state) , transform_into_action : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . transform_into_action) , data_triggers : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_triggers) , document_create_transition_structure_validation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_create_transition_structure_validation) , document_delete_transition_structure_validation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_delete_transition_structure_validation) , document_replace_transition_structure_validation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_replace_transition_structure_validation) , document_transfer_transition_structure_validation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_transfer_transition_structure_validation) , document_purchase_transition_structure_validation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_purchase_transition_structure_validation) , document_update_price_transition_structure_validation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_update_price_transition_structure_validation) , document_create_transition_state_validation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_create_transition_state_validation) , document_delete_transition_state_validation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_delete_transition_state_validation) , document_replace_transition_state_validation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_replace_transition_state_validation) , document_transfer_transition_state_validation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_transfer_transition_state_validation) , document_purchase_transition_state_validation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_purchase_transition_state_validation) , document_update_price_transition_state_validation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_update_price_transition_state_validation) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciDocumentsStateTransitionValidationVersions > for platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . balance_pre_check) ; ; ferment_interfaces :: unbox_any (ffi_ref . basic_structure) ; ; ferment_interfaces :: unbox_any (ffi_ref . advanced_structure) ; ; ferment_interfaces :: unbox_any (ffi_ref . revision) ; ; ferment_interfaces :: unbox_any (ffi_ref . state) ; ; ferment_interfaces :: unbox_any (ffi_ref . transform_into_action) ; ; ferment_interfaces :: unbox_any (ffi_ref . data_triggers) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_create_transition_structure_validation) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_delete_transition_structure_validation) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_replace_transition_structure_validation) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_transfer_transition_structure_validation) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_purchase_transition_structure_validation) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_update_price_transition_structure_validation) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_create_transition_state_validation) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_delete_transition_state_validation) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_replace_transition_state_validation) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_transfer_transition_state_validation) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_purchase_transition_state_validation) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_update_price_transition_state_validation) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_ctor < > (balance_pre_check : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , basic_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , advanced_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , transform_into_action : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , data_triggers : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions , document_create_transition_structure_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_delete_transition_structure_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_replace_transition_structure_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_transfer_transition_structure_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_purchase_transition_structure_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_update_price_transition_structure_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_create_transition_state_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_delete_transition_state_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_replace_transition_state_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_transfer_transition_state_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_purchase_transition_state_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_update_price_transition_state_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions { balance_pre_check , basic_structure , advanced_structure , revision , state , transform_into_action , data_triggers , document_create_transition_structure_validation , document_delete_transition_structure_validation , document_replace_transition_structure_validation , document_transfer_transition_structure_validation , document_purchase_transition_structure_validation , document_update_price_transition_structure_validation , document_create_transition_state_validation , document_delete_transition_state_validation , document_replace_transition_state_validation , document_transfer_transition_state_validation , document_purchase_transition_state_validation , document_update_price_transition_state_validation }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_balance_pre_check < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . balance_pre_check } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_basic_structure < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . basic_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_advanced_structure < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . advanced_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_revision < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_state < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_transform_into_action < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . transform_into_action } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_data_triggers < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions { (* obj) . data_triggers } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_document_create_transition_structure_validation < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_create_transition_structure_validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_document_delete_transition_structure_validation < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_delete_transition_structure_validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_document_replace_transition_structure_validation < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_replace_transition_structure_validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_document_transfer_transition_structure_validation < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_transfer_transition_structure_validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_document_purchase_transition_structure_validation < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_purchase_transition_structure_validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_document_update_price_transition_structure_validation < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_update_price_transition_structure_validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_document_create_transition_state_validation < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_create_transition_state_validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_document_delete_transition_state_validation < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_delete_transition_state_validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_document_replace_transition_state_validation < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_replace_transition_state_validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_document_transfer_transition_state_validation < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_transfer_transition_state_validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_document_purchase_transition_state_validation < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_purchase_transition_state_validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_document_update_price_transition_state_validation < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_update_price_transition_state_validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_balance_pre_check < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . balance_pre_check = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_basic_structure < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . basic_structure = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_advanced_structure < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . advanced_structure = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_revision < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . revision = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_state < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . state = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_transform_into_action < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . transform_into_action = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_data_triggers < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions) { (* obj) . data_triggers = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_document_create_transition_structure_validation < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_create_transition_structure_validation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_document_delete_transition_structure_validation < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_delete_transition_structure_validation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_document_replace_transition_structure_validation < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_replace_transition_structure_validation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_document_transfer_transition_structure_validation < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_transfer_transition_structure_validation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_document_purchase_transition_structure_validation < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_purchase_transition_structure_validation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_document_update_price_transition_structure_validation < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_update_price_transition_structure_validation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_document_create_transition_state_validation < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_create_transition_state_validation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_document_delete_transition_state_validation < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_delete_transition_state_validation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_document_replace_transition_state_validation < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_replace_transition_state_validation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_document_transfer_transition_state_validation < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_transfer_transition_state_validation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_document_purchase_transition_state_validation < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_purchase_transition_state_validation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_document_update_price_transition_state_validation < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_update_price_transition_state_validation = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciValidationConstants`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciValidationConstants { pub maximum_vote_polls_to_process : u16 , pub maximum_contenders_to_consider : u16 } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciValidationConstants > for platform_version_version_drive_abci_versions_DriveAbciValidationConstants { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciValidationConstants) -> platform_version :: version :: drive_abci_versions :: DriveAbciValidationConstants { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciValidationConstants { maximum_vote_polls_to_process : ffi_ref . maximum_vote_polls_to_process , maximum_contenders_to_consider : ffi_ref . maximum_contenders_to_consider } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciValidationConstants > for platform_version_version_drive_abci_versions_DriveAbciValidationConstants { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciValidationConstants) -> * const platform_version_version_drive_abci_versions_DriveAbciValidationConstants { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciValidationConstants { maximum_vote_polls_to_process : obj . maximum_vote_polls_to_process , maximum_contenders_to_consider : obj . maximum_contenders_to_consider }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciValidationConstants > for platform_version_version_drive_abci_versions_DriveAbciValidationConstants { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciValidationConstants) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciValidationConstants { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationConstants_ctor < > (maximum_vote_polls_to_process : u16 , maximum_contenders_to_consider : u16) -> * mut platform_version_version_drive_abci_versions_DriveAbciValidationConstants { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciValidationConstants { maximum_vote_polls_to_process , maximum_contenders_to_consider }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationConstants_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciValidationConstants) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationConstants_get_maximum_vote_polls_to_process < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationConstants) -> u16 { (* obj) . maximum_vote_polls_to_process } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationConstants_get_maximum_contenders_to_consider < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationConstants) -> u16 { (* obj) . maximum_contenders_to_consider } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationConstants_set_maximum_vote_polls_to_process < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationConstants , value : u16) { (* obj) . maximum_vote_polls_to_process = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationConstants_set_maximum_contenders_to_consider < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationConstants , value : u16) { (* obj) . maximum_contenders_to_consider = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciQueryDataContractVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions { pub data_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub data_contract_history : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub data_contracts : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciQueryDataContractVersions > for platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciQueryDataContractVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciQueryDataContractVersions { data_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract) , data_contract_history : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract_history) , data_contracts : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contracts) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciQueryDataContractVersions > for platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciQueryDataContractVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions { data_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract) , data_contract_history : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract_history) , data_contracts : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contracts) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciQueryDataContractVersions > for platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_history) ; ; ferment_interfaces :: unbox_any (ffi_ref . data_contracts) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions_ctor < > (data_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , data_contract_history : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , data_contracts : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) -> * mut platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions { data_contract , data_contract_history , data_contracts }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions_get_data_contract < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . data_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions_get_data_contract_history < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . data_contract_history } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions_get_data_contracts < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . data_contracts } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions_set_data_contract < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . data_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions_set_data_contract_history < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . data_contract_history = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions_set_data_contracts < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . data_contracts = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciPlatformStateStorageMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions { pub fetch_platform_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub store_platform_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciPlatformStateStorageMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciPlatformStateStorageMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciPlatformStateStorageMethodVersions { fetch_platform_state : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_platform_state) , store_platform_state : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . store_platform_state) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciPlatformStateStorageMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciPlatformStateStorageMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions { fetch_platform_state : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_platform_state) , store_platform_state : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . store_platform_state) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciPlatformStateStorageMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_platform_state) ; ; ferment_interfaces :: unbox_any (ffi_ref . store_platform_state) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions_ctor < > (fetch_platform_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , store_platform_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions { fetch_platform_state , store_platform_state }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions_get_fetch_platform_state < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_platform_state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions_get_store_platform_state < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . store_platform_state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions_set_fetch_platform_state < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_platform_state = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions_set_store_platform_state < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . store_platform_state = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciBlockStartMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions { pub clear_drive_block_cache : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciBlockStartMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciBlockStartMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciBlockStartMethodVersions { clear_drive_block_cache : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . clear_drive_block_cache) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciBlockStartMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciBlockStartMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions { clear_drive_block_cache : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . clear_drive_block_cache) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciBlockStartMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . clear_drive_block_cache) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions_ctor < > (clear_drive_block_cache : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions { clear_drive_block_cache }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions_get_clear_drive_block_cache < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . clear_drive_block_cache } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions_set_clear_drive_block_cache < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . clear_drive_block_cache = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciValidationVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciValidationVersions { pub state_transitions : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , pub process_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub state_transition_to_execution_event_for_check_tx : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub penalties : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_PenaltyAmounts , pub event_constants : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationConstants } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciValidationVersions > for platform_version_version_drive_abci_versions_DriveAbciValidationVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciValidationVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciValidationVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciValidationVersions { state_transitions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . state_transitions) , process_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . process_state_transition) , state_transition_to_execution_event_for_check_tx : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . state_transition_to_execution_event_for_check_tx) , penalties : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . penalties) , event_constants : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . event_constants) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciValidationVersions > for platform_version_version_drive_abci_versions_DriveAbciValidationVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciValidationVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciValidationVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciValidationVersions { state_transitions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . state_transitions) , process_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . process_state_transition) , state_transition_to_execution_event_for_check_tx : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . state_transition_to_execution_event_for_check_tx) , penalties : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . penalties) , event_constants : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . event_constants) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciValidationVersions > for platform_version_version_drive_abci_versions_DriveAbciValidationVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciValidationVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . state_transitions) ; ; ferment_interfaces :: unbox_any (ffi_ref . process_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . state_transition_to_execution_event_for_check_tx) ; ; ferment_interfaces :: unbox_any (ffi_ref . penalties) ; ; ferment_interfaces :: unbox_any (ffi_ref . event_constants) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationVersions_ctor < > (state_transitions : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , process_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , state_transition_to_execution_event_for_check_tx : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , penalties : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_PenaltyAmounts , event_constants : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationConstants) -> * mut platform_version_version_drive_abci_versions_DriveAbciValidationVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciValidationVersions { state_transitions , process_state_transition , state_transition_to_execution_event_for_check_tx , penalties , event_constants }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationVersions_get_state_transitions < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions { (* obj) . state_transitions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationVersions_get_process_state_transition < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . process_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationVersions_get_state_transition_to_execution_event_for_check_tx < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . state_transition_to_execution_event_for_check_tx } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationVersions_get_penalties < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_PenaltyAmounts { (* obj) . penalties } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationVersions_get_event_constants < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationConstants { (* obj) . event_constants } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationVersions_set_state_transitions < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) { (* obj) . state_transitions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationVersions_set_process_state_transition < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . process_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationVersions_set_state_transition_to_execution_event_for_check_tx < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . state_transition_to_execution_event_for_check_tx = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationVersions_set_penalties < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_PenaltyAmounts) { (* obj) . penalties = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationVersions_set_event_constants < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationConstants) { (* obj) . event_constants = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions { pub common_validation_methods : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions , pub max_asset_lock_usage_attempts : u16 , pub identity_create_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , pub identity_update_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , pub identity_top_up_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , pub identity_credit_withdrawal_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , pub identity_credit_transfer_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , pub masternode_vote_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , pub contract_create_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , pub contract_update_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , pub documents_batch_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersions > for platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersions { common_validation_methods : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . common_validation_methods) , max_asset_lock_usage_attempts : ffi_ref . max_asset_lock_usage_attempts , identity_create_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_create_state_transition) , identity_update_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_update_state_transition) , identity_top_up_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_top_up_state_transition) , identity_credit_withdrawal_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_credit_withdrawal_state_transition) , identity_credit_transfer_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_credit_transfer_state_transition) , masternode_vote_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . masternode_vote_state_transition) , contract_create_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contract_create_state_transition) , contract_update_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contract_update_state_transition) , documents_batch_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . documents_batch_state_transition) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersions > for platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions { common_validation_methods : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . common_validation_methods) , max_asset_lock_usage_attempts : obj . max_asset_lock_usage_attempts , identity_create_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_create_state_transition) , identity_update_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_update_state_transition) , identity_top_up_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_top_up_state_transition) , identity_credit_withdrawal_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_credit_withdrawal_state_transition) , identity_credit_transfer_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_credit_transfer_state_transition) , masternode_vote_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . masternode_vote_state_transition) , contract_create_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contract_create_state_transition) , contract_update_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contract_update_state_transition) , documents_batch_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . documents_batch_state_transition) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersions > for platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . common_validation_methods) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_create_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_update_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_top_up_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_credit_withdrawal_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_credit_transfer_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . masternode_vote_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . contract_create_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . contract_update_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . documents_batch_state_transition) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_ctor < > (common_validation_methods : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions , max_asset_lock_usage_attempts : u16 , identity_create_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , identity_update_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , identity_top_up_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , identity_credit_withdrawal_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , identity_credit_transfer_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , masternode_vote_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , contract_create_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , contract_update_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , documents_batch_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions { common_validation_methods , max_asset_lock_usage_attempts , identity_create_state_transition , identity_update_state_transition , identity_top_up_state_transition , identity_credit_withdrawal_state_transition , identity_credit_transfer_state_transition , masternode_vote_state_transition , contract_create_state_transition , contract_update_state_transition , documents_batch_state_transition }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_get_common_validation_methods < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions { (* obj) . common_validation_methods } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_get_max_asset_lock_usage_attempts < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> u16 { (* obj) . max_asset_lock_usage_attempts } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_get_identity_create_state_transition < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { (* obj) . identity_create_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_get_identity_update_state_transition < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { (* obj) . identity_update_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_get_identity_top_up_state_transition < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { (* obj) . identity_top_up_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_get_identity_credit_withdrawal_state_transition < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { (* obj) . identity_credit_withdrawal_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_get_identity_credit_transfer_state_transition < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { (* obj) . identity_credit_transfer_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_get_masternode_vote_state_transition < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { (* obj) . masternode_vote_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_get_contract_create_state_transition < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { (* obj) . contract_create_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_get_contract_update_state_transition < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { (* obj) . contract_update_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_get_documents_batch_state_transition < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions { (* obj) . documents_batch_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_set_common_validation_methods < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) { (* obj) . common_validation_methods = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_set_max_asset_lock_usage_attempts < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , value : u16) { (* obj) . max_asset_lock_usage_attempts = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_set_identity_create_state_transition < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) { (* obj) . identity_create_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_set_identity_update_state_transition < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) { (* obj) . identity_update_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_set_identity_top_up_state_transition < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) { (* obj) . identity_top_up_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_set_identity_credit_withdrawal_state_transition < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) { (* obj) . identity_credit_withdrawal_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_set_identity_credit_transfer_state_transition < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) { (* obj) . identity_credit_transfer_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_set_masternode_vote_state_transition < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) { (* obj) . masternode_vote_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_set_contract_create_state_transition < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) { (* obj) . contract_create_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_set_contract_update_state_transition < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) { (* obj) . contract_update_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_set_documents_batch_state_transition < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) { (* obj) . documents_batch_state_transition = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerAndBindingVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions { pub bindings : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub triggers : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerAndBindingVersions > for platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerAndBindingVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerAndBindingVersions { bindings : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . bindings) , triggers : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . triggers) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerAndBindingVersions > for platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerAndBindingVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions { bindings : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . bindings) , triggers : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . triggers) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerAndBindingVersions > for platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . bindings) ; ; ferment_interfaces :: unbox_any (ffi_ref . triggers) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions_ctor < > (bindings : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , triggers : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) -> * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions { bindings , triggers }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions_get_bindings < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . bindings } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions_get_triggers < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions { (* obj) . triggers } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions_set_bindings < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . bindings = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions_set_triggers < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) { (* obj) . triggers = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciCoreBasedUpdatesMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions { pub update_core_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_masternode_list : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_quorum_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub masternode_updates : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciCoreBasedUpdatesMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciCoreBasedUpdatesMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciCoreBasedUpdatesMethodVersions { update_core_info : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update_core_info) , update_masternode_list : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update_masternode_list) , update_quorum_info : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update_quorum_info) , masternode_updates : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . masternode_updates) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciCoreBasedUpdatesMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciCoreBasedUpdatesMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions { update_core_info : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update_core_info) , update_masternode_list : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update_masternode_list) , update_quorum_info : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update_quorum_info) , masternode_updates : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . masternode_updates) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciCoreBasedUpdatesMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . update_core_info) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_masternode_list) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_quorum_info) ; ; ferment_interfaces :: unbox_any (ffi_ref . masternode_updates) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions_ctor < > (update_core_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_masternode_list : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_quorum_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , masternode_updates : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions { update_core_info , update_masternode_list , update_quorum_info , masternode_updates }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions_get_update_core_info < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_core_info } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions_get_update_masternode_list < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_masternode_list } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions_get_update_quorum_info < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_quorum_info } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions_get_masternode_updates < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions { (* obj) . masternode_updates } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions_set_update_core_info < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_core_info = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions_set_update_masternode_list < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_masternode_list = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions_set_update_quorum_info < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_quorum_info = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions_set_masternode_updates < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) { (* obj) . masternode_updates = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionCommonValidationVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions { pub asset_locks : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions , pub validate_identity_public_key_contract_bounds : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_identity_public_key_ids_dont_exist_in_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_identity_public_key_ids_exist_in_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_state_transition_identity_signed : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_unique_identity_public_key_hashes_in_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_master_key_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_simple_pre_check_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionCommonValidationVersions > for platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionCommonValidationVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionCommonValidationVersions { asset_locks : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . asset_locks) , validate_identity_public_key_contract_bounds : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_identity_public_key_contract_bounds) , validate_identity_public_key_ids_dont_exist_in_state : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_identity_public_key_ids_dont_exist_in_state) , validate_identity_public_key_ids_exist_in_state : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_identity_public_key_ids_exist_in_state) , validate_state_transition_identity_signed : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_state_transition_identity_signed) , validate_unique_identity_public_key_hashes_in_state : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_unique_identity_public_key_hashes_in_state) , validate_master_key_uniqueness : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_master_key_uniqueness) , validate_simple_pre_check_balance : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_simple_pre_check_balance) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionCommonValidationVersions > for platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionCommonValidationVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions { asset_locks : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . asset_locks) , validate_identity_public_key_contract_bounds : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_identity_public_key_contract_bounds) , validate_identity_public_key_ids_dont_exist_in_state : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_identity_public_key_ids_dont_exist_in_state) , validate_identity_public_key_ids_exist_in_state : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_identity_public_key_ids_exist_in_state) , validate_state_transition_identity_signed : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_state_transition_identity_signed) , validate_unique_identity_public_key_hashes_in_state : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_unique_identity_public_key_hashes_in_state) , validate_master_key_uniqueness : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_master_key_uniqueness) , validate_simple_pre_check_balance : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_simple_pre_check_balance) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionCommonValidationVersions > for platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . asset_locks) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_identity_public_key_contract_bounds) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_identity_public_key_ids_dont_exist_in_state) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_identity_public_key_ids_exist_in_state) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_state_transition_identity_signed) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_unique_identity_public_key_hashes_in_state) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_master_key_uniqueness) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_simple_pre_check_balance) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_ctor < > (asset_locks : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions , validate_identity_public_key_contract_bounds : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_identity_public_key_ids_dont_exist_in_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_identity_public_key_ids_exist_in_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_state_transition_identity_signed : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_unique_identity_public_key_hashes_in_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_master_key_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_simple_pre_check_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions { asset_locks , validate_identity_public_key_contract_bounds , validate_identity_public_key_ids_dont_exist_in_state , validate_identity_public_key_ids_exist_in_state , validate_state_transition_identity_signed , validate_unique_identity_public_key_hashes_in_state , validate_master_key_uniqueness , validate_simple_pre_check_balance }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_get_asset_locks < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions { (* obj) . asset_locks } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_get_validate_identity_public_key_contract_bounds < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_identity_public_key_contract_bounds } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_get_validate_identity_public_key_ids_dont_exist_in_state < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_identity_public_key_ids_dont_exist_in_state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_get_validate_identity_public_key_ids_exist_in_state < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_identity_public_key_ids_exist_in_state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_get_validate_state_transition_identity_signed < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_state_transition_identity_signed } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_get_validate_unique_identity_public_key_hashes_in_state < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_unique_identity_public_key_hashes_in_state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_get_validate_master_key_uniqueness < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_master_key_uniqueness } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_get_validate_simple_pre_check_balance < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_simple_pre_check_balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_set_asset_locks < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions) { (* obj) . asset_locks = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_set_validate_identity_public_key_contract_bounds < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_identity_public_key_contract_bounds = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_set_validate_identity_public_key_ids_dont_exist_in_state < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_identity_public_key_ids_dont_exist_in_state = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_set_validate_identity_public_key_ids_exist_in_state < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_identity_public_key_ids_exist_in_state = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_set_validate_state_transition_identity_signed < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_state_transition_identity_signed = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_set_validate_unique_identity_public_key_hashes_in_state < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_unique_identity_public_key_hashes_in_state = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_set_validate_master_key_uniqueness < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_master_key_uniqueness = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_set_validate_simple_pre_check_balance < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_simple_pre_check_balance = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { pub basic_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion , pub advanced_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion , pub identity_signatures : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion , pub advanced_minimum_balance_pre_check : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion , pub nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion , pub state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub transform_into_action : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersion > for platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) -> platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersion { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersion { basic_structure : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . basic_structure) , advanced_structure : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . advanced_structure) , identity_signatures : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_signatures) , advanced_minimum_balance_pre_check : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . advanced_minimum_balance_pre_check) , nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . nonce) , state : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . state) , transform_into_action : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . transform_into_action) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersion > for platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersion) -> * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { basic_structure : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . basic_structure) , advanced_structure : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . advanced_structure) , identity_signatures : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_signatures) , advanced_minimum_balance_pre_check : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . advanced_minimum_balance_pre_check) , nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . nonce) , state : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . state) , transform_into_action : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . transform_into_action) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersion > for platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . basic_structure) ; ; ferment_interfaces :: unbox_any (ffi_ref . advanced_structure) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_signatures) ; ; ferment_interfaces :: unbox_any (ffi_ref . advanced_minimum_balance_pre_check) ; ; ferment_interfaces :: unbox_any (ffi_ref . nonce) ; ; ferment_interfaces :: unbox_any (ffi_ref . state) ; ; ferment_interfaces :: unbox_any (ffi_ref . transform_into_action) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_ctor < > (basic_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion , advanced_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion , identity_signatures : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion , advanced_minimum_balance_pre_check : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion , nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion , state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , transform_into_action : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { basic_structure , advanced_structure , identity_signatures , advanced_minimum_balance_pre_check , nonce , state , transform_into_action }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_get_basic_structure < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion { (* obj) . basic_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_get_advanced_structure < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion { (* obj) . advanced_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_get_identity_signatures < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion { (* obj) . identity_signatures } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_get_advanced_minimum_balance_pre_check < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion { (* obj) . advanced_minimum_balance_pre_check } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_get_nonce < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion { (* obj) . nonce } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_get_state < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_get_transform_into_action < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . transform_into_action } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_set_basic_structure < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion) { (* obj) . basic_structure = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_set_advanced_structure < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion) { (* obj) . advanced_structure = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_set_identity_signatures < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion) { (* obj) . identity_signatures = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_set_advanced_minimum_balance_pre_check < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion) { (* obj) . advanced_minimum_balance_pre_check = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_set_nonce < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion) { (* obj) . nonce = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_set_state < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . state = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_set_transform_into_action < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . transform_into_action = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciVersion { pub structs : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStructureVersions , pub methods : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciMethodVersions , pub validation_and_processing : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationVersions , pub query : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciVersion > for platform_version_version_drive_abci_versions_DriveAbciVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciVersion) -> platform_version :: version :: drive_abci_versions :: DriveAbciVersion { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciVersion { structs : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . structs) , methods : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . methods) , validation_and_processing : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validation_and_processing) , query : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . query) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciVersion > for platform_version_version_drive_abci_versions_DriveAbciVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciVersion) -> * const platform_version_version_drive_abci_versions_DriveAbciVersion { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciVersion { structs : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . structs) , methods : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . methods) , validation_and_processing : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validation_and_processing) , query : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . query) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciVersion > for platform_version_version_drive_abci_versions_DriveAbciVersion { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . structs) ; ; ferment_interfaces :: unbox_any (ffi_ref . methods) ; ; ferment_interfaces :: unbox_any (ffi_ref . validation_and_processing) ; ; ferment_interfaces :: unbox_any (ffi_ref . query) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVersion_ctor < > (structs : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStructureVersions , methods : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciMethodVersions , validation_and_processing : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationVersions , query : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryVersions) -> * mut platform_version_version_drive_abci_versions_DriveAbciVersion { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciVersion { structs , methods , validation_and_processing , query }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVersion_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVersion_get_structs < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStructureVersions { (* obj) . structs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVersion_get_methods < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciMethodVersions { (* obj) . methods } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVersion_get_validation_and_processing < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationVersions { (* obj) . validation_and_processing } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVersion_get_query < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryVersions { (* obj) . query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVersion_set_structs < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStructureVersions) { (* obj) . structs = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVersion_set_methods < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciMethodVersions) { (* obj) . methods = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVersion_set_validation_and_processing < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationVersions) { (* obj) . validation_and_processing = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVersion_set_query < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryVersions) { (* obj) . query = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciProtocolUpgradeMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions { pub check_for_desired_protocol_upgrade : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub upgrade_protocol_version_on_epoch_change : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub protocol_version_upgrade_percentage_needed : u64 } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciProtocolUpgradeMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciProtocolUpgradeMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciProtocolUpgradeMethodVersions { check_for_desired_protocol_upgrade : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . check_for_desired_protocol_upgrade) , upgrade_protocol_version_on_epoch_change : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . upgrade_protocol_version_on_epoch_change) , protocol_version_upgrade_percentage_needed : ffi_ref . protocol_version_upgrade_percentage_needed } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciProtocolUpgradeMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciProtocolUpgradeMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions { check_for_desired_protocol_upgrade : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . check_for_desired_protocol_upgrade) , upgrade_protocol_version_on_epoch_change : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . upgrade_protocol_version_on_epoch_change) , protocol_version_upgrade_percentage_needed : obj . protocol_version_upgrade_percentage_needed }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciProtocolUpgradeMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . check_for_desired_protocol_upgrade) ; ; ferment_interfaces :: unbox_any (ffi_ref . upgrade_protocol_version_on_epoch_change) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions_ctor < > (check_for_desired_protocol_upgrade : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , upgrade_protocol_version_on_epoch_change : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , protocol_version_upgrade_percentage_needed : u64) -> * mut platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions { check_for_desired_protocol_upgrade , upgrade_protocol_version_on_epoch_change , protocol_version_upgrade_percentage_needed }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions_get_check_for_desired_protocol_upgrade < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . check_for_desired_protocol_upgrade } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions_get_upgrade_protocol_version_on_epoch_change < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . upgrade_protocol_version_on_epoch_change } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions_get_protocol_version_upgrade_percentage_needed < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions) -> u64 { (* obj) . protocol_version_upgrade_percentage_needed } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions_set_check_for_desired_protocol_upgrade < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . check_for_desired_protocol_upgrade = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions_set_upgrade_protocol_version_on_epoch_change < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . upgrade_protocol_version_on_epoch_change = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions_set_protocol_version_upgrade_percentage_needed < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions , value : u64) { (* obj) . protocol_version_upgrade_percentage_needed = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions { pub create_contact_request_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_domain_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_identity_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_feature_flag_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_masternode_reward_shares_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub delete_withdrawal_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub reject_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerVersions > for platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerVersions { create_contact_request_data_trigger : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . create_contact_request_data_trigger) , create_domain_data_trigger : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . create_domain_data_trigger) , create_identity_data_trigger : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . create_identity_data_trigger) , create_feature_flag_data_trigger : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . create_feature_flag_data_trigger) , create_masternode_reward_shares_data_trigger : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . create_masternode_reward_shares_data_trigger) , delete_withdrawal_data_trigger : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . delete_withdrawal_data_trigger) , reject_data_trigger : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . reject_data_trigger) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerVersions > for platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions { create_contact_request_data_trigger : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . create_contact_request_data_trigger) , create_domain_data_trigger : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . create_domain_data_trigger) , create_identity_data_trigger : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . create_identity_data_trigger) , create_feature_flag_data_trigger : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . create_feature_flag_data_trigger) , create_masternode_reward_shares_data_trigger : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . create_masternode_reward_shares_data_trigger) , delete_withdrawal_data_trigger : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . delete_withdrawal_data_trigger) , reject_data_trigger : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . reject_data_trigger) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerVersions > for platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . create_contact_request_data_trigger) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_domain_data_trigger) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_identity_data_trigger) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_feature_flag_data_trigger) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_masternode_reward_shares_data_trigger) ; ; ferment_interfaces :: unbox_any (ffi_ref . delete_withdrawal_data_trigger) ; ; ferment_interfaces :: unbox_any (ffi_ref . reject_data_trigger) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_ctor < > (create_contact_request_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_domain_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_identity_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_feature_flag_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_masternode_reward_shares_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , delete_withdrawal_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , reject_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions { create_contact_request_data_trigger , create_domain_data_trigger , create_identity_data_trigger , create_feature_flag_data_trigger , create_masternode_reward_shares_data_trigger , delete_withdrawal_data_trigger , reject_data_trigger }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_get_create_contact_request_data_trigger < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_contact_request_data_trigger } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_get_create_domain_data_trigger < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_domain_data_trigger } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_get_create_identity_data_trigger < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_identity_data_trigger } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_get_create_feature_flag_data_trigger < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_feature_flag_data_trigger } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_get_create_masternode_reward_shares_data_trigger < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_masternode_reward_shares_data_trigger } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_get_delete_withdrawal_data_trigger < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . delete_withdrawal_data_trigger } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_get_reject_data_trigger < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . reject_data_trigger } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_set_create_contact_request_data_trigger < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_contact_request_data_trigger = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_set_create_domain_data_trigger < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_domain_data_trigger = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_set_create_identity_data_trigger < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_identity_data_trigger = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_set_create_feature_flag_data_trigger < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_feature_flag_data_trigger = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_set_create_masternode_reward_shares_data_trigger < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_masternode_reward_shares_data_trigger = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_set_delete_withdrawal_data_trigger < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . delete_withdrawal_data_trigger = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_set_reject_data_trigger < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . reject_data_trigger = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciVotingMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions { pub keep_record_of_finished_contested_resource_vote_poll : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub clean_up_after_vote_poll_end : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub clean_up_after_contested_resources_vote_poll_end : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub check_for_ended_vote_polls : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub tally_votes_for_contested_document_resource_vote_poll : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub award_document_to_winner : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub delay_vote_poll : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub run_dao_platform_events : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_votes_for_removed_masternodes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciVotingMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciVotingMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciVotingMethodVersions { keep_record_of_finished_contested_resource_vote_poll : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . keep_record_of_finished_contested_resource_vote_poll) , clean_up_after_vote_poll_end : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . clean_up_after_vote_poll_end) , clean_up_after_contested_resources_vote_poll_end : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . clean_up_after_contested_resources_vote_poll_end) , check_for_ended_vote_polls : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . check_for_ended_vote_polls) , tally_votes_for_contested_document_resource_vote_poll : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . tally_votes_for_contested_document_resource_vote_poll) , award_document_to_winner : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . award_document_to_winner) , delay_vote_poll : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . delay_vote_poll) , run_dao_platform_events : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . run_dao_platform_events) , remove_votes_for_removed_masternodes : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . remove_votes_for_removed_masternodes) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciVotingMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciVotingMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions { keep_record_of_finished_contested_resource_vote_poll : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . keep_record_of_finished_contested_resource_vote_poll) , clean_up_after_vote_poll_end : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . clean_up_after_vote_poll_end) , clean_up_after_contested_resources_vote_poll_end : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . clean_up_after_contested_resources_vote_poll_end) , check_for_ended_vote_polls : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . check_for_ended_vote_polls) , tally_votes_for_contested_document_resource_vote_poll : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . tally_votes_for_contested_document_resource_vote_poll) , award_document_to_winner : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . award_document_to_winner) , delay_vote_poll : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . delay_vote_poll) , run_dao_platform_events : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . run_dao_platform_events) , remove_votes_for_removed_masternodes : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . remove_votes_for_removed_masternodes) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciVotingMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . keep_record_of_finished_contested_resource_vote_poll) ; ; ferment_interfaces :: unbox_any (ffi_ref . clean_up_after_vote_poll_end) ; ; ferment_interfaces :: unbox_any (ffi_ref . clean_up_after_contested_resources_vote_poll_end) ; ; ferment_interfaces :: unbox_any (ffi_ref . check_for_ended_vote_polls) ; ; ferment_interfaces :: unbox_any (ffi_ref . tally_votes_for_contested_document_resource_vote_poll) ; ; ferment_interfaces :: unbox_any (ffi_ref . award_document_to_winner) ; ; ferment_interfaces :: unbox_any (ffi_ref . delay_vote_poll) ; ; ferment_interfaces :: unbox_any (ffi_ref . run_dao_platform_events) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_votes_for_removed_masternodes) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions_ctor < > (keep_record_of_finished_contested_resource_vote_poll : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , clean_up_after_vote_poll_end : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , clean_up_after_contested_resources_vote_poll_end : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , check_for_ended_vote_polls : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , tally_votes_for_contested_document_resource_vote_poll : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , award_document_to_winner : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , delay_vote_poll : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , run_dao_platform_events : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_votes_for_removed_masternodes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions { keep_record_of_finished_contested_resource_vote_poll , clean_up_after_vote_poll_end , clean_up_after_contested_resources_vote_poll_end , check_for_ended_vote_polls , tally_votes_for_contested_document_resource_vote_poll , award_document_to_winner , delay_vote_poll , run_dao_platform_events , remove_votes_for_removed_masternodes }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions_get_keep_record_of_finished_contested_resource_vote_poll < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . keep_record_of_finished_contested_resource_vote_poll } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions_get_clean_up_after_vote_poll_end < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . clean_up_after_vote_poll_end } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions_get_clean_up_after_contested_resources_vote_poll_end < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . clean_up_after_contested_resources_vote_poll_end } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions_get_check_for_ended_vote_polls < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . check_for_ended_vote_polls } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions_get_tally_votes_for_contested_document_resource_vote_poll < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . tally_votes_for_contested_document_resource_vote_poll } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions_get_award_document_to_winner < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . award_document_to_winner } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions_get_delay_vote_poll < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . delay_vote_poll } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions_get_run_dao_platform_events < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . run_dao_platform_events } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions_get_remove_votes_for_removed_masternodes < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_votes_for_removed_masternodes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions_set_keep_record_of_finished_contested_resource_vote_poll < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . keep_record_of_finished_contested_resource_vote_poll = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions_set_clean_up_after_vote_poll_end < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . clean_up_after_vote_poll_end = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions_set_clean_up_after_contested_resources_vote_poll_end < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . clean_up_after_contested_resources_vote_poll_end = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions_set_check_for_ended_vote_polls < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . check_for_ended_vote_polls = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions_set_tally_votes_for_contested_document_resource_vote_poll < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . tally_votes_for_contested_document_resource_vote_poll = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions_set_award_document_to_winner < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . award_document_to_winner = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions_set_delay_vote_poll < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . delay_vote_poll = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions_set_run_dao_platform_events < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . run_dao_platform_events = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions_set_remove_votes_for_removed_masternodes < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciVotingMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_votes_for_removed_masternodes = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciBlockEndMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions { pub update_state_cache : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_drive_cache : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validator_set_update : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciBlockEndMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciBlockEndMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciBlockEndMethodVersions { update_state_cache : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update_state_cache) , update_drive_cache : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update_drive_cache) , validator_set_update : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validator_set_update) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciBlockEndMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciBlockEndMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions { update_state_cache : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update_state_cache) , update_drive_cache : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update_drive_cache) , validator_set_update : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validator_set_update) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciBlockEndMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . update_state_cache) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_drive_cache) ; ; ferment_interfaces :: unbox_any (ffi_ref . validator_set_update) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions_ctor < > (update_state_cache : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_drive_cache : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validator_set_update : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions { update_state_cache , update_drive_cache , validator_set_update }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions_get_update_state_cache < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_state_cache } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions_get_update_drive_cache < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_drive_cache } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions_get_validator_set_update < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validator_set_update } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions_set_update_state_cache < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_state_cache = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions_set_update_drive_cache < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_drive_cache = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions_set_validator_set_update < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validator_set_update = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciCoreChainLockMethodVersionsAndConstants`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants { pub choose_quorum : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_chain_lock : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_chain_lock_locally : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_chain_lock_through_core : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub make_sure_core_is_synced_to_chain_lock : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub recent_block_count_amount : u32 } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciCoreChainLockMethodVersionsAndConstants > for platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants) -> platform_version :: version :: drive_abci_versions :: DriveAbciCoreChainLockMethodVersionsAndConstants { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciCoreChainLockMethodVersionsAndConstants { choose_quorum : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . choose_quorum) , verify_chain_lock : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_chain_lock) , verify_chain_lock_locally : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_chain_lock_locally) , verify_chain_lock_through_core : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_chain_lock_through_core) , make_sure_core_is_synced_to_chain_lock : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . make_sure_core_is_synced_to_chain_lock) , recent_block_count_amount : ffi_ref . recent_block_count_amount } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciCoreChainLockMethodVersionsAndConstants > for platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciCoreChainLockMethodVersionsAndConstants) -> * const platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants { choose_quorum : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . choose_quorum) , verify_chain_lock : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_chain_lock) , verify_chain_lock_locally : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_chain_lock_locally) , verify_chain_lock_through_core : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_chain_lock_through_core) , make_sure_core_is_synced_to_chain_lock : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . make_sure_core_is_synced_to_chain_lock) , recent_block_count_amount : obj . recent_block_count_amount }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciCoreChainLockMethodVersionsAndConstants > for platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . choose_quorum) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_chain_lock) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_chain_lock_locally) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_chain_lock_through_core) ; ; ferment_interfaces :: unbox_any (ffi_ref . make_sure_core_is_synced_to_chain_lock) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_ctor < > (choose_quorum : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_chain_lock : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_chain_lock_locally : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_chain_lock_through_core : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , make_sure_core_is_synced_to_chain_lock : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , recent_block_count_amount : u32) -> * mut platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants { choose_quorum , verify_chain_lock , verify_chain_lock_locally , verify_chain_lock_through_core , make_sure_core_is_synced_to_chain_lock , recent_block_count_amount }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_get_choose_quorum < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . choose_quorum } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_get_verify_chain_lock < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_chain_lock } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_get_verify_chain_lock_locally < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_chain_lock_locally } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_get_verify_chain_lock_through_core < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_chain_lock_through_core } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_get_make_sure_core_is_synced_to_chain_lock < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . make_sure_core_is_synced_to_chain_lock } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_get_recent_block_count_amount < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants) -> u32 { (* obj) . recent_block_count_amount } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_set_choose_quorum < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . choose_quorum = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_set_verify_chain_lock < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_chain_lock = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_set_verify_chain_lock_locally < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_chain_lock_locally = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_set_verify_chain_lock_through_core < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_chain_lock_through_core = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_set_make_sure_core_is_synced_to_chain_lock < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . make_sure_core_is_synced_to_chain_lock = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_set_recent_block_count_amount < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants , value : u32) { (* obj) . recent_block_count_amount = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciEngineMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions { pub init_chain : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub check_tx : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub run_block_proposal : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub finalize_block_proposal : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciEngineMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciEngineMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciEngineMethodVersions { init_chain : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . init_chain) , check_tx : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . check_tx) , run_block_proposal : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . run_block_proposal) , finalize_block_proposal : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . finalize_block_proposal) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciEngineMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciEngineMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions { init_chain : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . init_chain) , check_tx : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . check_tx) , run_block_proposal : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . run_block_proposal) , finalize_block_proposal : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . finalize_block_proposal) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciEngineMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . init_chain) ; ; ferment_interfaces :: unbox_any (ffi_ref . check_tx) ; ; ferment_interfaces :: unbox_any (ffi_ref . run_block_proposal) ; ; ferment_interfaces :: unbox_any (ffi_ref . finalize_block_proposal) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions_ctor < > (init_chain : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , check_tx : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , run_block_proposal : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , finalize_block_proposal : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions { init_chain , check_tx , run_block_proposal , finalize_block_proposal }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions_get_init_chain < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . init_chain } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions_get_check_tx < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . check_tx } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions_get_run_block_proposal < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . run_block_proposal } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions_get_finalize_block_proposal < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . finalize_block_proposal } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions_set_init_chain < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . init_chain = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions_set_check_tx < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . check_tx = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions_set_run_block_proposal < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . run_block_proposal = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions_set_finalize_block_proposal < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . finalize_block_proposal = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciCoreSubsidyMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions { pub epoch_core_reward_credits_for_distribution : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciCoreSubsidyMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciCoreSubsidyMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciCoreSubsidyMethodVersions { epoch_core_reward_credits_for_distribution : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . epoch_core_reward_credits_for_distribution) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciCoreSubsidyMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciCoreSubsidyMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions { epoch_core_reward_credits_for_distribution : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . epoch_core_reward_credits_for_distribution) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciCoreSubsidyMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . epoch_core_reward_credits_for_distribution) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions_ctor < > (epoch_core_reward_credits_for_distribution : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions { epoch_core_reward_credits_for_distribution }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions_get_epoch_core_reward_credits_for_distribution < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . epoch_core_reward_credits_for_distribution } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions_set_epoch_core_reward_credits_for_distribution < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . epoch_core_reward_credits_for_distribution = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolInwardsDistributionMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions { pub add_distribute_block_fees_into_pools_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_distribute_storage_fee_to_epochs_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolInwardsDistributionMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolInwardsDistributionMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolInwardsDistributionMethodVersions { add_distribute_block_fees_into_pools_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_distribute_block_fees_into_pools_operations) , add_distribute_storage_fee_to_epochs_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_distribute_storage_fee_to_epochs_operations) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolInwardsDistributionMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolInwardsDistributionMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions { add_distribute_block_fees_into_pools_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_distribute_block_fees_into_pools_operations) , add_distribute_storage_fee_to_epochs_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_distribute_storage_fee_to_epochs_operations) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolInwardsDistributionMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_distribute_block_fees_into_pools_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_distribute_storage_fee_to_epochs_operations) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions_ctor < > (add_distribute_block_fees_into_pools_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_distribute_storage_fee_to_epochs_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions { add_distribute_block_fees_into_pools_operations , add_distribute_storage_fee_to_epochs_operations }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions_get_add_distribute_block_fees_into_pools_operations < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_distribute_block_fees_into_pools_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions_get_add_distribute_storage_fee_to_epochs_operations < > (obj : * const platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_distribute_storage_fee_to_epochs_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions_set_add_distribute_block_fees_into_pools_operations < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_distribute_block_fees_into_pools_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions_set_add_distribute_storage_fee_to_epochs_operations < > (obj : * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_distribute_storage_fee_to_epochs_operations = value ; } } pub mod dpp_versions { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: DocumentsBatchTransitionVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentsBatchTransitionVersions { pub validation : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: DocumentsBatchTransitionVersions > for platform_version_version_dpp_versions_DocumentsBatchTransitionVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentsBatchTransitionVersions) -> platform_version :: version :: dpp_versions :: DocumentsBatchTransitionVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentsBatchTransitionVersions { validation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validation) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: DocumentsBatchTransitionVersions > for platform_version_version_dpp_versions_DocumentsBatchTransitionVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentsBatchTransitionVersions) -> * const platform_version_version_dpp_versions_DocumentsBatchTransitionVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentsBatchTransitionVersions { validation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validation) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: DocumentsBatchTransitionVersions > for platform_version_version_dpp_versions_DocumentsBatchTransitionVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentsBatchTransitionVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentsBatchTransitionVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . validation) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentsBatchTransitionVersions_ctor < > (validation : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions) -> * mut platform_version_version_dpp_versions_DocumentsBatchTransitionVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentsBatchTransitionVersions { validation }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentsBatchTransitionVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_DocumentsBatchTransitionVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentsBatchTransitionVersions_get_validation < > (obj : * const platform_version_version_dpp_versions_DocumentsBatchTransitionVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions { (* obj) . validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentsBatchTransitionVersions_set_validation < > (obj : * mut platform_version_version_dpp_versions_DocumentsBatchTransitionVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions) { (* obj) . validation = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: DocumentTypeValidationVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentTypeValidationVersions { pub validate_update : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub unique_index_limit : u16 , pub contested_index_limit : u16 } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: DocumentTypeValidationVersions > for platform_version_version_dpp_versions_DocumentTypeValidationVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentTypeValidationVersions) -> platform_version :: version :: dpp_versions :: DocumentTypeValidationVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentTypeValidationVersions { validate_update : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_update) , unique_index_limit : ffi_ref . unique_index_limit , contested_index_limit : ffi_ref . contested_index_limit } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: DocumentTypeValidationVersions > for platform_version_version_dpp_versions_DocumentTypeValidationVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentTypeValidationVersions) -> * const platform_version_version_dpp_versions_DocumentTypeValidationVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeValidationVersions { validate_update : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_update) , unique_index_limit : obj . unique_index_limit , contested_index_limit : obj . contested_index_limit }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: DocumentTypeValidationVersions > for platform_version_version_dpp_versions_DocumentTypeValidationVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentTypeValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentTypeValidationVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . validate_update) ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeValidationVersions_ctor < > (validate_update : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , unique_index_limit : u16 , contested_index_limit : u16) -> * mut platform_version_version_dpp_versions_DocumentTypeValidationVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeValidationVersions { validate_update , unique_index_limit , contested_index_limit }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeValidationVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_DocumentTypeValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeValidationVersions_get_validate_update < > (obj : * const platform_version_version_dpp_versions_DocumentTypeValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_update } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeValidationVersions_get_unique_index_limit < > (obj : * const platform_version_version_dpp_versions_DocumentTypeValidationVersions) -> u16 { (* obj) . unique_index_limit } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeValidationVersions_get_contested_index_limit < > (obj : * const platform_version_version_dpp_versions_DocumentTypeValidationVersions) -> u16 { (* obj) . contested_index_limit } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeValidationVersions_set_validate_update < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_update = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeValidationVersions_set_unique_index_limit < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeValidationVersions , value : u16) { (* obj) . unique_index_limit = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeValidationVersions_set_contested_index_limit < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeValidationVersions , value : u16) { (* obj) . contested_index_limit = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: CostVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_CostVersions { pub signature_verify : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: CostVersions > for platform_version_version_dpp_versions_CostVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_CostVersions) -> platform_version :: version :: dpp_versions :: CostVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: CostVersions { signature_verify : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . signature_verify) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: CostVersions > for platform_version_version_dpp_versions_CostVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: CostVersions) -> * const platform_version_version_dpp_versions_CostVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_CostVersions { signature_verify : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . signature_verify) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: CostVersions > for platform_version_version_dpp_versions_CostVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_CostVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_CostVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . signature_verify) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_CostVersions_ctor < > (signature_verify : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_CostVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_CostVersions { signature_verify }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_CostVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_CostVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_CostVersions_get_signature_verify < > (obj : * const platform_version_version_dpp_versions_CostVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . signature_verify } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_CostVersions_set_signature_verify < > (obj : * mut platform_version_version_dpp_versions_CostVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . signature_verify = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: JsonSchemaValidatorVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_JsonSchemaValidatorVersions { pub new : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub compile : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub compile_and_validate : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: JsonSchemaValidatorVersions > for platform_version_version_dpp_versions_JsonSchemaValidatorVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_JsonSchemaValidatorVersions) -> platform_version :: version :: dpp_versions :: JsonSchemaValidatorVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: JsonSchemaValidatorVersions { new : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . new) , validate : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate) , compile : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . compile) , compile_and_validate : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . compile_and_validate) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: JsonSchemaValidatorVersions > for platform_version_version_dpp_versions_JsonSchemaValidatorVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: JsonSchemaValidatorVersions) -> * const platform_version_version_dpp_versions_JsonSchemaValidatorVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_JsonSchemaValidatorVersions { new : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . new) , validate : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate) , compile : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . compile) , compile_and_validate : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . compile_and_validate) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: JsonSchemaValidatorVersions > for platform_version_version_dpp_versions_JsonSchemaValidatorVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_JsonSchemaValidatorVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_JsonSchemaValidatorVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . new) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate) ; ; ferment_interfaces :: unbox_any (ffi_ref . compile) ; ; ferment_interfaces :: unbox_any (ffi_ref . compile_and_validate) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_JsonSchemaValidatorVersions_ctor < > (new : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , compile : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , compile_and_validate : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_JsonSchemaValidatorVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_JsonSchemaValidatorVersions { new , validate , compile , compile_and_validate }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_JsonSchemaValidatorVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_JsonSchemaValidatorVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_JsonSchemaValidatorVersions_get_new < > (obj : * const platform_version_version_dpp_versions_JsonSchemaValidatorVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . new } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_JsonSchemaValidatorVersions_get_validate < > (obj : * const platform_version_version_dpp_versions_JsonSchemaValidatorVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_JsonSchemaValidatorVersions_get_compile < > (obj : * const platform_version_version_dpp_versions_JsonSchemaValidatorVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . compile } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_JsonSchemaValidatorVersions_get_compile_and_validate < > (obj : * const platform_version_version_dpp_versions_JsonSchemaValidatorVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . compile_and_validate } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_JsonSchemaValidatorVersions_set_new < > (obj : * mut platform_version_version_dpp_versions_JsonSchemaValidatorVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . new = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_JsonSchemaValidatorVersions_set_validate < > (obj : * mut platform_version_version_dpp_versions_JsonSchemaValidatorVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_JsonSchemaValidatorVersions_set_compile < > (obj : * mut platform_version_version_dpp_versions_JsonSchemaValidatorVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . compile = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_JsonSchemaValidatorVersions_set_compile_and_validate < > (obj : * mut platform_version_version_dpp_versions_JsonSchemaValidatorVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . compile_and_validate = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: IdentityKeyTypeMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions { pub random_public_key_data : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub random_public_and_private_key_data : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: IdentityKeyTypeMethodVersions > for platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions) -> platform_version :: version :: dpp_versions :: IdentityKeyTypeMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: IdentityKeyTypeMethodVersions { random_public_key_data : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . random_public_key_data) , random_public_and_private_key_data : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . random_public_and_private_key_data) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: IdentityKeyTypeMethodVersions > for platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: IdentityKeyTypeMethodVersions) -> * const platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions { random_public_key_data : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . random_public_key_data) , random_public_and_private_key_data : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . random_public_and_private_key_data) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: IdentityKeyTypeMethodVersions > for platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . random_public_key_data) ; ; ferment_interfaces :: unbox_any (ffi_ref . random_public_and_private_key_data) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions_ctor < > (random_public_key_data : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , random_public_and_private_key_data : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions { random_public_key_data , random_public_and_private_key_data }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions_get_random_public_key_data < > (obj : * const platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . random_public_key_data } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions_get_random_public_and_private_key_data < > (obj : * const platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . random_public_and_private_key_data } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions_set_random_public_key_data < > (obj : * mut platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . random_public_key_data = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions_set_random_public_and_private_key_data < > (obj : * mut platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . random_public_and_private_key_data = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: IdentityVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_IdentityVersions { pub identity_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub identity_key_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub identity_key_type_method_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: IdentityVersions > for platform_version_version_dpp_versions_IdentityVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_IdentityVersions) -> platform_version :: version :: dpp_versions :: IdentityVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: IdentityVersions { identity_structure_version : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_structure_version) , identity_key_structure_version : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_key_structure_version) , identity_key_type_method_versions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_key_type_method_versions) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: IdentityVersions > for platform_version_version_dpp_versions_IdentityVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: IdentityVersions) -> * const platform_version_version_dpp_versions_IdentityVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_IdentityVersions { identity_structure_version : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_structure_version) , identity_key_structure_version : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_key_structure_version) , identity_key_type_method_versions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_key_type_method_versions) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: IdentityVersions > for platform_version_version_dpp_versions_IdentityVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_IdentityVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_IdentityVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_structure_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_key_structure_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_key_type_method_versions) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityVersions_ctor < > (identity_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , identity_key_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , identity_key_type_method_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions) -> * mut platform_version_version_dpp_versions_IdentityVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_IdentityVersions { identity_structure_version , identity_key_structure_version , identity_key_type_method_versions }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_IdentityVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityVersions_get_identity_structure_version < > (obj : * const platform_version_version_dpp_versions_IdentityVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . identity_structure_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityVersions_get_identity_key_structure_version < > (obj : * const platform_version_version_dpp_versions_IdentityVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . identity_key_structure_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityVersions_get_identity_key_type_method_versions < > (obj : * const platform_version_version_dpp_versions_IdentityVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions { (* obj) . identity_key_type_method_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityVersions_set_identity_structure_version < > (obj : * mut platform_version_version_dpp_versions_IdentityVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . identity_structure_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityVersions_set_identity_key_structure_version < > (obj : * mut platform_version_version_dpp_versions_IdentityVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . identity_key_structure_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityVersions_set_identity_key_type_method_versions < > (obj : * mut platform_version_version_dpp_versions_IdentityVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions) { (* obj) . identity_key_type_method_versions = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: IdentityTransitionVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_IdentityTransitionVersions { pub max_public_keys_in_creation : u16 , pub asset_locks : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: IdentityTransitionVersions > for platform_version_version_dpp_versions_IdentityTransitionVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_IdentityTransitionVersions) -> platform_version :: version :: dpp_versions :: IdentityTransitionVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: IdentityTransitionVersions { max_public_keys_in_creation : ffi_ref . max_public_keys_in_creation , asset_locks : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . asset_locks) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: IdentityTransitionVersions > for platform_version_version_dpp_versions_IdentityTransitionVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: IdentityTransitionVersions) -> * const platform_version_version_dpp_versions_IdentityTransitionVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_IdentityTransitionVersions { max_public_keys_in_creation : obj . max_public_keys_in_creation , asset_locks : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . asset_locks) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: IdentityTransitionVersions > for platform_version_version_dpp_versions_IdentityTransitionVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_IdentityTransitionVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_IdentityTransitionVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment_interfaces :: unbox_any (ffi_ref . asset_locks) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionVersions_ctor < > (max_public_keys_in_creation : u16 , asset_locks : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions) -> * mut platform_version_version_dpp_versions_IdentityTransitionVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_IdentityTransitionVersions { max_public_keys_in_creation , asset_locks }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_IdentityTransitionVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionVersions_get_max_public_keys_in_creation < > (obj : * const platform_version_version_dpp_versions_IdentityTransitionVersions) -> u16 { (* obj) . max_public_keys_in_creation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionVersions_get_asset_locks < > (obj : * const platform_version_version_dpp_versions_IdentityTransitionVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions { (* obj) . asset_locks } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionVersions_set_max_public_keys_in_creation < > (obj : * mut platform_version_version_dpp_versions_IdentityTransitionVersions , value : u16) { (* obj) . max_public_keys_in_creation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionVersions_set_asset_locks < > (obj : * mut platform_version_version_dpp_versions_IdentityTransitionVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions) { (* obj) . asset_locks = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: StateTransitionSerializationVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_StateTransitionSerializationVersions { pub identity_public_key_in_creation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub identity_create_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub identity_update_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub identity_top_up_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub identity_credit_withdrawal_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub identity_credit_transfer_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub masternode_vote_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub contract_create_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub contract_update_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub documents_batch_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub document_base_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub document_create_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds , pub document_replace_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds , pub document_delete_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds , pub document_transfer_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds , pub document_update_price_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds , pub document_purchase_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: StateTransitionSerializationVersions > for platform_version_version_dpp_versions_StateTransitionSerializationVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> platform_version :: version :: dpp_versions :: StateTransitionSerializationVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: StateTransitionSerializationVersions { identity_public_key_in_creation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_public_key_in_creation) , identity_create_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_create_state_transition) , identity_update_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_update_state_transition) , identity_top_up_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_top_up_state_transition) , identity_credit_withdrawal_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_credit_withdrawal_state_transition) , identity_credit_transfer_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_credit_transfer_state_transition) , masternode_vote_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . masternode_vote_state_transition) , contract_create_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contract_create_state_transition) , contract_update_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contract_update_state_transition) , documents_batch_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . documents_batch_state_transition) , document_base_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_base_state_transition) , document_create_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_create_state_transition) , document_replace_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_replace_state_transition) , document_delete_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_delete_state_transition) , document_transfer_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_transfer_state_transition) , document_update_price_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_update_price_state_transition) , document_purchase_state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_purchase_state_transition) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: StateTransitionSerializationVersions > for platform_version_version_dpp_versions_StateTransitionSerializationVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: StateTransitionSerializationVersions) -> * const platform_version_version_dpp_versions_StateTransitionSerializationVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_StateTransitionSerializationVersions { identity_public_key_in_creation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_public_key_in_creation) , identity_create_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_create_state_transition) , identity_update_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_update_state_transition) , identity_top_up_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_top_up_state_transition) , identity_credit_withdrawal_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_credit_withdrawal_state_transition) , identity_credit_transfer_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_credit_transfer_state_transition) , masternode_vote_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . masternode_vote_state_transition) , contract_create_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contract_create_state_transition) , contract_update_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contract_update_state_transition) , documents_batch_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . documents_batch_state_transition) , document_base_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_base_state_transition) , document_create_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_create_state_transition) , document_replace_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_replace_state_transition) , document_delete_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_delete_state_transition) , document_transfer_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_transfer_state_transition) , document_update_price_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_update_price_state_transition) , document_purchase_state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_purchase_state_transition) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: StateTransitionSerializationVersions > for platform_version_version_dpp_versions_StateTransitionSerializationVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_StateTransitionSerializationVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_public_key_in_creation) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_create_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_update_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_top_up_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_credit_withdrawal_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_credit_transfer_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . masternode_vote_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . contract_create_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . contract_update_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . documents_batch_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_base_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_create_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_replace_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_delete_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_transfer_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_update_price_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_purchase_state_transition) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_ctor < > (identity_public_key_in_creation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , identity_create_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , identity_update_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , identity_top_up_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , identity_credit_withdrawal_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , identity_credit_transfer_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , masternode_vote_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , contract_create_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , contract_update_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , documents_batch_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , document_base_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , document_create_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds , document_replace_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds , document_delete_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds , document_transfer_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds , document_update_price_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds , document_purchase_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds) -> * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_StateTransitionSerializationVersions { identity_public_key_in_creation , identity_create_state_transition , identity_update_state_transition , identity_top_up_state_transition , identity_credit_withdrawal_state_transition , identity_credit_transfer_state_transition , masternode_vote_state_transition , contract_create_state_transition , contract_update_state_transition , documents_batch_state_transition , document_base_state_transition , document_create_state_transition , document_replace_state_transition , document_delete_state_transition , document_transfer_state_transition , document_update_price_state_transition , document_purchase_state_transition }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_identity_public_key_in_creation < > (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identity_public_key_in_creation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_identity_create_state_transition < > (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identity_create_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_identity_update_state_transition < > (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identity_update_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_identity_top_up_state_transition < > (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identity_top_up_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_identity_credit_withdrawal_state_transition < > (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identity_credit_withdrawal_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_identity_credit_transfer_state_transition < > (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identity_credit_transfer_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_masternode_vote_state_transition < > (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . masternode_vote_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_contract_create_state_transition < > (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . contract_create_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_contract_update_state_transition < > (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . contract_update_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_documents_batch_state_transition < > (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . documents_batch_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_document_base_state_transition < > (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . document_base_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_document_create_state_transition < > (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds { (* obj) . document_create_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_document_replace_state_transition < > (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds { (* obj) . document_replace_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_document_delete_state_transition < > (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds { (* obj) . document_delete_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_document_transfer_state_transition < > (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds { (* obj) . document_transfer_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_document_update_price_state_transition < > (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds { (* obj) . document_update_price_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_document_purchase_state_transition < > (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds { (* obj) . document_purchase_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_identity_public_key_in_creation < > (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identity_public_key_in_creation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_identity_create_state_transition < > (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identity_create_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_identity_update_state_transition < > (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identity_update_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_identity_top_up_state_transition < > (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identity_top_up_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_identity_credit_withdrawal_state_transition < > (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identity_credit_withdrawal_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_identity_credit_transfer_state_transition < > (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identity_credit_transfer_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_masternode_vote_state_transition < > (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . masternode_vote_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_contract_create_state_transition < > (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . contract_create_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_contract_update_state_transition < > (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . contract_update_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_documents_batch_state_transition < > (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . documents_batch_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_document_base_state_transition < > (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . document_base_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_document_create_state_transition < > (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds) { (* obj) . document_create_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_document_replace_state_transition < > (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds) { (* obj) . document_replace_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_document_delete_state_transition < > (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds) { (* obj) . document_delete_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_document_transfer_state_transition < > (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds) { (* obj) . document_transfer_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_document_update_price_state_transition < > (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds) { (* obj) . document_update_price_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_document_purchase_state_transition < > (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds) { (* obj) . document_purchase_state_transition = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: VotingVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_VotingVersions { pub default_vote_poll_time_duration_ms : u64 , pub contested_document_vote_poll_stored_info_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: VotingVersions > for platform_version_version_dpp_versions_VotingVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_VotingVersions) -> platform_version :: version :: dpp_versions :: VotingVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: VotingVersions { default_vote_poll_time_duration_ms : ffi_ref . default_vote_poll_time_duration_ms , contested_document_vote_poll_stored_info_version : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contested_document_vote_poll_stored_info_version) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: VotingVersions > for platform_version_version_dpp_versions_VotingVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: VotingVersions) -> * const platform_version_version_dpp_versions_VotingVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_VotingVersions { default_vote_poll_time_duration_ms : obj . default_vote_poll_time_duration_ms , contested_document_vote_poll_stored_info_version : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contested_document_vote_poll_stored_info_version) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: VotingVersions > for platform_version_version_dpp_versions_VotingVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_VotingVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_VotingVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment_interfaces :: unbox_any (ffi_ref . contested_document_vote_poll_stored_info_version) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_VotingVersions_ctor < > (default_vote_poll_time_duration_ms : u64 , contested_document_vote_poll_stored_info_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_VotingVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_VotingVersions { default_vote_poll_time_duration_ms , contested_document_vote_poll_stored_info_version }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_VotingVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_VotingVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_VotingVersions_get_default_vote_poll_time_duration_ms < > (obj : * const platform_version_version_dpp_versions_VotingVersions) -> u64 { (* obj) . default_vote_poll_time_duration_ms } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_VotingVersions_get_contested_document_vote_poll_stored_info_version < > (obj : * const platform_version_version_dpp_versions_VotingVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . contested_document_vote_poll_stored_info_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_VotingVersions_set_default_vote_poll_time_duration_ms < > (obj : * mut platform_version_version_dpp_versions_VotingVersions , value : u64) { (* obj) . default_vote_poll_time_duration_ms = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_VotingVersions_set_contested_document_vote_poll_stored_info_version < > (obj : * mut platform_version_version_dpp_versions_VotingVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . contested_document_vote_poll_stored_info_version = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: DocumentTypeMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentTypeMethodVersions { pub create_document_from_data : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_document_with_prevalidated_properties : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub prefunded_voting_balance_for_document : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub contested_vote_poll_for_document : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub estimated_size : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub index_for_types : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub max_size : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub serialize_value_for_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub deserialize_value_for_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: DocumentTypeMethodVersions > for platform_version_version_dpp_versions_DocumentTypeMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentTypeMethodVersions) -> platform_version :: version :: dpp_versions :: DocumentTypeMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentTypeMethodVersions { create_document_from_data : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . create_document_from_data) , create_document_with_prevalidated_properties : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . create_document_with_prevalidated_properties) , prefunded_voting_balance_for_document : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . prefunded_voting_balance_for_document) , contested_vote_poll_for_document : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contested_vote_poll_for_document) , estimated_size : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . estimated_size) , index_for_types : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . index_for_types) , max_size : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . max_size) , serialize_value_for_key : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . serialize_value_for_key) , deserialize_value_for_key : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . deserialize_value_for_key) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: DocumentTypeMethodVersions > for platform_version_version_dpp_versions_DocumentTypeMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentTypeMethodVersions) -> * const platform_version_version_dpp_versions_DocumentTypeMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeMethodVersions { create_document_from_data : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . create_document_from_data) , create_document_with_prevalidated_properties : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . create_document_with_prevalidated_properties) , prefunded_voting_balance_for_document : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . prefunded_voting_balance_for_document) , contested_vote_poll_for_document : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contested_vote_poll_for_document) , estimated_size : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . estimated_size) , index_for_types : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . index_for_types) , max_size : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . max_size) , serialize_value_for_key : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . serialize_value_for_key) , deserialize_value_for_key : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . deserialize_value_for_key) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: DocumentTypeMethodVersions > for platform_version_version_dpp_versions_DocumentTypeMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentTypeMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentTypeMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . create_document_from_data) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_document_with_prevalidated_properties) ; ; ferment_interfaces :: unbox_any (ffi_ref . prefunded_voting_balance_for_document) ; ; ferment_interfaces :: unbox_any (ffi_ref . contested_vote_poll_for_document) ; ; ferment_interfaces :: unbox_any (ffi_ref . estimated_size) ; ; ferment_interfaces :: unbox_any (ffi_ref . index_for_types) ; ; ferment_interfaces :: unbox_any (ffi_ref . max_size) ; ; ferment_interfaces :: unbox_any (ffi_ref . serialize_value_for_key) ; ; ferment_interfaces :: unbox_any (ffi_ref . deserialize_value_for_key) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_ctor < > (create_document_from_data : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_document_with_prevalidated_properties : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , prefunded_voting_balance_for_document : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , contested_vote_poll_for_document : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , estimated_size : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , index_for_types : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , max_size : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , serialize_value_for_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , deserialize_value_for_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_DocumentTypeMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeMethodVersions { create_document_from_data , create_document_with_prevalidated_properties , prefunded_voting_balance_for_document , contested_vote_poll_for_document , estimated_size , index_for_types , max_size , serialize_value_for_key , deserialize_value_for_key }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_DocumentTypeMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_get_create_document_from_data < > (obj : * const platform_version_version_dpp_versions_DocumentTypeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_document_from_data } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_get_create_document_with_prevalidated_properties < > (obj : * const platform_version_version_dpp_versions_DocumentTypeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_document_with_prevalidated_properties } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_get_prefunded_voting_balance_for_document < > (obj : * const platform_version_version_dpp_versions_DocumentTypeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prefunded_voting_balance_for_document } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_get_contested_vote_poll_for_document < > (obj : * const platform_version_version_dpp_versions_DocumentTypeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . contested_vote_poll_for_document } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_get_estimated_size < > (obj : * const platform_version_version_dpp_versions_DocumentTypeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . estimated_size } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_get_index_for_types < > (obj : * const platform_version_version_dpp_versions_DocumentTypeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . index_for_types } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_get_max_size < > (obj : * const platform_version_version_dpp_versions_DocumentTypeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . max_size } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_get_serialize_value_for_key < > (obj : * const platform_version_version_dpp_versions_DocumentTypeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . serialize_value_for_key } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_get_deserialize_value_for_key < > (obj : * const platform_version_version_dpp_versions_DocumentTypeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . deserialize_value_for_key } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_set_create_document_from_data < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_document_from_data = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_set_create_document_with_prevalidated_properties < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_document_with_prevalidated_properties = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_set_prefunded_voting_balance_for_document < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prefunded_voting_balance_for_document = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_set_contested_vote_poll_for_document < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . contested_vote_poll_for_document = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_set_estimated_size < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . estimated_size = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_set_index_for_types < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . index_for_types = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_set_max_size < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . max_size = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_set_serialize_value_for_key < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . serialize_value_for_key = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_set_deserialize_value_for_key < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . deserialize_value_for_key = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: PublicKeyInCreationMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions { pub from_public_key_signed_with_private_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub from_public_key_signed_external : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub duplicated_key_ids_witness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub duplicated_keys_witness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_identity_public_keys_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: PublicKeyInCreationMethodVersions > for platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) -> platform_version :: version :: dpp_versions :: PublicKeyInCreationMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: PublicKeyInCreationMethodVersions { from_public_key_signed_with_private_key : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . from_public_key_signed_with_private_key) , from_public_key_signed_external : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . from_public_key_signed_external) , hash : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . hash) , duplicated_key_ids_witness : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . duplicated_key_ids_witness) , duplicated_keys_witness : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . duplicated_keys_witness) , validate_identity_public_keys_structure : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_identity_public_keys_structure) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: PublicKeyInCreationMethodVersions > for platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: PublicKeyInCreationMethodVersions) -> * const platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions { from_public_key_signed_with_private_key : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . from_public_key_signed_with_private_key) , from_public_key_signed_external : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . from_public_key_signed_external) , hash : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . hash) , duplicated_key_ids_witness : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . duplicated_key_ids_witness) , duplicated_keys_witness : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . duplicated_keys_witness) , validate_identity_public_keys_structure : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_identity_public_keys_structure) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: PublicKeyInCreationMethodVersions > for platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . from_public_key_signed_with_private_key) ; ; ferment_interfaces :: unbox_any (ffi_ref . from_public_key_signed_external) ; ; ferment_interfaces :: unbox_any (ffi_ref . hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . duplicated_key_ids_witness) ; ; ferment_interfaces :: unbox_any (ffi_ref . duplicated_keys_witness) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_identity_public_keys_structure) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_ctor < > (from_public_key_signed_with_private_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , from_public_key_signed_external : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , duplicated_key_ids_witness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , duplicated_keys_witness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_identity_public_keys_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions { from_public_key_signed_with_private_key , from_public_key_signed_external , hash , duplicated_key_ids_witness , duplicated_keys_witness , validate_identity_public_keys_structure }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_get_from_public_key_signed_with_private_key < > (obj : * const platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . from_public_key_signed_with_private_key } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_get_from_public_key_signed_external < > (obj : * const platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . from_public_key_signed_external } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_get_hash < > (obj : * const platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_get_duplicated_key_ids_witness < > (obj : * const platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . duplicated_key_ids_witness } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_get_duplicated_keys_witness < > (obj : * const platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . duplicated_keys_witness } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_get_validate_identity_public_keys_structure < > (obj : * const platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_identity_public_keys_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_set_from_public_key_signed_with_private_key < > (obj : * mut platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . from_public_key_signed_with_private_key = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_set_from_public_key_signed_external < > (obj : * mut platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . from_public_key_signed_external = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_set_hash < > (obj : * mut platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_set_duplicated_key_ids_witness < > (obj : * mut platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . duplicated_key_ids_witness = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_set_duplicated_keys_witness < > (obj : * mut platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . duplicated_keys_witness = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_set_validate_identity_public_keys_structure < > (obj : * mut platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_identity_public_keys_structure = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: DataContractMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DataContractMethodVersions { pub validate_document : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_update : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub schema : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: DataContractMethodVersions > for platform_version_version_dpp_versions_DataContractMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DataContractMethodVersions) -> platform_version :: version :: dpp_versions :: DataContractMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DataContractMethodVersions { validate_document : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_document) , validate_update : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_update) , schema : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . schema) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: DataContractMethodVersions > for platform_version_version_dpp_versions_DataContractMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DataContractMethodVersions) -> * const platform_version_version_dpp_versions_DataContractMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DataContractMethodVersions { validate_document : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_document) , validate_update : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_update) , schema : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . schema) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: DataContractMethodVersions > for platform_version_version_dpp_versions_DataContractMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DataContractMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DataContractMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . validate_document) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_update) ; ; ferment_interfaces :: unbox_any (ffi_ref . schema) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractMethodVersions_ctor < > (validate_document : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_update : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , schema : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_DataContractMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DataContractMethodVersions { validate_document , validate_update , schema }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractMethodVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_DataContractMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractMethodVersions_get_validate_document < > (obj : * const platform_version_version_dpp_versions_DataContractMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_document } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractMethodVersions_get_validate_update < > (obj : * const platform_version_version_dpp_versions_DataContractMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_update } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractMethodVersions_get_schema < > (obj : * const platform_version_version_dpp_versions_DataContractMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . schema } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractMethodVersions_set_validate_document < > (obj : * mut platform_version_version_dpp_versions_DataContractMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_document = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractMethodVersions_set_validate_update < > (obj : * mut platform_version_version_dpp_versions_DataContractMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_update = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractMethodVersions_set_schema < > (obj : * mut platform_version_version_dpp_versions_DataContractMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . schema = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: RecursiveSchemaValidatorVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions { pub traversal_validator : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: RecursiveSchemaValidatorVersions > for platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions) -> platform_version :: version :: dpp_versions :: RecursiveSchemaValidatorVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: RecursiveSchemaValidatorVersions { traversal_validator : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . traversal_validator) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: RecursiveSchemaValidatorVersions > for platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: RecursiveSchemaValidatorVersions) -> * const platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions { traversal_validator : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . traversal_validator) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: RecursiveSchemaValidatorVersions > for platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . traversal_validator) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions_ctor < > (traversal_validator : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions { traversal_validator }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions_get_traversal_validator < > (obj : * const platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . traversal_validator } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions_set_traversal_validator < > (obj : * mut platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . traversal_validator = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: DocumentTransitionVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentTransitionVersions { pub documents_batch_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentsBatchTransitionVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: DocumentTransitionVersions > for platform_version_version_dpp_versions_DocumentTransitionVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentTransitionVersions) -> platform_version :: version :: dpp_versions :: DocumentTransitionVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentTransitionVersions { documents_batch_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . documents_batch_transition) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: DocumentTransitionVersions > for platform_version_version_dpp_versions_DocumentTransitionVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentTransitionVersions) -> * const platform_version_version_dpp_versions_DocumentTransitionVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTransitionVersions { documents_batch_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . documents_batch_transition) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: DocumentTransitionVersions > for platform_version_version_dpp_versions_DocumentTransitionVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentTransitionVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentTransitionVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . documents_batch_transition) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTransitionVersions_ctor < > (documents_batch_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentsBatchTransitionVersions) -> * mut platform_version_version_dpp_versions_DocumentTransitionVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTransitionVersions { documents_batch_transition }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTransitionVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_DocumentTransitionVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTransitionVersions_get_documents_batch_transition < > (obj : * const platform_version_version_dpp_versions_DocumentTransitionVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentsBatchTransitionVersions { (* obj) . documents_batch_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTransitionVersions_set_documents_batch_transition < > (obj : * mut platform_version_version_dpp_versions_DocumentTransitionVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentsBatchTransitionVersions) { (* obj) . documents_batch_transition = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: StateTransitionConversionVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_StateTransitionConversionVersions { pub identity_to_identity_create_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub identity_to_identity_top_up_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub identity_to_identity_withdrawal_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub identity_to_identity_create_transition_with_signer : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: StateTransitionConversionVersions > for platform_version_version_dpp_versions_StateTransitionConversionVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_StateTransitionConversionVersions) -> platform_version :: version :: dpp_versions :: StateTransitionConversionVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: StateTransitionConversionVersions { identity_to_identity_create_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_to_identity_create_transition) , identity_to_identity_top_up_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_to_identity_top_up_transition) , identity_to_identity_withdrawal_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_to_identity_withdrawal_transition) , identity_to_identity_create_transition_with_signer : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_to_identity_create_transition_with_signer) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: StateTransitionConversionVersions > for platform_version_version_dpp_versions_StateTransitionConversionVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: StateTransitionConversionVersions) -> * const platform_version_version_dpp_versions_StateTransitionConversionVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_StateTransitionConversionVersions { identity_to_identity_create_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_to_identity_create_transition) , identity_to_identity_top_up_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_to_identity_top_up_transition) , identity_to_identity_withdrawal_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_to_identity_withdrawal_transition) , identity_to_identity_create_transition_with_signer : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_to_identity_create_transition_with_signer) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: StateTransitionConversionVersions > for platform_version_version_dpp_versions_StateTransitionConversionVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_StateTransitionConversionVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_StateTransitionConversionVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_to_identity_create_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_to_identity_top_up_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_to_identity_withdrawal_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_to_identity_create_transition_with_signer) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionConversionVersions_ctor < > (identity_to_identity_create_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , identity_to_identity_top_up_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , identity_to_identity_withdrawal_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , identity_to_identity_create_transition_with_signer : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_StateTransitionConversionVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_StateTransitionConversionVersions { identity_to_identity_create_transition , identity_to_identity_top_up_transition , identity_to_identity_withdrawal_transition , identity_to_identity_create_transition_with_signer }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionConversionVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_StateTransitionConversionVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionConversionVersions_get_identity_to_identity_create_transition < > (obj : * const platform_version_version_dpp_versions_StateTransitionConversionVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . identity_to_identity_create_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionConversionVersions_get_identity_to_identity_top_up_transition < > (obj : * const platform_version_version_dpp_versions_StateTransitionConversionVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . identity_to_identity_top_up_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionConversionVersions_get_identity_to_identity_withdrawal_transition < > (obj : * const platform_version_version_dpp_versions_StateTransitionConversionVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . identity_to_identity_withdrawal_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionConversionVersions_get_identity_to_identity_create_transition_with_signer < > (obj : * const platform_version_version_dpp_versions_StateTransitionConversionVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . identity_to_identity_create_transition_with_signer } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionConversionVersions_set_identity_to_identity_create_transition < > (obj : * mut platform_version_version_dpp_versions_StateTransitionConversionVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . identity_to_identity_create_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionConversionVersions_set_identity_to_identity_top_up_transition < > (obj : * mut platform_version_version_dpp_versions_StateTransitionConversionVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . identity_to_identity_top_up_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionConversionVersions_set_identity_to_identity_withdrawal_transition < > (obj : * mut platform_version_version_dpp_versions_StateTransitionConversionVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . identity_to_identity_withdrawal_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionConversionVersions_set_identity_to_identity_create_transition_with_signer < > (obj : * mut platform_version_version_dpp_versions_StateTransitionConversionVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . identity_to_identity_create_transition_with_signer = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: DocumentTypeSchemaVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentTypeSchemaVersions { pub enrich_with_base_schema : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub find_identifier_and_binary_paths : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_max_depth : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub max_depth : u16 , pub recursive_schema_validator_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions , pub validate_schema_compatibility : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: DocumentTypeSchemaVersions > for platform_version_version_dpp_versions_DocumentTypeSchemaVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentTypeSchemaVersions) -> platform_version :: version :: dpp_versions :: DocumentTypeSchemaVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentTypeSchemaVersions { enrich_with_base_schema : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . enrich_with_base_schema) , find_identifier_and_binary_paths : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . find_identifier_and_binary_paths) , validate_max_depth : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_max_depth) , max_depth : ffi_ref . max_depth , recursive_schema_validator_versions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . recursive_schema_validator_versions) , validate_schema_compatibility : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_schema_compatibility) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: DocumentTypeSchemaVersions > for platform_version_version_dpp_versions_DocumentTypeSchemaVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentTypeSchemaVersions) -> * const platform_version_version_dpp_versions_DocumentTypeSchemaVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeSchemaVersions { enrich_with_base_schema : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . enrich_with_base_schema) , find_identifier_and_binary_paths : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . find_identifier_and_binary_paths) , validate_max_depth : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_max_depth) , max_depth : obj . max_depth , recursive_schema_validator_versions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . recursive_schema_validator_versions) , validate_schema_compatibility : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_schema_compatibility) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: DocumentTypeSchemaVersions > for platform_version_version_dpp_versions_DocumentTypeSchemaVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentTypeSchemaVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentTypeSchemaVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . enrich_with_base_schema) ; ; ferment_interfaces :: unbox_any (ffi_ref . find_identifier_and_binary_paths) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_max_depth) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . recursive_schema_validator_versions) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_schema_compatibility) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_ctor < > (enrich_with_base_schema : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , find_identifier_and_binary_paths : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_max_depth : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , max_depth : u16 , recursive_schema_validator_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions , validate_schema_compatibility : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_DocumentTypeSchemaVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeSchemaVersions { enrich_with_base_schema , find_identifier_and_binary_paths , validate_max_depth , max_depth , recursive_schema_validator_versions , validate_schema_compatibility }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_DocumentTypeSchemaVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_get_enrich_with_base_schema < > (obj : * const platform_version_version_dpp_versions_DocumentTypeSchemaVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . enrich_with_base_schema } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_get_find_identifier_and_binary_paths < > (obj : * const platform_version_version_dpp_versions_DocumentTypeSchemaVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . find_identifier_and_binary_paths } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_get_validate_max_depth < > (obj : * const platform_version_version_dpp_versions_DocumentTypeSchemaVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_max_depth } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_get_max_depth < > (obj : * const platform_version_version_dpp_versions_DocumentTypeSchemaVersions) -> u16 { (* obj) . max_depth } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_get_recursive_schema_validator_versions < > (obj : * const platform_version_version_dpp_versions_DocumentTypeSchemaVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions { (* obj) . recursive_schema_validator_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_get_validate_schema_compatibility < > (obj : * const platform_version_version_dpp_versions_DocumentTypeSchemaVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_schema_compatibility } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_set_enrich_with_base_schema < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeSchemaVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . enrich_with_base_schema = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_set_find_identifier_and_binary_paths < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeSchemaVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . find_identifier_and_binary_paths = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_set_validate_max_depth < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeSchemaVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_max_depth = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_set_max_depth < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeSchemaVersions , value : u16) { (* obj) . max_depth = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_set_recursive_schema_validator_versions < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeSchemaVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions) { (* obj) . recursive_schema_validator_versions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_set_validate_schema_compatibility < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeSchemaVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_schema_compatibility = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: StateTransitionMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_StateTransitionMethodVersions { pub public_key_in_creation_methods : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: StateTransitionMethodVersions > for platform_version_version_dpp_versions_StateTransitionMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_StateTransitionMethodVersions) -> platform_version :: version :: dpp_versions :: StateTransitionMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: StateTransitionMethodVersions { public_key_in_creation_methods : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . public_key_in_creation_methods) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: StateTransitionMethodVersions > for platform_version_version_dpp_versions_StateTransitionMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: StateTransitionMethodVersions) -> * const platform_version_version_dpp_versions_StateTransitionMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_StateTransitionMethodVersions { public_key_in_creation_methods : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . public_key_in_creation_methods) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: StateTransitionMethodVersions > for platform_version_version_dpp_versions_StateTransitionMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_StateTransitionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_StateTransitionMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_in_creation_methods) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionMethodVersions_ctor < > (public_key_in_creation_methods : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) -> * mut platform_version_version_dpp_versions_StateTransitionMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_StateTransitionMethodVersions { public_key_in_creation_methods }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionMethodVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_StateTransitionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionMethodVersions_get_public_key_in_creation_methods < > (obj : * const platform_version_version_dpp_versions_StateTransitionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions { (* obj) . public_key_in_creation_methods } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionMethodVersions_set_public_key_in_creation_methods < > (obj : * mut platform_version_version_dpp_versions_StateTransitionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) { (* obj) . public_key_in_creation_methods = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: AssetLockVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_AssetLockVersions { pub reduced_asset_lock_value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: AssetLockVersions > for platform_version_version_dpp_versions_AssetLockVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_AssetLockVersions) -> platform_version :: version :: dpp_versions :: AssetLockVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: AssetLockVersions { reduced_asset_lock_value : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . reduced_asset_lock_value) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: AssetLockVersions > for platform_version_version_dpp_versions_AssetLockVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: AssetLockVersions) -> * const platform_version_version_dpp_versions_AssetLockVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_AssetLockVersions { reduced_asset_lock_value : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . reduced_asset_lock_value) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: AssetLockVersions > for platform_version_version_dpp_versions_AssetLockVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_AssetLockVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_AssetLockVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . reduced_asset_lock_value) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_AssetLockVersions_ctor < > (reduced_asset_lock_value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) -> * mut platform_version_version_dpp_versions_AssetLockVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_AssetLockVersions { reduced_asset_lock_value }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_AssetLockVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_AssetLockVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_AssetLockVersions_get_reduced_asset_lock_value < > (obj : * const platform_version_version_dpp_versions_AssetLockVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . reduced_asset_lock_value } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_AssetLockVersions_set_reduced_asset_lock_value < > (obj : * mut platform_version_version_dpp_versions_AssetLockVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . reduced_asset_lock_value = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: DocumentTypeClassMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentTypeClassMethodVersions { pub try_from_schema : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_document_types_from_document_schemas : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: DocumentTypeClassMethodVersions > for platform_version_version_dpp_versions_DocumentTypeClassMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentTypeClassMethodVersions) -> platform_version :: version :: dpp_versions :: DocumentTypeClassMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentTypeClassMethodVersions { try_from_schema : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . try_from_schema) , create_document_types_from_document_schemas : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . create_document_types_from_document_schemas) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: DocumentTypeClassMethodVersions > for platform_version_version_dpp_versions_DocumentTypeClassMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentTypeClassMethodVersions) -> * const platform_version_version_dpp_versions_DocumentTypeClassMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeClassMethodVersions { try_from_schema : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . try_from_schema) , create_document_types_from_document_schemas : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . create_document_types_from_document_schemas) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: DocumentTypeClassMethodVersions > for platform_version_version_dpp_versions_DocumentTypeClassMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentTypeClassMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentTypeClassMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . try_from_schema) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_document_types_from_document_schemas) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeClassMethodVersions_ctor < > (try_from_schema : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_document_types_from_document_schemas : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_DocumentTypeClassMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeClassMethodVersions { try_from_schema , create_document_types_from_document_schemas }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeClassMethodVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_DocumentTypeClassMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeClassMethodVersions_get_try_from_schema < > (obj : * const platform_version_version_dpp_versions_DocumentTypeClassMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . try_from_schema } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeClassMethodVersions_get_create_document_types_from_document_schemas < > (obj : * const platform_version_version_dpp_versions_DocumentTypeClassMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_document_types_from_document_schemas } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeClassMethodVersions_set_try_from_schema < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeClassMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . try_from_schema = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeClassMethodVersions_set_create_document_types_from_document_schemas < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeClassMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_document_types_from_document_schemas = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: DPPValidationVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DPPValidationVersions { pub json_schema_validator : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_JsonSchemaValidatorVersions , pub data_contract : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DataContractValidationVersions , pub document_type : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeValidationVersions , pub voting : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_VotingValidationVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: DPPValidationVersions > for platform_version_version_dpp_versions_DPPValidationVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DPPValidationVersions) -> platform_version :: version :: dpp_versions :: DPPValidationVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DPPValidationVersions { json_schema_validator : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . json_schema_validator) , data_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract) , document_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type) , voting : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . voting) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: DPPValidationVersions > for platform_version_version_dpp_versions_DPPValidationVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DPPValidationVersions) -> * const platform_version_version_dpp_versions_DPPValidationVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DPPValidationVersions { json_schema_validator : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . json_schema_validator) , data_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract) , document_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type) , voting : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . voting) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: DPPValidationVersions > for platform_version_version_dpp_versions_DPPValidationVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DPPValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DPPValidationVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . json_schema_validator) ; ; ferment_interfaces :: unbox_any (ffi_ref . data_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_type) ; ; ferment_interfaces :: unbox_any (ffi_ref . voting) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPValidationVersions_ctor < > (json_schema_validator : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_JsonSchemaValidatorVersions , data_contract : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DataContractValidationVersions , document_type : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeValidationVersions , voting : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_VotingValidationVersions) -> * mut platform_version_version_dpp_versions_DPPValidationVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DPPValidationVersions { json_schema_validator , data_contract , document_type , voting }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPValidationVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_DPPValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPValidationVersions_get_json_schema_validator < > (obj : * const platform_version_version_dpp_versions_DPPValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_JsonSchemaValidatorVersions { (* obj) . json_schema_validator } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPValidationVersions_get_data_contract < > (obj : * const platform_version_version_dpp_versions_DPPValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DataContractValidationVersions { (* obj) . data_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPValidationVersions_get_document_type < > (obj : * const platform_version_version_dpp_versions_DPPValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeValidationVersions { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPValidationVersions_get_voting < > (obj : * const platform_version_version_dpp_versions_DPPValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_VotingValidationVersions { (* obj) . voting } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPValidationVersions_set_json_schema_validator < > (obj : * mut platform_version_version_dpp_versions_DPPValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_JsonSchemaValidatorVersions) { (* obj) . json_schema_validator = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPValidationVersions_set_data_contract < > (obj : * mut platform_version_version_dpp_versions_DPPValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DataContractValidationVersions) { (* obj) . data_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPValidationVersions_set_document_type < > (obj : * mut platform_version_version_dpp_versions_DPPValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeValidationVersions) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPValidationVersions_set_voting < > (obj : * mut platform_version_version_dpp_versions_DPPValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_VotingValidationVersions) { (* obj) . voting = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: DPPVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DPPVersion { pub costs : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_CostVersions , pub validation : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DPPValidationVersions , pub state_transition_serialization_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionSerializationVersions , pub state_transition_conversion_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionConversionVersions , pub state_transition_method_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionMethodVersions , pub state_transitions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionVersions , pub contract_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_ContractVersions , pub document_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentVersions , pub identity_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityVersions , pub voting_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_VotingVersions , pub asset_lock_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_AssetLockVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: DPPVersion > for platform_version_version_dpp_versions_DPPVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DPPVersion) -> platform_version :: version :: dpp_versions :: DPPVersion { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DPPVersion { costs : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . costs) , validation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validation) , state_transition_serialization_versions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . state_transition_serialization_versions) , state_transition_conversion_versions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . state_transition_conversion_versions) , state_transition_method_versions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . state_transition_method_versions) , state_transitions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . state_transitions) , contract_versions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contract_versions) , document_versions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_versions) , identity_versions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_versions) , voting_versions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . voting_versions) , asset_lock_versions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . asset_lock_versions) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: DPPVersion > for platform_version_version_dpp_versions_DPPVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DPPVersion) -> * const platform_version_version_dpp_versions_DPPVersion { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DPPVersion { costs : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . costs) , validation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validation) , state_transition_serialization_versions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . state_transition_serialization_versions) , state_transition_conversion_versions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . state_transition_conversion_versions) , state_transition_method_versions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . state_transition_method_versions) , state_transitions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . state_transitions) , contract_versions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contract_versions) , document_versions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_versions) , identity_versions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_versions) , voting_versions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . voting_versions) , asset_lock_versions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . asset_lock_versions) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: DPPVersion > for platform_version_version_dpp_versions_DPPVersion { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DPPVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DPPVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . costs) ; ; ferment_interfaces :: unbox_any (ffi_ref . validation) ; ; ferment_interfaces :: unbox_any (ffi_ref . state_transition_serialization_versions) ; ; ferment_interfaces :: unbox_any (ffi_ref . state_transition_conversion_versions) ; ; ferment_interfaces :: unbox_any (ffi_ref . state_transition_method_versions) ; ; ferment_interfaces :: unbox_any (ffi_ref . state_transitions) ; ; ferment_interfaces :: unbox_any (ffi_ref . contract_versions) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_versions) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_versions) ; ; ferment_interfaces :: unbox_any (ffi_ref . voting_versions) ; ; ferment_interfaces :: unbox_any (ffi_ref . asset_lock_versions) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_ctor < > (costs : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_CostVersions , validation : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DPPValidationVersions , state_transition_serialization_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionSerializationVersions , state_transition_conversion_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionConversionVersions , state_transition_method_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionMethodVersions , state_transitions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionVersions , contract_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_ContractVersions , document_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentVersions , identity_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityVersions , voting_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_VotingVersions , asset_lock_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_AssetLockVersions) -> * mut platform_version_version_dpp_versions_DPPVersion { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DPPVersion { costs , validation , state_transition_serialization_versions , state_transition_conversion_versions , state_transition_method_versions , state_transitions , contract_versions , document_versions , identity_versions , voting_versions , asset_lock_versions }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_destroy < > (ffi : * mut platform_version_version_dpp_versions_DPPVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_get_costs < > (obj : * const platform_version_version_dpp_versions_DPPVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_CostVersions { (* obj) . costs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_get_validation < > (obj : * const platform_version_version_dpp_versions_DPPVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DPPValidationVersions { (* obj) . validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_get_state_transition_serialization_versions < > (obj : * const platform_version_version_dpp_versions_DPPVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionSerializationVersions { (* obj) . state_transition_serialization_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_get_state_transition_conversion_versions < > (obj : * const platform_version_version_dpp_versions_DPPVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionConversionVersions { (* obj) . state_transition_conversion_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_get_state_transition_method_versions < > (obj : * const platform_version_version_dpp_versions_DPPVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionMethodVersions { (* obj) . state_transition_method_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_get_state_transitions < > (obj : * const platform_version_version_dpp_versions_DPPVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionVersions { (* obj) . state_transitions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_get_contract_versions < > (obj : * const platform_version_version_dpp_versions_DPPVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_ContractVersions { (* obj) . contract_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_get_document_versions < > (obj : * const platform_version_version_dpp_versions_DPPVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentVersions { (* obj) . document_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_get_identity_versions < > (obj : * const platform_version_version_dpp_versions_DPPVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityVersions { (* obj) . identity_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_get_voting_versions < > (obj : * const platform_version_version_dpp_versions_DPPVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_VotingVersions { (* obj) . voting_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_get_asset_lock_versions < > (obj : * const platform_version_version_dpp_versions_DPPVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_AssetLockVersions { (* obj) . asset_lock_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_set_costs < > (obj : * mut platform_version_version_dpp_versions_DPPVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_CostVersions) { (* obj) . costs = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_set_validation < > (obj : * mut platform_version_version_dpp_versions_DPPVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DPPValidationVersions) { (* obj) . validation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_set_state_transition_serialization_versions < > (obj : * mut platform_version_version_dpp_versions_DPPVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionSerializationVersions) { (* obj) . state_transition_serialization_versions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_set_state_transition_conversion_versions < > (obj : * mut platform_version_version_dpp_versions_DPPVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionConversionVersions) { (* obj) . state_transition_conversion_versions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_set_state_transition_method_versions < > (obj : * mut platform_version_version_dpp_versions_DPPVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionMethodVersions) { (* obj) . state_transition_method_versions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_set_state_transitions < > (obj : * mut platform_version_version_dpp_versions_DPPVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionVersions) { (* obj) . state_transitions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_set_contract_versions < > (obj : * mut platform_version_version_dpp_versions_DPPVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_ContractVersions) { (* obj) . contract_versions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_set_document_versions < > (obj : * mut platform_version_version_dpp_versions_DPPVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentVersions) { (* obj) . document_versions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_set_identity_versions < > (obj : * mut platform_version_version_dpp_versions_DPPVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityVersions) { (* obj) . identity_versions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_set_voting_versions < > (obj : * mut platform_version_version_dpp_versions_DPPVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_VotingVersions) { (* obj) . voting_versions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_set_asset_lock_versions < > (obj : * mut platform_version_version_dpp_versions_DPPVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_AssetLockVersions) { (* obj) . asset_lock_versions = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: DocumentFeatureVersionBounds`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentFeatureVersionBounds { pub bounds : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: DocumentFeatureVersionBounds > for platform_version_version_dpp_versions_DocumentFeatureVersionBounds { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentFeatureVersionBounds) -> platform_version :: version :: dpp_versions :: DocumentFeatureVersionBounds { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentFeatureVersionBounds { bounds : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . bounds) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: DocumentFeatureVersionBounds > for platform_version_version_dpp_versions_DocumentFeatureVersionBounds { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentFeatureVersionBounds) -> * const platform_version_version_dpp_versions_DocumentFeatureVersionBounds { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentFeatureVersionBounds { bounds : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . bounds) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: DocumentFeatureVersionBounds > for platform_version_version_dpp_versions_DocumentFeatureVersionBounds { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentFeatureVersionBounds) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentFeatureVersionBounds { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . bounds) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentFeatureVersionBounds_ctor < > (bounds : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) -> * mut platform_version_version_dpp_versions_DocumentFeatureVersionBounds { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentFeatureVersionBounds { bounds }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentFeatureVersionBounds_destroy < > (ffi : * mut platform_version_version_dpp_versions_DocumentFeatureVersionBounds) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentFeatureVersionBounds_get_bounds < > (obj : * const platform_version_version_dpp_versions_DocumentFeatureVersionBounds) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . bounds } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentFeatureVersionBounds_set_bounds < > (obj : * mut platform_version_version_dpp_versions_DocumentFeatureVersionBounds , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . bounds = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: VotingValidationVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_VotingValidationVersions { pub allow_other_contenders_time_ms : u64 , pub votes_allowed_per_masternode : u16 } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: VotingValidationVersions > for platform_version_version_dpp_versions_VotingValidationVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_VotingValidationVersions) -> platform_version :: version :: dpp_versions :: VotingValidationVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: VotingValidationVersions { allow_other_contenders_time_ms : ffi_ref . allow_other_contenders_time_ms , votes_allowed_per_masternode : ffi_ref . votes_allowed_per_masternode } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: VotingValidationVersions > for platform_version_version_dpp_versions_VotingValidationVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: VotingValidationVersions) -> * const platform_version_version_dpp_versions_VotingValidationVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_VotingValidationVersions { allow_other_contenders_time_ms : obj . allow_other_contenders_time_ms , votes_allowed_per_masternode : obj . votes_allowed_per_masternode }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: VotingValidationVersions > for platform_version_version_dpp_versions_VotingValidationVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_VotingValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_VotingValidationVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_VotingValidationVersions_ctor < > (allow_other_contenders_time_ms : u64 , votes_allowed_per_masternode : u16) -> * mut platform_version_version_dpp_versions_VotingValidationVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_VotingValidationVersions { allow_other_contenders_time_ms , votes_allowed_per_masternode }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_VotingValidationVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_VotingValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_VotingValidationVersions_get_allow_other_contenders_time_ms < > (obj : * const platform_version_version_dpp_versions_VotingValidationVersions) -> u64 { (* obj) . allow_other_contenders_time_ms } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_VotingValidationVersions_get_votes_allowed_per_masternode < > (obj : * const platform_version_version_dpp_versions_VotingValidationVersions) -> u16 { (* obj) . votes_allowed_per_masternode } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_VotingValidationVersions_set_allow_other_contenders_time_ms < > (obj : * mut platform_version_version_dpp_versions_VotingValidationVersions , value : u64) { (* obj) . allow_other_contenders_time_ms = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_VotingValidationVersions_set_votes_allowed_per_masternode < > (obj : * mut platform_version_version_dpp_versions_VotingValidationVersions , value : u16) { (* obj) . votes_allowed_per_masternode = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: DocumentMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentMethodVersions { pub is_equal_ignoring_timestamps : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_raw_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_raw_for_document_type : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: DocumentMethodVersions > for platform_version_version_dpp_versions_DocumentMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentMethodVersions) -> platform_version :: version :: dpp_versions :: DocumentMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentMethodVersions { is_equal_ignoring_timestamps : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . is_equal_ignoring_timestamps) , hash : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . hash) , get_raw_for_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_raw_for_contract) , get_raw_for_document_type : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_raw_for_document_type) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: DocumentMethodVersions > for platform_version_version_dpp_versions_DocumentMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentMethodVersions) -> * const platform_version_version_dpp_versions_DocumentMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentMethodVersions { is_equal_ignoring_timestamps : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . is_equal_ignoring_timestamps) , hash : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . hash) , get_raw_for_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_raw_for_contract) , get_raw_for_document_type : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_raw_for_document_type) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: DocumentMethodVersions > for platform_version_version_dpp_versions_DocumentMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . is_equal_ignoring_timestamps) ; ; ferment_interfaces :: unbox_any (ffi_ref . hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_raw_for_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_raw_for_document_type) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentMethodVersions_ctor < > (is_equal_ignoring_timestamps : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_raw_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_raw_for_document_type : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_DocumentMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentMethodVersions { is_equal_ignoring_timestamps , hash , get_raw_for_contract , get_raw_for_document_type }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentMethodVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_DocumentMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentMethodVersions_get_is_equal_ignoring_timestamps < > (obj : * const platform_version_version_dpp_versions_DocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . is_equal_ignoring_timestamps } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentMethodVersions_get_hash < > (obj : * const platform_version_version_dpp_versions_DocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentMethodVersions_get_get_raw_for_contract < > (obj : * const platform_version_version_dpp_versions_DocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_raw_for_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentMethodVersions_get_get_raw_for_document_type < > (obj : * const platform_version_version_dpp_versions_DocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_raw_for_document_type } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentMethodVersions_set_is_equal_ignoring_timestamps < > (obj : * mut platform_version_version_dpp_versions_DocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . is_equal_ignoring_timestamps = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentMethodVersions_set_hash < > (obj : * mut platform_version_version_dpp_versions_DocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentMethodVersions_set_get_raw_for_contract < > (obj : * mut platform_version_version_dpp_versions_DocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_raw_for_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentMethodVersions_set_get_raw_for_document_type < > (obj : * mut platform_version_version_dpp_versions_DocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_raw_for_document_type = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: DocumentTypeIndexVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentTypeIndexVersions { pub index_levels_from_indices : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: DocumentTypeIndexVersions > for platform_version_version_dpp_versions_DocumentTypeIndexVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentTypeIndexVersions) -> platform_version :: version :: dpp_versions :: DocumentTypeIndexVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentTypeIndexVersions { index_levels_from_indices : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . index_levels_from_indices) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: DocumentTypeIndexVersions > for platform_version_version_dpp_versions_DocumentTypeIndexVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentTypeIndexVersions) -> * const platform_version_version_dpp_versions_DocumentTypeIndexVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeIndexVersions { index_levels_from_indices : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . index_levels_from_indices) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: DocumentTypeIndexVersions > for platform_version_version_dpp_versions_DocumentTypeIndexVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentTypeIndexVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentTypeIndexVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . index_levels_from_indices) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeIndexVersions_ctor < > (index_levels_from_indices : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_DocumentTypeIndexVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeIndexVersions { index_levels_from_indices }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeIndexVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_DocumentTypeIndexVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeIndexVersions_get_index_levels_from_indices < > (obj : * const platform_version_version_dpp_versions_DocumentTypeIndexVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . index_levels_from_indices } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeIndexVersions_set_index_levels_from_indices < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeIndexVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . index_levels_from_indices = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: StateTransitionVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_StateTransitionVersions { pub documents : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTransitionVersions , pub identities : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityTransitionVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: StateTransitionVersions > for platform_version_version_dpp_versions_StateTransitionVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_StateTransitionVersions) -> platform_version :: version :: dpp_versions :: StateTransitionVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: StateTransitionVersions { documents : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . documents) , identities : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identities) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: StateTransitionVersions > for platform_version_version_dpp_versions_StateTransitionVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: StateTransitionVersions) -> * const platform_version_version_dpp_versions_StateTransitionVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_StateTransitionVersions { documents : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . documents) , identities : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identities) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: StateTransitionVersions > for platform_version_version_dpp_versions_StateTransitionVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_StateTransitionVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_StateTransitionVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . documents) ; ; ferment_interfaces :: unbox_any (ffi_ref . identities) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionVersions_ctor < > (documents : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTransitionVersions , identities : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityTransitionVersions) -> * mut platform_version_version_dpp_versions_StateTransitionVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_StateTransitionVersions { documents , identities }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_StateTransitionVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionVersions_get_documents < > (obj : * const platform_version_version_dpp_versions_StateTransitionVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTransitionVersions { (* obj) . documents } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionVersions_get_identities < > (obj : * const platform_version_version_dpp_versions_StateTransitionVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityTransitionVersions { (* obj) . identities } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionVersions_set_documents < > (obj : * mut platform_version_version_dpp_versions_StateTransitionVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTransitionVersions) { (* obj) . documents = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionVersions_set_identities < > (obj : * mut platform_version_version_dpp_versions_StateTransitionVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityTransitionVersions) { (* obj) . identities = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: DataContractValidationVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DataContractValidationVersions { pub validate : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_config_update : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_index_definitions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_index_naming_duplicates : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_not_defined_properties : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_property_definition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: DataContractValidationVersions > for platform_version_version_dpp_versions_DataContractValidationVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DataContractValidationVersions) -> platform_version :: version :: dpp_versions :: DataContractValidationVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DataContractValidationVersions { validate : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate) , validate_config_update : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_config_update) , validate_index_definitions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_index_definitions) , validate_index_naming_duplicates : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_index_naming_duplicates) , validate_not_defined_properties : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_not_defined_properties) , validate_property_definition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_property_definition) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: DataContractValidationVersions > for platform_version_version_dpp_versions_DataContractValidationVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DataContractValidationVersions) -> * const platform_version_version_dpp_versions_DataContractValidationVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DataContractValidationVersions { validate : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate) , validate_config_update : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_config_update) , validate_index_definitions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_index_definitions) , validate_index_naming_duplicates : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_index_naming_duplicates) , validate_not_defined_properties : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_not_defined_properties) , validate_property_definition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_property_definition) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: DataContractValidationVersions > for platform_version_version_dpp_versions_DataContractValidationVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DataContractValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DataContractValidationVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . validate) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_config_update) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_index_definitions) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_index_naming_duplicates) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_not_defined_properties) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_property_definition) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_ctor < > (validate : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_config_update : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_index_definitions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_index_naming_duplicates : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_not_defined_properties : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_property_definition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_DataContractValidationVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DataContractValidationVersions { validate , validate_config_update , validate_index_definitions , validate_index_naming_duplicates , validate_not_defined_properties , validate_property_definition }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_DataContractValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_get_validate < > (obj : * const platform_version_version_dpp_versions_DataContractValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_get_validate_config_update < > (obj : * const platform_version_version_dpp_versions_DataContractValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_config_update } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_get_validate_index_definitions < > (obj : * const platform_version_version_dpp_versions_DataContractValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_index_definitions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_get_validate_index_naming_duplicates < > (obj : * const platform_version_version_dpp_versions_DataContractValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_index_naming_duplicates } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_get_validate_not_defined_properties < > (obj : * const platform_version_version_dpp_versions_DataContractValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_not_defined_properties } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_get_validate_property_definition < > (obj : * const platform_version_version_dpp_versions_DataContractValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_property_definition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_set_validate < > (obj : * mut platform_version_version_dpp_versions_DataContractValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_set_validate_config_update < > (obj : * mut platform_version_version_dpp_versions_DataContractValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_config_update = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_set_validate_index_definitions < > (obj : * mut platform_version_version_dpp_versions_DataContractValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_index_definitions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_set_validate_index_naming_duplicates < > (obj : * mut platform_version_version_dpp_versions_DataContractValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_index_naming_duplicates = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_set_validate_not_defined_properties < > (obj : * mut platform_version_version_dpp_versions_DataContractValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_not_defined_properties = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_set_validate_property_definition < > (obj : * mut platform_version_version_dpp_versions_DataContractValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_property_definition = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: DocumentsBatchTransitionValidationVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions { pub find_duplicates_by_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_base_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: DocumentsBatchTransitionValidationVersions > for platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions) -> platform_version :: version :: dpp_versions :: DocumentsBatchTransitionValidationVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentsBatchTransitionValidationVersions { find_duplicates_by_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . find_duplicates_by_id) , validate_base_structure : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_base_structure) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: DocumentsBatchTransitionValidationVersions > for platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentsBatchTransitionValidationVersions) -> * const platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions { find_duplicates_by_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . find_duplicates_by_id) , validate_base_structure : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_base_structure) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: DocumentsBatchTransitionValidationVersions > for platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . find_duplicates_by_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_base_structure) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions_ctor < > (find_duplicates_by_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_base_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions { find_duplicates_by_id , validate_base_structure }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions_get_find_duplicates_by_id < > (obj : * const platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . find_duplicates_by_id } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions_get_validate_base_structure < > (obj : * const platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_base_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions_set_find_duplicates_by_id < > (obj : * mut platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . find_duplicates_by_id = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions_set_validate_base_structure < > (obj : * mut platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_base_structure = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: DocumentTypeVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentTypeVersions { pub index_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeIndexVersions , pub class_method_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeClassMethodVersions , pub structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub schema : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeSchemaVersions , pub methods : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeMethodVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: DocumentTypeVersions > for platform_version_version_dpp_versions_DocumentTypeVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentTypeVersions) -> platform_version :: version :: dpp_versions :: DocumentTypeVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentTypeVersions { index_versions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . index_versions) , class_method_versions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . class_method_versions) , structure_version : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . structure_version) , schema : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . schema) , methods : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . methods) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: DocumentTypeVersions > for platform_version_version_dpp_versions_DocumentTypeVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentTypeVersions) -> * const platform_version_version_dpp_versions_DocumentTypeVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeVersions { index_versions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . index_versions) , class_method_versions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . class_method_versions) , structure_version : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . structure_version) , schema : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . schema) , methods : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . methods) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: DocumentTypeVersions > for platform_version_version_dpp_versions_DocumentTypeVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentTypeVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentTypeVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . index_versions) ; ; ferment_interfaces :: unbox_any (ffi_ref . class_method_versions) ; ; ferment_interfaces :: unbox_any (ffi_ref . structure_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . schema) ; ; ferment_interfaces :: unbox_any (ffi_ref . methods) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_ctor < > (index_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeIndexVersions , class_method_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeClassMethodVersions , structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , schema : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeSchemaVersions , methods : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeMethodVersions) -> * mut platform_version_version_dpp_versions_DocumentTypeVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeVersions { index_versions , class_method_versions , structure_version , schema , methods }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_DocumentTypeVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_get_index_versions < > (obj : * const platform_version_version_dpp_versions_DocumentTypeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeIndexVersions { (* obj) . index_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_get_class_method_versions < > (obj : * const platform_version_version_dpp_versions_DocumentTypeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeClassMethodVersions { (* obj) . class_method_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_get_structure_version < > (obj : * const platform_version_version_dpp_versions_DocumentTypeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . structure_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_get_schema < > (obj : * const platform_version_version_dpp_versions_DocumentTypeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeSchemaVersions { (* obj) . schema } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_get_methods < > (obj : * const platform_version_version_dpp_versions_DocumentTypeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeMethodVersions { (* obj) . methods } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_set_index_versions < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeIndexVersions) { (* obj) . index_versions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_set_class_method_versions < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeClassMethodVersions) { (* obj) . class_method_versions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_set_structure_version < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . structure_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_set_schema < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeSchemaVersions) { (* obj) . schema = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_set_methods < > (obj : * mut platform_version_version_dpp_versions_DocumentTypeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeMethodVersions) { (* obj) . methods = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: ContractVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_ContractVersions { pub max_serialized_size : u32 , pub contract_serialization_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub contract_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub created_data_contract_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub config : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub methods : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DataContractMethodVersions , pub document_type_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: ContractVersions > for platform_version_version_dpp_versions_ContractVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_ContractVersions) -> platform_version :: version :: dpp_versions :: ContractVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: ContractVersions { max_serialized_size : ffi_ref . max_serialized_size , contract_serialization_version : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contract_serialization_version) , contract_structure_version : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contract_structure_version) , created_data_contract_structure : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . created_data_contract_structure) , config : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . config) , methods : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . methods) , document_type_versions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_type_versions) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: ContractVersions > for platform_version_version_dpp_versions_ContractVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: ContractVersions) -> * const platform_version_version_dpp_versions_ContractVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_ContractVersions { max_serialized_size : obj . max_serialized_size , contract_serialization_version : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contract_serialization_version) , contract_structure_version : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contract_structure_version) , created_data_contract_structure : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . created_data_contract_structure) , config : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . config) , methods : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . methods) , document_type_versions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_type_versions) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: ContractVersions > for platform_version_version_dpp_versions_ContractVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_ContractVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_ContractVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment_interfaces :: unbox_any (ffi_ref . contract_serialization_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . contract_structure_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . created_data_contract_structure) ; ; ferment_interfaces :: unbox_any (ffi_ref . config) ; ; ferment_interfaces :: unbox_any (ffi_ref . methods) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_type_versions) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_ctor < > (max_serialized_size : u32 , contract_serialization_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , contract_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , created_data_contract_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , config : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , methods : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DataContractMethodVersions , document_type_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeVersions) -> * mut platform_version_version_dpp_versions_ContractVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_ContractVersions { max_serialized_size , contract_serialization_version , contract_structure_version , created_data_contract_structure , config , methods , document_type_versions }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_ContractVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_get_max_serialized_size < > (obj : * const platform_version_version_dpp_versions_ContractVersions) -> u32 { (* obj) . max_serialized_size } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_get_contract_serialization_version < > (obj : * const platform_version_version_dpp_versions_ContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . contract_serialization_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_get_contract_structure_version < > (obj : * const platform_version_version_dpp_versions_ContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . contract_structure_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_get_created_data_contract_structure < > (obj : * const platform_version_version_dpp_versions_ContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . created_data_contract_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_get_config < > (obj : * const platform_version_version_dpp_versions_ContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . config } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_get_methods < > (obj : * const platform_version_version_dpp_versions_ContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DataContractMethodVersions { (* obj) . methods } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_get_document_type_versions < > (obj : * const platform_version_version_dpp_versions_ContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeVersions { (* obj) . document_type_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_set_max_serialized_size < > (obj : * mut platform_version_version_dpp_versions_ContractVersions , value : u32) { (* obj) . max_serialized_size = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_set_contract_serialization_version < > (obj : * mut platform_version_version_dpp_versions_ContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . contract_serialization_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_set_contract_structure_version < > (obj : * mut platform_version_version_dpp_versions_ContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . contract_structure_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_set_created_data_contract_structure < > (obj : * mut platform_version_version_dpp_versions_ContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . created_data_contract_structure = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_set_config < > (obj : * mut platform_version_version_dpp_versions_ContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . config = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_set_methods < > (obj : * mut platform_version_version_dpp_versions_ContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DataContractMethodVersions) { (* obj) . methods = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_set_document_type_versions < > (obj : * mut platform_version_version_dpp_versions_ContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeVersions) { (* obj) . document_type_versions = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: IdentityTransitionAssetLockVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions { pub required_asset_lock_duff_balance_for_processing_start_for_identity_create : u64 , pub required_asset_lock_duff_balance_for_processing_start_for_identity_top_up : u64 , pub validate_asset_lock_transaction_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_instant_asset_lock_proof_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: IdentityTransitionAssetLockVersions > for platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions) -> platform_version :: version :: dpp_versions :: IdentityTransitionAssetLockVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: IdentityTransitionAssetLockVersions { required_asset_lock_duff_balance_for_processing_start_for_identity_create : ffi_ref . required_asset_lock_duff_balance_for_processing_start_for_identity_create , required_asset_lock_duff_balance_for_processing_start_for_identity_top_up : ffi_ref . required_asset_lock_duff_balance_for_processing_start_for_identity_top_up , validate_asset_lock_transaction_structure : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_asset_lock_transaction_structure) , validate_instant_asset_lock_proof_structure : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_instant_asset_lock_proof_structure) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: IdentityTransitionAssetLockVersions > for platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: IdentityTransitionAssetLockVersions) -> * const platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions { required_asset_lock_duff_balance_for_processing_start_for_identity_create : obj . required_asset_lock_duff_balance_for_processing_start_for_identity_create , required_asset_lock_duff_balance_for_processing_start_for_identity_top_up : obj . required_asset_lock_duff_balance_for_processing_start_for_identity_top_up , validate_asset_lock_transaction_structure : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_asset_lock_transaction_structure) , validate_instant_asset_lock_proof_structure : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_instant_asset_lock_proof_structure) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: IdentityTransitionAssetLockVersions > for platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_asset_lock_transaction_structure) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_instant_asset_lock_proof_structure) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions_ctor < > (required_asset_lock_duff_balance_for_processing_start_for_identity_create : u64 , required_asset_lock_duff_balance_for_processing_start_for_identity_top_up : u64 , validate_asset_lock_transaction_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_instant_asset_lock_proof_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions { required_asset_lock_duff_balance_for_processing_start_for_identity_create , required_asset_lock_duff_balance_for_processing_start_for_identity_top_up , validate_asset_lock_transaction_structure , validate_instant_asset_lock_proof_structure }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions_get_required_asset_lock_duff_balance_for_processing_start_for_identity_create < > (obj : * const platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions) -> u64 { (* obj) . required_asset_lock_duff_balance_for_processing_start_for_identity_create } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions_get_required_asset_lock_duff_balance_for_processing_start_for_identity_top_up < > (obj : * const platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions) -> u64 { (* obj) . required_asset_lock_duff_balance_for_processing_start_for_identity_top_up } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions_get_validate_asset_lock_transaction_structure < > (obj : * const platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_asset_lock_transaction_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions_get_validate_instant_asset_lock_proof_structure < > (obj : * const platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_instant_asset_lock_proof_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions_set_required_asset_lock_duff_balance_for_processing_start_for_identity_create < > (obj : * mut platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions , value : u64) { (* obj) . required_asset_lock_duff_balance_for_processing_start_for_identity_create = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions_set_required_asset_lock_duff_balance_for_processing_start_for_identity_top_up < > (obj : * mut platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions , value : u64) { (* obj) . required_asset_lock_duff_balance_for_processing_start_for_identity_top_up = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions_set_validate_asset_lock_transaction_structure < > (obj : * mut platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_asset_lock_transaction_structure = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions_set_validate_instant_asset_lock_proof_structure < > (obj : * mut platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_instant_asset_lock_proof_structure = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: dpp_versions :: DocumentVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentVersions { pub document_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_serialization_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub document_cbor_serialization_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub extended_document_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub extended_document_serialization_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub document_method_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentMethodVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: dpp_versions :: DocumentVersions > for platform_version_version_dpp_versions_DocumentVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentVersions) -> platform_version :: version :: dpp_versions :: DocumentVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentVersions { document_structure_version : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_structure_version) , document_serialization_version : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_serialization_version) , document_cbor_serialization_version : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_cbor_serialization_version) , extended_document_structure_version : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . extended_document_structure_version) , extended_document_serialization_version : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . extended_document_serialization_version) , document_method_versions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_method_versions) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: dpp_versions :: DocumentVersions > for platform_version_version_dpp_versions_DocumentVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentVersions) -> * const platform_version_version_dpp_versions_DocumentVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentVersions { document_structure_version : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_structure_version) , document_serialization_version : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_serialization_version) , document_cbor_serialization_version : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_cbor_serialization_version) , extended_document_structure_version : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . extended_document_structure_version) , extended_document_serialization_version : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . extended_document_serialization_version) , document_method_versions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_method_versions) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: dpp_versions :: DocumentVersions > for platform_version_version_dpp_versions_DocumentVersions { unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document_structure_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_serialization_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_cbor_serialization_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . extended_document_structure_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . extended_document_serialization_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_method_versions) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_ctor < > (document_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_serialization_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , document_cbor_serialization_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , extended_document_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , extended_document_serialization_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , document_method_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentMethodVersions) -> * mut platform_version_version_dpp_versions_DocumentVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentVersions { document_structure_version , document_serialization_version , document_cbor_serialization_version , extended_document_structure_version , extended_document_serialization_version , document_method_versions }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_destroy < > (ffi : * mut platform_version_version_dpp_versions_DocumentVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_get_document_structure_version < > (obj : * const platform_version_version_dpp_versions_DocumentVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_structure_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_get_document_serialization_version < > (obj : * const platform_version_version_dpp_versions_DocumentVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . document_serialization_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_get_document_cbor_serialization_version < > (obj : * const platform_version_version_dpp_versions_DocumentVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . document_cbor_serialization_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_get_extended_document_structure_version < > (obj : * const platform_version_version_dpp_versions_DocumentVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . extended_document_structure_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_get_extended_document_serialization_version < > (obj : * const platform_version_version_dpp_versions_DocumentVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . extended_document_serialization_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_get_document_method_versions < > (obj : * const platform_version_version_dpp_versions_DocumentVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentMethodVersions { (* obj) . document_method_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_set_document_structure_version < > (obj : * mut platform_version_version_dpp_versions_DocumentVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_structure_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_set_document_serialization_version < > (obj : * mut platform_version_version_dpp_versions_DocumentVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . document_serialization_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_set_document_cbor_serialization_version < > (obj : * mut platform_version_version_dpp_versions_DocumentVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . document_cbor_serialization_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_set_extended_document_structure_version < > (obj : * mut platform_version_version_dpp_versions_DocumentVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . extended_document_structure_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_set_extended_document_serialization_version < > (obj : * mut platform_version_version_dpp_versions_DocumentVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . extended_document_serialization_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_set_document_method_versions < > (obj : * mut platform_version_version_dpp_versions_DocumentVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentMethodVersions) { (* obj) . document_method_versions = value ; } } pub mod contracts { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_version :: version :: contracts :: SystemDataContractVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_contracts_SystemDataContractVersions { pub withdrawals : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub dpns : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub dashpay : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub masternode_reward_shares : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub feature_flags : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: contracts :: SystemDataContractVersions > for platform_version_version_contracts_SystemDataContractVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_contracts_SystemDataContractVersions) -> platform_version :: version :: contracts :: SystemDataContractVersions { let ffi_ref = & * ffi ; platform_version :: version :: contracts :: SystemDataContractVersions { withdrawals : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . withdrawals) , dpns : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . dpns) , dashpay : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . dashpay) , masternode_reward_shares : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . masternode_reward_shares) , feature_flags : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . feature_flags) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: contracts :: SystemDataContractVersions > for platform_version_version_contracts_SystemDataContractVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: contracts :: SystemDataContractVersions) -> * const platform_version_version_contracts_SystemDataContractVersions { ferment_interfaces :: boxed (platform_version_version_contracts_SystemDataContractVersions { withdrawals : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . withdrawals) , dpns : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . dpns) , dashpay : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . dashpay) , masternode_reward_shares : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . masternode_reward_shares) , feature_flags : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . feature_flags) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: contracts :: SystemDataContractVersions > for platform_version_version_contracts_SystemDataContractVersions { unsafe fn destroy (ffi : * mut platform_version_version_contracts_SystemDataContractVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_contracts_SystemDataContractVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . withdrawals) ; ; ferment_interfaces :: unbox_any (ffi_ref . dpns) ; ; ferment_interfaces :: unbox_any (ffi_ref . dashpay) ; ; ferment_interfaces :: unbox_any (ffi_ref . masternode_reward_shares) ; ; ferment_interfaces :: unbox_any (ffi_ref . feature_flags) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_ctor < > (withdrawals : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , dpns : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , dashpay : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , masternode_reward_shares : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , feature_flags : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_contracts_SystemDataContractVersions { ferment_interfaces :: boxed (platform_version_version_contracts_SystemDataContractVersions { withdrawals , dpns , dashpay , masternode_reward_shares , feature_flags }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_destroy < > (ffi : * mut platform_version_version_contracts_SystemDataContractVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_get_withdrawals < > (obj : * const platform_version_version_contracts_SystemDataContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . withdrawals } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_get_dpns < > (obj : * const platform_version_version_contracts_SystemDataContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . dpns } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_get_dashpay < > (obj : * const platform_version_version_contracts_SystemDataContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . dashpay } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_get_masternode_reward_shares < > (obj : * const platform_version_version_contracts_SystemDataContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . masternode_reward_shares } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_get_feature_flags < > (obj : * const platform_version_version_contracts_SystemDataContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . feature_flags } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_set_withdrawals < > (obj : * mut platform_version_version_contracts_SystemDataContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . withdrawals = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_set_dpns < > (obj : * mut platform_version_version_contracts_SystemDataContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . dpns = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_set_dashpay < > (obj : * mut platform_version_version_contracts_SystemDataContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . dashpay = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_set_masternode_reward_shares < > (obj : * mut platform_version_version_contracts_SystemDataContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . masternode_reward_shares = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_set_feature_flags < > (obj : * mut platform_version_version_contracts_SystemDataContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . feature_flags = value ; } } pub mod drive_versions { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveDocumentEstimationCostsMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions { pub add_estimation_costs_for_add_document_to_primary_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_estimation_costs_for_add_contested_document_to_primary_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub stateless_delete_of_non_tree_for_costs : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveDocumentEstimationCostsMethodVersions > for platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions) -> platform_version :: version :: drive_versions :: DriveDocumentEstimationCostsMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveDocumentEstimationCostsMethodVersions { add_estimation_costs_for_add_document_to_primary_storage : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_estimation_costs_for_add_document_to_primary_storage) , add_estimation_costs_for_add_contested_document_to_primary_storage : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_estimation_costs_for_add_contested_document_to_primary_storage) , stateless_delete_of_non_tree_for_costs : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . stateless_delete_of_non_tree_for_costs) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveDocumentEstimationCostsMethodVersions > for platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveDocumentEstimationCostsMethodVersions) -> * const platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions { add_estimation_costs_for_add_document_to_primary_storage : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_estimation_costs_for_add_document_to_primary_storage) , add_estimation_costs_for_add_contested_document_to_primary_storage : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_estimation_costs_for_add_contested_document_to_primary_storage) , stateless_delete_of_non_tree_for_costs : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . stateless_delete_of_non_tree_for_costs) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveDocumentEstimationCostsMethodVersions > for platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_estimation_costs_for_add_document_to_primary_storage) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_estimation_costs_for_add_contested_document_to_primary_storage) ; ; ferment_interfaces :: unbox_any (ffi_ref . stateless_delete_of_non_tree_for_costs) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions_ctor < > (add_estimation_costs_for_add_document_to_primary_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_estimation_costs_for_add_contested_document_to_primary_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , stateless_delete_of_non_tree_for_costs : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions { add_estimation_costs_for_add_document_to_primary_storage , add_estimation_costs_for_add_contested_document_to_primary_storage , stateless_delete_of_non_tree_for_costs }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions_get_add_estimation_costs_for_add_document_to_primary_storage < > (obj : * const platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_estimation_costs_for_add_document_to_primary_storage } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions_get_add_estimation_costs_for_add_contested_document_to_primary_storage < > (obj : * const platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_estimation_costs_for_add_contested_document_to_primary_storage } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions_get_stateless_delete_of_non_tree_for_costs < > (obj : * const platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . stateless_delete_of_non_tree_for_costs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions_set_add_estimation_costs_for_add_document_to_primary_storage < > (obj : * mut platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_estimation_costs_for_add_document_to_primary_storage = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions_set_add_estimation_costs_for_add_contested_document_to_primary_storage < > (obj : * mut platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_estimation_costs_for_add_contested_document_to_primary_storage = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions_set_stateless_delete_of_non_tree_for_costs < > (obj : * mut platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . stateless_delete_of_non_tree_for_costs = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveSystemEstimationCostsMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions { pub for_total_system_credits_update : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveSystemEstimationCostsMethodVersions > for platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions) -> platform_version :: version :: drive_versions :: DriveSystemEstimationCostsMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveSystemEstimationCostsMethodVersions { for_total_system_credits_update : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . for_total_system_credits_update) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveSystemEstimationCostsMethodVersions > for platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveSystemEstimationCostsMethodVersions) -> * const platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions { for_total_system_credits_update : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . for_total_system_credits_update) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveSystemEstimationCostsMethodVersions > for platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . for_total_system_credits_update) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions_ctor < > (for_total_system_credits_update : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions { for_total_system_credits_update }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions_get_for_total_system_credits_update < > (obj : * const platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_total_system_credits_update } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions_set_for_total_system_credits_update < > (obj : * mut platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_total_system_credits_update = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveIdentityCostEstimationMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions { pub for_authentication_keys_security_level_in_key_reference_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub for_balances : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub for_contract_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub for_contract_info_group : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub for_contract_info_group_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub for_contract_info_group_key_purpose : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub for_keys_for_identity_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub for_negative_credit : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub for_purpose_in_key_reference_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub for_root_key_reference_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub for_update_revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveIdentityCostEstimationMethodVersions > for platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityCostEstimationMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityCostEstimationMethodVersions { for_authentication_keys_security_level_in_key_reference_tree : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . for_authentication_keys_security_level_in_key_reference_tree) , for_balances : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . for_balances) , for_contract_info : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . for_contract_info) , for_contract_info_group : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . for_contract_info_group) , for_contract_info_group_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . for_contract_info_group_keys) , for_contract_info_group_key_purpose : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . for_contract_info_group_key_purpose) , for_keys_for_identity_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . for_keys_for_identity_id) , for_negative_credit : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . for_negative_credit) , for_purpose_in_key_reference_tree : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . for_purpose_in_key_reference_tree) , for_root_key_reference_tree : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . for_root_key_reference_tree) , for_update_revision : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . for_update_revision) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveIdentityCostEstimationMethodVersions > for platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityCostEstimationMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions { for_authentication_keys_security_level_in_key_reference_tree : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . for_authentication_keys_security_level_in_key_reference_tree) , for_balances : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . for_balances) , for_contract_info : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . for_contract_info) , for_contract_info_group : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . for_contract_info_group) , for_contract_info_group_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . for_contract_info_group_keys) , for_contract_info_group_key_purpose : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . for_contract_info_group_key_purpose) , for_keys_for_identity_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . for_keys_for_identity_id) , for_negative_credit : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . for_negative_credit) , for_purpose_in_key_reference_tree : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . for_purpose_in_key_reference_tree) , for_root_key_reference_tree : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . for_root_key_reference_tree) , for_update_revision : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . for_update_revision) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveIdentityCostEstimationMethodVersions > for platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . for_authentication_keys_security_level_in_key_reference_tree) ; ; ferment_interfaces :: unbox_any (ffi_ref . for_balances) ; ; ferment_interfaces :: unbox_any (ffi_ref . for_contract_info) ; ; ferment_interfaces :: unbox_any (ffi_ref . for_contract_info_group) ; ; ferment_interfaces :: unbox_any (ffi_ref . for_contract_info_group_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . for_contract_info_group_key_purpose) ; ; ferment_interfaces :: unbox_any (ffi_ref . for_keys_for_identity_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . for_negative_credit) ; ; ferment_interfaces :: unbox_any (ffi_ref . for_purpose_in_key_reference_tree) ; ; ferment_interfaces :: unbox_any (ffi_ref . for_root_key_reference_tree) ; ; ferment_interfaces :: unbox_any (ffi_ref . for_update_revision) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_ctor < > (for_authentication_keys_security_level_in_key_reference_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , for_balances : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , for_contract_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , for_contract_info_group : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , for_contract_info_group_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , for_contract_info_group_key_purpose : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , for_keys_for_identity_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , for_negative_credit : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , for_purpose_in_key_reference_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , for_root_key_reference_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , for_update_revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions { for_authentication_keys_security_level_in_key_reference_tree , for_balances , for_contract_info , for_contract_info_group , for_contract_info_group_keys , for_contract_info_group_key_purpose , for_keys_for_identity_id , for_negative_credit , for_purpose_in_key_reference_tree , for_root_key_reference_tree , for_update_revision }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_get_for_authentication_keys_security_level_in_key_reference_tree < > (obj : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_authentication_keys_security_level_in_key_reference_tree } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_get_for_balances < > (obj : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_balances } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_get_for_contract_info < > (obj : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_contract_info } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_get_for_contract_info_group < > (obj : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_contract_info_group } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_get_for_contract_info_group_keys < > (obj : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_contract_info_group_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_get_for_contract_info_group_key_purpose < > (obj : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_contract_info_group_key_purpose } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_get_for_keys_for_identity_id < > (obj : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_keys_for_identity_id } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_get_for_negative_credit < > (obj : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_negative_credit } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_get_for_purpose_in_key_reference_tree < > (obj : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_purpose_in_key_reference_tree } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_get_for_root_key_reference_tree < > (obj : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_root_key_reference_tree } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_get_for_update_revision < > (obj : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_update_revision } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_set_for_authentication_keys_security_level_in_key_reference_tree < > (obj : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_authentication_keys_security_level_in_key_reference_tree = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_set_for_balances < > (obj : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_balances = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_set_for_contract_info < > (obj : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_contract_info = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_set_for_contract_info_group < > (obj : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_contract_info_group = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_set_for_contract_info_group_keys < > (obj : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_contract_info_group_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_set_for_contract_info_group_key_purpose < > (obj : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_contract_info_group_key_purpose = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_set_for_keys_for_identity_id < > (obj : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_keys_for_identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_set_for_negative_credit < > (obj : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_negative_credit = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_set_for_purpose_in_key_reference_tree < > (obj : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_purpose_in_key_reference_tree = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_set_for_root_key_reference_tree < > (obj : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_root_key_reference_tree = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_set_for_update_revision < > (obj : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_update_revision = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveVoteCleanupMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVoteCleanupMethodVersions { pub remove_specific_vote_references_given_by_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_specific_votes_given_by_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_contested_resource_vote_poll_end_date_query_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_contested_resource_vote_poll_votes_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_contested_resource_vote_poll_documents_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_contested_resource_vote_poll_contenders_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveVoteCleanupMethodVersions > for platform_version_version_drive_versions_DriveVoteCleanupMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVoteCleanupMethodVersions) -> platform_version :: version :: drive_versions :: DriveVoteCleanupMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVoteCleanupMethodVersions { remove_specific_vote_references_given_by_identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . remove_specific_vote_references_given_by_identity) , remove_specific_votes_given_by_identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . remove_specific_votes_given_by_identity) , remove_contested_resource_vote_poll_end_date_query_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . remove_contested_resource_vote_poll_end_date_query_operations) , remove_contested_resource_vote_poll_votes_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . remove_contested_resource_vote_poll_votes_operations) , remove_contested_resource_vote_poll_documents_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . remove_contested_resource_vote_poll_documents_operations) , remove_contested_resource_vote_poll_contenders_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . remove_contested_resource_vote_poll_contenders_operations) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveVoteCleanupMethodVersions > for platform_version_version_drive_versions_DriveVoteCleanupMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVoteCleanupMethodVersions) -> * const platform_version_version_drive_versions_DriveVoteCleanupMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVoteCleanupMethodVersions { remove_specific_vote_references_given_by_identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . remove_specific_vote_references_given_by_identity) , remove_specific_votes_given_by_identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . remove_specific_votes_given_by_identity) , remove_contested_resource_vote_poll_end_date_query_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . remove_contested_resource_vote_poll_end_date_query_operations) , remove_contested_resource_vote_poll_votes_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . remove_contested_resource_vote_poll_votes_operations) , remove_contested_resource_vote_poll_documents_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . remove_contested_resource_vote_poll_documents_operations) , remove_contested_resource_vote_poll_contenders_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . remove_contested_resource_vote_poll_contenders_operations) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveVoteCleanupMethodVersions > for platform_version_version_drive_versions_DriveVoteCleanupMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVoteCleanupMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVoteCleanupMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . remove_specific_vote_references_given_by_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_specific_votes_given_by_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_contested_resource_vote_poll_end_date_query_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_contested_resource_vote_poll_votes_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_contested_resource_vote_poll_documents_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_contested_resource_vote_poll_contenders_operations) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteCleanupMethodVersions_ctor < > (remove_specific_vote_references_given_by_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_specific_votes_given_by_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_contested_resource_vote_poll_end_date_query_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_contested_resource_vote_poll_votes_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_contested_resource_vote_poll_documents_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_contested_resource_vote_poll_contenders_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveVoteCleanupMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVoteCleanupMethodVersions { remove_specific_vote_references_given_by_identity , remove_specific_votes_given_by_identity , remove_contested_resource_vote_poll_end_date_query_operations , remove_contested_resource_vote_poll_votes_operations , remove_contested_resource_vote_poll_documents_operations , remove_contested_resource_vote_poll_contenders_operations }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteCleanupMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveVoteCleanupMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteCleanupMethodVersions_get_remove_specific_vote_references_given_by_identity < > (obj : * const platform_version_version_drive_versions_DriveVoteCleanupMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_specific_vote_references_given_by_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteCleanupMethodVersions_get_remove_specific_votes_given_by_identity < > (obj : * const platform_version_version_drive_versions_DriveVoteCleanupMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_specific_votes_given_by_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteCleanupMethodVersions_get_remove_contested_resource_vote_poll_end_date_query_operations < > (obj : * const platform_version_version_drive_versions_DriveVoteCleanupMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_contested_resource_vote_poll_end_date_query_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteCleanupMethodVersions_get_remove_contested_resource_vote_poll_votes_operations < > (obj : * const platform_version_version_drive_versions_DriveVoteCleanupMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_contested_resource_vote_poll_votes_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteCleanupMethodVersions_get_remove_contested_resource_vote_poll_documents_operations < > (obj : * const platform_version_version_drive_versions_DriveVoteCleanupMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_contested_resource_vote_poll_documents_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteCleanupMethodVersions_get_remove_contested_resource_vote_poll_contenders_operations < > (obj : * const platform_version_version_drive_versions_DriveVoteCleanupMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_contested_resource_vote_poll_contenders_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteCleanupMethodVersions_set_remove_specific_vote_references_given_by_identity < > (obj : * mut platform_version_version_drive_versions_DriveVoteCleanupMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_specific_vote_references_given_by_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteCleanupMethodVersions_set_remove_specific_votes_given_by_identity < > (obj : * mut platform_version_version_drive_versions_DriveVoteCleanupMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_specific_votes_given_by_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteCleanupMethodVersions_set_remove_contested_resource_vote_poll_end_date_query_operations < > (obj : * mut platform_version_version_drive_versions_DriveVoteCleanupMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_contested_resource_vote_poll_end_date_query_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteCleanupMethodVersions_set_remove_contested_resource_vote_poll_votes_operations < > (obj : * mut platform_version_version_drive_versions_DriveVoteCleanupMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_contested_resource_vote_poll_votes_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteCleanupMethodVersions_set_remove_contested_resource_vote_poll_documents_operations < > (obj : * mut platform_version_version_drive_versions_DriveVoteCleanupMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_contested_resource_vote_poll_documents_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteCleanupMethodVersions_set_remove_contested_resource_vote_poll_contenders_operations < > (obj : * mut platform_version_version_drive_versions_DriveVoteCleanupMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_contested_resource_vote_poll_contenders_operations = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DrivePlatformStateMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DrivePlatformStateMethodVersions { pub fetch_platform_state_bytes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub store_platform_state_bytes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DrivePlatformStateMethodVersions > for platform_version_version_drive_versions_DrivePlatformStateMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DrivePlatformStateMethodVersions) -> platform_version :: version :: drive_versions :: DrivePlatformStateMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DrivePlatformStateMethodVersions { fetch_platform_state_bytes : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_platform_state_bytes) , store_platform_state_bytes : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . store_platform_state_bytes) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DrivePlatformStateMethodVersions > for platform_version_version_drive_versions_DrivePlatformStateMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DrivePlatformStateMethodVersions) -> * const platform_version_version_drive_versions_DrivePlatformStateMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DrivePlatformStateMethodVersions { fetch_platform_state_bytes : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_platform_state_bytes) , store_platform_state_bytes : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . store_platform_state_bytes) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DrivePlatformStateMethodVersions > for platform_version_version_drive_versions_DrivePlatformStateMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DrivePlatformStateMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DrivePlatformStateMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_platform_state_bytes) ; ; ferment_interfaces :: unbox_any (ffi_ref . store_platform_state_bytes) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformStateMethodVersions_ctor < > (fetch_platform_state_bytes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , store_platform_state_bytes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DrivePlatformStateMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DrivePlatformStateMethodVersions { fetch_platform_state_bytes , store_platform_state_bytes }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformStateMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DrivePlatformStateMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformStateMethodVersions_get_fetch_platform_state_bytes < > (obj : * const platform_version_version_drive_versions_DrivePlatformStateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_platform_state_bytes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformStateMethodVersions_get_store_platform_state_bytes < > (obj : * const platform_version_version_drive_versions_DrivePlatformStateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . store_platform_state_bytes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformStateMethodVersions_set_fetch_platform_state_bytes < > (obj : * mut platform_version_version_drive_versions_DrivePlatformStateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_platform_state_bytes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformStateMethodVersions_set_store_platform_state_bytes < > (obj : * mut platform_version_version_drive_versions_DrivePlatformStateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . store_platform_state_bytes = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions { pub data_contract_create_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub data_contract_update_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_create_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_delete_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_purchase_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_replace_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_transfer_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_update_price_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub documents_batch_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub identity_create_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub identity_credit_transfer_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub identity_credit_withdrawal_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub identity_top_up_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub identity_update_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub masternode_vote_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub bump_identity_data_contract_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub bump_identity_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub partially_use_asset_lock : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions > for platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) -> platform_version :: version :: drive_versions :: DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions { data_contract_create_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract_create_transition) , data_contract_update_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . data_contract_update_transition) , document_create_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_create_transition) , document_delete_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_delete_transition) , document_purchase_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_purchase_transition) , document_replace_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_replace_transition) , document_transfer_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_transfer_transition) , document_update_price_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_update_price_transition) , documents_batch_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . documents_batch_transition) , identity_create_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_create_transition) , identity_credit_transfer_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_credit_transfer_transition) , identity_credit_withdrawal_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_credit_withdrawal_transition) , identity_top_up_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_top_up_transition) , identity_update_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_update_transition) , masternode_vote_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . masternode_vote_transition) , bump_identity_data_contract_nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . bump_identity_data_contract_nonce) , bump_identity_nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . bump_identity_nonce) , partially_use_asset_lock : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . partially_use_asset_lock) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions > for platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) -> * const platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions { data_contract_create_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract_create_transition) , data_contract_update_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . data_contract_update_transition) , document_create_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_create_transition) , document_delete_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_delete_transition) , document_purchase_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_purchase_transition) , document_replace_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_replace_transition) , document_transfer_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_transfer_transition) , document_update_price_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_update_price_transition) , documents_batch_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . documents_batch_transition) , identity_create_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_create_transition) , identity_credit_transfer_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_credit_transfer_transition) , identity_credit_withdrawal_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_credit_withdrawal_transition) , identity_top_up_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_top_up_transition) , identity_update_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_update_transition) , masternode_vote_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . masternode_vote_transition) , bump_identity_data_contract_nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . bump_identity_data_contract_nonce) , bump_identity_nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . bump_identity_nonce) , partially_use_asset_lock : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . partially_use_asset_lock) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions > for platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_create_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_update_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_create_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_delete_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_purchase_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_replace_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_transfer_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_update_price_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . documents_batch_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_create_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_credit_transfer_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_credit_withdrawal_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_top_up_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_update_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . masternode_vote_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . bump_identity_data_contract_nonce) ; ; ferment_interfaces :: unbox_any (ffi_ref . bump_identity_nonce) ; ; ferment_interfaces :: unbox_any (ffi_ref . partially_use_asset_lock) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_ctor < > (data_contract_create_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , data_contract_update_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_create_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_delete_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_purchase_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_replace_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_transfer_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_update_price_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , documents_batch_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , identity_create_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , identity_credit_transfer_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , identity_credit_withdrawal_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , identity_top_up_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , identity_update_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , masternode_vote_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , bump_identity_data_contract_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , bump_identity_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , partially_use_asset_lock : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions { data_contract_create_transition , data_contract_update_transition , document_create_transition , document_delete_transition , document_purchase_transition , document_replace_transition , document_transfer_transition , document_update_price_transition , documents_batch_transition , identity_create_transition , identity_credit_transfer_transition , identity_credit_withdrawal_transition , identity_top_up_transition , identity_update_transition , masternode_vote_transition , bump_identity_data_contract_nonce , bump_identity_nonce , partially_use_asset_lock }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_get_data_contract_create_transition < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . data_contract_create_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_get_data_contract_update_transition < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . data_contract_update_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_get_document_create_transition < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_create_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_get_document_delete_transition < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_delete_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_get_document_purchase_transition < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_purchase_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_get_document_replace_transition < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_replace_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_get_document_transfer_transition < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_transfer_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_get_document_update_price_transition < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_update_price_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_get_documents_batch_transition < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . documents_batch_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_get_identity_create_transition < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . identity_create_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_get_identity_credit_transfer_transition < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . identity_credit_transfer_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_get_identity_credit_withdrawal_transition < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . identity_credit_withdrawal_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_get_identity_top_up_transition < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . identity_top_up_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_get_identity_update_transition < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . identity_update_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_get_masternode_vote_transition < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . masternode_vote_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_get_bump_identity_data_contract_nonce < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . bump_identity_data_contract_nonce } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_get_bump_identity_nonce < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . bump_identity_nonce } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_get_partially_use_asset_lock < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . partially_use_asset_lock } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_set_data_contract_create_transition < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . data_contract_create_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_set_data_contract_update_transition < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . data_contract_update_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_set_document_create_transition < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_create_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_set_document_delete_transition < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_delete_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_set_document_purchase_transition < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_purchase_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_set_document_replace_transition < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_replace_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_set_document_transfer_transition < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_transfer_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_set_document_update_price_transition < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_update_price_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_set_documents_batch_transition < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . documents_batch_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_set_identity_create_transition < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . identity_create_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_set_identity_credit_transfer_transition < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . identity_credit_transfer_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_set_identity_credit_withdrawal_transition < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . identity_credit_withdrawal_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_set_identity_top_up_transition < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . identity_top_up_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_set_identity_update_transition < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . identity_update_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_set_masternode_vote_transition < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . masternode_vote_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_set_bump_identity_data_contract_nonce < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . bump_identity_data_contract_nonce = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_set_bump_identity_nonce < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . bump_identity_nonce = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions_set_partially_use_asset_lock < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . partially_use_asset_lock = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveDocumentInsertMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveDocumentInsertMethodVersions { pub add_document : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_document_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_document_for_contract_apply_and_add_to_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_document_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_document_to_primary_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_indices_for_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_indices_for_top_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_reference_for_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveDocumentInsertMethodVersions > for platform_version_version_drive_versions_DriveDocumentInsertMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) -> platform_version :: version :: drive_versions :: DriveDocumentInsertMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveDocumentInsertMethodVersions { add_document : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_document) , add_document_for_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_document_for_contract) , add_document_for_contract_apply_and_add_to_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_document_for_contract_apply_and_add_to_operations) , add_document_for_contract_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_document_for_contract_operations) , add_document_to_primary_storage : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_document_to_primary_storage) , add_indices_for_index_level_for_contract_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_indices_for_index_level_for_contract_operations) , add_indices_for_top_index_level_for_contract_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_indices_for_top_index_level_for_contract_operations) , add_reference_for_index_level_for_contract_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_reference_for_index_level_for_contract_operations) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveDocumentInsertMethodVersions > for platform_version_version_drive_versions_DriveDocumentInsertMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveDocumentInsertMethodVersions) -> * const platform_version_version_drive_versions_DriveDocumentInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentInsertMethodVersions { add_document : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_document) , add_document_for_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_document_for_contract) , add_document_for_contract_apply_and_add_to_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_document_for_contract_apply_and_add_to_operations) , add_document_for_contract_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_document_for_contract_operations) , add_document_to_primary_storage : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_document_to_primary_storage) , add_indices_for_index_level_for_contract_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_indices_for_index_level_for_contract_operations) , add_indices_for_top_index_level_for_contract_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_indices_for_top_index_level_for_contract_operations) , add_reference_for_index_level_for_contract_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_reference_for_index_level_for_contract_operations) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveDocumentInsertMethodVersions > for platform_version_version_drive_versions_DriveDocumentInsertMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveDocumentInsertMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_document) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_document_for_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_document_for_contract_apply_and_add_to_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_document_for_contract_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_document_to_primary_storage) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_indices_for_index_level_for_contract_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_indices_for_top_index_level_for_contract_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_reference_for_index_level_for_contract_operations) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_ctor < > (add_document : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_document_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_document_for_contract_apply_and_add_to_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_document_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_document_to_primary_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_indices_for_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_indices_for_top_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_reference_for_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentInsertMethodVersions { add_document , add_document_for_contract , add_document_for_contract_apply_and_add_to_operations , add_document_for_contract_operations , add_document_to_primary_storage , add_indices_for_index_level_for_contract_operations , add_indices_for_top_index_level_for_contract_operations , add_reference_for_index_level_for_contract_operations }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_get_add_document < > (obj : * const platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_document } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_get_add_document_for_contract < > (obj : * const platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_document_for_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_get_add_document_for_contract_apply_and_add_to_operations < > (obj : * const platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_document_for_contract_apply_and_add_to_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_get_add_document_for_contract_operations < > (obj : * const platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_document_for_contract_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_get_add_document_to_primary_storage < > (obj : * const platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_document_to_primary_storage } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_get_add_indices_for_index_level_for_contract_operations < > (obj : * const platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_indices_for_index_level_for_contract_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_get_add_indices_for_top_index_level_for_contract_operations < > (obj : * const platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_indices_for_top_index_level_for_contract_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_get_add_reference_for_index_level_for_contract_operations < > (obj : * const platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_reference_for_index_level_for_contract_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_set_add_document < > (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_document = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_set_add_document_for_contract < > (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_document_for_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_set_add_document_for_contract_apply_and_add_to_operations < > (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_document_for_contract_apply_and_add_to_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_set_add_document_for_contract_operations < > (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_document_for_contract_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_set_add_document_to_primary_storage < > (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_document_to_primary_storage = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_set_add_indices_for_index_level_for_contract_operations < > (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_indices_for_index_level_for_contract_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_set_add_indices_for_top_index_level_for_contract_operations < > (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_indices_for_top_index_level_for_contract_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_set_add_reference_for_index_level_for_contract_operations < > (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_reference_for_index_level_for_contract_operations = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveContractUpdateMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveContractUpdateMethodVersions { pub update_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveContractUpdateMethodVersions > for platform_version_version_drive_versions_DriveContractUpdateMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveContractUpdateMethodVersions) -> platform_version :: version :: drive_versions :: DriveContractUpdateMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveContractUpdateMethodVersions { update_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update_contract) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveContractUpdateMethodVersions > for platform_version_version_drive_versions_DriveContractUpdateMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveContractUpdateMethodVersions) -> * const platform_version_version_drive_versions_DriveContractUpdateMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractUpdateMethodVersions { update_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update_contract) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveContractUpdateMethodVersions > for platform_version_version_drive_versions_DriveContractUpdateMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveContractUpdateMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveContractUpdateMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . update_contract) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractUpdateMethodVersions_ctor < > (update_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveContractUpdateMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractUpdateMethodVersions { update_contract }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractUpdateMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveContractUpdateMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractUpdateMethodVersions_get_update_contract < > (obj : * const platform_version_version_drive_versions_DriveContractUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractUpdateMethodVersions_set_update_contract < > (obj : * mut platform_version_version_drive_versions_DriveContractUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_contract = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveCreditPoolStorageFeeDistributionPoolMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions { pub get_storage_fees_from_distribution_pool : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveCreditPoolStorageFeeDistributionPoolMethodVersions > for platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions) -> platform_version :: version :: drive_versions :: DriveCreditPoolStorageFeeDistributionPoolMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveCreditPoolStorageFeeDistributionPoolMethodVersions { get_storage_fees_from_distribution_pool : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_storage_fees_from_distribution_pool) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveCreditPoolStorageFeeDistributionPoolMethodVersions > for platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveCreditPoolStorageFeeDistributionPoolMethodVersions) -> * const platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions { get_storage_fees_from_distribution_pool : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_storage_fees_from_distribution_pool) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveCreditPoolStorageFeeDistributionPoolMethodVersions > for platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . get_storage_fees_from_distribution_pool) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions_ctor < > (get_storage_fees_from_distribution_pool : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions { get_storage_fees_from_distribution_pool }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions_get_get_storage_fees_from_distribution_pool < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_storage_fees_from_distribution_pool } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions_set_get_storage_fees_from_distribution_pool < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_storage_fees_from_distribution_pool = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveVoteStorageFormMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions { pub resolve_with_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveVoteStorageFormMethodVersions > for platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions) -> platform_version :: version :: drive_versions :: DriveVoteStorageFormMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVoteStorageFormMethodVersions { resolve_with_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . resolve_with_contract) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveVoteStorageFormMethodVersions > for platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVoteStorageFormMethodVersions) -> * const platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions { resolve_with_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . resolve_with_contract) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveVoteStorageFormMethodVersions > for platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . resolve_with_contract) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions_ctor < > (resolve_with_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions { resolve_with_contract }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions_get_resolve_with_contract < > (obj : * const platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . resolve_with_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions_set_resolve_with_contract < > (obj : * mut platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . resolve_with_contract = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveDocumentInsertContestedMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions { pub add_contested_document : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_contested_document_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_contested_document_for_contract_apply_and_add_to_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_contested_document_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_contested_document_to_primary_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_contested_indices_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_contested_reference_and_vote_subtree_to_document_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_contested_vote_subtree_for_non_identities_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveDocumentInsertContestedMethodVersions > for platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions) -> platform_version :: version :: drive_versions :: DriveDocumentInsertContestedMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveDocumentInsertContestedMethodVersions { add_contested_document : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_contested_document) , add_contested_document_for_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_contested_document_for_contract) , add_contested_document_for_contract_apply_and_add_to_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_contested_document_for_contract_apply_and_add_to_operations) , add_contested_document_for_contract_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_contested_document_for_contract_operations) , add_contested_document_to_primary_storage : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_contested_document_to_primary_storage) , add_contested_indices_for_contract_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_contested_indices_for_contract_operations) , add_contested_reference_and_vote_subtree_to_document_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_contested_reference_and_vote_subtree_to_document_operations) , add_contested_vote_subtree_for_non_identities_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_contested_vote_subtree_for_non_identities_operations) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveDocumentInsertContestedMethodVersions > for platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveDocumentInsertContestedMethodVersions) -> * const platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions { add_contested_document : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_contested_document) , add_contested_document_for_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_contested_document_for_contract) , add_contested_document_for_contract_apply_and_add_to_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_contested_document_for_contract_apply_and_add_to_operations) , add_contested_document_for_contract_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_contested_document_for_contract_operations) , add_contested_document_to_primary_storage : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_contested_document_to_primary_storage) , add_contested_indices_for_contract_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_contested_indices_for_contract_operations) , add_contested_reference_and_vote_subtree_to_document_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_contested_reference_and_vote_subtree_to_document_operations) , add_contested_vote_subtree_for_non_identities_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_contested_vote_subtree_for_non_identities_operations) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveDocumentInsertContestedMethodVersions > for platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_contested_document) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_contested_document_for_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_contested_document_for_contract_apply_and_add_to_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_contested_document_for_contract_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_contested_document_to_primary_storage) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_contested_indices_for_contract_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_contested_reference_and_vote_subtree_to_document_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_contested_vote_subtree_for_non_identities_operations) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions_ctor < > (add_contested_document : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_contested_document_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_contested_document_for_contract_apply_and_add_to_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_contested_document_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_contested_document_to_primary_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_contested_indices_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_contested_reference_and_vote_subtree_to_document_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_contested_vote_subtree_for_non_identities_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions { add_contested_document , add_contested_document_for_contract , add_contested_document_for_contract_apply_and_add_to_operations , add_contested_document_for_contract_operations , add_contested_document_to_primary_storage , add_contested_indices_for_contract_operations , add_contested_reference_and_vote_subtree_to_document_operations , add_contested_vote_subtree_for_non_identities_operations }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions_get_add_contested_document < > (obj : * const platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_contested_document } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions_get_add_contested_document_for_contract < > (obj : * const platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_contested_document_for_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions_get_add_contested_document_for_contract_apply_and_add_to_operations < > (obj : * const platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_contested_document_for_contract_apply_and_add_to_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions_get_add_contested_document_for_contract_operations < > (obj : * const platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_contested_document_for_contract_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions_get_add_contested_document_to_primary_storage < > (obj : * const platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_contested_document_to_primary_storage } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions_get_add_contested_indices_for_contract_operations < > (obj : * const platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_contested_indices_for_contract_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions_get_add_contested_reference_and_vote_subtree_to_document_operations < > (obj : * const platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_contested_reference_and_vote_subtree_to_document_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions_get_add_contested_vote_subtree_for_non_identities_operations < > (obj : * const platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_contested_vote_subtree_for_non_identities_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions_set_add_contested_document < > (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_contested_document = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions_set_add_contested_document_for_contract < > (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_contested_document_for_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions_set_add_contested_document_for_contract_apply_and_add_to_operations < > (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_contested_document_for_contract_apply_and_add_to_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions_set_add_contested_document_for_contract_operations < > (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_contested_document_for_contract_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions_set_add_contested_document_to_primary_storage < > (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_contested_document_to_primary_storage = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions_set_add_contested_indices_for_contract_operations < > (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_contested_indices_for_contract_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions_set_add_contested_reference_and_vote_subtree_to_document_operations < > (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_contested_reference_and_vote_subtree_to_document_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions_set_add_contested_vote_subtree_for_non_identities_operations < > (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_contested_vote_subtree_for_non_identities_operations = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveContractProveMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveContractProveMethodVersions { pub prove_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub prove_contract_history : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub prove_contracts : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveContractProveMethodVersions > for platform_version_version_drive_versions_DriveContractProveMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveContractProveMethodVersions) -> platform_version :: version :: drive_versions :: DriveContractProveMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveContractProveMethodVersions { prove_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . prove_contract) , prove_contract_history : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . prove_contract_history) , prove_contracts : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . prove_contracts) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveContractProveMethodVersions > for platform_version_version_drive_versions_DriveContractProveMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveContractProveMethodVersions) -> * const platform_version_version_drive_versions_DriveContractProveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractProveMethodVersions { prove_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . prove_contract) , prove_contract_history : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . prove_contract_history) , prove_contracts : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . prove_contracts) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveContractProveMethodVersions > for platform_version_version_drive_versions_DriveContractProveMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveContractProveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveContractProveMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . prove_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove_contract_history) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove_contracts) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractProveMethodVersions_ctor < > (prove_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , prove_contract_history : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , prove_contracts : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveContractProveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractProveMethodVersions { prove_contract , prove_contract_history , prove_contracts }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractProveMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveContractProveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractProveMethodVersions_get_prove_contract < > (obj : * const platform_version_version_drive_versions_DriveContractProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractProveMethodVersions_get_prove_contract_history < > (obj : * const platform_version_version_drive_versions_DriveContractProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_contract_history } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractProveMethodVersions_get_prove_contracts < > (obj : * const platform_version_version_drive_versions_DriveContractProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_contracts } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractProveMethodVersions_set_prove_contract < > (obj : * mut platform_version_version_drive_versions_DriveContractProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractProveMethodVersions_set_prove_contract_history < > (obj : * mut platform_version_version_drive_versions_DriveContractProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_contract_history = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractProveMethodVersions_set_prove_contracts < > (obj : * mut platform_version_version_drive_versions_DriveContractProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_contracts = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveVoteSetupMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVoteSetupMethodVersions { pub add_initial_vote_tree_main_structure_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveVoteSetupMethodVersions > for platform_version_version_drive_versions_DriveVoteSetupMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVoteSetupMethodVersions) -> platform_version :: version :: drive_versions :: DriveVoteSetupMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVoteSetupMethodVersions { add_initial_vote_tree_main_structure_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_initial_vote_tree_main_structure_operations) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveVoteSetupMethodVersions > for platform_version_version_drive_versions_DriveVoteSetupMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVoteSetupMethodVersions) -> * const platform_version_version_drive_versions_DriveVoteSetupMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVoteSetupMethodVersions { add_initial_vote_tree_main_structure_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_initial_vote_tree_main_structure_operations) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveVoteSetupMethodVersions > for platform_version_version_drive_versions_DriveVoteSetupMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVoteSetupMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVoteSetupMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_initial_vote_tree_main_structure_operations) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteSetupMethodVersions_ctor < > (add_initial_vote_tree_main_structure_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveVoteSetupMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVoteSetupMethodVersions { add_initial_vote_tree_main_structure_operations }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteSetupMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveVoteSetupMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteSetupMethodVersions_get_add_initial_vote_tree_main_structure_operations < > (obj : * const platform_version_version_drive_versions_DriveVoteSetupMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_initial_vote_tree_main_structure_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteSetupMethodVersions_set_add_initial_vote_tree_main_structure_operations < > (obj : * mut platform_version_version_drive_versions_DriveVoteSetupMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_initial_vote_tree_main_structure_operations = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveIdentityWithdrawalMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions { pub document : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions , pub transaction : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveIdentityWithdrawalMethodVersions > for platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityWithdrawalMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityWithdrawalMethodVersions { document : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document) , transaction : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . transaction) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveIdentityWithdrawalMethodVersions > for platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityWithdrawalMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions { document : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document) , transaction : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . transaction) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveIdentityWithdrawalMethodVersions > for platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document) ; ; ferment_interfaces :: unbox_any (ffi_ref . transaction) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions_ctor < > (document : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions , transaction : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions) -> * mut platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions { document , transaction }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions_get_document < > (obj : * const platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions { (* obj) . document } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions_get_transaction < > (obj : * const platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions { (* obj) . transaction } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions_set_document < > (obj : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions) { (* obj) . document = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions_set_transaction < > (obj : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions) { (* obj) . transaction = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveDocumentUpdateMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions { pub add_update_multiple_documents_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_document_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_document_for_contract_apply_and_add_to_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_document_for_contract_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_document_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_document_with_serialization_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_serialized_document_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveDocumentUpdateMethodVersions > for platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) -> platform_version :: version :: drive_versions :: DriveDocumentUpdateMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveDocumentUpdateMethodVersions { add_update_multiple_documents_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_update_multiple_documents_operations) , update_document_for_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update_document_for_contract) , update_document_for_contract_apply_and_add_to_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update_document_for_contract_apply_and_add_to_operations) , update_document_for_contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update_document_for_contract_id) , update_document_for_contract_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update_document_for_contract_operations) , update_document_with_serialization_for_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update_document_with_serialization_for_contract) , update_serialized_document_for_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update_serialized_document_for_contract) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveDocumentUpdateMethodVersions > for platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveDocumentUpdateMethodVersions) -> * const platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions { add_update_multiple_documents_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_update_multiple_documents_operations) , update_document_for_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update_document_for_contract) , update_document_for_contract_apply_and_add_to_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update_document_for_contract_apply_and_add_to_operations) , update_document_for_contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update_document_for_contract_id) , update_document_for_contract_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update_document_for_contract_operations) , update_document_with_serialization_for_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update_document_with_serialization_for_contract) , update_serialized_document_for_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update_serialized_document_for_contract) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveDocumentUpdateMethodVersions > for platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_update_multiple_documents_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_document_for_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_document_for_contract_apply_and_add_to_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_document_for_contract_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_document_for_contract_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_document_with_serialization_for_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_serialized_document_for_contract) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_ctor < > (add_update_multiple_documents_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_document_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_document_for_contract_apply_and_add_to_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_document_for_contract_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_document_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_document_with_serialization_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_serialized_document_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions { add_update_multiple_documents_operations , update_document_for_contract , update_document_for_contract_apply_and_add_to_operations , update_document_for_contract_id , update_document_for_contract_operations , update_document_with_serialization_for_contract , update_serialized_document_for_contract }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_get_add_update_multiple_documents_operations < > (obj : * const platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_update_multiple_documents_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_get_update_document_for_contract < > (obj : * const platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_document_for_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_get_update_document_for_contract_apply_and_add_to_operations < > (obj : * const platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_document_for_contract_apply_and_add_to_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_get_update_document_for_contract_id < > (obj : * const platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_document_for_contract_id } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_get_update_document_for_contract_operations < > (obj : * const platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_document_for_contract_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_get_update_document_with_serialization_for_contract < > (obj : * const platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_document_with_serialization_for_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_get_update_serialized_document_for_contract < > (obj : * const platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_serialized_document_for_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_set_add_update_multiple_documents_operations < > (obj : * mut platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_update_multiple_documents_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_set_update_document_for_contract < > (obj : * mut platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_document_for_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_set_update_document_for_contract_apply_and_add_to_operations < > (obj : * mut platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_document_for_contract_apply_and_add_to_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_set_update_document_for_contract_id < > (obj : * mut platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_document_for_contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_set_update_document_for_contract_operations < > (obj : * mut platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_document_for_contract_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_set_update_document_with_serialization_for_contract < > (obj : * mut platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_document_with_serialization_for_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_set_update_serialized_document_for_contract < > (obj : * mut platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_serialized_document_for_contract = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveCreditPoolMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveCreditPoolMethodVersions { pub epochs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , pub pending_epoch_refunds : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions , pub storage_fee_distribution_pool : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions , pub unpaid_epoch : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveCreditPoolMethodVersions > for platform_version_version_drive_versions_DriveCreditPoolMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveCreditPoolMethodVersions) -> platform_version :: version :: drive_versions :: DriveCreditPoolMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveCreditPoolMethodVersions { epochs : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . epochs) , pending_epoch_refunds : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . pending_epoch_refunds) , storage_fee_distribution_pool : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . storage_fee_distribution_pool) , unpaid_epoch : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . unpaid_epoch) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveCreditPoolMethodVersions > for platform_version_version_drive_versions_DriveCreditPoolMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveCreditPoolMethodVersions) -> * const platform_version_version_drive_versions_DriveCreditPoolMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveCreditPoolMethodVersions { epochs : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . epochs) , pending_epoch_refunds : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . pending_epoch_refunds) , storage_fee_distribution_pool : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . storage_fee_distribution_pool) , unpaid_epoch : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . unpaid_epoch) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveCreditPoolMethodVersions > for platform_version_version_drive_versions_DriveCreditPoolMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveCreditPoolMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveCreditPoolMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . epochs) ; ; ferment_interfaces :: unbox_any (ffi_ref . pending_epoch_refunds) ; ; ferment_interfaces :: unbox_any (ffi_ref . storage_fee_distribution_pool) ; ; ferment_interfaces :: unbox_any (ffi_ref . unpaid_epoch) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolMethodVersions_ctor < > (epochs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , pending_epoch_refunds : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions , storage_fee_distribution_pool : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions , unpaid_epoch : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions) -> * mut platform_version_version_drive_versions_DriveCreditPoolMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveCreditPoolMethodVersions { epochs , pending_epoch_refunds , storage_fee_distribution_pool , unpaid_epoch }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveCreditPoolMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolMethodVersions_get_epochs < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions { (* obj) . epochs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolMethodVersions_get_pending_epoch_refunds < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions { (* obj) . pending_epoch_refunds } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolMethodVersions_get_storage_fee_distribution_pool < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions { (* obj) . storage_fee_distribution_pool } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolMethodVersions_get_unpaid_epoch < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions { (* obj) . unpaid_epoch } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolMethodVersions_set_epochs < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) { (* obj) . epochs = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolMethodVersions_set_pending_epoch_refunds < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions) { (* obj) . pending_epoch_refunds = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolMethodVersions_set_storage_fee_distribution_pool < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions) { (* obj) . storage_fee_distribution_pool = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolMethodVersions_set_unpaid_epoch < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions) { (* obj) . unpaid_epoch = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveDocumentIndexUniquenessMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions { pub validate_document_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_document_create_transition_action_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_document_replace_transition_action_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_document_transfer_transition_action_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_document_purchase_transition_action_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_document_update_price_transition_action_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_uniqueness_of_data : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveDocumentIndexUniquenessMethodVersions > for platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions) -> platform_version :: version :: drive_versions :: DriveDocumentIndexUniquenessMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveDocumentIndexUniquenessMethodVersions { validate_document_uniqueness : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_document_uniqueness) , validate_document_create_transition_action_uniqueness : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_document_create_transition_action_uniqueness) , validate_document_replace_transition_action_uniqueness : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_document_replace_transition_action_uniqueness) , validate_document_transfer_transition_action_uniqueness : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_document_transfer_transition_action_uniqueness) , validate_document_purchase_transition_action_uniqueness : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_document_purchase_transition_action_uniqueness) , validate_document_update_price_transition_action_uniqueness : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_document_update_price_transition_action_uniqueness) , validate_uniqueness_of_data : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . validate_uniqueness_of_data) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveDocumentIndexUniquenessMethodVersions > for platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveDocumentIndexUniquenessMethodVersions) -> * const platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions { validate_document_uniqueness : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_document_uniqueness) , validate_document_create_transition_action_uniqueness : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_document_create_transition_action_uniqueness) , validate_document_replace_transition_action_uniqueness : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_document_replace_transition_action_uniqueness) , validate_document_transfer_transition_action_uniqueness : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_document_transfer_transition_action_uniqueness) , validate_document_purchase_transition_action_uniqueness : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_document_purchase_transition_action_uniqueness) , validate_document_update_price_transition_action_uniqueness : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_document_update_price_transition_action_uniqueness) , validate_uniqueness_of_data : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . validate_uniqueness_of_data) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveDocumentIndexUniquenessMethodVersions > for platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . validate_document_uniqueness) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_document_create_transition_action_uniqueness) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_document_replace_transition_action_uniqueness) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_document_transfer_transition_action_uniqueness) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_document_purchase_transition_action_uniqueness) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_document_update_price_transition_action_uniqueness) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_uniqueness_of_data) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_ctor < > (validate_document_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_document_create_transition_action_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_document_replace_transition_action_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_document_transfer_transition_action_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_document_purchase_transition_action_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_document_update_price_transition_action_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_uniqueness_of_data : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions { validate_document_uniqueness , validate_document_create_transition_action_uniqueness , validate_document_replace_transition_action_uniqueness , validate_document_transfer_transition_action_uniqueness , validate_document_purchase_transition_action_uniqueness , validate_document_update_price_transition_action_uniqueness , validate_uniqueness_of_data }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_get_validate_document_uniqueness < > (obj : * const platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_document_uniqueness } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_get_validate_document_create_transition_action_uniqueness < > (obj : * const platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_document_create_transition_action_uniqueness } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_get_validate_document_replace_transition_action_uniqueness < > (obj : * const platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_document_replace_transition_action_uniqueness } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_get_validate_document_transfer_transition_action_uniqueness < > (obj : * const platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_document_transfer_transition_action_uniqueness } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_get_validate_document_purchase_transition_action_uniqueness < > (obj : * const platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_document_purchase_transition_action_uniqueness } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_get_validate_document_update_price_transition_action_uniqueness < > (obj : * const platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_document_update_price_transition_action_uniqueness } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_get_validate_uniqueness_of_data < > (obj : * const platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_uniqueness_of_data } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_set_validate_document_uniqueness < > (obj : * mut platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_document_uniqueness = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_set_validate_document_create_transition_action_uniqueness < > (obj : * mut platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_document_create_transition_action_uniqueness = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_set_validate_document_replace_transition_action_uniqueness < > (obj : * mut platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_document_replace_transition_action_uniqueness = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_set_validate_document_transfer_transition_action_uniqueness < > (obj : * mut platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_document_transfer_transition_action_uniqueness = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_set_validate_document_purchase_transition_action_uniqueness < > (obj : * mut platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_document_purchase_transition_action_uniqueness = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_set_validate_document_update_price_transition_action_uniqueness < > (obj : * mut platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_document_update_price_transition_action_uniqueness = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_set_validate_uniqueness_of_data < > (obj : * mut platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_uniqueness_of_data = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveCreditPoolEpochsMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions { pub get_epochs_infos : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_epochs_protocol_versions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub prove_epochs_infos : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_epoch_fee_multiplier : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_epoch_processing_credits_for_distribution : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_epoch_storage_credits_for_distribution : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_epoch_total_credits_for_distribution : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_storage_credits_for_distribution_for_epochs_in_range : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_epoch_start_time : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_epoch_start_block_core_height : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_epoch_start_block_height : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_first_epoch_start_block_info_between_epochs : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_epoch_proposers : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_epochs_proposer_block_count : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_update_pending_epoch_refunds_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub is_epochs_proposers_tree_empty : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveCreditPoolEpochsMethodVersions > for platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> platform_version :: version :: drive_versions :: DriveCreditPoolEpochsMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveCreditPoolEpochsMethodVersions { get_epochs_infos : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_epochs_infos) , get_epochs_protocol_versions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_epochs_protocol_versions) , prove_epochs_infos : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . prove_epochs_infos) , get_epoch_fee_multiplier : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_epoch_fee_multiplier) , get_epoch_processing_credits_for_distribution : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_epoch_processing_credits_for_distribution) , get_epoch_storage_credits_for_distribution : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_epoch_storage_credits_for_distribution) , get_epoch_total_credits_for_distribution : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_epoch_total_credits_for_distribution) , get_storage_credits_for_distribution_for_epochs_in_range : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_storage_credits_for_distribution_for_epochs_in_range) , get_epoch_start_time : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_epoch_start_time) , get_epoch_start_block_core_height : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_epoch_start_block_core_height) , get_epoch_start_block_height : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_epoch_start_block_height) , get_first_epoch_start_block_info_between_epochs : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_first_epoch_start_block_info_between_epochs) , get_epoch_proposers : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_epoch_proposers) , get_epochs_proposer_block_count : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_epochs_proposer_block_count) , add_update_pending_epoch_refunds_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_update_pending_epoch_refunds_operations) , is_epochs_proposers_tree_empty : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . is_epochs_proposers_tree_empty) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveCreditPoolEpochsMethodVersions > for platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveCreditPoolEpochsMethodVersions) -> * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions { get_epochs_infos : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_epochs_infos) , get_epochs_protocol_versions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_epochs_protocol_versions) , prove_epochs_infos : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . prove_epochs_infos) , get_epoch_fee_multiplier : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_epoch_fee_multiplier) , get_epoch_processing_credits_for_distribution : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_epoch_processing_credits_for_distribution) , get_epoch_storage_credits_for_distribution : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_epoch_storage_credits_for_distribution) , get_epoch_total_credits_for_distribution : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_epoch_total_credits_for_distribution) , get_storage_credits_for_distribution_for_epochs_in_range : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_storage_credits_for_distribution_for_epochs_in_range) , get_epoch_start_time : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_epoch_start_time) , get_epoch_start_block_core_height : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_epoch_start_block_core_height) , get_epoch_start_block_height : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_epoch_start_block_height) , get_first_epoch_start_block_info_between_epochs : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_first_epoch_start_block_info_between_epochs) , get_epoch_proposers : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_epoch_proposers) , get_epochs_proposer_block_count : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_epochs_proposer_block_count) , add_update_pending_epoch_refunds_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_update_pending_epoch_refunds_operations) , is_epochs_proposers_tree_empty : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . is_epochs_proposers_tree_empty) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveCreditPoolEpochsMethodVersions > for platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . get_epochs_infos) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_epochs_protocol_versions) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove_epochs_infos) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_epoch_fee_multiplier) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_epoch_processing_credits_for_distribution) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_epoch_storage_credits_for_distribution) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_epoch_total_credits_for_distribution) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_storage_credits_for_distribution_for_epochs_in_range) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_epoch_start_time) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_epoch_start_block_core_height) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_epoch_start_block_height) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_first_epoch_start_block_info_between_epochs) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_epoch_proposers) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_epochs_proposer_block_count) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_update_pending_epoch_refunds_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . is_epochs_proposers_tree_empty) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_ctor < > (get_epochs_infos : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_epochs_protocol_versions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , prove_epochs_infos : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_epoch_fee_multiplier : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_epoch_processing_credits_for_distribution : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_epoch_storage_credits_for_distribution : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_epoch_total_credits_for_distribution : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_storage_credits_for_distribution_for_epochs_in_range : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_epoch_start_time : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_epoch_start_block_core_height : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_epoch_start_block_height : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_first_epoch_start_block_info_between_epochs : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_epoch_proposers : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_epochs_proposer_block_count : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_update_pending_epoch_refunds_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , is_epochs_proposers_tree_empty : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions { get_epochs_infos , get_epochs_protocol_versions , prove_epochs_infos , get_epoch_fee_multiplier , get_epoch_processing_credits_for_distribution , get_epoch_storage_credits_for_distribution , get_epoch_total_credits_for_distribution , get_storage_credits_for_distribution_for_epochs_in_range , get_epoch_start_time , get_epoch_start_block_core_height , get_epoch_start_block_height , get_first_epoch_start_block_info_between_epochs , get_epoch_proposers , get_epochs_proposer_block_count , add_update_pending_epoch_refunds_operations , is_epochs_proposers_tree_empty }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_epochs_infos < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_epochs_infos } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_epochs_protocol_versions < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_epochs_protocol_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_prove_epochs_infos < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_epochs_infos } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_epoch_fee_multiplier < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_epoch_fee_multiplier } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_epoch_processing_credits_for_distribution < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_epoch_processing_credits_for_distribution } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_epoch_storage_credits_for_distribution < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_epoch_storage_credits_for_distribution } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_epoch_total_credits_for_distribution < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_epoch_total_credits_for_distribution } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_storage_credits_for_distribution_for_epochs_in_range < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_storage_credits_for_distribution_for_epochs_in_range } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_epoch_start_time < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_epoch_start_time } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_epoch_start_block_core_height < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_epoch_start_block_core_height } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_epoch_start_block_height < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_epoch_start_block_height } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_first_epoch_start_block_info_between_epochs < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_first_epoch_start_block_info_between_epochs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_epoch_proposers < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_epoch_proposers } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_epochs_proposer_block_count < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_epochs_proposer_block_count } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_add_update_pending_epoch_refunds_operations < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_update_pending_epoch_refunds_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_is_epochs_proposers_tree_empty < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . is_epochs_proposers_tree_empty } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_epochs_infos < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_epochs_infos = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_epochs_protocol_versions < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_epochs_protocol_versions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_prove_epochs_infos < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_epochs_infos = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_epoch_fee_multiplier < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_epoch_fee_multiplier = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_epoch_processing_credits_for_distribution < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_epoch_processing_credits_for_distribution = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_epoch_storage_credits_for_distribution < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_epoch_storage_credits_for_distribution = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_epoch_total_credits_for_distribution < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_epoch_total_credits_for_distribution = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_storage_credits_for_distribution_for_epochs_in_range < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_storage_credits_for_distribution_for_epochs_in_range = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_epoch_start_time < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_epoch_start_time = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_epoch_start_block_core_height < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_epoch_start_block_core_height = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_epoch_start_block_height < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_epoch_start_block_height = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_first_epoch_start_block_info_between_epochs < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_first_epoch_start_block_info_between_epochs = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_epoch_proposers < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_epoch_proposers = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_epochs_proposer_block_count < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_epochs_proposer_block_count = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_add_update_pending_epoch_refunds_operations < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_update_pending_epoch_refunds_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_is_epochs_proposers_tree_empty < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . is_epochs_proposers_tree_empty = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveIdentityKeysInsertMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions { pub create_key_tree_with_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_new_identity_key_query_trees : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub insert_key_searchable_references : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub insert_key_to_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub insert_new_non_unique_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub insert_new_unique_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub replace_key_in_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveIdentityKeysInsertMethodVersions > for platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityKeysInsertMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityKeysInsertMethodVersions { create_key_tree_with_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . create_key_tree_with_keys) , create_new_identity_key_query_trees : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . create_new_identity_key_query_trees) , insert_key_searchable_references : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . insert_key_searchable_references) , insert_key_to_storage : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . insert_key_to_storage) , insert_new_non_unique_key : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . insert_new_non_unique_key) , insert_new_unique_key : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . insert_new_unique_key) , replace_key_in_storage : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . replace_key_in_storage) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveIdentityKeysInsertMethodVersions > for platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityKeysInsertMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions { create_key_tree_with_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . create_key_tree_with_keys) , create_new_identity_key_query_trees : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . create_new_identity_key_query_trees) , insert_key_searchable_references : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . insert_key_searchable_references) , insert_key_to_storage : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . insert_key_to_storage) , insert_new_non_unique_key : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . insert_new_non_unique_key) , insert_new_unique_key : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . insert_new_unique_key) , replace_key_in_storage : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . replace_key_in_storage) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveIdentityKeysInsertMethodVersions > for platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . create_key_tree_with_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_new_identity_key_query_trees) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_key_searchable_references) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_key_to_storage) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_new_non_unique_key) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_new_unique_key) ; ; ferment_interfaces :: unbox_any (ffi_ref . replace_key_in_storage) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_ctor < > (create_key_tree_with_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_new_identity_key_query_trees : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , insert_key_searchable_references : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , insert_key_to_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , insert_new_non_unique_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , insert_new_unique_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , replace_key_in_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions { create_key_tree_with_keys , create_new_identity_key_query_trees , insert_key_searchable_references , insert_key_to_storage , insert_new_non_unique_key , insert_new_unique_key , replace_key_in_storage }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_get_create_key_tree_with_keys < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_key_tree_with_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_get_create_new_identity_key_query_trees < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_new_identity_key_query_trees } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_get_insert_key_searchable_references < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . insert_key_searchable_references } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_get_insert_key_to_storage < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . insert_key_to_storage } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_get_insert_new_non_unique_key < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . insert_new_non_unique_key } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_get_insert_new_unique_key < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . insert_new_unique_key } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_get_replace_key_in_storage < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . replace_key_in_storage } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_set_create_key_tree_with_keys < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_key_tree_with_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_set_create_new_identity_key_query_trees < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_new_identity_key_query_trees = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_set_insert_key_searchable_references < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . insert_key_searchable_references = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_set_insert_key_to_storage < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . insert_key_to_storage = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_set_insert_new_non_unique_key < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . insert_new_non_unique_key = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_set_insert_new_unique_key < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . insert_new_unique_key = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_set_replace_key_in_storage < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . replace_key_in_storage = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveContractMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveContractMethodVersions { pub prove : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractProveMethodVersions , pub apply : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractApplyMethodVersions , pub insert : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractInsertMethodVersions , pub update : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractUpdateMethodVersions , pub costs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractCostsMethodVersions , pub get : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractGetMethodVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveContractMethodVersions > for platform_version_version_drive_versions_DriveContractMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveContractMethodVersions) -> platform_version :: version :: drive_versions :: DriveContractMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveContractMethodVersions { prove : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . prove) , apply : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . apply) , insert : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . insert) , update : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update) , costs : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . costs) , get : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveContractMethodVersions > for platform_version_version_drive_versions_DriveContractMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveContractMethodVersions) -> * const platform_version_version_drive_versions_DriveContractMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractMethodVersions { prove : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . prove) , apply : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . apply) , insert : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . insert) , update : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update) , costs : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . costs) , get : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveContractMethodVersions > for platform_version_version_drive_versions_DriveContractMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveContractMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveContractMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . prove) ; ; ferment_interfaces :: unbox_any (ffi_ref . apply) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert) ; ; ferment_interfaces :: unbox_any (ffi_ref . update) ; ; ferment_interfaces :: unbox_any (ffi_ref . costs) ; ; ferment_interfaces :: unbox_any (ffi_ref . get) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_ctor < > (prove : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractProveMethodVersions , apply : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractApplyMethodVersions , insert : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractInsertMethodVersions , update : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractUpdateMethodVersions , costs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractCostsMethodVersions , get : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractGetMethodVersions) -> * mut platform_version_version_drive_versions_DriveContractMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractMethodVersions { prove , apply , insert , update , costs , get }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveContractMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_get_prove < > (obj : * const platform_version_version_drive_versions_DriveContractMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractProveMethodVersions { (* obj) . prove } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_get_apply < > (obj : * const platform_version_version_drive_versions_DriveContractMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractApplyMethodVersions { (* obj) . apply } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_get_insert < > (obj : * const platform_version_version_drive_versions_DriveContractMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractInsertMethodVersions { (* obj) . insert } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_get_update < > (obj : * const platform_version_version_drive_versions_DriveContractMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractUpdateMethodVersions { (* obj) . update } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_get_costs < > (obj : * const platform_version_version_drive_versions_DriveContractMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractCostsMethodVersions { (* obj) . costs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_get_get < > (obj : * const platform_version_version_drive_versions_DriveContractMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractGetMethodVersions { (* obj) . get } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_set_prove < > (obj : * mut platform_version_version_drive_versions_DriveContractMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractProveMethodVersions) { (* obj) . prove = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_set_apply < > (obj : * mut platform_version_version_drive_versions_DriveContractMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractApplyMethodVersions) { (* obj) . apply = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_set_insert < > (obj : * mut platform_version_version_drive_versions_DriveContractMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractInsertMethodVersions) { (* obj) . insert = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_set_update < > (obj : * mut platform_version_version_drive_versions_DriveContractMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractUpdateMethodVersions) { (* obj) . update = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_set_costs < > (obj : * mut platform_version_version_drive_versions_DriveContractMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractCostsMethodVersions) { (* obj) . costs = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_set_get < > (obj : * mut platform_version_version_drive_versions_DriveContractMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractGetMethodVersions) { (* obj) . get = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveGroveBasicMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveGroveBasicMethodVersions { pub grove_insert : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_insert_empty_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_insert_empty_sum_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_insert_if_not_exists : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_clear : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_delete : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_raw : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_raw_optional : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_raw_value_u64_from_encoded_var_vec : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_path_query_serialized_results : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_path_query_serialized_or_sum_results : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_path_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_path_query_with_optional : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_raw_path_query_with_optional : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_raw_path_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_proved_path_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_proved_path_query_with_conditional : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_sum_tree_total_value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_has_raw : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveGroveBasicMethodVersions > for platform_version_version_drive_versions_DriveGroveBasicMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> platform_version :: version :: drive_versions :: DriveGroveBasicMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveGroveBasicMethodVersions { grove_insert : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_insert) , grove_insert_empty_tree : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_insert_empty_tree) , grove_insert_empty_sum_tree : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_insert_empty_sum_tree) , grove_insert_if_not_exists : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_insert_if_not_exists) , grove_clear : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_clear) , grove_delete : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_delete) , grove_get_raw : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_get_raw) , grove_get_raw_optional : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_get_raw_optional) , grove_get_raw_value_u64_from_encoded_var_vec : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_get_raw_value_u64_from_encoded_var_vec) , grove_get : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_get) , grove_get_path_query_serialized_results : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_get_path_query_serialized_results) , grove_get_path_query_serialized_or_sum_results : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_get_path_query_serialized_or_sum_results) , grove_get_path_query : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_get_path_query) , grove_get_path_query_with_optional : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_get_path_query_with_optional) , grove_get_raw_path_query_with_optional : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_get_raw_path_query_with_optional) , grove_get_raw_path_query : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_get_raw_path_query) , grove_get_proved_path_query : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_get_proved_path_query) , grove_get_proved_path_query_with_conditional : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_get_proved_path_query_with_conditional) , grove_get_sum_tree_total_value : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_get_sum_tree_total_value) , grove_has_raw : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_has_raw) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveGroveBasicMethodVersions > for platform_version_version_drive_versions_DriveGroveBasicMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveGroveBasicMethodVersions) -> * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveGroveBasicMethodVersions { grove_insert : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_insert) , grove_insert_empty_tree : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_insert_empty_tree) , grove_insert_empty_sum_tree : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_insert_empty_sum_tree) , grove_insert_if_not_exists : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_insert_if_not_exists) , grove_clear : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_clear) , grove_delete : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_delete) , grove_get_raw : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_get_raw) , grove_get_raw_optional : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_get_raw_optional) , grove_get_raw_value_u64_from_encoded_var_vec : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_get_raw_value_u64_from_encoded_var_vec) , grove_get : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_get) , grove_get_path_query_serialized_results : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_get_path_query_serialized_results) , grove_get_path_query_serialized_or_sum_results : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_get_path_query_serialized_or_sum_results) , grove_get_path_query : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_get_path_query) , grove_get_path_query_with_optional : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_get_path_query_with_optional) , grove_get_raw_path_query_with_optional : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_get_raw_path_query_with_optional) , grove_get_raw_path_query : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_get_raw_path_query) , grove_get_proved_path_query : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_get_proved_path_query) , grove_get_proved_path_query_with_conditional : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_get_proved_path_query_with_conditional) , grove_get_sum_tree_total_value : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_get_sum_tree_total_value) , grove_has_raw : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_has_raw) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveGroveBasicMethodVersions > for platform_version_version_drive_versions_DriveGroveBasicMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveGroveBasicMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . grove_insert) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_insert_empty_tree) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_insert_empty_sum_tree) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_insert_if_not_exists) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_clear) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_delete) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_raw) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_raw_optional) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_raw_value_u64_from_encoded_var_vec) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_path_query_serialized_results) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_path_query_serialized_or_sum_results) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_path_query) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_path_query_with_optional) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_raw_path_query_with_optional) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_raw_path_query) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_proved_path_query) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_proved_path_query_with_conditional) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_sum_tree_total_value) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_has_raw) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_ctor < > (grove_insert : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_insert_empty_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_insert_empty_sum_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_insert_if_not_exists : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_clear : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_delete : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_raw : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_raw_optional : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_raw_value_u64_from_encoded_var_vec : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_path_query_serialized_results : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_path_query_serialized_or_sum_results : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_path_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_path_query_with_optional : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_raw_path_query_with_optional : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_raw_path_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_proved_path_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_proved_path_query_with_conditional : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_sum_tree_total_value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_has_raw : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveGroveBasicMethodVersions { grove_insert , grove_insert_empty_tree , grove_insert_empty_sum_tree , grove_insert_if_not_exists , grove_clear , grove_delete , grove_get_raw , grove_get_raw_optional , grove_get_raw_value_u64_from_encoded_var_vec , grove_get , grove_get_path_query_serialized_results , grove_get_path_query_serialized_or_sum_results , grove_get_path_query , grove_get_path_query_with_optional , grove_get_raw_path_query_with_optional , grove_get_raw_path_query , grove_get_proved_path_query , grove_get_proved_path_query_with_conditional , grove_get_sum_tree_total_value , grove_has_raw }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_insert < > (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_insert } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_insert_empty_tree < > (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_insert_empty_tree } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_insert_empty_sum_tree < > (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_insert_empty_sum_tree } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_insert_if_not_exists < > (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_insert_if_not_exists } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_clear < > (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_clear } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_delete < > (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_delete } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_raw < > (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_raw } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_raw_optional < > (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_raw_optional } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_raw_value_u64_from_encoded_var_vec < > (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_raw_value_u64_from_encoded_var_vec } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get < > (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_path_query_serialized_results < > (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_path_query_serialized_results } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_path_query_serialized_or_sum_results < > (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_path_query_serialized_or_sum_results } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_path_query < > (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_path_query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_path_query_with_optional < > (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_path_query_with_optional } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_raw_path_query_with_optional < > (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_raw_path_query_with_optional } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_raw_path_query < > (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_raw_path_query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_proved_path_query < > (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_proved_path_query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_proved_path_query_with_conditional < > (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_proved_path_query_with_conditional } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_sum_tree_total_value < > (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_sum_tree_total_value } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_has_raw < > (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_has_raw } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_insert < > (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_insert = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_insert_empty_tree < > (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_insert_empty_tree = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_insert_empty_sum_tree < > (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_insert_empty_sum_tree = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_insert_if_not_exists < > (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_insert_if_not_exists = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_clear < > (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_clear = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_delete < > (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_delete = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_raw < > (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_raw = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_raw_optional < > (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_raw_optional = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_raw_value_u64_from_encoded_var_vec < > (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_raw_value_u64_from_encoded_var_vec = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get < > (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_path_query_serialized_results < > (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_path_query_serialized_results = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_path_query_serialized_or_sum_results < > (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_path_query_serialized_or_sum_results = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_path_query < > (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_path_query = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_path_query_with_optional < > (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_path_query_with_optional = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_raw_path_query_with_optional < > (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_raw_path_query_with_optional = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_raw_path_query < > (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_raw_path_query = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_proved_path_query < > (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_proved_path_query = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_proved_path_query_with_conditional < > (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_proved_path_query_with_conditional = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_sum_tree_total_value < > (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_sum_tree_total_value = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_has_raw < > (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_has_raw = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveIdentityKeysProveMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions { pub prove_identities_all_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub prove_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveIdentityKeysProveMethodVersions > for platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityKeysProveMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityKeysProveMethodVersions { prove_identities_all_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . prove_identities_all_keys) , prove_identity_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . prove_identity_keys) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveIdentityKeysProveMethodVersions > for platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityKeysProveMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions { prove_identities_all_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . prove_identities_all_keys) , prove_identity_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . prove_identity_keys) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveIdentityKeysProveMethodVersions > for platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . prove_identities_all_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove_identity_keys) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions_ctor < > (prove_identities_all_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , prove_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions { prove_identities_all_keys , prove_identity_keys }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions_get_prove_identities_all_keys < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_identities_all_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions_get_prove_identity_keys < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_identity_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions_set_prove_identities_all_keys < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_identities_all_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions_set_prove_identity_keys < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_identity_keys = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveContractCostsMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveContractCostsMethodVersions { pub add_estimation_costs_for_contract_insertion : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveContractCostsMethodVersions > for platform_version_version_drive_versions_DriveContractCostsMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveContractCostsMethodVersions) -> platform_version :: version :: drive_versions :: DriveContractCostsMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveContractCostsMethodVersions { add_estimation_costs_for_contract_insertion : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_estimation_costs_for_contract_insertion) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveContractCostsMethodVersions > for platform_version_version_drive_versions_DriveContractCostsMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveContractCostsMethodVersions) -> * const platform_version_version_drive_versions_DriveContractCostsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractCostsMethodVersions { add_estimation_costs_for_contract_insertion : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_estimation_costs_for_contract_insertion) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveContractCostsMethodVersions > for platform_version_version_drive_versions_DriveContractCostsMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveContractCostsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveContractCostsMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_estimation_costs_for_contract_insertion) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractCostsMethodVersions_ctor < > (add_estimation_costs_for_contract_insertion : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveContractCostsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractCostsMethodVersions { add_estimation_costs_for_contract_insertion }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractCostsMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveContractCostsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractCostsMethodVersions_get_add_estimation_costs_for_contract_insertion < > (obj : * const platform_version_version_drive_versions_DriveContractCostsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_estimation_costs_for_contract_insertion } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractCostsMethodVersions_set_add_estimation_costs_for_contract_insertion < > (obj : * mut platform_version_version_drive_versions_DriveContractCostsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_estimation_costs_for_contract_insertion = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveCreditPoolPendingEpochRefundsMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions { pub add_delete_pending_epoch_refunds_except_specified : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_and_add_pending_epoch_refunds_to_collection : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_pending_epoch_refunds : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_update_pending_epoch_refunds_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveCreditPoolPendingEpochRefundsMethodVersions > for platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions) -> platform_version :: version :: drive_versions :: DriveCreditPoolPendingEpochRefundsMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveCreditPoolPendingEpochRefundsMethodVersions { add_delete_pending_epoch_refunds_except_specified : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_delete_pending_epoch_refunds_except_specified) , fetch_and_add_pending_epoch_refunds_to_collection : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_and_add_pending_epoch_refunds_to_collection) , fetch_pending_epoch_refunds : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_pending_epoch_refunds) , add_update_pending_epoch_refunds_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_update_pending_epoch_refunds_operations) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveCreditPoolPendingEpochRefundsMethodVersions > for platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveCreditPoolPendingEpochRefundsMethodVersions) -> * const platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions { add_delete_pending_epoch_refunds_except_specified : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_delete_pending_epoch_refunds_except_specified) , fetch_and_add_pending_epoch_refunds_to_collection : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_and_add_pending_epoch_refunds_to_collection) , fetch_pending_epoch_refunds : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_pending_epoch_refunds) , add_update_pending_epoch_refunds_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_update_pending_epoch_refunds_operations) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveCreditPoolPendingEpochRefundsMethodVersions > for platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_delete_pending_epoch_refunds_except_specified) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_and_add_pending_epoch_refunds_to_collection) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_pending_epoch_refunds) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_update_pending_epoch_refunds_operations) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions_ctor < > (add_delete_pending_epoch_refunds_except_specified : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_and_add_pending_epoch_refunds_to_collection : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_pending_epoch_refunds : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_update_pending_epoch_refunds_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions { add_delete_pending_epoch_refunds_except_specified , fetch_and_add_pending_epoch_refunds_to_collection , fetch_pending_epoch_refunds , add_update_pending_epoch_refunds_operations }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions_get_add_delete_pending_epoch_refunds_except_specified < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_delete_pending_epoch_refunds_except_specified } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions_get_fetch_and_add_pending_epoch_refunds_to_collection < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_and_add_pending_epoch_refunds_to_collection } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions_get_fetch_pending_epoch_refunds < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_pending_epoch_refunds } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions_get_add_update_pending_epoch_refunds_operations < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_update_pending_epoch_refunds_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions_set_add_delete_pending_epoch_refunds_except_specified < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_delete_pending_epoch_refunds_except_specified = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions_set_fetch_and_add_pending_epoch_refunds_to_collection < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_and_add_pending_epoch_refunds_to_collection = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions_set_fetch_pending_epoch_refunds < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_pending_epoch_refunds = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions_set_add_update_pending_epoch_refunds_operations < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_update_pending_epoch_refunds_operations = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveDocumentDeleteMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions { pub add_estimation_costs_for_remove_document_to_primary_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub delete_document_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub delete_document_for_contract_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub delete_document_for_contract_apply_and_add_to_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_document_from_primary_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_reference_for_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_indices_for_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_indices_for_top_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub delete_document_for_contract_id_with_named_type_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub delete_document_for_contract_with_named_type_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub delete_document_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveDocumentDeleteMethodVersions > for platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> platform_version :: version :: drive_versions :: DriveDocumentDeleteMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveDocumentDeleteMethodVersions { add_estimation_costs_for_remove_document_to_primary_storage : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_estimation_costs_for_remove_document_to_primary_storage) , delete_document_for_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . delete_document_for_contract) , delete_document_for_contract_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . delete_document_for_contract_id) , delete_document_for_contract_apply_and_add_to_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . delete_document_for_contract_apply_and_add_to_operations) , remove_document_from_primary_storage : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . remove_document_from_primary_storage) , remove_reference_for_index_level_for_contract_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . remove_reference_for_index_level_for_contract_operations) , remove_indices_for_index_level_for_contract_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . remove_indices_for_index_level_for_contract_operations) , remove_indices_for_top_index_level_for_contract_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . remove_indices_for_top_index_level_for_contract_operations) , delete_document_for_contract_id_with_named_type_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . delete_document_for_contract_id_with_named_type_operations) , delete_document_for_contract_with_named_type_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . delete_document_for_contract_with_named_type_operations) , delete_document_for_contract_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . delete_document_for_contract_operations) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveDocumentDeleteMethodVersions > for platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveDocumentDeleteMethodVersions) -> * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions { add_estimation_costs_for_remove_document_to_primary_storage : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_estimation_costs_for_remove_document_to_primary_storage) , delete_document_for_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . delete_document_for_contract) , delete_document_for_contract_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . delete_document_for_contract_id) , delete_document_for_contract_apply_and_add_to_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . delete_document_for_contract_apply_and_add_to_operations) , remove_document_from_primary_storage : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . remove_document_from_primary_storage) , remove_reference_for_index_level_for_contract_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . remove_reference_for_index_level_for_contract_operations) , remove_indices_for_index_level_for_contract_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . remove_indices_for_index_level_for_contract_operations) , remove_indices_for_top_index_level_for_contract_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . remove_indices_for_top_index_level_for_contract_operations) , delete_document_for_contract_id_with_named_type_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . delete_document_for_contract_id_with_named_type_operations) , delete_document_for_contract_with_named_type_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . delete_document_for_contract_with_named_type_operations) , delete_document_for_contract_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . delete_document_for_contract_operations) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveDocumentDeleteMethodVersions > for platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_estimation_costs_for_remove_document_to_primary_storage) ; ; ferment_interfaces :: unbox_any (ffi_ref . delete_document_for_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . delete_document_for_contract_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . delete_document_for_contract_apply_and_add_to_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_document_from_primary_storage) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_reference_for_index_level_for_contract_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_indices_for_index_level_for_contract_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_indices_for_top_index_level_for_contract_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . delete_document_for_contract_id_with_named_type_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . delete_document_for_contract_with_named_type_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . delete_document_for_contract_operations) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_ctor < > (add_estimation_costs_for_remove_document_to_primary_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , delete_document_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , delete_document_for_contract_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , delete_document_for_contract_apply_and_add_to_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_document_from_primary_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_reference_for_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_indices_for_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_indices_for_top_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , delete_document_for_contract_id_with_named_type_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , delete_document_for_contract_with_named_type_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , delete_document_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions { add_estimation_costs_for_remove_document_to_primary_storage , delete_document_for_contract , delete_document_for_contract_id , delete_document_for_contract_apply_and_add_to_operations , remove_document_from_primary_storage , remove_reference_for_index_level_for_contract_operations , remove_indices_for_index_level_for_contract_operations , remove_indices_for_top_index_level_for_contract_operations , delete_document_for_contract_id_with_named_type_operations , delete_document_for_contract_with_named_type_operations , delete_document_for_contract_operations }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_add_estimation_costs_for_remove_document_to_primary_storage < > (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_estimation_costs_for_remove_document_to_primary_storage } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_delete_document_for_contract < > (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . delete_document_for_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_delete_document_for_contract_id < > (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . delete_document_for_contract_id } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_delete_document_for_contract_apply_and_add_to_operations < > (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . delete_document_for_contract_apply_and_add_to_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_remove_document_from_primary_storage < > (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_document_from_primary_storage } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_remove_reference_for_index_level_for_contract_operations < > (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_reference_for_index_level_for_contract_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_remove_indices_for_index_level_for_contract_operations < > (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_indices_for_index_level_for_contract_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_remove_indices_for_top_index_level_for_contract_operations < > (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_indices_for_top_index_level_for_contract_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_delete_document_for_contract_id_with_named_type_operations < > (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . delete_document_for_contract_id_with_named_type_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_delete_document_for_contract_with_named_type_operations < > (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . delete_document_for_contract_with_named_type_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_delete_document_for_contract_operations < > (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . delete_document_for_contract_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_add_estimation_costs_for_remove_document_to_primary_storage < > (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_estimation_costs_for_remove_document_to_primary_storage = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_delete_document_for_contract < > (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . delete_document_for_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_delete_document_for_contract_id < > (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . delete_document_for_contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_delete_document_for_contract_apply_and_add_to_operations < > (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . delete_document_for_contract_apply_and_add_to_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_remove_document_from_primary_storage < > (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_document_from_primary_storage = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_remove_reference_for_index_level_for_contract_operations < > (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_reference_for_index_level_for_contract_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_remove_indices_for_index_level_for_contract_operations < > (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_indices_for_index_level_for_contract_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_remove_indices_for_top_index_level_for_contract_operations < > (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_indices_for_top_index_level_for_contract_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_delete_document_for_contract_id_with_named_type_operations < > (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . delete_document_for_contract_id_with_named_type_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_delete_document_for_contract_with_named_type_operations < > (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . delete_document_for_contract_with_named_type_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_delete_document_for_contract_operations < > (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . delete_document_for_contract_operations = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveStateTransitionMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveStateTransitionMethodVersions { pub operations : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions , pub convert_to_high_level_operations : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveStateTransitionMethodVersions > for platform_version_version_drive_versions_DriveStateTransitionMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveStateTransitionMethodVersions) -> platform_version :: version :: drive_versions :: DriveStateTransitionMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveStateTransitionMethodVersions { operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . operations) , convert_to_high_level_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . convert_to_high_level_operations) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveStateTransitionMethodVersions > for platform_version_version_drive_versions_DriveStateTransitionMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveStateTransitionMethodVersions) -> * const platform_version_version_drive_versions_DriveStateTransitionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveStateTransitionMethodVersions { operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . operations) , convert_to_high_level_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . convert_to_high_level_operations) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveStateTransitionMethodVersions > for platform_version_version_drive_versions_DriveStateTransitionMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveStateTransitionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveStateTransitionMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . convert_to_high_level_operations) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionMethodVersions_ctor < > (operations : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions , convert_to_high_level_operations : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) -> * mut platform_version_version_drive_versions_DriveStateTransitionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveStateTransitionMethodVersions { operations , convert_to_high_level_operations }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveStateTransitionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionMethodVersions_get_operations < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions { (* obj) . operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionMethodVersions_get_convert_to_high_level_operations < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions { (* obj) . convert_to_high_level_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionMethodVersions_set_operations < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions) { (* obj) . operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionMethodVersions_set_convert_to_high_level_operations < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStateTransitionActionConvertToHighLevelOperationsMethodVersions) { (* obj) . convert_to_high_level_operations = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveFeesMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveFeesMethodVersions { pub calculate_fee : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveFeesMethodVersions > for platform_version_version_drive_versions_DriveFeesMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveFeesMethodVersions) -> platform_version :: version :: drive_versions :: DriveFeesMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveFeesMethodVersions { calculate_fee : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . calculate_fee) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveFeesMethodVersions > for platform_version_version_drive_versions_DriveFeesMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveFeesMethodVersions) -> * const platform_version_version_drive_versions_DriveFeesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveFeesMethodVersions { calculate_fee : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . calculate_fee) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveFeesMethodVersions > for platform_version_version_drive_versions_DriveFeesMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveFeesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveFeesMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . calculate_fee) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveFeesMethodVersions_ctor < > (calculate_fee : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveFeesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveFeesMethodVersions { calculate_fee }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveFeesMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveFeesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveFeesMethodVersions_get_calculate_fee < > (obj : * const platform_version_version_drive_versions_DriveFeesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . calculate_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveFeesMethodVersions_set_calculate_fee < > (obj : * mut platform_version_version_drive_versions_DriveFeesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . calculate_fee = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DrivePlatformSystemMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DrivePlatformSystemMethodVersions { pub estimation_costs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DrivePlatformSystemMethodVersions > for platform_version_version_drive_versions_DrivePlatformSystemMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DrivePlatformSystemMethodVersions) -> platform_version :: version :: drive_versions :: DrivePlatformSystemMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DrivePlatformSystemMethodVersions { estimation_costs : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . estimation_costs) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DrivePlatformSystemMethodVersions > for platform_version_version_drive_versions_DrivePlatformSystemMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DrivePlatformSystemMethodVersions) -> * const platform_version_version_drive_versions_DrivePlatformSystemMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DrivePlatformSystemMethodVersions { estimation_costs : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . estimation_costs) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DrivePlatformSystemMethodVersions > for platform_version_version_drive_versions_DrivePlatformSystemMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DrivePlatformSystemMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DrivePlatformSystemMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . estimation_costs) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformSystemMethodVersions_ctor < > (estimation_costs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions) -> * mut platform_version_version_drive_versions_DrivePlatformSystemMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DrivePlatformSystemMethodVersions { estimation_costs }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformSystemMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DrivePlatformSystemMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformSystemMethodVersions_get_estimation_costs < > (obj : * const platform_version_version_drive_versions_DrivePlatformSystemMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions { (* obj) . estimation_costs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformSystemMethodVersions_set_estimation_costs < > (obj : * mut platform_version_version_drive_versions_DrivePlatformSystemMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions) { (* obj) . estimation_costs = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions { pub index : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions , pub queue : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionMethodVersions > for platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionMethodVersions { index : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . index) , queue : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . queue) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionMethodVersions > for platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions { index : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . index) , queue : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . queue) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionMethodVersions > for platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . index) ; ; ferment_interfaces :: unbox_any (ffi_ref . queue) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions_ctor < > (index : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions , queue : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions) -> * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions { index , queue }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions_get_index < > (obj : * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions { (* obj) . index } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions_get_queue < > (obj : * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions { (* obj) . queue } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions_set_index < > (obj : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions) { (* obj) . index = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions_set_queue < > (obj : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions) { (* obj) . queue = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveIdentityContractInfoMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions { pub add_potential_contract_info_for_contract_bounded_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub merge_identity_contract_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveIdentityContractInfoMethodVersions > for platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityContractInfoMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityContractInfoMethodVersions { add_potential_contract_info_for_contract_bounded_key : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_potential_contract_info_for_contract_bounded_key) , merge_identity_contract_nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . merge_identity_contract_nonce) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveIdentityContractInfoMethodVersions > for platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityContractInfoMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions { add_potential_contract_info_for_contract_bounded_key : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_potential_contract_info_for_contract_bounded_key) , merge_identity_contract_nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . merge_identity_contract_nonce) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveIdentityContractInfoMethodVersions > for platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_potential_contract_info_for_contract_bounded_key) ; ; ferment_interfaces :: unbox_any (ffi_ref . merge_identity_contract_nonce) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions_ctor < > (add_potential_contract_info_for_contract_bounded_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , merge_identity_contract_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions { add_potential_contract_info_for_contract_bounded_key , merge_identity_contract_nonce }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions_get_add_potential_contract_info_for_contract_bounded_key < > (obj : * const platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_potential_contract_info_for_contract_bounded_key } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions_get_merge_identity_contract_nonce < > (obj : * const platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . merge_identity_contract_nonce } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions_set_add_potential_contract_info_for_contract_bounded_key < > (obj : * mut platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_potential_contract_info_for_contract_bounded_key = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions_set_merge_identity_contract_nonce < > (obj : * mut platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . merge_identity_contract_nonce = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVersion { pub structure : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStructureVersion , pub methods : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveMethodVersions , pub grove_methods : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveMethodVersions , pub grove_version : * mut ferment_example_platform :: custom :: grovedb_version :: grovedb_version_GroveVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveVersion > for platform_version_version_drive_versions_DriveVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVersion) -> platform_version :: version :: drive_versions :: DriveVersion { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVersion { structure : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . structure) , methods : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . methods) , grove_methods : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_methods) , grove_version : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_version) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveVersion > for platform_version_version_drive_versions_DriveVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVersion) -> * const platform_version_version_drive_versions_DriveVersion { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVersion { structure : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . structure) , methods : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . methods) , grove_methods : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_methods) , grove_version : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_version) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveVersion > for platform_version_version_drive_versions_DriveVersion { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . structure) ; ; ferment_interfaces :: unbox_any (ffi_ref . methods) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_methods) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_version) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVersion_ctor < > (structure : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStructureVersion , methods : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveMethodVersions , grove_methods : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveMethodVersions , grove_version : * mut ferment_example_platform :: custom :: grovedb_version :: grovedb_version_GroveVersion) -> * mut platform_version_version_drive_versions_DriveVersion { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVersion { structure , methods , grove_methods , grove_version }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVersion_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVersion_get_structure < > (obj : * const platform_version_version_drive_versions_DriveVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStructureVersion { (* obj) . structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVersion_get_methods < > (obj : * const platform_version_version_drive_versions_DriveVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveMethodVersions { (* obj) . methods } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVersion_get_grove_methods < > (obj : * const platform_version_version_drive_versions_DriveVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveMethodVersions { (* obj) . grove_methods } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVersion_get_grove_version < > (obj : * const platform_version_version_drive_versions_DriveVersion) -> * mut ferment_example_platform :: custom :: grovedb_version :: grovedb_version_GroveVersion { (* obj) . grove_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVersion_set_structure < > (obj : * mut platform_version_version_drive_versions_DriveVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStructureVersion) { (* obj) . structure = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVersion_set_methods < > (obj : * mut platform_version_version_drive_versions_DriveVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveMethodVersions) { (* obj) . methods = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVersion_set_grove_methods < > (obj : * mut platform_version_version_drive_versions_DriveVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveMethodVersions) { (* obj) . grove_methods = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVersion_set_grove_version < > (obj : * mut platform_version_version_drive_versions_DriveVersion , value : * mut ferment_example_platform :: custom :: grovedb_version :: grovedb_version_GroveVersion) { (* obj) . grove_version = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveIdentityKeysFetchMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions { pub fetch_all_current_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_all_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_identities_all_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_identities_contract_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveIdentityKeysFetchMethodVersions > for platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityKeysFetchMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityKeysFetchMethodVersions { fetch_all_current_identity_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_all_current_identity_keys) , fetch_all_identity_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_all_identity_keys) , fetch_identities_all_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_identities_all_keys) , fetch_identity_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_identity_keys) , fetch_identities_contract_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_identities_contract_keys) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveIdentityKeysFetchMethodVersions > for platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityKeysFetchMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions { fetch_all_current_identity_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_all_current_identity_keys) , fetch_all_identity_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_all_identity_keys) , fetch_identities_all_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_identities_all_keys) , fetch_identity_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_identity_keys) , fetch_identities_contract_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_identities_contract_keys) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveIdentityKeysFetchMethodVersions > for platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_all_current_identity_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_all_identity_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_identities_all_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_identity_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_identities_contract_keys) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_ctor < > (fetch_all_current_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_all_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_identities_all_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_identities_contract_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions { fetch_all_current_identity_keys , fetch_all_identity_keys , fetch_identities_all_keys , fetch_identity_keys , fetch_identities_contract_keys }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_get_fetch_all_current_identity_keys < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_all_current_identity_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_get_fetch_all_identity_keys < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_all_identity_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_get_fetch_identities_all_keys < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_identities_all_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_get_fetch_identity_keys < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_identity_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_get_fetch_identities_contract_keys < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_identities_contract_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_set_fetch_all_current_identity_keys < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_all_current_identity_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_set_fetch_all_identity_keys < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_all_identity_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_set_fetch_identities_all_keys < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_identities_all_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_set_fetch_identity_keys < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_identity_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_set_fetch_identities_contract_keys < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_identities_contract_keys = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveIdentityFetchFullIdentityMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions { pub fetch_full_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion , pub fetch_full_identities : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveIdentityFetchFullIdentityMethodVersions > for platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityFetchFullIdentityMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityFetchFullIdentityMethodVersions { fetch_full_identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_full_identity) , fetch_full_identities : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_full_identities) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveIdentityFetchFullIdentityMethodVersions > for platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityFetchFullIdentityMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions { fetch_full_identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_full_identity) , fetch_full_identities : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_full_identities) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveIdentityFetchFullIdentityMethodVersions > for platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_full_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_full_identities) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions_ctor < > (fetch_full_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion , fetch_full_identities : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions { fetch_full_identity , fetch_full_identities }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions_get_fetch_full_identity < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion { (* obj) . fetch_full_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions_get_fetch_full_identities < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion { (* obj) . fetch_full_identities } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions_set_fetch_full_identity < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion) { (* obj) . fetch_full_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions_set_fetch_full_identities < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion) { (* obj) . fetch_full_identities = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveContractQueryMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveContractQueryMethodVersions { pub fetch_contract_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_contract_with_history_latest_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_contracts_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_contract_history_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveContractQueryMethodVersions > for platform_version_version_drive_versions_DriveContractQueryMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveContractQueryMethodVersions) -> platform_version :: version :: drive_versions :: DriveContractQueryMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveContractQueryMethodVersions { fetch_contract_query : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_contract_query) , fetch_contract_with_history_latest_query : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_contract_with_history_latest_query) , fetch_contracts_query : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_contracts_query) , fetch_contract_history_query : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_contract_history_query) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveContractQueryMethodVersions > for platform_version_version_drive_versions_DriveContractQueryMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveContractQueryMethodVersions) -> * const platform_version_version_drive_versions_DriveContractQueryMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractQueryMethodVersions { fetch_contract_query : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_contract_query) , fetch_contract_with_history_latest_query : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_contract_with_history_latest_query) , fetch_contracts_query : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_contracts_query) , fetch_contract_history_query : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_contract_history_query) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveContractQueryMethodVersions > for platform_version_version_drive_versions_DriveContractQueryMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveContractQueryMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveContractQueryMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_contract_query) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_contract_with_history_latest_query) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_contracts_query) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_contract_history_query) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractQueryMethodVersions_ctor < > (fetch_contract_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_contract_with_history_latest_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_contracts_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_contract_history_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveContractQueryMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractQueryMethodVersions { fetch_contract_query , fetch_contract_with_history_latest_query , fetch_contracts_query , fetch_contract_history_query }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractQueryMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveContractQueryMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractQueryMethodVersions_get_fetch_contract_query < > (obj : * const platform_version_version_drive_versions_DriveContractQueryMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_contract_query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractQueryMethodVersions_get_fetch_contract_with_history_latest_query < > (obj : * const platform_version_version_drive_versions_DriveContractQueryMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_contract_with_history_latest_query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractQueryMethodVersions_get_fetch_contracts_query < > (obj : * const platform_version_version_drive_versions_DriveContractQueryMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_contracts_query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractQueryMethodVersions_get_fetch_contract_history_query < > (obj : * const platform_version_version_drive_versions_DriveContractQueryMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_contract_history_query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractQueryMethodVersions_set_fetch_contract_query < > (obj : * mut platform_version_version_drive_versions_DriveContractQueryMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_contract_query = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractQueryMethodVersions_set_fetch_contract_with_history_latest_query < > (obj : * mut platform_version_version_drive_versions_DriveContractQueryMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_contract_with_history_latest_query = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractQueryMethodVersions_set_fetch_contracts_query < > (obj : * mut platform_version_version_drive_versions_DriveContractQueryMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_contracts_query = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractQueryMethodVersions_set_fetch_contract_history_query < > (obj : * mut platform_version_version_drive_versions_DriveContractQueryMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_contract_history_query = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveContractInsertMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveContractInsertMethodVersions { pub add_contract_to_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub insert_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveContractInsertMethodVersions > for platform_version_version_drive_versions_DriveContractInsertMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveContractInsertMethodVersions) -> platform_version :: version :: drive_versions :: DriveContractInsertMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveContractInsertMethodVersions { add_contract_to_storage : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_contract_to_storage) , insert_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . insert_contract) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveContractInsertMethodVersions > for platform_version_version_drive_versions_DriveContractInsertMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveContractInsertMethodVersions) -> * const platform_version_version_drive_versions_DriveContractInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractInsertMethodVersions { add_contract_to_storage : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_contract_to_storage) , insert_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . insert_contract) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveContractInsertMethodVersions > for platform_version_version_drive_versions_DriveContractInsertMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveContractInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveContractInsertMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_contract_to_storage) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_contract) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractInsertMethodVersions_ctor < > (add_contract_to_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , insert_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveContractInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractInsertMethodVersions { add_contract_to_storage , insert_contract }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractInsertMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveContractInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractInsertMethodVersions_get_add_contract_to_storage < > (obj : * const platform_version_version_drive_versions_DriveContractInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_contract_to_storage } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractInsertMethodVersions_get_insert_contract < > (obj : * const platform_version_version_drive_versions_DriveContractInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . insert_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractInsertMethodVersions_set_add_contract_to_storage < > (obj : * mut platform_version_version_drive_versions_DriveContractInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_contract_to_storage = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractInsertMethodVersions_set_insert_contract < > (obj : * mut platform_version_version_drive_versions_DriveContractInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . insert_contract = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveVerifyDocumentMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions { pub verify_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_proof_keep_serialized : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_start_at_document_in_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveVerifyDocumentMethodVersions > for platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions) -> platform_version :: version :: drive_versions :: DriveVerifyDocumentMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVerifyDocumentMethodVersions { verify_proof : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_proof) , verify_proof_keep_serialized : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_proof_keep_serialized) , verify_start_at_document_in_proof : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_start_at_document_in_proof) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveVerifyDocumentMethodVersions > for platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVerifyDocumentMethodVersions) -> * const platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions { verify_proof : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_proof) , verify_proof_keep_serialized : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_proof_keep_serialized) , verify_start_at_document_in_proof : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_start_at_document_in_proof) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveVerifyDocumentMethodVersions > for platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . verify_proof) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_proof_keep_serialized) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_start_at_document_in_proof) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions_ctor < > (verify_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_proof_keep_serialized : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_start_at_document_in_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions { verify_proof , verify_proof_keep_serialized , verify_start_at_document_in_proof }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions_get_verify_proof < > (obj : * const platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_proof } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions_get_verify_proof_keep_serialized < > (obj : * const platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_proof_keep_serialized } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions_get_verify_start_at_document_in_proof < > (obj : * const platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_start_at_document_in_proof } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions_set_verify_proof < > (obj : * mut platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_proof = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions_set_verify_proof_keep_serialized < > (obj : * mut platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_proof_keep_serialized = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions_set_verify_start_at_document_in_proof < > (obj : * mut platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_start_at_document_in_proof = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveIdentityInsertMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityInsertMethodVersions { pub add_new_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveIdentityInsertMethodVersions > for platform_version_version_drive_versions_DriveIdentityInsertMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityInsertMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityInsertMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityInsertMethodVersions { add_new_identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_new_identity) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveIdentityInsertMethodVersions > for platform_version_version_drive_versions_DriveIdentityInsertMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityInsertMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityInsertMethodVersions { add_new_identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_new_identity) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveIdentityInsertMethodVersions > for platform_version_version_drive_versions_DriveIdentityInsertMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityInsertMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_new_identity) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityInsertMethodVersions_ctor < > (add_new_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityInsertMethodVersions { add_new_identity }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityInsertMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveIdentityInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityInsertMethodVersions_get_add_new_identity < > (obj : * const platform_version_version_drive_versions_DriveIdentityInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_new_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityInsertMethodVersions_set_add_new_identity < > (obj : * mut platform_version_version_drive_versions_DriveIdentityInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_new_identity = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveProtocolUpgradeVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveProtocolUpgradeVersions { pub clear_version_information : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_versions_with_counter : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_proved_versions_with_counter : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_validator_version_votes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_proved_validator_version_votes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_validators_proposed_app_versions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_validator_proposed_app_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveProtocolUpgradeVersions > for platform_version_version_drive_versions_DriveProtocolUpgradeVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveProtocolUpgradeVersions) -> platform_version :: version :: drive_versions :: DriveProtocolUpgradeVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveProtocolUpgradeVersions { clear_version_information : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . clear_version_information) , fetch_versions_with_counter : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_versions_with_counter) , fetch_proved_versions_with_counter : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_proved_versions_with_counter) , fetch_validator_version_votes : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_validator_version_votes) , fetch_proved_validator_version_votes : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_proved_validator_version_votes) , remove_validators_proposed_app_versions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . remove_validators_proposed_app_versions) , update_validator_proposed_app_version : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update_validator_proposed_app_version) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveProtocolUpgradeVersions > for platform_version_version_drive_versions_DriveProtocolUpgradeVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveProtocolUpgradeVersions) -> * const platform_version_version_drive_versions_DriveProtocolUpgradeVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveProtocolUpgradeVersions { clear_version_information : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . clear_version_information) , fetch_versions_with_counter : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_versions_with_counter) , fetch_proved_versions_with_counter : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_proved_versions_with_counter) , fetch_validator_version_votes : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_validator_version_votes) , fetch_proved_validator_version_votes : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_proved_validator_version_votes) , remove_validators_proposed_app_versions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . remove_validators_proposed_app_versions) , update_validator_proposed_app_version : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update_validator_proposed_app_version) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveProtocolUpgradeVersions > for platform_version_version_drive_versions_DriveProtocolUpgradeVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveProtocolUpgradeVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveProtocolUpgradeVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . clear_version_information) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_versions_with_counter) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_proved_versions_with_counter) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_validator_version_votes) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_proved_validator_version_votes) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_validators_proposed_app_versions) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_validator_proposed_app_version) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_ctor < > (clear_version_information : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_versions_with_counter : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_proved_versions_with_counter : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_validator_version_votes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_proved_validator_version_votes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_validators_proposed_app_versions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_validator_proposed_app_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveProtocolUpgradeVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveProtocolUpgradeVersions { clear_version_information , fetch_versions_with_counter , fetch_proved_versions_with_counter , fetch_validator_version_votes , fetch_proved_validator_version_votes , remove_validators_proposed_app_versions , update_validator_proposed_app_version }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveProtocolUpgradeVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_get_clear_version_information < > (obj : * const platform_version_version_drive_versions_DriveProtocolUpgradeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . clear_version_information } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_get_fetch_versions_with_counter < > (obj : * const platform_version_version_drive_versions_DriveProtocolUpgradeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_versions_with_counter } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_get_fetch_proved_versions_with_counter < > (obj : * const platform_version_version_drive_versions_DriveProtocolUpgradeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_proved_versions_with_counter } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_get_fetch_validator_version_votes < > (obj : * const platform_version_version_drive_versions_DriveProtocolUpgradeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_validator_version_votes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_get_fetch_proved_validator_version_votes < > (obj : * const platform_version_version_drive_versions_DriveProtocolUpgradeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_proved_validator_version_votes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_get_remove_validators_proposed_app_versions < > (obj : * const platform_version_version_drive_versions_DriveProtocolUpgradeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_validators_proposed_app_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_get_update_validator_proposed_app_version < > (obj : * const platform_version_version_drive_versions_DriveProtocolUpgradeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_validator_proposed_app_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_set_clear_version_information < > (obj : * mut platform_version_version_drive_versions_DriveProtocolUpgradeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . clear_version_information = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_set_fetch_versions_with_counter < > (obj : * mut platform_version_version_drive_versions_DriveProtocolUpgradeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_versions_with_counter = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_set_fetch_proved_versions_with_counter < > (obj : * mut platform_version_version_drive_versions_DriveProtocolUpgradeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_proved_versions_with_counter = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_set_fetch_validator_version_votes < > (obj : * mut platform_version_version_drive_versions_DriveProtocolUpgradeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_validator_version_votes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_set_fetch_proved_validator_version_votes < > (obj : * mut platform_version_version_drive_versions_DriveProtocolUpgradeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_proved_validator_version_votes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_set_remove_validators_proposed_app_versions < > (obj : * mut platform_version_version_drive_versions_DriveProtocolUpgradeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_validators_proposed_app_versions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_set_update_validator_proposed_app_version < > (obj : * mut platform_version_version_drive_versions_DriveProtocolUpgradeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_validator_proposed_app_version = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveProveMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveProveMethodVersions { pub prove_elements : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub prove_multiple_state_transition_results : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveProveMethodVersions > for platform_version_version_drive_versions_DriveProveMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveProveMethodVersions) -> platform_version :: version :: drive_versions :: DriveProveMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveProveMethodVersions { prove_elements : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . prove_elements) , prove_multiple_state_transition_results : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . prove_multiple_state_transition_results) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveProveMethodVersions > for platform_version_version_drive_versions_DriveProveMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveProveMethodVersions) -> * const platform_version_version_drive_versions_DriveProveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveProveMethodVersions { prove_elements : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . prove_elements) , prove_multiple_state_transition_results : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . prove_multiple_state_transition_results) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveProveMethodVersions > for platform_version_version_drive_versions_DriveProveMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveProveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveProveMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . prove_elements) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove_multiple_state_transition_results) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProveMethodVersions_ctor < > (prove_elements : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , prove_multiple_state_transition_results : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveProveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveProveMethodVersions { prove_elements , prove_multiple_state_transition_results }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProveMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveProveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProveMethodVersions_get_prove_elements < > (obj : * const platform_version_version_drive_versions_DriveProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_elements } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProveMethodVersions_get_prove_multiple_state_transition_results < > (obj : * const platform_version_version_drive_versions_DriveProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_multiple_state_transition_results } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProveMethodVersions_set_prove_elements < > (obj : * mut platform_version_version_drive_versions_DriveProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_elements = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProveMethodVersions_set_prove_multiple_state_transition_results < > (obj : * mut platform_version_version_drive_versions_DriveProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_multiple_state_transition_results = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveVoteContestedResourceInsertMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions { pub register_contested_resource_identity_vote : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub insert_stored_info_for_contested_resource_vote_poll : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub register_identity_vote : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_vote_poll_end_date_query_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveVoteContestedResourceInsertMethodVersions > for platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions) -> platform_version :: version :: drive_versions :: DriveVoteContestedResourceInsertMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVoteContestedResourceInsertMethodVersions { register_contested_resource_identity_vote : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . register_contested_resource_identity_vote) , insert_stored_info_for_contested_resource_vote_poll : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . insert_stored_info_for_contested_resource_vote_poll) , register_identity_vote : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . register_identity_vote) , add_vote_poll_end_date_query_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_vote_poll_end_date_query_operations) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveVoteContestedResourceInsertMethodVersions > for platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVoteContestedResourceInsertMethodVersions) -> * const platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions { register_contested_resource_identity_vote : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . register_contested_resource_identity_vote) , insert_stored_info_for_contested_resource_vote_poll : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . insert_stored_info_for_contested_resource_vote_poll) , register_identity_vote : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . register_identity_vote) , add_vote_poll_end_date_query_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_vote_poll_end_date_query_operations) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveVoteContestedResourceInsertMethodVersions > for platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . register_contested_resource_identity_vote) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_stored_info_for_contested_resource_vote_poll) ; ; ferment_interfaces :: unbox_any (ffi_ref . register_identity_vote) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_vote_poll_end_date_query_operations) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions_ctor < > (register_contested_resource_identity_vote : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , insert_stored_info_for_contested_resource_vote_poll : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , register_identity_vote : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_vote_poll_end_date_query_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions { register_contested_resource_identity_vote , insert_stored_info_for_contested_resource_vote_poll , register_identity_vote , add_vote_poll_end_date_query_operations }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions_get_register_contested_resource_identity_vote < > (obj : * const platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . register_contested_resource_identity_vote } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions_get_insert_stored_info_for_contested_resource_vote_poll < > (obj : * const platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . insert_stored_info_for_contested_resource_vote_poll } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions_get_register_identity_vote < > (obj : * const platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . register_identity_vote } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions_get_add_vote_poll_end_date_query_operations < > (obj : * const platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_vote_poll_end_date_query_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions_set_register_contested_resource_identity_vote < > (obj : * mut platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . register_contested_resource_identity_vote = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions_set_insert_stored_info_for_contested_resource_vote_poll < > (obj : * mut platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . insert_stored_info_for_contested_resource_vote_poll = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions_set_register_identity_vote < > (obj : * mut platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . register_identity_vote = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions_set_add_vote_poll_end_date_query_operations < > (obj : * mut platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_vote_poll_end_date_query_operations = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveIdentityUpdateMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions { pub update_identity_revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub merge_identity_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_identity_negative_credit_operation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub initialize_identity_revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub disable_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub re_enable_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_new_non_unique_keys_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_new_unique_keys_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_new_keys_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub insert_identity_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub initialize_negative_identity_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_to_identity_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_to_previous_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub apply_balance_change_from_fee_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_from_identity_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveIdentityUpdateMethodVersions > for platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityUpdateMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityUpdateMethodVersions { update_identity_revision : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update_identity_revision) , merge_identity_nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . merge_identity_nonce) , update_identity_negative_credit_operation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update_identity_negative_credit_operation) , initialize_identity_revision : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . initialize_identity_revision) , disable_identity_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . disable_identity_keys) , re_enable_identity_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . re_enable_identity_keys) , add_new_non_unique_keys_to_identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_new_non_unique_keys_to_identity) , add_new_unique_keys_to_identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_new_unique_keys_to_identity) , add_new_keys_to_identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_new_keys_to_identity) , insert_identity_balance : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . insert_identity_balance) , initialize_negative_identity_balance : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . initialize_negative_identity_balance) , add_to_identity_balance : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_to_identity_balance) , add_to_previous_balance : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_to_previous_balance) , apply_balance_change_from_fee_to_identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . apply_balance_change_from_fee_to_identity) , remove_from_identity_balance : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . remove_from_identity_balance) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveIdentityUpdateMethodVersions > for platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityUpdateMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions { update_identity_revision : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update_identity_revision) , merge_identity_nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . merge_identity_nonce) , update_identity_negative_credit_operation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update_identity_negative_credit_operation) , initialize_identity_revision : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . initialize_identity_revision) , disable_identity_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . disable_identity_keys) , re_enable_identity_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . re_enable_identity_keys) , add_new_non_unique_keys_to_identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_new_non_unique_keys_to_identity) , add_new_unique_keys_to_identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_new_unique_keys_to_identity) , add_new_keys_to_identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_new_keys_to_identity) , insert_identity_balance : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . insert_identity_balance) , initialize_negative_identity_balance : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . initialize_negative_identity_balance) , add_to_identity_balance : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_to_identity_balance) , add_to_previous_balance : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_to_previous_balance) , apply_balance_change_from_fee_to_identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . apply_balance_change_from_fee_to_identity) , remove_from_identity_balance : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . remove_from_identity_balance) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveIdentityUpdateMethodVersions > for platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . update_identity_revision) ; ; ferment_interfaces :: unbox_any (ffi_ref . merge_identity_nonce) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_identity_negative_credit_operation) ; ; ferment_interfaces :: unbox_any (ffi_ref . initialize_identity_revision) ; ; ferment_interfaces :: unbox_any (ffi_ref . disable_identity_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . re_enable_identity_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_new_non_unique_keys_to_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_new_unique_keys_to_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_new_keys_to_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_identity_balance) ; ; ferment_interfaces :: unbox_any (ffi_ref . initialize_negative_identity_balance) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_to_identity_balance) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_to_previous_balance) ; ; ferment_interfaces :: unbox_any (ffi_ref . apply_balance_change_from_fee_to_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_from_identity_balance) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_ctor < > (update_identity_revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , merge_identity_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_identity_negative_credit_operation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , initialize_identity_revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , disable_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , re_enable_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_new_non_unique_keys_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_new_unique_keys_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_new_keys_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , insert_identity_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , initialize_negative_identity_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_to_identity_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_to_previous_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , apply_balance_change_from_fee_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_from_identity_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions { update_identity_revision , merge_identity_nonce , update_identity_negative_credit_operation , initialize_identity_revision , disable_identity_keys , re_enable_identity_keys , add_new_non_unique_keys_to_identity , add_new_unique_keys_to_identity , add_new_keys_to_identity , insert_identity_balance , initialize_negative_identity_balance , add_to_identity_balance , add_to_previous_balance , apply_balance_change_from_fee_to_identity , remove_from_identity_balance }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_update_identity_revision < > (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_identity_revision } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_merge_identity_nonce < > (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . merge_identity_nonce } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_update_identity_negative_credit_operation < > (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_identity_negative_credit_operation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_initialize_identity_revision < > (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . initialize_identity_revision } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_disable_identity_keys < > (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . disable_identity_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_re_enable_identity_keys < > (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . re_enable_identity_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_add_new_non_unique_keys_to_identity < > (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_new_non_unique_keys_to_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_add_new_unique_keys_to_identity < > (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_new_unique_keys_to_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_add_new_keys_to_identity < > (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_new_keys_to_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_insert_identity_balance < > (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . insert_identity_balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_initialize_negative_identity_balance < > (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . initialize_negative_identity_balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_add_to_identity_balance < > (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_to_identity_balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_add_to_previous_balance < > (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_to_previous_balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_apply_balance_change_from_fee_to_identity < > (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . apply_balance_change_from_fee_to_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_remove_from_identity_balance < > (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_from_identity_balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_update_identity_revision < > (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_identity_revision = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_merge_identity_nonce < > (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . merge_identity_nonce = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_update_identity_negative_credit_operation < > (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_identity_negative_credit_operation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_initialize_identity_revision < > (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . initialize_identity_revision = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_disable_identity_keys < > (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . disable_identity_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_re_enable_identity_keys < > (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . re_enable_identity_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_add_new_non_unique_keys_to_identity < > (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_new_non_unique_keys_to_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_add_new_unique_keys_to_identity < > (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_new_unique_keys_to_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_add_new_keys_to_identity < > (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_new_keys_to_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_insert_identity_balance < > (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . insert_identity_balance = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_initialize_negative_identity_balance < > (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . initialize_negative_identity_balance = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_add_to_identity_balance < > (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_to_identity_balance = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_add_to_previous_balance < > (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_to_previous_balance = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_apply_balance_change_from_fee_to_identity < > (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . apply_balance_change_from_fee_to_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_remove_from_identity_balance < > (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_from_identity_balance = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveIdentityWithdrawalDocumentMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions { pub fetch_oldest_withdrawal_documents_by_status : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub find_up_to_100_withdrawal_documents_by_status_and_transaction_indices : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveIdentityWithdrawalDocumentMethodVersions > for platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityWithdrawalDocumentMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityWithdrawalDocumentMethodVersions { fetch_oldest_withdrawal_documents_by_status : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_oldest_withdrawal_documents_by_status) , find_up_to_100_withdrawal_documents_by_status_and_transaction_indices : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . find_up_to_100_withdrawal_documents_by_status_and_transaction_indices) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveIdentityWithdrawalDocumentMethodVersions > for platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityWithdrawalDocumentMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions { fetch_oldest_withdrawal_documents_by_status : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_oldest_withdrawal_documents_by_status) , find_up_to_100_withdrawal_documents_by_status_and_transaction_indices : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . find_up_to_100_withdrawal_documents_by_status_and_transaction_indices) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveIdentityWithdrawalDocumentMethodVersions > for platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_oldest_withdrawal_documents_by_status) ; ; ferment_interfaces :: unbox_any (ffi_ref . find_up_to_100_withdrawal_documents_by_status_and_transaction_indices) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions_ctor < > (fetch_oldest_withdrawal_documents_by_status : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , find_up_to_100_withdrawal_documents_by_status_and_transaction_indices : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions { fetch_oldest_withdrawal_documents_by_status , find_up_to_100_withdrawal_documents_by_status_and_transaction_indices }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions_get_fetch_oldest_withdrawal_documents_by_status < > (obj : * const platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_oldest_withdrawal_documents_by_status } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions_get_find_up_to_100_withdrawal_documents_by_status_and_transaction_indices < > (obj : * const platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . find_up_to_100_withdrawal_documents_by_status_and_transaction_indices } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions_set_fetch_oldest_withdrawal_documents_by_status < > (obj : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_oldest_withdrawal_documents_by_status = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions_set_find_up_to_100_withdrawal_documents_by_status_and_transaction_indices < > (obj : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . find_up_to_100_withdrawal_documents_by_status_and_transaction_indices = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveOperationsMethodVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveOperationsMethodVersion { pub rollback_transaction : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub drop_cache : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub commit_transaction : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub apply_partial_batch_low_level_drive_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub apply_partial_batch_grovedb_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub apply_batch_low_level_drive_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub apply_batch_grovedb_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveOperationsMethodVersion > for platform_version_version_drive_versions_DriveOperationsMethodVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveOperationsMethodVersion) -> platform_version :: version :: drive_versions :: DriveOperationsMethodVersion { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveOperationsMethodVersion { rollback_transaction : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . rollback_transaction) , drop_cache : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . drop_cache) , commit_transaction : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . commit_transaction) , apply_partial_batch_low_level_drive_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . apply_partial_batch_low_level_drive_operations) , apply_partial_batch_grovedb_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . apply_partial_batch_grovedb_operations) , apply_batch_low_level_drive_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . apply_batch_low_level_drive_operations) , apply_batch_grovedb_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . apply_batch_grovedb_operations) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveOperationsMethodVersion > for platform_version_version_drive_versions_DriveOperationsMethodVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveOperationsMethodVersion) -> * const platform_version_version_drive_versions_DriveOperationsMethodVersion { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveOperationsMethodVersion { rollback_transaction : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . rollback_transaction) , drop_cache : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . drop_cache) , commit_transaction : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . commit_transaction) , apply_partial_batch_low_level_drive_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . apply_partial_batch_low_level_drive_operations) , apply_partial_batch_grovedb_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . apply_partial_batch_grovedb_operations) , apply_batch_low_level_drive_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . apply_batch_low_level_drive_operations) , apply_batch_grovedb_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . apply_batch_grovedb_operations) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveOperationsMethodVersion > for platform_version_version_drive_versions_DriveOperationsMethodVersion { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveOperationsMethodVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveOperationsMethodVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . rollback_transaction) ; ; ferment_interfaces :: unbox_any (ffi_ref . drop_cache) ; ; ferment_interfaces :: unbox_any (ffi_ref . commit_transaction) ; ; ferment_interfaces :: unbox_any (ffi_ref . apply_partial_batch_low_level_drive_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . apply_partial_batch_grovedb_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . apply_batch_low_level_drive_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . apply_batch_grovedb_operations) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_ctor < > (rollback_transaction : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , drop_cache : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , commit_transaction : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , apply_partial_batch_low_level_drive_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , apply_partial_batch_grovedb_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , apply_batch_low_level_drive_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , apply_batch_grovedb_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveOperationsMethodVersion { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveOperationsMethodVersion { rollback_transaction , drop_cache , commit_transaction , apply_partial_batch_low_level_drive_operations , apply_partial_batch_grovedb_operations , apply_batch_low_level_drive_operations , apply_batch_grovedb_operations }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveOperationsMethodVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_get_rollback_transaction < > (obj : * const platform_version_version_drive_versions_DriveOperationsMethodVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . rollback_transaction } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_get_drop_cache < > (obj : * const platform_version_version_drive_versions_DriveOperationsMethodVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . drop_cache } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_get_commit_transaction < > (obj : * const platform_version_version_drive_versions_DriveOperationsMethodVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . commit_transaction } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_get_apply_partial_batch_low_level_drive_operations < > (obj : * const platform_version_version_drive_versions_DriveOperationsMethodVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . apply_partial_batch_low_level_drive_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_get_apply_partial_batch_grovedb_operations < > (obj : * const platform_version_version_drive_versions_DriveOperationsMethodVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . apply_partial_batch_grovedb_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_get_apply_batch_low_level_drive_operations < > (obj : * const platform_version_version_drive_versions_DriveOperationsMethodVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . apply_batch_low_level_drive_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_get_apply_batch_grovedb_operations < > (obj : * const platform_version_version_drive_versions_DriveOperationsMethodVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . apply_batch_grovedb_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_set_rollback_transaction < > (obj : * mut platform_version_version_drive_versions_DriveOperationsMethodVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . rollback_transaction = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_set_drop_cache < > (obj : * mut platform_version_version_drive_versions_DriveOperationsMethodVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . drop_cache = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_set_commit_transaction < > (obj : * mut platform_version_version_drive_versions_DriveOperationsMethodVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . commit_transaction = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_set_apply_partial_batch_low_level_drive_operations < > (obj : * mut platform_version_version_drive_versions_DriveOperationsMethodVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . apply_partial_batch_low_level_drive_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_set_apply_partial_batch_grovedb_operations < > (obj : * mut platform_version_version_drive_versions_DriveOperationsMethodVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . apply_partial_batch_grovedb_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_set_apply_batch_low_level_drive_operations < > (obj : * mut platform_version_version_drive_versions_DriveOperationsMethodVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . apply_batch_low_level_drive_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_set_apply_batch_grovedb_operations < > (obj : * mut platform_version_version_drive_versions_DriveOperationsMethodVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . apply_batch_grovedb_operations = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionQueueMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions { pub add_enqueue_untied_withdrawal_transaction_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub dequeue_untied_withdrawal_transactions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionQueueMethodVersions > for platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionQueueMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionQueueMethodVersions { add_enqueue_untied_withdrawal_transaction_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_enqueue_untied_withdrawal_transaction_operations) , dequeue_untied_withdrawal_transactions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . dequeue_untied_withdrawal_transactions) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionQueueMethodVersions > for platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionQueueMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions { add_enqueue_untied_withdrawal_transaction_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_enqueue_untied_withdrawal_transaction_operations) , dequeue_untied_withdrawal_transactions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . dequeue_untied_withdrawal_transactions) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionQueueMethodVersions > for platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_enqueue_untied_withdrawal_transaction_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . dequeue_untied_withdrawal_transactions) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions_ctor < > (add_enqueue_untied_withdrawal_transaction_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , dequeue_untied_withdrawal_transactions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions { add_enqueue_untied_withdrawal_transaction_operations , dequeue_untied_withdrawal_transactions }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions_get_add_enqueue_untied_withdrawal_transaction_operations < > (obj : * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_enqueue_untied_withdrawal_transaction_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions_get_dequeue_untied_withdrawal_transactions < > (obj : * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . dequeue_untied_withdrawal_transactions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions_set_add_enqueue_untied_withdrawal_transaction_operations < > (obj : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_enqueue_untied_withdrawal_transaction_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions_set_dequeue_untied_withdrawal_transactions < > (obj : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . dequeue_untied_withdrawal_transactions = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveAssetLockMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveAssetLockMethodVersions { pub add_asset_lock_outpoint : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_estimation_costs_for_adding_asset_lock : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_asset_lock_outpoint_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveAssetLockMethodVersions > for platform_version_version_drive_versions_DriveAssetLockMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveAssetLockMethodVersions) -> platform_version :: version :: drive_versions :: DriveAssetLockMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveAssetLockMethodVersions { add_asset_lock_outpoint : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_asset_lock_outpoint) , add_estimation_costs_for_adding_asset_lock : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_estimation_costs_for_adding_asset_lock) , fetch_asset_lock_outpoint_info : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_asset_lock_outpoint_info) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveAssetLockMethodVersions > for platform_version_version_drive_versions_DriveAssetLockMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveAssetLockMethodVersions) -> * const platform_version_version_drive_versions_DriveAssetLockMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveAssetLockMethodVersions { add_asset_lock_outpoint : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_asset_lock_outpoint) , add_estimation_costs_for_adding_asset_lock : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_estimation_costs_for_adding_asset_lock) , fetch_asset_lock_outpoint_info : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_asset_lock_outpoint_info) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveAssetLockMethodVersions > for platform_version_version_drive_versions_DriveAssetLockMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveAssetLockMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveAssetLockMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_asset_lock_outpoint) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_estimation_costs_for_adding_asset_lock) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_asset_lock_outpoint_info) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveAssetLockMethodVersions_ctor < > (add_asset_lock_outpoint : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_estimation_costs_for_adding_asset_lock : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_asset_lock_outpoint_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveAssetLockMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveAssetLockMethodVersions { add_asset_lock_outpoint , add_estimation_costs_for_adding_asset_lock , fetch_asset_lock_outpoint_info }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveAssetLockMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveAssetLockMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveAssetLockMethodVersions_get_add_asset_lock_outpoint < > (obj : * const platform_version_version_drive_versions_DriveAssetLockMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_asset_lock_outpoint } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveAssetLockMethodVersions_get_add_estimation_costs_for_adding_asset_lock < > (obj : * const platform_version_version_drive_versions_DriveAssetLockMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_estimation_costs_for_adding_asset_lock } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveAssetLockMethodVersions_get_fetch_asset_lock_outpoint_info < > (obj : * const platform_version_version_drive_versions_DriveAssetLockMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_asset_lock_outpoint_info } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveAssetLockMethodVersions_set_add_asset_lock_outpoint < > (obj : * mut platform_version_version_drive_versions_DriveAssetLockMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_asset_lock_outpoint = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveAssetLockMethodVersions_set_add_estimation_costs_for_adding_asset_lock < > (obj : * mut platform_version_version_drive_versions_DriveAssetLockMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_estimation_costs_for_adding_asset_lock = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveAssetLockMethodVersions_set_fetch_asset_lock_outpoint_info < > (obj : * mut platform_version_version_drive_versions_DriveAssetLockMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_asset_lock_outpoint_info = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveStructureVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveStructureVersion { pub document_indexes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub identity_indexes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub pools : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveStructureVersion > for platform_version_version_drive_versions_DriveStructureVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveStructureVersion) -> platform_version :: version :: drive_versions :: DriveStructureVersion { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveStructureVersion { document_indexes : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document_indexes) , identity_indexes : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_indexes) , pools : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . pools) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveStructureVersion > for platform_version_version_drive_versions_DriveStructureVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveStructureVersion) -> * const platform_version_version_drive_versions_DriveStructureVersion { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveStructureVersion { document_indexes : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document_indexes) , identity_indexes : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_indexes) , pools : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . pools) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveStructureVersion > for platform_version_version_drive_versions_DriveStructureVersion { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveStructureVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveStructureVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document_indexes) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_indexes) ; ; ferment_interfaces :: unbox_any (ffi_ref . pools) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStructureVersion_ctor < > (document_indexes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , identity_indexes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pools : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) -> * mut platform_version_version_drive_versions_DriveStructureVersion { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveStructureVersion { document_indexes , identity_indexes , pools }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStructureVersion_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveStructureVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStructureVersion_get_document_indexes < > (obj : * const platform_version_version_drive_versions_DriveStructureVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . document_indexes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStructureVersion_get_identity_indexes < > (obj : * const platform_version_version_drive_versions_DriveStructureVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identity_indexes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStructureVersion_get_pools < > (obj : * const platform_version_version_drive_versions_DriveStructureVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . pools } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStructureVersion_set_document_indexes < > (obj : * mut platform_version_version_drive_versions_DriveStructureVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . document_indexes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStructureVersion_set_identity_indexes < > (obj : * mut platform_version_version_drive_versions_DriveStructureVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identity_indexes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStructureVersion_set_pools < > (obj : * mut platform_version_version_drive_versions_DriveStructureVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . pools = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveGroveCostMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveGroveCostMethodVersions { pub grove_batch_operations_costs : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveGroveCostMethodVersions > for platform_version_version_drive_versions_DriveGroveCostMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveGroveCostMethodVersions) -> platform_version :: version :: drive_versions :: DriveGroveCostMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveGroveCostMethodVersions { grove_batch_operations_costs : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_batch_operations_costs) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveGroveCostMethodVersions > for platform_version_version_drive_versions_DriveGroveCostMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveGroveCostMethodVersions) -> * const platform_version_version_drive_versions_DriveGroveCostMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveGroveCostMethodVersions { grove_batch_operations_costs : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_batch_operations_costs) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveGroveCostMethodVersions > for platform_version_version_drive_versions_DriveGroveCostMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveGroveCostMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveGroveCostMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . grove_batch_operations_costs) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveCostMethodVersions_ctor < > (grove_batch_operations_costs : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveGroveCostMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveGroveCostMethodVersions { grove_batch_operations_costs }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveCostMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveGroveCostMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveCostMethodVersions_get_grove_batch_operations_costs < > (obj : * const platform_version_version_drive_versions_DriveGroveCostMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_batch_operations_costs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveCostMethodVersions_set_grove_batch_operations_costs < > (obj : * mut platform_version_version_drive_versions_DriveGroveCostMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_batch_operations_costs = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveVerifyContractMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVerifyContractMethodVersions { pub verify_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_contract_history : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveVerifyContractMethodVersions > for platform_version_version_drive_versions_DriveVerifyContractMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVerifyContractMethodVersions) -> platform_version :: version :: drive_versions :: DriveVerifyContractMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVerifyContractMethodVersions { verify_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_contract) , verify_contract_history : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_contract_history) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveVerifyContractMethodVersions > for platform_version_version_drive_versions_DriveVerifyContractMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVerifyContractMethodVersions) -> * const platform_version_version_drive_versions_DriveVerifyContractMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyContractMethodVersions { verify_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_contract) , verify_contract_history : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_contract_history) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveVerifyContractMethodVersions > for platform_version_version_drive_versions_DriveVerifyContractMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifyContractMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVerifyContractMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . verify_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_contract_history) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyContractMethodVersions_ctor < > (verify_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_contract_history : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveVerifyContractMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyContractMethodVersions { verify_contract , verify_contract_history }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyContractMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveVerifyContractMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyContractMethodVersions_get_verify_contract < > (obj : * const platform_version_version_drive_versions_DriveVerifyContractMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyContractMethodVersions_get_verify_contract_history < > (obj : * const platform_version_version_drive_versions_DriveVerifyContractMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_contract_history } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyContractMethodVersions_set_verify_contract < > (obj : * mut platform_version_version_drive_versions_DriveVerifyContractMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyContractMethodVersions_set_verify_contract_history < > (obj : * mut platform_version_version_drive_versions_DriveVerifyContractMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_contract_history = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveStateTransitionOperationMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions { pub finalization_tasks : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub contracts : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDataContractOperationMethodVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveStateTransitionOperationMethodVersions > for platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions) -> platform_version :: version :: drive_versions :: DriveStateTransitionOperationMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveStateTransitionOperationMethodVersions { finalization_tasks : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . finalization_tasks) , contracts : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contracts) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveStateTransitionOperationMethodVersions > for platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveStateTransitionOperationMethodVersions) -> * const platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions { finalization_tasks : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . finalization_tasks) , contracts : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contracts) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveStateTransitionOperationMethodVersions > for platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . finalization_tasks) ; ; ferment_interfaces :: unbox_any (ffi_ref . contracts) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions_ctor < > (finalization_tasks : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , contracts : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDataContractOperationMethodVersions) -> * mut platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions { finalization_tasks , contracts }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions_get_finalization_tasks < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . finalization_tasks } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions_get_contracts < > (obj : * const platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDataContractOperationMethodVersions { (* obj) . contracts } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions_set_finalization_tasks < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . finalization_tasks = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions_set_contracts < > (obj : * mut platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDataContractOperationMethodVersions) { (* obj) . contracts = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveDataContractOperationMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveDataContractOperationMethodVersions { pub finalization_tasks : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveDataContractOperationMethodVersions > for platform_version_version_drive_versions_DriveDataContractOperationMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveDataContractOperationMethodVersions) -> platform_version :: version :: drive_versions :: DriveDataContractOperationMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveDataContractOperationMethodVersions { finalization_tasks : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . finalization_tasks) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveDataContractOperationMethodVersions > for platform_version_version_drive_versions_DriveDataContractOperationMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveDataContractOperationMethodVersions) -> * const platform_version_version_drive_versions_DriveDataContractOperationMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDataContractOperationMethodVersions { finalization_tasks : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . finalization_tasks) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveDataContractOperationMethodVersions > for platform_version_version_drive_versions_DriveDataContractOperationMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveDataContractOperationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveDataContractOperationMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . finalization_tasks) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDataContractOperationMethodVersions_ctor < > (finalization_tasks : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveDataContractOperationMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDataContractOperationMethodVersions { finalization_tasks }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDataContractOperationMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveDataContractOperationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDataContractOperationMethodVersions_get_finalization_tasks < > (obj : * const platform_version_version_drive_versions_DriveDataContractOperationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . finalization_tasks } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDataContractOperationMethodVersions_set_finalization_tasks < > (obj : * mut platform_version_version_drive_versions_DriveDataContractOperationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . finalization_tasks = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveVerifyVoteMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVerifyVoteMethodVersions { pub verify_masternode_vote : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_start_at_contender_in_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_vote_poll_votes_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_identity_votes_given_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_vote_poll_vote_state_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_contests_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_vote_polls_by_end_date_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_specialized_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveVerifyVoteMethodVersions > for platform_version_version_drive_versions_DriveVerifyVoteMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVerifyVoteMethodVersions) -> platform_version :: version :: drive_versions :: DriveVerifyVoteMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVerifyVoteMethodVersions { verify_masternode_vote : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_masternode_vote) , verify_start_at_contender_in_proof : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_start_at_contender_in_proof) , verify_vote_poll_votes_proof : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_vote_poll_votes_proof) , verify_identity_votes_given_proof : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_identity_votes_given_proof) , verify_vote_poll_vote_state_proof : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_vote_poll_vote_state_proof) , verify_contests_proof : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_contests_proof) , verify_vote_polls_by_end_date_proof : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_vote_polls_by_end_date_proof) , verify_specialized_balance : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_specialized_balance) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveVerifyVoteMethodVersions > for platform_version_version_drive_versions_DriveVerifyVoteMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVerifyVoteMethodVersions) -> * const platform_version_version_drive_versions_DriveVerifyVoteMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyVoteMethodVersions { verify_masternode_vote : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_masternode_vote) , verify_start_at_contender_in_proof : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_start_at_contender_in_proof) , verify_vote_poll_votes_proof : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_vote_poll_votes_proof) , verify_identity_votes_given_proof : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_identity_votes_given_proof) , verify_vote_poll_vote_state_proof : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_vote_poll_vote_state_proof) , verify_contests_proof : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_contests_proof) , verify_vote_polls_by_end_date_proof : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_vote_polls_by_end_date_proof) , verify_specialized_balance : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_specialized_balance) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveVerifyVoteMethodVersions > for platform_version_version_drive_versions_DriveVerifyVoteMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifyVoteMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVerifyVoteMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . verify_masternode_vote) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_start_at_contender_in_proof) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_vote_poll_votes_proof) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_identity_votes_given_proof) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_vote_poll_vote_state_proof) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_contests_proof) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_vote_polls_by_end_date_proof) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_specialized_balance) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyVoteMethodVersions_ctor < > (verify_masternode_vote : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_start_at_contender_in_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_vote_poll_votes_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_identity_votes_given_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_vote_poll_vote_state_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_contests_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_vote_polls_by_end_date_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_specialized_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveVerifyVoteMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyVoteMethodVersions { verify_masternode_vote , verify_start_at_contender_in_proof , verify_vote_poll_votes_proof , verify_identity_votes_given_proof , verify_vote_poll_vote_state_proof , verify_contests_proof , verify_vote_polls_by_end_date_proof , verify_specialized_balance }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyVoteMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveVerifyVoteMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyVoteMethodVersions_get_verify_masternode_vote < > (obj : * const platform_version_version_drive_versions_DriveVerifyVoteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_masternode_vote } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyVoteMethodVersions_get_verify_start_at_contender_in_proof < > (obj : * const platform_version_version_drive_versions_DriveVerifyVoteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_start_at_contender_in_proof } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyVoteMethodVersions_get_verify_vote_poll_votes_proof < > (obj : * const platform_version_version_drive_versions_DriveVerifyVoteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_vote_poll_votes_proof } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyVoteMethodVersions_get_verify_identity_votes_given_proof < > (obj : * const platform_version_version_drive_versions_DriveVerifyVoteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_identity_votes_given_proof } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyVoteMethodVersions_get_verify_vote_poll_vote_state_proof < > (obj : * const platform_version_version_drive_versions_DriveVerifyVoteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_vote_poll_vote_state_proof } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyVoteMethodVersions_get_verify_contests_proof < > (obj : * const platform_version_version_drive_versions_DriveVerifyVoteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_contests_proof } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyVoteMethodVersions_get_verify_vote_polls_by_end_date_proof < > (obj : * const platform_version_version_drive_versions_DriveVerifyVoteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_vote_polls_by_end_date_proof } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyVoteMethodVersions_get_verify_specialized_balance < > (obj : * const platform_version_version_drive_versions_DriveVerifyVoteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_specialized_balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyVoteMethodVersions_set_verify_masternode_vote < > (obj : * mut platform_version_version_drive_versions_DriveVerifyVoteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_masternode_vote = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyVoteMethodVersions_set_verify_start_at_contender_in_proof < > (obj : * mut platform_version_version_drive_versions_DriveVerifyVoteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_start_at_contender_in_proof = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyVoteMethodVersions_set_verify_vote_poll_votes_proof < > (obj : * mut platform_version_version_drive_versions_DriveVerifyVoteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_vote_poll_votes_proof = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyVoteMethodVersions_set_verify_identity_votes_given_proof < > (obj : * mut platform_version_version_drive_versions_DriveVerifyVoteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_identity_votes_given_proof = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyVoteMethodVersions_set_verify_vote_poll_vote_state_proof < > (obj : * mut platform_version_version_drive_versions_DriveVerifyVoteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_vote_poll_vote_state_proof = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyVoteMethodVersions_set_verify_contests_proof < > (obj : * mut platform_version_version_drive_versions_DriveVerifyVoteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_contests_proof = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyVoteMethodVersions_set_verify_vote_polls_by_end_date_proof < > (obj : * mut platform_version_version_drive_versions_DriveVerifyVoteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_vote_polls_by_end_date_proof = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyVoteMethodVersions_set_verify_specialized_balance < > (obj : * mut platform_version_version_drive_versions_DriveVerifyVoteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_specialized_balance = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveBatchOperationsMethodVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveBatchOperationsMethodVersion { pub convert_drive_operations_to_grove_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub apply_drive_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveBatchOperationsMethodVersion > for platform_version_version_drive_versions_DriveBatchOperationsMethodVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveBatchOperationsMethodVersion) -> platform_version :: version :: drive_versions :: DriveBatchOperationsMethodVersion { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveBatchOperationsMethodVersion { convert_drive_operations_to_grove_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . convert_drive_operations_to_grove_operations) , apply_drive_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . apply_drive_operations) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveBatchOperationsMethodVersion > for platform_version_version_drive_versions_DriveBatchOperationsMethodVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveBatchOperationsMethodVersion) -> * const platform_version_version_drive_versions_DriveBatchOperationsMethodVersion { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveBatchOperationsMethodVersion { convert_drive_operations_to_grove_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . convert_drive_operations_to_grove_operations) , apply_drive_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . apply_drive_operations) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveBatchOperationsMethodVersion > for platform_version_version_drive_versions_DriveBatchOperationsMethodVersion { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveBatchOperationsMethodVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveBatchOperationsMethodVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . convert_drive_operations_to_grove_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . apply_drive_operations) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBatchOperationsMethodVersion_ctor < > (convert_drive_operations_to_grove_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , apply_drive_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveBatchOperationsMethodVersion { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveBatchOperationsMethodVersion { convert_drive_operations_to_grove_operations , apply_drive_operations }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBatchOperationsMethodVersion_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveBatchOperationsMethodVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBatchOperationsMethodVersion_get_convert_drive_operations_to_grove_operations < > (obj : * const platform_version_version_drive_versions_DriveBatchOperationsMethodVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . convert_drive_operations_to_grove_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBatchOperationsMethodVersion_get_apply_drive_operations < > (obj : * const platform_version_version_drive_versions_DriveBatchOperationsMethodVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . apply_drive_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBatchOperationsMethodVersion_set_convert_drive_operations_to_grove_operations < > (obj : * mut platform_version_version_drive_versions_DriveBatchOperationsMethodVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . convert_drive_operations_to_grove_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBatchOperationsMethodVersion_set_apply_drive_operations < > (obj : * mut platform_version_version_drive_versions_DriveBatchOperationsMethodVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . apply_drive_operations = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveVerifyMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVerifyMethodVersions { pub contract : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyContractMethodVersions , pub document : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions , pub identity : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , pub single_document : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions , pub system : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifySystemMethodVersions , pub voting : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyVoteMethodVersions , pub state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveVerifyMethodVersions > for platform_version_version_drive_versions_DriveVerifyMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVerifyMethodVersions) -> platform_version :: version :: drive_versions :: DriveVerifyMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVerifyMethodVersions { contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contract) , document : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document) , identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity) , single_document : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . single_document) , system : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . system) , voting : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . voting) , state_transition : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . state_transition) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveVerifyMethodVersions > for platform_version_version_drive_versions_DriveVerifyMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVerifyMethodVersions) -> * const platform_version_version_drive_versions_DriveVerifyMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyMethodVersions { contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contract) , document : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document) , identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity) , single_document : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . single_document) , system : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . system) , voting : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . voting) , state_transition : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . state_transition) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveVerifyMethodVersions > for platform_version_version_drive_versions_DriveVerifyMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifyMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVerifyMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . document) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . single_document) ; ; ferment_interfaces :: unbox_any (ffi_ref . system) ; ; ferment_interfaces :: unbox_any (ffi_ref . voting) ; ; ferment_interfaces :: unbox_any (ffi_ref . state_transition) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_ctor < > (contract : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyContractMethodVersions , document : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions , identity : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , single_document : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions , system : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifySystemMethodVersions , voting : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyVoteMethodVersions , state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions) -> * mut platform_version_version_drive_versions_DriveVerifyMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyMethodVersions { contract , document , identity , single_document , system , voting , state_transition }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveVerifyMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_get_contract < > (obj : * const platform_version_version_drive_versions_DriveVerifyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyContractMethodVersions { (* obj) . contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_get_document < > (obj : * const platform_version_version_drive_versions_DriveVerifyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions { (* obj) . document } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_get_identity < > (obj : * const platform_version_version_drive_versions_DriveVerifyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions { (* obj) . identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_get_single_document < > (obj : * const platform_version_version_drive_versions_DriveVerifyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions { (* obj) . single_document } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_get_system < > (obj : * const platform_version_version_drive_versions_DriveVerifyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifySystemMethodVersions { (* obj) . system } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_get_voting < > (obj : * const platform_version_version_drive_versions_DriveVerifyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyVoteMethodVersions { (* obj) . voting } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_get_state_transition < > (obj : * const platform_version_version_drive_versions_DriveVerifyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions { (* obj) . state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_set_contract < > (obj : * mut platform_version_version_drive_versions_DriveVerifyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyContractMethodVersions) { (* obj) . contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_set_document < > (obj : * mut platform_version_version_drive_versions_DriveVerifyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions) { (* obj) . document = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_set_identity < > (obj : * mut platform_version_version_drive_versions_DriveVerifyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) { (* obj) . identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_set_single_document < > (obj : * mut platform_version_version_drive_versions_DriveVerifyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions) { (* obj) . single_document = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_set_system < > (obj : * mut platform_version_version_drive_versions_DriveVerifyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifySystemMethodVersions) { (* obj) . system = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_set_voting < > (obj : * mut platform_version_version_drive_versions_DriveVerifyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyVoteMethodVersions) { (* obj) . voting = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_set_state_transition < > (obj : * mut platform_version_version_drive_versions_DriveVerifyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions) { (* obj) . state_transition = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveVerifySystemMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVerifySystemMethodVersions { pub verify_epoch_infos : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_elements : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_upgrade_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_upgrade_vote_status : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveVerifySystemMethodVersions > for platform_version_version_drive_versions_DriveVerifySystemMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVerifySystemMethodVersions) -> platform_version :: version :: drive_versions :: DriveVerifySystemMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVerifySystemMethodVersions { verify_epoch_infos : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_epoch_infos) , verify_elements : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_elements) , verify_upgrade_state : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_upgrade_state) , verify_upgrade_vote_status : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_upgrade_vote_status) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveVerifySystemMethodVersions > for platform_version_version_drive_versions_DriveVerifySystemMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVerifySystemMethodVersions) -> * const platform_version_version_drive_versions_DriveVerifySystemMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifySystemMethodVersions { verify_epoch_infos : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_epoch_infos) , verify_elements : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_elements) , verify_upgrade_state : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_upgrade_state) , verify_upgrade_vote_status : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_upgrade_vote_status) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveVerifySystemMethodVersions > for platform_version_version_drive_versions_DriveVerifySystemMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifySystemMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVerifySystemMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . verify_epoch_infos) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_elements) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_upgrade_state) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_upgrade_vote_status) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySystemMethodVersions_ctor < > (verify_epoch_infos : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_elements : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_upgrade_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_upgrade_vote_status : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveVerifySystemMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifySystemMethodVersions { verify_epoch_infos , verify_elements , verify_upgrade_state , verify_upgrade_vote_status }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySystemMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveVerifySystemMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySystemMethodVersions_get_verify_epoch_infos < > (obj : * const platform_version_version_drive_versions_DriveVerifySystemMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_epoch_infos } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySystemMethodVersions_get_verify_elements < > (obj : * const platform_version_version_drive_versions_DriveVerifySystemMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_elements } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySystemMethodVersions_get_verify_upgrade_state < > (obj : * const platform_version_version_drive_versions_DriveVerifySystemMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_upgrade_state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySystemMethodVersions_get_verify_upgrade_vote_status < > (obj : * const platform_version_version_drive_versions_DriveVerifySystemMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_upgrade_vote_status } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySystemMethodVersions_set_verify_epoch_infos < > (obj : * mut platform_version_version_drive_versions_DriveVerifySystemMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_epoch_infos = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySystemMethodVersions_set_verify_elements < > (obj : * mut platform_version_version_drive_versions_DriveVerifySystemMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_elements = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySystemMethodVersions_set_verify_upgrade_state < > (obj : * mut platform_version_version_drive_versions_DriveVerifySystemMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_upgrade_state = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySystemMethodVersions_set_verify_upgrade_vote_status < > (obj : * mut platform_version_version_drive_versions_DriveVerifySystemMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_upgrade_vote_status = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveIdentityKeyHashesToIdentityInsertMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions { pub add_estimation_costs_for_insert_non_unique_public_key_hash_reference : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_estimation_costs_for_insert_unique_public_key_hash_reference : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub insert_non_unique_public_key_hash_reference_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub insert_reference_to_non_unique_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub insert_reference_to_unique_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub insert_unique_public_key_hash_reference_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveIdentityKeyHashesToIdentityInsertMethodVersions > for platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityKeyHashesToIdentityInsertMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityKeyHashesToIdentityInsertMethodVersions { add_estimation_costs_for_insert_non_unique_public_key_hash_reference : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_estimation_costs_for_insert_non_unique_public_key_hash_reference) , add_estimation_costs_for_insert_unique_public_key_hash_reference : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_estimation_costs_for_insert_unique_public_key_hash_reference) , insert_non_unique_public_key_hash_reference_to_identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . insert_non_unique_public_key_hash_reference_to_identity) , insert_reference_to_non_unique_key : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . insert_reference_to_non_unique_key) , insert_reference_to_unique_key : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . insert_reference_to_unique_key) , insert_unique_public_key_hash_reference_to_identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . insert_unique_public_key_hash_reference_to_identity) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveIdentityKeyHashesToIdentityInsertMethodVersions > for platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityKeyHashesToIdentityInsertMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions { add_estimation_costs_for_insert_non_unique_public_key_hash_reference : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_estimation_costs_for_insert_non_unique_public_key_hash_reference) , add_estimation_costs_for_insert_unique_public_key_hash_reference : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_estimation_costs_for_insert_unique_public_key_hash_reference) , insert_non_unique_public_key_hash_reference_to_identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . insert_non_unique_public_key_hash_reference_to_identity) , insert_reference_to_non_unique_key : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . insert_reference_to_non_unique_key) , insert_reference_to_unique_key : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . insert_reference_to_unique_key) , insert_unique_public_key_hash_reference_to_identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . insert_unique_public_key_hash_reference_to_identity) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveIdentityKeyHashesToIdentityInsertMethodVersions > for platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_estimation_costs_for_insert_non_unique_public_key_hash_reference) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_estimation_costs_for_insert_unique_public_key_hash_reference) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_non_unique_public_key_hash_reference_to_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_reference_to_non_unique_key) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_reference_to_unique_key) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_unique_public_key_hash_reference_to_identity) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_ctor < > (add_estimation_costs_for_insert_non_unique_public_key_hash_reference : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_estimation_costs_for_insert_unique_public_key_hash_reference : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , insert_non_unique_public_key_hash_reference_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , insert_reference_to_non_unique_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , insert_reference_to_unique_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , insert_unique_public_key_hash_reference_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions { add_estimation_costs_for_insert_non_unique_public_key_hash_reference , add_estimation_costs_for_insert_unique_public_key_hash_reference , insert_non_unique_public_key_hash_reference_to_identity , insert_reference_to_non_unique_key , insert_reference_to_unique_key , insert_unique_public_key_hash_reference_to_identity }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_get_add_estimation_costs_for_insert_non_unique_public_key_hash_reference < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_estimation_costs_for_insert_non_unique_public_key_hash_reference } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_get_add_estimation_costs_for_insert_unique_public_key_hash_reference < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_estimation_costs_for_insert_unique_public_key_hash_reference } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_get_insert_non_unique_public_key_hash_reference_to_identity < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . insert_non_unique_public_key_hash_reference_to_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_get_insert_reference_to_non_unique_key < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . insert_reference_to_non_unique_key } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_get_insert_reference_to_unique_key < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . insert_reference_to_unique_key } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_get_insert_unique_public_key_hash_reference_to_identity < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . insert_unique_public_key_hash_reference_to_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_set_add_estimation_costs_for_insert_non_unique_public_key_hash_reference < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_estimation_costs_for_insert_non_unique_public_key_hash_reference = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_set_add_estimation_costs_for_insert_unique_public_key_hash_reference < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_estimation_costs_for_insert_unique_public_key_hash_reference = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_set_insert_non_unique_public_key_hash_reference_to_identity < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . insert_non_unique_public_key_hash_reference_to_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_set_insert_reference_to_non_unique_key < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . insert_reference_to_non_unique_key = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_set_insert_reference_to_unique_key < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . insert_reference_to_unique_key = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_set_insert_unique_public_key_hash_reference_to_identity < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . insert_unique_public_key_hash_reference_to_identity = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveVerifyStateTransitionMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions { pub verify_state_transition_was_executed_with_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveVerifyStateTransitionMethodVersions > for platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions) -> platform_version :: version :: drive_versions :: DriveVerifyStateTransitionMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVerifyStateTransitionMethodVersions { verify_state_transition_was_executed_with_proof : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_state_transition_was_executed_with_proof) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveVerifyStateTransitionMethodVersions > for platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVerifyStateTransitionMethodVersions) -> * const platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions { verify_state_transition_was_executed_with_proof : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_state_transition_was_executed_with_proof) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveVerifyStateTransitionMethodVersions > for platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . verify_state_transition_was_executed_with_proof) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions_ctor < > (verify_state_transition_was_executed_with_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions { verify_state_transition_was_executed_with_proof }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions_get_verify_state_transition_was_executed_with_proof < > (obj : * const platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_state_transition_was_executed_with_proof } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions_set_verify_state_transition_was_executed_with_proof < > (obj : * mut platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_state_transition_was_executed_with_proof = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveIdentityProveMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityProveMethodVersions { pub full_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub full_identities : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub identity_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub identity_contract_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub identities_contract_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub prove_full_identities_by_unique_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub prove_full_identity_by_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub prove_identity_id_by_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub prove_identity_ids_by_unique_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveIdentityProveMethodVersions > for platform_version_version_drive_versions_DriveIdentityProveMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityProveMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityProveMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityProveMethodVersions { full_identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . full_identity) , full_identities : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . full_identities) , identity_nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_nonce) , identity_contract_nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_contract_nonce) , identities_contract_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identities_contract_keys) , prove_full_identities_by_unique_public_key_hashes : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . prove_full_identities_by_unique_public_key_hashes) , prove_full_identity_by_unique_public_key_hash : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . prove_full_identity_by_unique_public_key_hash) , prove_identity_id_by_unique_public_key_hash : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . prove_identity_id_by_unique_public_key_hash) , prove_identity_ids_by_unique_public_key_hashes : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . prove_identity_ids_by_unique_public_key_hashes) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveIdentityProveMethodVersions > for platform_version_version_drive_versions_DriveIdentityProveMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityProveMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityProveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityProveMethodVersions { full_identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . full_identity) , full_identities : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . full_identities) , identity_nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_nonce) , identity_contract_nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_contract_nonce) , identities_contract_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identities_contract_keys) , prove_full_identities_by_unique_public_key_hashes : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . prove_full_identities_by_unique_public_key_hashes) , prove_full_identity_by_unique_public_key_hash : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . prove_full_identity_by_unique_public_key_hash) , prove_identity_id_by_unique_public_key_hash : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . prove_identity_id_by_unique_public_key_hash) , prove_identity_ids_by_unique_public_key_hashes : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . prove_identity_ids_by_unique_public_key_hashes) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveIdentityProveMethodVersions > for platform_version_version_drive_versions_DriveIdentityProveMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityProveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityProveMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . full_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . full_identities) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_nonce) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_contract_nonce) ; ; ferment_interfaces :: unbox_any (ffi_ref . identities_contract_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove_full_identities_by_unique_public_key_hashes) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove_full_identity_by_unique_public_key_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove_identity_id_by_unique_public_key_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove_identity_ids_by_unique_public_key_hashes) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_ctor < > (full_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , full_identities : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , identity_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , identity_contract_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , identities_contract_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , prove_full_identities_by_unique_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , prove_full_identity_by_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , prove_identity_id_by_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , prove_identity_ids_by_unique_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityProveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityProveMethodVersions { full_identity , full_identities , identity_nonce , identity_contract_nonce , identities_contract_keys , prove_full_identities_by_unique_public_key_hashes , prove_full_identity_by_unique_public_key_hash , prove_identity_id_by_unique_public_key_hash , prove_identity_ids_by_unique_public_key_hashes }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveIdentityProveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_get_full_identity < > (obj : * const platform_version_version_drive_versions_DriveIdentityProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . full_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_get_full_identities < > (obj : * const platform_version_version_drive_versions_DriveIdentityProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . full_identities } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_get_identity_nonce < > (obj : * const platform_version_version_drive_versions_DriveIdentityProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . identity_nonce } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_get_identity_contract_nonce < > (obj : * const platform_version_version_drive_versions_DriveIdentityProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . identity_contract_nonce } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_get_identities_contract_keys < > (obj : * const platform_version_version_drive_versions_DriveIdentityProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . identities_contract_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_get_prove_full_identities_by_unique_public_key_hashes < > (obj : * const platform_version_version_drive_versions_DriveIdentityProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_full_identities_by_unique_public_key_hashes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_get_prove_full_identity_by_unique_public_key_hash < > (obj : * const platform_version_version_drive_versions_DriveIdentityProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_full_identity_by_unique_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_get_prove_identity_id_by_unique_public_key_hash < > (obj : * const platform_version_version_drive_versions_DriveIdentityProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_identity_id_by_unique_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_get_prove_identity_ids_by_unique_public_key_hashes < > (obj : * const platform_version_version_drive_versions_DriveIdentityProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_identity_ids_by_unique_public_key_hashes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_set_full_identity < > (obj : * mut platform_version_version_drive_versions_DriveIdentityProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . full_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_set_full_identities < > (obj : * mut platform_version_version_drive_versions_DriveIdentityProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . full_identities = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_set_identity_nonce < > (obj : * mut platform_version_version_drive_versions_DriveIdentityProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . identity_nonce = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_set_identity_contract_nonce < > (obj : * mut platform_version_version_drive_versions_DriveIdentityProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . identity_contract_nonce = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_set_identities_contract_keys < > (obj : * mut platform_version_version_drive_versions_DriveIdentityProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . identities_contract_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_set_prove_full_identities_by_unique_public_key_hashes < > (obj : * mut platform_version_version_drive_versions_DriveIdentityProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_full_identities_by_unique_public_key_hashes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_set_prove_full_identity_by_unique_public_key_hash < > (obj : * mut platform_version_version_drive_versions_DriveIdentityProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_full_identity_by_unique_public_key_hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_set_prove_identity_id_by_unique_public_key_hash < > (obj : * mut platform_version_version_drive_versions_DriveIdentityProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_identity_id_by_unique_public_key_hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_set_prove_identity_ids_by_unique_public_key_hashes < > (obj : * mut platform_version_version_drive_versions_DriveIdentityProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_identity_ids_by_unique_public_key_hashes = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveDocumentMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveDocumentMethodVersions { pub query : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentQueryMethodVersions , pub delete : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , pub insert : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentInsertMethodVersions , pub insert_contested : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions , pub update : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions , pub estimation_costs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions , pub index_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveDocumentMethodVersions > for platform_version_version_drive_versions_DriveDocumentMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveDocumentMethodVersions) -> platform_version :: version :: drive_versions :: DriveDocumentMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveDocumentMethodVersions { query : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . query) , delete : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . delete) , insert : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . insert) , insert_contested : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . insert_contested) , update : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update) , estimation_costs : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . estimation_costs) , index_uniqueness : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . index_uniqueness) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveDocumentMethodVersions > for platform_version_version_drive_versions_DriveDocumentMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveDocumentMethodVersions) -> * const platform_version_version_drive_versions_DriveDocumentMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentMethodVersions { query : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . query) , delete : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . delete) , insert : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . insert) , insert_contested : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . insert_contested) , update : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update) , estimation_costs : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . estimation_costs) , index_uniqueness : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . index_uniqueness) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveDocumentMethodVersions > for platform_version_version_drive_versions_DriveDocumentMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveDocumentMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . query) ; ; ferment_interfaces :: unbox_any (ffi_ref . delete) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_contested) ; ; ferment_interfaces :: unbox_any (ffi_ref . update) ; ; ferment_interfaces :: unbox_any (ffi_ref . estimation_costs) ; ; ferment_interfaces :: unbox_any (ffi_ref . index_uniqueness) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_ctor < > (query : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentQueryMethodVersions , delete : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , insert : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentInsertMethodVersions , insert_contested : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions , update : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions , estimation_costs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions , index_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions) -> * mut platform_version_version_drive_versions_DriveDocumentMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentMethodVersions { query , delete , insert , insert_contested , update , estimation_costs , index_uniqueness }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveDocumentMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_get_query < > (obj : * const platform_version_version_drive_versions_DriveDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentQueryMethodVersions { (* obj) . query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_get_delete < > (obj : * const platform_version_version_drive_versions_DriveDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions { (* obj) . delete } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_get_insert < > (obj : * const platform_version_version_drive_versions_DriveDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentInsertMethodVersions { (* obj) . insert } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_get_insert_contested < > (obj : * const platform_version_version_drive_versions_DriveDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions { (* obj) . insert_contested } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_get_update < > (obj : * const platform_version_version_drive_versions_DriveDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions { (* obj) . update } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_get_estimation_costs < > (obj : * const platform_version_version_drive_versions_DriveDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions { (* obj) . estimation_costs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_get_index_uniqueness < > (obj : * const platform_version_version_drive_versions_DriveDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions { (* obj) . index_uniqueness } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_set_query < > (obj : * mut platform_version_version_drive_versions_DriveDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentQueryMethodVersions) { (* obj) . query = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_set_delete < > (obj : * mut platform_version_version_drive_versions_DriveDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) { (* obj) . delete = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_set_insert < > (obj : * mut platform_version_version_drive_versions_DriveDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) { (* obj) . insert = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_set_insert_contested < > (obj : * mut platform_version_version_drive_versions_DriveDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentInsertContestedMethodVersions) { (* obj) . insert_contested = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_set_update < > (obj : * mut platform_version_version_drive_versions_DriveDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) { (* obj) . update = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_set_estimation_costs < > (obj : * mut platform_version_version_drive_versions_DriveDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions) { (* obj) . estimation_costs = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_set_index_uniqueness < > (obj : * mut platform_version_version_drive_versions_DriveDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions) { (* obj) . index_uniqueness = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveIdentityFetchPartialIdentityMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions { pub fetch_identity_revision_with_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_identity_balance_with_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_identity_balance_with_keys_and_revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_identity_with_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveIdentityFetchPartialIdentityMethodVersions > for platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityFetchPartialIdentityMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityFetchPartialIdentityMethodVersions { fetch_identity_revision_with_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_identity_revision_with_keys) , fetch_identity_balance_with_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_identity_balance_with_keys) , fetch_identity_balance_with_keys_and_revision : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_identity_balance_with_keys_and_revision) , fetch_identity_with_balance : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_identity_with_balance) , fetch_identity_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_identity_keys) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveIdentityFetchPartialIdentityMethodVersions > for platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityFetchPartialIdentityMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions { fetch_identity_revision_with_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_identity_revision_with_keys) , fetch_identity_balance_with_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_identity_balance_with_keys) , fetch_identity_balance_with_keys_and_revision : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_identity_balance_with_keys_and_revision) , fetch_identity_with_balance : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_identity_with_balance) , fetch_identity_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_identity_keys) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveIdentityFetchPartialIdentityMethodVersions > for platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_identity_revision_with_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_identity_balance_with_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_identity_balance_with_keys_and_revision) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_identity_with_balance) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_identity_keys) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions_ctor < > (fetch_identity_revision_with_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_identity_balance_with_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_identity_balance_with_keys_and_revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_identity_with_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions { fetch_identity_revision_with_keys , fetch_identity_balance_with_keys , fetch_identity_balance_with_keys_and_revision , fetch_identity_with_balance , fetch_identity_keys }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions_get_fetch_identity_revision_with_keys < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_identity_revision_with_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions_get_fetch_identity_balance_with_keys < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_identity_balance_with_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions_get_fetch_identity_balance_with_keys_and_revision < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_identity_balance_with_keys_and_revision } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions_get_fetch_identity_with_balance < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_identity_with_balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions_get_fetch_identity_keys < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_identity_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions_set_fetch_identity_revision_with_keys < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_identity_revision_with_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions_set_fetch_identity_balance_with_keys < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_identity_balance_with_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions_set_fetch_identity_balance_with_keys_and_revision < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_identity_balance_with_keys_and_revision = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions_set_fetch_identity_with_balance < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_identity_with_balance = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions_set_fetch_identity_keys < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_identity_keys = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveVoteInsertMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVoteInsertMethodVersions { pub register_identity_vote : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveVoteInsertMethodVersions > for platform_version_version_drive_versions_DriveVoteInsertMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVoteInsertMethodVersions) -> platform_version :: version :: drive_versions :: DriveVoteInsertMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVoteInsertMethodVersions { register_identity_vote : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . register_identity_vote) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveVoteInsertMethodVersions > for platform_version_version_drive_versions_DriveVoteInsertMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVoteInsertMethodVersions) -> * const platform_version_version_drive_versions_DriveVoteInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVoteInsertMethodVersions { register_identity_vote : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . register_identity_vote) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveVoteInsertMethodVersions > for platform_version_version_drive_versions_DriveVoteInsertMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVoteInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVoteInsertMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . register_identity_vote) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteInsertMethodVersions_ctor < > (register_identity_vote : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveVoteInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVoteInsertMethodVersions { register_identity_vote }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteInsertMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveVoteInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteInsertMethodVersions_get_register_identity_vote < > (obj : * const platform_version_version_drive_versions_DriveVoteInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . register_identity_vote } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteInsertMethodVersions_set_register_identity_vote < > (obj : * mut platform_version_version_drive_versions_DriveVoteInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . register_identity_vote = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveCreditPoolUnpaidEpochMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions { pub get_unpaid_epoch_index : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveCreditPoolUnpaidEpochMethodVersions > for platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions) -> platform_version :: version :: drive_versions :: DriveCreditPoolUnpaidEpochMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveCreditPoolUnpaidEpochMethodVersions { get_unpaid_epoch_index : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_unpaid_epoch_index) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveCreditPoolUnpaidEpochMethodVersions > for platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveCreditPoolUnpaidEpochMethodVersions) -> * const platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions { get_unpaid_epoch_index : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_unpaid_epoch_index) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveCreditPoolUnpaidEpochMethodVersions > for platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . get_unpaid_epoch_index) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions_ctor < > (get_unpaid_epoch_index : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions { get_unpaid_epoch_index }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions_get_get_unpaid_epoch_index < > (obj : * const platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_unpaid_epoch_index } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions_set_get_unpaid_epoch_index < > (obj : * mut platform_version_version_drive_versions_DriveCreditPoolUnpaidEpochMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_unpaid_epoch_index = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveGroveMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveGroveMethodVersions { pub basic : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveBasicMethodVersions , pub batch : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveBatchMethodVersions , pub apply : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveApplyMethodVersions , pub costs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveCostMethodVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveGroveMethodVersions > for platform_version_version_drive_versions_DriveGroveMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveGroveMethodVersions) -> platform_version :: version :: drive_versions :: DriveGroveMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveGroveMethodVersions { basic : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . basic) , batch : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . batch) , apply : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . apply) , costs : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . costs) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveGroveMethodVersions > for platform_version_version_drive_versions_DriveGroveMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveGroveMethodVersions) -> * const platform_version_version_drive_versions_DriveGroveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveGroveMethodVersions { basic : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . basic) , batch : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . batch) , apply : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . apply) , costs : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . costs) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveGroveMethodVersions > for platform_version_version_drive_versions_DriveGroveMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveGroveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveGroveMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . basic) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch) ; ; ferment_interfaces :: unbox_any (ffi_ref . apply) ; ; ferment_interfaces :: unbox_any (ffi_ref . costs) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveMethodVersions_ctor < > (basic : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveBasicMethodVersions , batch : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveBatchMethodVersions , apply : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveApplyMethodVersions , costs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveCostMethodVersions) -> * mut platform_version_version_drive_versions_DriveGroveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveGroveMethodVersions { basic , batch , apply , costs }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveGroveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveMethodVersions_get_basic < > (obj : * const platform_version_version_drive_versions_DriveGroveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveBasicMethodVersions { (* obj) . basic } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveMethodVersions_get_batch < > (obj : * const platform_version_version_drive_versions_DriveGroveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveBatchMethodVersions { (* obj) . batch } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveMethodVersions_get_apply < > (obj : * const platform_version_version_drive_versions_DriveGroveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveApplyMethodVersions { (* obj) . apply } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveMethodVersions_get_costs < > (obj : * const platform_version_version_drive_versions_DriveGroveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveCostMethodVersions { (* obj) . costs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveMethodVersions_set_basic < > (obj : * mut platform_version_version_drive_versions_DriveGroveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveBasicMethodVersions) { (* obj) . basic = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveMethodVersions_set_batch < > (obj : * mut platform_version_version_drive_versions_DriveGroveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveBatchMethodVersions) { (* obj) . batch = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveMethodVersions_set_apply < > (obj : * mut platform_version_version_drive_versions_DriveGroveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveApplyMethodVersions) { (* obj) . apply = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveMethodVersions_set_costs < > (obj : * mut platform_version_version_drive_versions_DriveGroveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveCostMethodVersions) { (* obj) . costs = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveFetchMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveFetchMethodVersions { pub fetch_elements : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveFetchMethodVersions > for platform_version_version_drive_versions_DriveFetchMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveFetchMethodVersions) -> platform_version :: version :: drive_versions :: DriveFetchMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveFetchMethodVersions { fetch_elements : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_elements) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveFetchMethodVersions > for platform_version_version_drive_versions_DriveFetchMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveFetchMethodVersions) -> * const platform_version_version_drive_versions_DriveFetchMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveFetchMethodVersions { fetch_elements : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_elements) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveFetchMethodVersions > for platform_version_version_drive_versions_DriveFetchMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveFetchMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveFetchMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_elements) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveFetchMethodVersions_ctor < > (fetch_elements : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveFetchMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveFetchMethodVersions { fetch_elements }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveFetchMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveFetchMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveFetchMethodVersions_get_fetch_elements < > (obj : * const platform_version_version_drive_versions_DriveFetchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_elements } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveFetchMethodVersions_set_fetch_elements < > (obj : * mut platform_version_version_drive_versions_DriveFetchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_elements = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DrivePrefundedSpecializedMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions { pub fetch_single : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub prove_single : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_prefunded_specialized_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_prefunded_specialized_balance_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub deduct_from_prefunded_specialized_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub deduct_from_prefunded_specialized_balance_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub estimated_cost_for_prefunded_specialized_balance_update : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DrivePrefundedSpecializedMethodVersions > for platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions) -> platform_version :: version :: drive_versions :: DrivePrefundedSpecializedMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DrivePrefundedSpecializedMethodVersions { fetch_single : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_single) , prove_single : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . prove_single) , add_prefunded_specialized_balance : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_prefunded_specialized_balance) , add_prefunded_specialized_balance_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_prefunded_specialized_balance_operations) , deduct_from_prefunded_specialized_balance : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . deduct_from_prefunded_specialized_balance) , deduct_from_prefunded_specialized_balance_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . deduct_from_prefunded_specialized_balance_operations) , estimated_cost_for_prefunded_specialized_balance_update : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . estimated_cost_for_prefunded_specialized_balance_update) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DrivePrefundedSpecializedMethodVersions > for platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DrivePrefundedSpecializedMethodVersions) -> * const platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions { fetch_single : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_single) , prove_single : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . prove_single) , add_prefunded_specialized_balance : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_prefunded_specialized_balance) , add_prefunded_specialized_balance_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_prefunded_specialized_balance_operations) , deduct_from_prefunded_specialized_balance : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . deduct_from_prefunded_specialized_balance) , deduct_from_prefunded_specialized_balance_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . deduct_from_prefunded_specialized_balance_operations) , estimated_cost_for_prefunded_specialized_balance_update : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . estimated_cost_for_prefunded_specialized_balance_update) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DrivePrefundedSpecializedMethodVersions > for platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_single) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove_single) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_prefunded_specialized_balance) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_prefunded_specialized_balance_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . deduct_from_prefunded_specialized_balance) ; ; ferment_interfaces :: unbox_any (ffi_ref . deduct_from_prefunded_specialized_balance_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . estimated_cost_for_prefunded_specialized_balance_update) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions_ctor < > (fetch_single : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , prove_single : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_prefunded_specialized_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_prefunded_specialized_balance_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , deduct_from_prefunded_specialized_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , deduct_from_prefunded_specialized_balance_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , estimated_cost_for_prefunded_specialized_balance_update : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions { fetch_single , prove_single , add_prefunded_specialized_balance , add_prefunded_specialized_balance_operations , deduct_from_prefunded_specialized_balance , deduct_from_prefunded_specialized_balance_operations , estimated_cost_for_prefunded_specialized_balance_update }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions_get_fetch_single < > (obj : * const platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_single } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions_get_prove_single < > (obj : * const platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_single } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions_get_add_prefunded_specialized_balance < > (obj : * const platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_prefunded_specialized_balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions_get_add_prefunded_specialized_balance_operations < > (obj : * const platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_prefunded_specialized_balance_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions_get_deduct_from_prefunded_specialized_balance < > (obj : * const platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . deduct_from_prefunded_specialized_balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions_get_deduct_from_prefunded_specialized_balance_operations < > (obj : * const platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . deduct_from_prefunded_specialized_balance_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions_get_estimated_cost_for_prefunded_specialized_balance_update < > (obj : * const platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . estimated_cost_for_prefunded_specialized_balance_update } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions_set_fetch_single < > (obj : * mut platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_single = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions_set_prove_single < > (obj : * mut platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_single = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions_set_add_prefunded_specialized_balance < > (obj : * mut platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_prefunded_specialized_balance = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions_set_add_prefunded_specialized_balance_operations < > (obj : * mut platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_prefunded_specialized_balance_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions_set_deduct_from_prefunded_specialized_balance < > (obj : * mut platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . deduct_from_prefunded_specialized_balance = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions_set_deduct_from_prefunded_specialized_balance_operations < > (obj : * mut platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . deduct_from_prefunded_specialized_balance_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions_set_estimated_cost_for_prefunded_specialized_balance_update < > (obj : * mut platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . estimated_cost_for_prefunded_specialized_balance_update = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveContractApplyMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveContractApplyMethodVersions { pub apply_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub apply_contract_with_serialization : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveContractApplyMethodVersions > for platform_version_version_drive_versions_DriveContractApplyMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveContractApplyMethodVersions) -> platform_version :: version :: drive_versions :: DriveContractApplyMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveContractApplyMethodVersions { apply_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . apply_contract) , apply_contract_with_serialization : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . apply_contract_with_serialization) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveContractApplyMethodVersions > for platform_version_version_drive_versions_DriveContractApplyMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveContractApplyMethodVersions) -> * const platform_version_version_drive_versions_DriveContractApplyMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractApplyMethodVersions { apply_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . apply_contract) , apply_contract_with_serialization : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . apply_contract_with_serialization) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveContractApplyMethodVersions > for platform_version_version_drive_versions_DriveContractApplyMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveContractApplyMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveContractApplyMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . apply_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . apply_contract_with_serialization) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractApplyMethodVersions_ctor < > (apply_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , apply_contract_with_serialization : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveContractApplyMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractApplyMethodVersions { apply_contract , apply_contract_with_serialization }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractApplyMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveContractApplyMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractApplyMethodVersions_get_apply_contract < > (obj : * const platform_version_version_drive_versions_DriveContractApplyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . apply_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractApplyMethodVersions_get_apply_contract_with_serialization < > (obj : * const platform_version_version_drive_versions_DriveContractApplyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . apply_contract_with_serialization } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractApplyMethodVersions_set_apply_contract < > (obj : * mut platform_version_version_drive_versions_DriveContractApplyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . apply_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractApplyMethodVersions_set_apply_contract_with_serialization < > (obj : * mut platform_version_version_drive_versions_DriveContractApplyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . apply_contract_with_serialization = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveMethodVersions { pub initialization : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveInitializationMethodVersions , pub credit_pools : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolMethodVersions , pub protocol_upgrade : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveProtocolUpgradeVersions , pub prefunded_specialized_balances : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions , pub balances : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveBalancesMethodVersions , pub document : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentMethodVersions , pub vote : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteMethodVersions , pub contract : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractMethodVersions , pub fees : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveFeesMethodVersions , pub estimated_costs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions , pub asset_lock : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveAssetLockMethodVersions , pub verify : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyMethodVersions , pub identity : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityMethodVersions , pub platform_system : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DrivePlatformSystemMethodVersions , pub operations : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveOperationsMethodVersion , pub batch_operations : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveBatchOperationsMethodVersion , pub fetch : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveFetchMethodVersions , pub prove : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveProveMethodVersions , pub state_transitions : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStateTransitionMethodVersions , pub platform_state : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DrivePlatformStateMethodVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveMethodVersions > for platform_version_version_drive_versions_DriveMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveMethodVersions) -> platform_version :: version :: drive_versions :: DriveMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveMethodVersions { initialization : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . initialization) , credit_pools : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . credit_pools) , protocol_upgrade : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . protocol_upgrade) , prefunded_specialized_balances : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . prefunded_specialized_balances) , balances : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . balances) , document : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . document) , vote : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . vote) , contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contract) , fees : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fees) , estimated_costs : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . estimated_costs) , asset_lock : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . asset_lock) , verify : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify) , identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity) , platform_system : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . platform_system) , operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . operations) , batch_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . batch_operations) , fetch : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch) , prove : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . prove) , state_transitions : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . state_transitions) , platform_state : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . platform_state) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveMethodVersions > for platform_version_version_drive_versions_DriveMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveMethodVersions) -> * const platform_version_version_drive_versions_DriveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveMethodVersions { initialization : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . initialization) , credit_pools : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . credit_pools) , protocol_upgrade : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . protocol_upgrade) , prefunded_specialized_balances : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . prefunded_specialized_balances) , balances : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . balances) , document : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . document) , vote : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . vote) , contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contract) , fees : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fees) , estimated_costs : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . estimated_costs) , asset_lock : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . asset_lock) , verify : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify) , identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity) , platform_system : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . platform_system) , operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . operations) , batch_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . batch_operations) , fetch : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch) , prove : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . prove) , state_transitions : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . state_transitions) , platform_state : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . platform_state) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveMethodVersions > for platform_version_version_drive_versions_DriveMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . initialization) ; ; ferment_interfaces :: unbox_any (ffi_ref . credit_pools) ; ; ferment_interfaces :: unbox_any (ffi_ref . protocol_upgrade) ; ; ferment_interfaces :: unbox_any (ffi_ref . prefunded_specialized_balances) ; ; ferment_interfaces :: unbox_any (ffi_ref . balances) ; ; ferment_interfaces :: unbox_any (ffi_ref . document) ; ; ferment_interfaces :: unbox_any (ffi_ref . vote) ; ; ferment_interfaces :: unbox_any (ffi_ref . contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . fees) ; ; ferment_interfaces :: unbox_any (ffi_ref . estimated_costs) ; ; ferment_interfaces :: unbox_any (ffi_ref . asset_lock) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . platform_system) ; ; ferment_interfaces :: unbox_any (ffi_ref . operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove) ; ; ferment_interfaces :: unbox_any (ffi_ref . state_transitions) ; ; ferment_interfaces :: unbox_any (ffi_ref . platform_state) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_ctor < > (initialization : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveInitializationMethodVersions , credit_pools : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolMethodVersions , protocol_upgrade : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveProtocolUpgradeVersions , prefunded_specialized_balances : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions , balances : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveBalancesMethodVersions , document : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentMethodVersions , vote : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteMethodVersions , contract : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractMethodVersions , fees : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveFeesMethodVersions , estimated_costs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions , asset_lock : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveAssetLockMethodVersions , verify : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyMethodVersions , identity : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityMethodVersions , platform_system : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DrivePlatformSystemMethodVersions , operations : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveOperationsMethodVersion , batch_operations : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveBatchOperationsMethodVersion , fetch : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveFetchMethodVersions , prove : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveProveMethodVersions , state_transitions : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStateTransitionMethodVersions , platform_state : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DrivePlatformStateMethodVersions) -> * mut platform_version_version_drive_versions_DriveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveMethodVersions { initialization , credit_pools , protocol_upgrade , prefunded_specialized_balances , balances , document , vote , contract , fees , estimated_costs , asset_lock , verify , identity , platform_system , operations , batch_operations , fetch , prove , state_transitions , platform_state }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_initialization < > (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveInitializationMethodVersions { (* obj) . initialization } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_credit_pools < > (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolMethodVersions { (* obj) . credit_pools } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_protocol_upgrade < > (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveProtocolUpgradeVersions { (* obj) . protocol_upgrade } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_prefunded_specialized_balances < > (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions { (* obj) . prefunded_specialized_balances } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_balances < > (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveBalancesMethodVersions { (* obj) . balances } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_document < > (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentMethodVersions { (* obj) . document } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_vote < > (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteMethodVersions { (* obj) . vote } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_contract < > (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractMethodVersions { (* obj) . contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_fees < > (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveFeesMethodVersions { (* obj) . fees } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_estimated_costs < > (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions { (* obj) . estimated_costs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_asset_lock < > (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveAssetLockMethodVersions { (* obj) . asset_lock } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_verify < > (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyMethodVersions { (* obj) . verify } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_identity < > (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityMethodVersions { (* obj) . identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_platform_system < > (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DrivePlatformSystemMethodVersions { (* obj) . platform_system } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_operations < > (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveOperationsMethodVersion { (* obj) . operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_batch_operations < > (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveBatchOperationsMethodVersion { (* obj) . batch_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_fetch < > (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveFetchMethodVersions { (* obj) . fetch } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_prove < > (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveProveMethodVersions { (* obj) . prove } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_state_transitions < > (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStateTransitionMethodVersions { (* obj) . state_transitions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_platform_state < > (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DrivePlatformStateMethodVersions { (* obj) . platform_state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_initialization < > (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveInitializationMethodVersions) { (* obj) . initialization = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_credit_pools < > (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolMethodVersions) { (* obj) . credit_pools = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_protocol_upgrade < > (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveProtocolUpgradeVersions) { (* obj) . protocol_upgrade = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_prefunded_specialized_balances < > (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DrivePrefundedSpecializedMethodVersions) { (* obj) . prefunded_specialized_balances = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_balances < > (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveBalancesMethodVersions) { (* obj) . balances = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_document < > (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentMethodVersions) { (* obj) . document = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_vote < > (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteMethodVersions) { (* obj) . vote = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_contract < > (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractMethodVersions) { (* obj) . contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_fees < > (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveFeesMethodVersions) { (* obj) . fees = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_estimated_costs < > (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions) { (* obj) . estimated_costs = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_asset_lock < > (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveAssetLockMethodVersions) { (* obj) . asset_lock = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_verify < > (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyMethodVersions) { (* obj) . verify = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_identity < > (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityMethodVersions) { (* obj) . identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_platform_system < > (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DrivePlatformSystemMethodVersions) { (* obj) . platform_system = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_operations < > (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveOperationsMethodVersion) { (* obj) . operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_batch_operations < > (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveBatchOperationsMethodVersion) { (* obj) . batch_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_fetch < > (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveFetchMethodVersions) { (* obj) . fetch = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_prove < > (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveProveMethodVersions) { (* obj) . prove = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_state_transitions < > (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStateTransitionMethodVersions) { (* obj) . state_transitions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_platform_state < > (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DrivePlatformStateMethodVersions) { (* obj) . platform_state = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveVerifyIdentityMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions { pub verify_full_identities_by_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_full_identity_by_identity_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_full_identity_by_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_identity_balance_for_identity_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_identity_balances_for_identity_ids : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_identity_id_by_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_identity_ids_by_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_identity_keys_by_identity_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_identity_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_identity_contract_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_identities_contract_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveVerifyIdentityMethodVersions > for platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) -> platform_version :: version :: drive_versions :: DriveVerifyIdentityMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVerifyIdentityMethodVersions { verify_full_identities_by_public_key_hashes : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_full_identities_by_public_key_hashes) , verify_full_identity_by_identity_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_full_identity_by_identity_id) , verify_full_identity_by_public_key_hash : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_full_identity_by_public_key_hash) , verify_identity_balance_for_identity_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_identity_balance_for_identity_id) , verify_identity_balances_for_identity_ids : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_identity_balances_for_identity_ids) , verify_identity_id_by_public_key_hash : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_identity_id_by_public_key_hash) , verify_identity_ids_by_public_key_hashes : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_identity_ids_by_public_key_hashes) , verify_identity_keys_by_identity_id : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_identity_keys_by_identity_id) , verify_identity_nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_identity_nonce) , verify_identity_contract_nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_identity_contract_nonce) , verify_identities_contract_keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_identities_contract_keys) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveVerifyIdentityMethodVersions > for platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVerifyIdentityMethodVersions) -> * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions { verify_full_identities_by_public_key_hashes : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_full_identities_by_public_key_hashes) , verify_full_identity_by_identity_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_full_identity_by_identity_id) , verify_full_identity_by_public_key_hash : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_full_identity_by_public_key_hash) , verify_identity_balance_for_identity_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_identity_balance_for_identity_id) , verify_identity_balances_for_identity_ids : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_identity_balances_for_identity_ids) , verify_identity_id_by_public_key_hash : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_identity_id_by_public_key_hash) , verify_identity_ids_by_public_key_hashes : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_identity_ids_by_public_key_hashes) , verify_identity_keys_by_identity_id : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_identity_keys_by_identity_id) , verify_identity_nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_identity_nonce) , verify_identity_contract_nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_identity_contract_nonce) , verify_identities_contract_keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_identities_contract_keys) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveVerifyIdentityMethodVersions > for platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . verify_full_identities_by_public_key_hashes) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_full_identity_by_identity_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_full_identity_by_public_key_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_identity_balance_for_identity_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_identity_balances_for_identity_ids) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_identity_id_by_public_key_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_identity_ids_by_public_key_hashes) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_identity_keys_by_identity_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_identity_nonce) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_identity_contract_nonce) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_identities_contract_keys) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_ctor < > (verify_full_identities_by_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_full_identity_by_identity_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_full_identity_by_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_identity_balance_for_identity_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_identity_balances_for_identity_ids : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_identity_id_by_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_identity_ids_by_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_identity_keys_by_identity_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_identity_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_identity_contract_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_identities_contract_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions { verify_full_identities_by_public_key_hashes , verify_full_identity_by_identity_id , verify_full_identity_by_public_key_hash , verify_identity_balance_for_identity_id , verify_identity_balances_for_identity_ids , verify_identity_id_by_public_key_hash , verify_identity_ids_by_public_key_hashes , verify_identity_keys_by_identity_id , verify_identity_nonce , verify_identity_contract_nonce , verify_identities_contract_keys }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_get_verify_full_identities_by_public_key_hashes < > (obj : * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_full_identities_by_public_key_hashes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_get_verify_full_identity_by_identity_id < > (obj : * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_full_identity_by_identity_id } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_get_verify_full_identity_by_public_key_hash < > (obj : * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_full_identity_by_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_get_verify_identity_balance_for_identity_id < > (obj : * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_identity_balance_for_identity_id } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_get_verify_identity_balances_for_identity_ids < > (obj : * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_identity_balances_for_identity_ids } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_get_verify_identity_id_by_public_key_hash < > (obj : * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_identity_id_by_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_get_verify_identity_ids_by_public_key_hashes < > (obj : * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_identity_ids_by_public_key_hashes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_get_verify_identity_keys_by_identity_id < > (obj : * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_identity_keys_by_identity_id } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_get_verify_identity_nonce < > (obj : * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_identity_nonce } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_get_verify_identity_contract_nonce < > (obj : * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_identity_contract_nonce } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_get_verify_identities_contract_keys < > (obj : * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_identities_contract_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_set_verify_full_identities_by_public_key_hashes < > (obj : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_full_identities_by_public_key_hashes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_set_verify_full_identity_by_identity_id < > (obj : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_full_identity_by_identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_set_verify_full_identity_by_public_key_hash < > (obj : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_full_identity_by_public_key_hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_set_verify_identity_balance_for_identity_id < > (obj : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_identity_balance_for_identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_set_verify_identity_balances_for_identity_ids < > (obj : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_identity_balances_for_identity_ids = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_set_verify_identity_id_by_public_key_hash < > (obj : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_identity_id_by_public_key_hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_set_verify_identity_ids_by_public_key_hashes < > (obj : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_identity_ids_by_public_key_hashes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_set_verify_identity_keys_by_identity_id < > (obj : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_identity_keys_by_identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_set_verify_identity_nonce < > (obj : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_identity_nonce = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_set_verify_identity_contract_nonce < > (obj : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_identity_contract_nonce = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_set_verify_identities_contract_keys < > (obj : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_identities_contract_keys = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionIndexMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions { pub fetch_next_withdrawal_transaction_index : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_update_next_withdrawal_transaction_index_operation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionIndexMethodVersions > for platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionIndexMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionIndexMethodVersions { fetch_next_withdrawal_transaction_index : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_next_withdrawal_transaction_index) , add_update_next_withdrawal_transaction_index_operation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_update_next_withdrawal_transaction_index_operation) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionIndexMethodVersions > for platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionIndexMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions { fetch_next_withdrawal_transaction_index : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_next_withdrawal_transaction_index) , add_update_next_withdrawal_transaction_index_operation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_update_next_withdrawal_transaction_index_operation) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionIndexMethodVersions > for platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_next_withdrawal_transaction_index) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_update_next_withdrawal_transaction_index_operation) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions_ctor < > (fetch_next_withdrawal_transaction_index : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_update_next_withdrawal_transaction_index_operation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions { fetch_next_withdrawal_transaction_index , add_update_next_withdrawal_transaction_index_operation }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions_get_fetch_next_withdrawal_transaction_index < > (obj : * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_next_withdrawal_transaction_index } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions_get_add_update_next_withdrawal_transaction_index_operation < > (obj : * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_update_next_withdrawal_transaction_index_operation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions_set_fetch_next_withdrawal_transaction_index < > (obj : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_next_withdrawal_transaction_index = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions_set_add_update_next_withdrawal_transaction_index_operation < > (obj : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_update_next_withdrawal_transaction_index_operation = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveDocumentQueryMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveDocumentQueryMethodVersions { pub query_documents : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveDocumentQueryMethodVersions > for platform_version_version_drive_versions_DriveDocumentQueryMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveDocumentQueryMethodVersions) -> platform_version :: version :: drive_versions :: DriveDocumentQueryMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveDocumentQueryMethodVersions { query_documents : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . query_documents) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveDocumentQueryMethodVersions > for platform_version_version_drive_versions_DriveDocumentQueryMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveDocumentQueryMethodVersions) -> * const platform_version_version_drive_versions_DriveDocumentQueryMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentQueryMethodVersions { query_documents : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . query_documents) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveDocumentQueryMethodVersions > for platform_version_version_drive_versions_DriveDocumentQueryMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentQueryMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveDocumentQueryMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . query_documents) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentQueryMethodVersions_ctor < > (query_documents : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveDocumentQueryMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentQueryMethodVersions { query_documents }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentQueryMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveDocumentQueryMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentQueryMethodVersions_get_query_documents < > (obj : * const platform_version_version_drive_versions_DriveDocumentQueryMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . query_documents } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentQueryMethodVersions_set_query_documents < > (obj : * mut platform_version_version_drive_versions_DriveDocumentQueryMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . query_documents = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveVoteFetchMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVoteFetchMethodVersions { pub fetch_identities_voting_for_contenders : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_contested_document_vote_poll_stored_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_identity_contested_resource_vote : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveVoteFetchMethodVersions > for platform_version_version_drive_versions_DriveVoteFetchMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVoteFetchMethodVersions) -> platform_version :: version :: drive_versions :: DriveVoteFetchMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVoteFetchMethodVersions { fetch_identities_voting_for_contenders : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_identities_voting_for_contenders) , fetch_contested_document_vote_poll_stored_info : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_contested_document_vote_poll_stored_info) , fetch_identity_contested_resource_vote : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_identity_contested_resource_vote) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveVoteFetchMethodVersions > for platform_version_version_drive_versions_DriveVoteFetchMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVoteFetchMethodVersions) -> * const platform_version_version_drive_versions_DriveVoteFetchMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVoteFetchMethodVersions { fetch_identities_voting_for_contenders : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_identities_voting_for_contenders) , fetch_contested_document_vote_poll_stored_info : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_contested_document_vote_poll_stored_info) , fetch_identity_contested_resource_vote : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_identity_contested_resource_vote) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveVoteFetchMethodVersions > for platform_version_version_drive_versions_DriveVoteFetchMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVoteFetchMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVoteFetchMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_identities_voting_for_contenders) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_contested_document_vote_poll_stored_info) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_identity_contested_resource_vote) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteFetchMethodVersions_ctor < > (fetch_identities_voting_for_contenders : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_contested_document_vote_poll_stored_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_identity_contested_resource_vote : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveVoteFetchMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVoteFetchMethodVersions { fetch_identities_voting_for_contenders , fetch_contested_document_vote_poll_stored_info , fetch_identity_contested_resource_vote }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteFetchMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveVoteFetchMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteFetchMethodVersions_get_fetch_identities_voting_for_contenders < > (obj : * const platform_version_version_drive_versions_DriveVoteFetchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_identities_voting_for_contenders } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteFetchMethodVersions_get_fetch_contested_document_vote_poll_stored_info < > (obj : * const platform_version_version_drive_versions_DriveVoteFetchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_contested_document_vote_poll_stored_info } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteFetchMethodVersions_get_fetch_identity_contested_resource_vote < > (obj : * const platform_version_version_drive_versions_DriveVoteFetchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_identity_contested_resource_vote } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteFetchMethodVersions_set_fetch_identities_voting_for_contenders < > (obj : * mut platform_version_version_drive_versions_DriveVoteFetchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_identities_voting_for_contenders = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteFetchMethodVersions_set_fetch_contested_document_vote_poll_stored_info < > (obj : * mut platform_version_version_drive_versions_DriveVoteFetchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_contested_document_vote_poll_stored_info = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteFetchMethodVersions_set_fetch_identity_contested_resource_vote < > (obj : * mut platform_version_version_drive_versions_DriveVoteFetchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_identity_contested_resource_vote = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveContractGetMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveContractGetMethodVersions { pub fetch_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_contract_with_history : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_cached_contract_with_fetch_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_contract_with_fetch_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_contracts_with_fetch_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveContractGetMethodVersions > for platform_version_version_drive_versions_DriveContractGetMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveContractGetMethodVersions) -> platform_version :: version :: drive_versions :: DriveContractGetMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveContractGetMethodVersions { fetch_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_contract) , fetch_contract_with_history : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_contract_with_history) , get_cached_contract_with_fetch_info : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_cached_contract_with_fetch_info) , get_contract_with_fetch_info : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_contract_with_fetch_info) , get_contracts_with_fetch_info : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . get_contracts_with_fetch_info) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveContractGetMethodVersions > for platform_version_version_drive_versions_DriveContractGetMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveContractGetMethodVersions) -> * const platform_version_version_drive_versions_DriveContractGetMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractGetMethodVersions { fetch_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_contract) , fetch_contract_with_history : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_contract_with_history) , get_cached_contract_with_fetch_info : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_cached_contract_with_fetch_info) , get_contract_with_fetch_info : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_contract_with_fetch_info) , get_contracts_with_fetch_info : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . get_contracts_with_fetch_info) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveContractGetMethodVersions > for platform_version_version_drive_versions_DriveContractGetMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveContractGetMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveContractGetMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_contract_with_history) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_cached_contract_with_fetch_info) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_contract_with_fetch_info) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_contracts_with_fetch_info) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_ctor < > (fetch_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_contract_with_history : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_cached_contract_with_fetch_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_contract_with_fetch_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_contracts_with_fetch_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveContractGetMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractGetMethodVersions { fetch_contract , fetch_contract_with_history , get_cached_contract_with_fetch_info , get_contract_with_fetch_info , get_contracts_with_fetch_info }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveContractGetMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_get_fetch_contract < > (obj : * const platform_version_version_drive_versions_DriveContractGetMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_get_fetch_contract_with_history < > (obj : * const platform_version_version_drive_versions_DriveContractGetMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_contract_with_history } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_get_get_cached_contract_with_fetch_info < > (obj : * const platform_version_version_drive_versions_DriveContractGetMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_cached_contract_with_fetch_info } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_get_get_contract_with_fetch_info < > (obj : * const platform_version_version_drive_versions_DriveContractGetMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_contract_with_fetch_info } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_get_get_contracts_with_fetch_info < > (obj : * const platform_version_version_drive_versions_DriveContractGetMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_contracts_with_fetch_info } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_set_fetch_contract < > (obj : * mut platform_version_version_drive_versions_DriveContractGetMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_set_fetch_contract_with_history < > (obj : * mut platform_version_version_drive_versions_DriveContractGetMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_contract_with_history = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_set_get_cached_contract_with_fetch_info < > (obj : * mut platform_version_version_drive_versions_DriveContractGetMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_cached_contract_with_fetch_info = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_set_get_contract_with_fetch_info < > (obj : * mut platform_version_version_drive_versions_DriveContractGetMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_contract_with_fetch_info = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_set_get_contracts_with_fetch_info < > (obj : * mut platform_version_version_drive_versions_DriveContractGetMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_contracts_with_fetch_info = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveGroveApplyMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveGroveApplyMethodVersions { pub grove_apply_operation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_apply_batch : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_apply_partial_batch : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveGroveApplyMethodVersions > for platform_version_version_drive_versions_DriveGroveApplyMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveGroveApplyMethodVersions) -> platform_version :: version :: drive_versions :: DriveGroveApplyMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveGroveApplyMethodVersions { grove_apply_operation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_apply_operation) , grove_apply_batch : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_apply_batch) , grove_apply_partial_batch : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . grove_apply_partial_batch) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveGroveApplyMethodVersions > for platform_version_version_drive_versions_DriveGroveApplyMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveGroveApplyMethodVersions) -> * const platform_version_version_drive_versions_DriveGroveApplyMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveGroveApplyMethodVersions { grove_apply_operation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_apply_operation) , grove_apply_batch : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_apply_batch) , grove_apply_partial_batch : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . grove_apply_partial_batch) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveGroveApplyMethodVersions > for platform_version_version_drive_versions_DriveGroveApplyMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveGroveApplyMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveGroveApplyMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . grove_apply_operation) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_apply_batch) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_apply_partial_batch) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveApplyMethodVersions_ctor < > (grove_apply_operation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_apply_batch : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_apply_partial_batch : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveGroveApplyMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveGroveApplyMethodVersions { grove_apply_operation , grove_apply_batch , grove_apply_partial_batch }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveApplyMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveGroveApplyMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveApplyMethodVersions_get_grove_apply_operation < > (obj : * const platform_version_version_drive_versions_DriveGroveApplyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_apply_operation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveApplyMethodVersions_get_grove_apply_batch < > (obj : * const platform_version_version_drive_versions_DriveGroveApplyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_apply_batch } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveApplyMethodVersions_get_grove_apply_partial_batch < > (obj : * const platform_version_version_drive_versions_DriveGroveApplyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_apply_partial_batch } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveApplyMethodVersions_set_grove_apply_operation < > (obj : * mut platform_version_version_drive_versions_DriveGroveApplyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_apply_operation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveApplyMethodVersions_set_grove_apply_batch < > (obj : * mut platform_version_version_drive_versions_DriveGroveApplyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_apply_batch = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveApplyMethodVersions_set_grove_apply_partial_batch < > (obj : * mut platform_version_version_drive_versions_DriveGroveApplyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_apply_partial_batch = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveIdentityMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityMethodVersions { pub fetch : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchMethodVersions , pub prove : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityProveMethodVersions , pub keys : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysMethodVersions , pub update : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , pub insert : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityInsertMethodVersions , pub contract_info : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions , pub cost_estimation : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , pub withdrawals : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveIdentityMethodVersions > for platform_version_version_drive_versions_DriveIdentityMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityMethodVersions { fetch : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch) , prove : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . prove) , keys : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . keys) , update : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . update) , insert : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . insert) , contract_info : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contract_info) , cost_estimation : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . cost_estimation) , withdrawals : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . withdrawals) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveIdentityMethodVersions > for platform_version_version_drive_versions_DriveIdentityMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityMethodVersions { fetch : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch) , prove : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . prove) , keys : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . keys) , update : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . update) , insert : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . insert) , contract_info : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contract_info) , cost_estimation : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . cost_estimation) , withdrawals : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . withdrawals) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveIdentityMethodVersions > for platform_version_version_drive_versions_DriveIdentityMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove) ; ; ferment_interfaces :: unbox_any (ffi_ref . keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . update) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert) ; ; ferment_interfaces :: unbox_any (ffi_ref . contract_info) ; ; ferment_interfaces :: unbox_any (ffi_ref . cost_estimation) ; ; ferment_interfaces :: unbox_any (ffi_ref . withdrawals) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_ctor < > (fetch : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchMethodVersions , prove : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityProveMethodVersions , keys : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysMethodVersions , update : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , insert : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityInsertMethodVersions , contract_info : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions , cost_estimation : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , withdrawals : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions) -> * mut platform_version_version_drive_versions_DriveIdentityMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityMethodVersions { fetch , prove , keys , update , insert , contract_info , cost_estimation , withdrawals }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveIdentityMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_get_fetch < > (obj : * const platform_version_version_drive_versions_DriveIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchMethodVersions { (* obj) . fetch } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_get_prove < > (obj : * const platform_version_version_drive_versions_DriveIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityProveMethodVersions { (* obj) . prove } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_get_keys < > (obj : * const platform_version_version_drive_versions_DriveIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysMethodVersions { (* obj) . keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_get_update < > (obj : * const platform_version_version_drive_versions_DriveIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions { (* obj) . update } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_get_insert < > (obj : * const platform_version_version_drive_versions_DriveIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityInsertMethodVersions { (* obj) . insert } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_get_contract_info < > (obj : * const platform_version_version_drive_versions_DriveIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions { (* obj) . contract_info } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_get_cost_estimation < > (obj : * const platform_version_version_drive_versions_DriveIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions { (* obj) . cost_estimation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_get_withdrawals < > (obj : * const platform_version_version_drive_versions_DriveIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions { (* obj) . withdrawals } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_set_fetch < > (obj : * mut platform_version_version_drive_versions_DriveIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchMethodVersions) { (* obj) . fetch = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_set_prove < > (obj : * mut platform_version_version_drive_versions_DriveIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityProveMethodVersions) { (* obj) . prove = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_set_keys < > (obj : * mut platform_version_version_drive_versions_DriveIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysMethodVersions) { (* obj) . keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_set_update < > (obj : * mut platform_version_version_drive_versions_DriveIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) { (* obj) . update = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_set_insert < > (obj : * mut platform_version_version_drive_versions_DriveIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityInsertMethodVersions) { (* obj) . insert = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_set_contract_info < > (obj : * mut platform_version_version_drive_versions_DriveIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions) { (* obj) . contract_info = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_set_cost_estimation < > (obj : * mut platform_version_version_drive_versions_DriveIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) { (* obj) . cost_estimation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_set_withdrawals < > (obj : * mut platform_version_version_drive_versions_DriveIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions) { (* obj) . withdrawals = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveIdentityFetchPublicKeyHashesMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions { pub fetch_full_identities_by_unique_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_full_identity_by_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_identity_id_by_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_identity_ids_by_non_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_identity_ids_by_unique_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_serialized_full_identity_by_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub has_any_of_unique_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub has_non_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub has_non_unique_public_key_hash_already_for_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub has_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveIdentityFetchPublicKeyHashesMethodVersions > for platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityFetchPublicKeyHashesMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityFetchPublicKeyHashesMethodVersions { fetch_full_identities_by_unique_public_key_hashes : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_full_identities_by_unique_public_key_hashes) , fetch_full_identity_by_unique_public_key_hash : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_full_identity_by_unique_public_key_hash) , fetch_identity_id_by_unique_public_key_hash : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_identity_id_by_unique_public_key_hash) , fetch_identity_ids_by_non_unique_public_key_hash : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_identity_ids_by_non_unique_public_key_hash) , fetch_identity_ids_by_unique_public_key_hashes : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_identity_ids_by_unique_public_key_hashes) , fetch_serialized_full_identity_by_unique_public_key_hash : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch_serialized_full_identity_by_unique_public_key_hash) , has_any_of_unique_public_key_hashes : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . has_any_of_unique_public_key_hashes) , has_non_unique_public_key_hash : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . has_non_unique_public_key_hash) , has_non_unique_public_key_hash_already_for_identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . has_non_unique_public_key_hash_already_for_identity) , has_unique_public_key_hash : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . has_unique_public_key_hash) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveIdentityFetchPublicKeyHashesMethodVersions > for platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityFetchPublicKeyHashesMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions { fetch_full_identities_by_unique_public_key_hashes : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_full_identities_by_unique_public_key_hashes) , fetch_full_identity_by_unique_public_key_hash : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_full_identity_by_unique_public_key_hash) , fetch_identity_id_by_unique_public_key_hash : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_identity_id_by_unique_public_key_hash) , fetch_identity_ids_by_non_unique_public_key_hash : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_identity_ids_by_non_unique_public_key_hash) , fetch_identity_ids_by_unique_public_key_hashes : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_identity_ids_by_unique_public_key_hashes) , fetch_serialized_full_identity_by_unique_public_key_hash : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch_serialized_full_identity_by_unique_public_key_hash) , has_any_of_unique_public_key_hashes : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . has_any_of_unique_public_key_hashes) , has_non_unique_public_key_hash : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . has_non_unique_public_key_hash) , has_non_unique_public_key_hash_already_for_identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . has_non_unique_public_key_hash_already_for_identity) , has_unique_public_key_hash : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . has_unique_public_key_hash) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveIdentityFetchPublicKeyHashesMethodVersions > for platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_full_identities_by_unique_public_key_hashes) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_full_identity_by_unique_public_key_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_identity_id_by_unique_public_key_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_identity_ids_by_non_unique_public_key_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_identity_ids_by_unique_public_key_hashes) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_serialized_full_identity_by_unique_public_key_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . has_any_of_unique_public_key_hashes) ; ; ferment_interfaces :: unbox_any (ffi_ref . has_non_unique_public_key_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . has_non_unique_public_key_hash_already_for_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . has_unique_public_key_hash) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_ctor < > (fetch_full_identities_by_unique_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_full_identity_by_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_identity_id_by_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_identity_ids_by_non_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_identity_ids_by_unique_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_serialized_full_identity_by_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , has_any_of_unique_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , has_non_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , has_non_unique_public_key_hash_already_for_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , has_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions { fetch_full_identities_by_unique_public_key_hashes , fetch_full_identity_by_unique_public_key_hash , fetch_identity_id_by_unique_public_key_hash , fetch_identity_ids_by_non_unique_public_key_hash , fetch_identity_ids_by_unique_public_key_hashes , fetch_serialized_full_identity_by_unique_public_key_hash , has_any_of_unique_public_key_hashes , has_non_unique_public_key_hash , has_non_unique_public_key_hash_already_for_identity , has_unique_public_key_hash }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_get_fetch_full_identities_by_unique_public_key_hashes < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_full_identities_by_unique_public_key_hashes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_get_fetch_full_identity_by_unique_public_key_hash < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_full_identity_by_unique_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_get_fetch_identity_id_by_unique_public_key_hash < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_identity_id_by_unique_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_get_fetch_identity_ids_by_non_unique_public_key_hash < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_identity_ids_by_non_unique_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_get_fetch_identity_ids_by_unique_public_key_hashes < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_identity_ids_by_unique_public_key_hashes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_get_fetch_serialized_full_identity_by_unique_public_key_hash < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_serialized_full_identity_by_unique_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_get_has_any_of_unique_public_key_hashes < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . has_any_of_unique_public_key_hashes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_get_has_non_unique_public_key_hash < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . has_non_unique_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_get_has_non_unique_public_key_hash_already_for_identity < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . has_non_unique_public_key_hash_already_for_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_get_has_unique_public_key_hash < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . has_unique_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_set_fetch_full_identities_by_unique_public_key_hashes < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_full_identities_by_unique_public_key_hashes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_set_fetch_full_identity_by_unique_public_key_hash < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_full_identity_by_unique_public_key_hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_set_fetch_identity_id_by_unique_public_key_hash < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_identity_id_by_unique_public_key_hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_set_fetch_identity_ids_by_non_unique_public_key_hash < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_identity_ids_by_non_unique_public_key_hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_set_fetch_identity_ids_by_unique_public_key_hashes < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_identity_ids_by_unique_public_key_hashes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_set_fetch_serialized_full_identity_by_unique_public_key_hash < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_serialized_full_identity_by_unique_public_key_hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_set_has_any_of_unique_public_key_hashes < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . has_any_of_unique_public_key_hashes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_set_has_non_unique_public_key_hash < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . has_non_unique_public_key_hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_set_has_non_unique_public_key_hash_already_for_identity < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . has_non_unique_public_key_hash_already_for_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_set_has_unique_public_key_hash < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . has_unique_public_key_hash = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveVerifySingleDocumentMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions { pub verify_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_proof_keep_serialized : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveVerifySingleDocumentMethodVersions > for platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions) -> platform_version :: version :: drive_versions :: DriveVerifySingleDocumentMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVerifySingleDocumentMethodVersions { verify_proof : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_proof) , verify_proof_keep_serialized : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . verify_proof_keep_serialized) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveVerifySingleDocumentMethodVersions > for platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVerifySingleDocumentMethodVersions) -> * const platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions { verify_proof : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_proof) , verify_proof_keep_serialized : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . verify_proof_keep_serialized) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveVerifySingleDocumentMethodVersions > for platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . verify_proof) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_proof_keep_serialized) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions_ctor < > (verify_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_proof_keep_serialized : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions { verify_proof , verify_proof_keep_serialized }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions_get_verify_proof < > (obj : * const platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_proof } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions_get_verify_proof_keep_serialized < > (obj : * const platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_proof_keep_serialized } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions_set_verify_proof < > (obj : * mut platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_proof = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions_set_verify_proof_keep_serialized < > (obj : * mut platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_proof_keep_serialized = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveBalancesMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveBalancesMethodVersions { pub add_to_system_credits : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_to_system_credits_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_from_system_credits : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_from_system_credits_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub calculate_total_credits_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveBalancesMethodVersions > for platform_version_version_drive_versions_DriveBalancesMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveBalancesMethodVersions) -> platform_version :: version :: drive_versions :: DriveBalancesMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveBalancesMethodVersions { add_to_system_credits : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_to_system_credits) , add_to_system_credits_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_to_system_credits_operations) , remove_from_system_credits : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . remove_from_system_credits) , remove_from_system_credits_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . remove_from_system_credits_operations) , calculate_total_credits_balance : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . calculate_total_credits_balance) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveBalancesMethodVersions > for platform_version_version_drive_versions_DriveBalancesMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveBalancesMethodVersions) -> * const platform_version_version_drive_versions_DriveBalancesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveBalancesMethodVersions { add_to_system_credits : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_to_system_credits) , add_to_system_credits_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_to_system_credits_operations) , remove_from_system_credits : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . remove_from_system_credits) , remove_from_system_credits_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . remove_from_system_credits_operations) , calculate_total_credits_balance : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . calculate_total_credits_balance) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveBalancesMethodVersions > for platform_version_version_drive_versions_DriveBalancesMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveBalancesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveBalancesMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_to_system_credits) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_to_system_credits_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_from_system_credits) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_from_system_credits_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . calculate_total_credits_balance) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_ctor < > (add_to_system_credits : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_to_system_credits_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_from_system_credits : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_from_system_credits_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , calculate_total_credits_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveBalancesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveBalancesMethodVersions { add_to_system_credits , add_to_system_credits_operations , remove_from_system_credits , remove_from_system_credits_operations , calculate_total_credits_balance }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveBalancesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_get_add_to_system_credits < > (obj : * const platform_version_version_drive_versions_DriveBalancesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_to_system_credits } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_get_add_to_system_credits_operations < > (obj : * const platform_version_version_drive_versions_DriveBalancesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_to_system_credits_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_get_remove_from_system_credits < > (obj : * const platform_version_version_drive_versions_DriveBalancesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_from_system_credits } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_get_remove_from_system_credits_operations < > (obj : * const platform_version_version_drive_versions_DriveBalancesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_from_system_credits_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_get_calculate_total_credits_balance < > (obj : * const platform_version_version_drive_versions_DriveBalancesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . calculate_total_credits_balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_set_add_to_system_credits < > (obj : * mut platform_version_version_drive_versions_DriveBalancesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_to_system_credits = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_set_add_to_system_credits_operations < > (obj : * mut platform_version_version_drive_versions_DriveBalancesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_to_system_credits_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_set_remove_from_system_credits < > (obj : * mut platform_version_version_drive_versions_DriveBalancesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_from_system_credits = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_set_remove_from_system_credits_operations < > (obj : * mut platform_version_version_drive_versions_DriveBalancesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_from_system_credits_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_set_calculate_total_credits_balance < > (obj : * mut platform_version_version_drive_versions_DriveBalancesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . calculate_total_credits_balance = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveVoteMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVoteMethodVersions { pub insert : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteInsertMethodVersions , pub contested_resource_insert : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions , pub cleanup : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteCleanupMethodVersions , pub setup : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteSetupMethodVersions , pub storage_form : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions , pub fetch : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteFetchMethodVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveVoteMethodVersions > for platform_version_version_drive_versions_DriveVoteMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVoteMethodVersions) -> platform_version :: version :: drive_versions :: DriveVoteMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVoteMethodVersions { insert : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . insert) , contested_resource_insert : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . contested_resource_insert) , cleanup : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . cleanup) , setup : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . setup) , storage_form : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . storage_form) , fetch : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveVoteMethodVersions > for platform_version_version_drive_versions_DriveVoteMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVoteMethodVersions) -> * const platform_version_version_drive_versions_DriveVoteMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVoteMethodVersions { insert : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . insert) , contested_resource_insert : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . contested_resource_insert) , cleanup : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . cleanup) , setup : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . setup) , storage_form : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . storage_form) , fetch : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveVoteMethodVersions > for platform_version_version_drive_versions_DriveVoteMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVoteMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVoteMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . insert) ; ; ferment_interfaces :: unbox_any (ffi_ref . contested_resource_insert) ; ; ferment_interfaces :: unbox_any (ffi_ref . cleanup) ; ; ferment_interfaces :: unbox_any (ffi_ref . setup) ; ; ferment_interfaces :: unbox_any (ffi_ref . storage_form) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteMethodVersions_ctor < > (insert : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteInsertMethodVersions , contested_resource_insert : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions , cleanup : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteCleanupMethodVersions , setup : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteSetupMethodVersions , storage_form : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions , fetch : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteFetchMethodVersions) -> * mut platform_version_version_drive_versions_DriveVoteMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVoteMethodVersions { insert , contested_resource_insert , cleanup , setup , storage_form , fetch }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveVoteMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteMethodVersions_get_insert < > (obj : * const platform_version_version_drive_versions_DriveVoteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteInsertMethodVersions { (* obj) . insert } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteMethodVersions_get_contested_resource_insert < > (obj : * const platform_version_version_drive_versions_DriveVoteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions { (* obj) . contested_resource_insert } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteMethodVersions_get_cleanup < > (obj : * const platform_version_version_drive_versions_DriveVoteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteCleanupMethodVersions { (* obj) . cleanup } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteMethodVersions_get_setup < > (obj : * const platform_version_version_drive_versions_DriveVoteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteSetupMethodVersions { (* obj) . setup } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteMethodVersions_get_storage_form < > (obj : * const platform_version_version_drive_versions_DriveVoteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions { (* obj) . storage_form } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteMethodVersions_get_fetch < > (obj : * const platform_version_version_drive_versions_DriveVoteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteFetchMethodVersions { (* obj) . fetch } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteMethodVersions_set_insert < > (obj : * mut platform_version_version_drive_versions_DriveVoteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteInsertMethodVersions) { (* obj) . insert = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteMethodVersions_set_contested_resource_insert < > (obj : * mut platform_version_version_drive_versions_DriveVoteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteContestedResourceInsertMethodVersions) { (* obj) . contested_resource_insert = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteMethodVersions_set_cleanup < > (obj : * mut platform_version_version_drive_versions_DriveVoteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteCleanupMethodVersions) { (* obj) . cleanup = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteMethodVersions_set_setup < > (obj : * mut platform_version_version_drive_versions_DriveVoteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteSetupMethodVersions) { (* obj) . setup = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteMethodVersions_set_storage_form < > (obj : * mut platform_version_version_drive_versions_DriveVoteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteStorageFormMethodVersions) { (* obj) . storage_form = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVoteMethodVersions_set_fetch < > (obj : * mut platform_version_version_drive_versions_DriveVoteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVoteFetchMethodVersions) { (* obj) . fetch = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveEstimatedCostsMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions { pub add_estimation_costs_for_levels_up_to_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_estimation_costs_for_levels_up_to_contract_document_type_excluded : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_estimation_costs_for_contested_document_tree_levels_up_to_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_estimation_costs_for_contested_document_tree_levels_up_to_contract_document_type_excluded : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveEstimatedCostsMethodVersions > for platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions) -> platform_version :: version :: drive_versions :: DriveEstimatedCostsMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveEstimatedCostsMethodVersions { add_estimation_costs_for_levels_up_to_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_estimation_costs_for_levels_up_to_contract) , add_estimation_costs_for_levels_up_to_contract_document_type_excluded : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_estimation_costs_for_levels_up_to_contract_document_type_excluded) , add_estimation_costs_for_contested_document_tree_levels_up_to_contract : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_estimation_costs_for_contested_document_tree_levels_up_to_contract) , add_estimation_costs_for_contested_document_tree_levels_up_to_contract_document_type_excluded : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . add_estimation_costs_for_contested_document_tree_levels_up_to_contract_document_type_excluded) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveEstimatedCostsMethodVersions > for platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveEstimatedCostsMethodVersions) -> * const platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions { add_estimation_costs_for_levels_up_to_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_estimation_costs_for_levels_up_to_contract) , add_estimation_costs_for_levels_up_to_contract_document_type_excluded : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_estimation_costs_for_levels_up_to_contract_document_type_excluded) , add_estimation_costs_for_contested_document_tree_levels_up_to_contract : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_estimation_costs_for_contested_document_tree_levels_up_to_contract) , add_estimation_costs_for_contested_document_tree_levels_up_to_contract_document_type_excluded : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . add_estimation_costs_for_contested_document_tree_levels_up_to_contract_document_type_excluded) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveEstimatedCostsMethodVersions > for platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_estimation_costs_for_levels_up_to_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_estimation_costs_for_levels_up_to_contract_document_type_excluded) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_estimation_costs_for_contested_document_tree_levels_up_to_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_estimation_costs_for_contested_document_tree_levels_up_to_contract_document_type_excluded) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions_ctor < > (add_estimation_costs_for_levels_up_to_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_estimation_costs_for_levels_up_to_contract_document_type_excluded : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_estimation_costs_for_contested_document_tree_levels_up_to_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_estimation_costs_for_contested_document_tree_levels_up_to_contract_document_type_excluded : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions { add_estimation_costs_for_levels_up_to_contract , add_estimation_costs_for_levels_up_to_contract_document_type_excluded , add_estimation_costs_for_contested_document_tree_levels_up_to_contract , add_estimation_costs_for_contested_document_tree_levels_up_to_contract_document_type_excluded }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions_get_add_estimation_costs_for_levels_up_to_contract < > (obj : * const platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_estimation_costs_for_levels_up_to_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions_get_add_estimation_costs_for_levels_up_to_contract_document_type_excluded < > (obj : * const platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_estimation_costs_for_levels_up_to_contract_document_type_excluded } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions_get_add_estimation_costs_for_contested_document_tree_levels_up_to_contract < > (obj : * const platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_estimation_costs_for_contested_document_tree_levels_up_to_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions_get_add_estimation_costs_for_contested_document_tree_levels_up_to_contract_document_type_excluded < > (obj : * const platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_estimation_costs_for_contested_document_tree_levels_up_to_contract_document_type_excluded } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions_set_add_estimation_costs_for_levels_up_to_contract < > (obj : * mut platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_estimation_costs_for_levels_up_to_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions_set_add_estimation_costs_for_levels_up_to_contract_document_type_excluded < > (obj : * mut platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_estimation_costs_for_levels_up_to_contract_document_type_excluded = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions_set_add_estimation_costs_for_contested_document_tree_levels_up_to_contract < > (obj : * mut platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_estimation_costs_for_contested_document_tree_levels_up_to_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions_set_add_estimation_costs_for_contested_document_tree_levels_up_to_contract_document_type_excluded < > (obj : * mut platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_estimation_costs_for_contested_document_tree_levels_up_to_contract_document_type_excluded = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveInitializationMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveInitializationMethodVersions { pub create_initial_state_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveInitializationMethodVersions > for platform_version_version_drive_versions_DriveInitializationMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveInitializationMethodVersions) -> platform_version :: version :: drive_versions :: DriveInitializationMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveInitializationMethodVersions { create_initial_state_structure : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . create_initial_state_structure) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveInitializationMethodVersions > for platform_version_version_drive_versions_DriveInitializationMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveInitializationMethodVersions) -> * const platform_version_version_drive_versions_DriveInitializationMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveInitializationMethodVersions { create_initial_state_structure : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . create_initial_state_structure) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveInitializationMethodVersions > for platform_version_version_drive_versions_DriveInitializationMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveInitializationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveInitializationMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . create_initial_state_structure) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveInitializationMethodVersions_ctor < > (create_initial_state_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveInitializationMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveInitializationMethodVersions { create_initial_state_structure }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveInitializationMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveInitializationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveInitializationMethodVersions_get_create_initial_state_structure < > (obj : * const platform_version_version_drive_versions_DriveInitializationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_initial_state_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveInitializationMethodVersions_set_create_initial_state_structure < > (obj : * mut platform_version_version_drive_versions_DriveInitializationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_initial_state_structure = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveIdentityKeysMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityKeysMethodVersions { pub fetch : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions , pub prove : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions , pub insert : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions , pub insert_key_hash_identity_reference : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveIdentityKeysMethodVersions > for platform_version_version_drive_versions_DriveIdentityKeysMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityKeysMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityKeysMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityKeysMethodVersions { fetch : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . fetch) , prove : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . prove) , insert : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . insert) , insert_key_hash_identity_reference : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . insert_key_hash_identity_reference) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveIdentityKeysMethodVersions > for platform_version_version_drive_versions_DriveIdentityKeysMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityKeysMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityKeysMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityKeysMethodVersions { fetch : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . fetch) , prove : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . prove) , insert : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . insert) , insert_key_hash_identity_reference : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . insert_key_hash_identity_reference) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveIdentityKeysMethodVersions > for platform_version_version_drive_versions_DriveIdentityKeysMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityKeysMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityKeysMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_key_hash_identity_reference) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysMethodVersions_ctor < > (fetch : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions , prove : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions , insert : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions , insert_key_hash_identity_reference : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) -> * mut platform_version_version_drive_versions_DriveIdentityKeysMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityKeysMethodVersions { fetch , prove , insert , insert_key_hash_identity_reference }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveIdentityKeysMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysMethodVersions_get_fetch < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeysMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions { (* obj) . fetch } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysMethodVersions_get_prove < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeysMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions { (* obj) . prove } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysMethodVersions_get_insert < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeysMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions { (* obj) . insert } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysMethodVersions_get_insert_key_hash_identity_reference < > (obj : * const platform_version_version_drive_versions_DriveIdentityKeysMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions { (* obj) . insert_key_hash_identity_reference } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysMethodVersions_set_fetch < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions) { (* obj) . fetch = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysMethodVersions_set_prove < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions) { (* obj) . prove = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysMethodVersions_set_insert < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) { (* obj) . insert = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysMethodVersions_set_insert_key_hash_identity_reference < > (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) { (* obj) . insert_key_hash_identity_reference = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveIdentityFetchAttributesMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions { pub revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub identity_contract_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub balance_include_debt : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub negative_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveIdentityFetchAttributesMethodVersions > for platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityFetchAttributesMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityFetchAttributesMethodVersions { revision : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . revision) , nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . nonce) , identity_contract_nonce : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . identity_contract_nonce) , balance : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . balance) , balance_include_debt : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . balance_include_debt) , negative_balance : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . negative_balance) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveIdentityFetchAttributesMethodVersions > for platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityFetchAttributesMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions { revision : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . revision) , nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . nonce) , identity_contract_nonce : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . identity_contract_nonce) , balance : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . balance) , balance_include_debt : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . balance_include_debt) , negative_balance : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . negative_balance) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveIdentityFetchAttributesMethodVersions > for platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . revision) ; ; ferment_interfaces :: unbox_any (ffi_ref . nonce) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_contract_nonce) ; ; ferment_interfaces :: unbox_any (ffi_ref . balance) ; ; ferment_interfaces :: unbox_any (ffi_ref . balance_include_debt) ; ; ferment_interfaces :: unbox_any (ffi_ref . negative_balance) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_ctor < > (revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , identity_contract_nonce : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , balance_include_debt : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , negative_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions { revision , nonce , identity_contract_nonce , balance , balance_include_debt , negative_balance }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_get_revision < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_get_nonce < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . nonce } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_get_identity_contract_nonce < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . identity_contract_nonce } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_get_balance < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_get_balance_include_debt < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . balance_include_debt } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_get_negative_balance < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . negative_balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_set_revision < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . revision = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_set_nonce < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . nonce = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_set_identity_contract_nonce < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . identity_contract_nonce = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_set_balance < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . balance = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_set_balance_include_debt < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . balance_include_debt = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_set_negative_balance < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . negative_balance = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveIdentityFetchMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityFetchMethodVersions { pub public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , pub attributes : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions , pub partial_identity : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions , pub full_identity : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveIdentityFetchMethodVersions > for platform_version_version_drive_versions_DriveIdentityFetchMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityFetchMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityFetchMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityFetchMethodVersions { public_key_hashes : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . public_key_hashes) , attributes : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . attributes) , partial_identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . partial_identity) , full_identity : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . full_identity) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveIdentityFetchMethodVersions > for platform_version_version_drive_versions_DriveIdentityFetchMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityFetchMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityFetchMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityFetchMethodVersions { public_key_hashes : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . public_key_hashes) , attributes : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . attributes) , partial_identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . partial_identity) , full_identity : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . full_identity) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveIdentityFetchMethodVersions > for platform_version_version_drive_versions_DriveIdentityFetchMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityFetchMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityFetchMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_hashes) ; ; ferment_interfaces :: unbox_any (ffi_ref . attributes) ; ; ferment_interfaces :: unbox_any (ffi_ref . partial_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . full_identity) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchMethodVersions_ctor < > (public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , attributes : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions , partial_identity : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions , full_identity : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions) -> * mut platform_version_version_drive_versions_DriveIdentityFetchMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityFetchMethodVersions { public_key_hashes , attributes , partial_identity , full_identity }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveIdentityFetchMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchMethodVersions_get_public_key_hashes < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions { (* obj) . public_key_hashes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchMethodVersions_get_attributes < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions { (* obj) . attributes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchMethodVersions_get_partial_identity < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions { (* obj) . partial_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchMethodVersions_get_full_identity < > (obj : * const platform_version_version_drive_versions_DriveIdentityFetchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions { (* obj) . full_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchMethodVersions_set_public_key_hashes < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) { (* obj) . public_key_hashes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchMethodVersions_set_attributes < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions) { (* obj) . attributes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchMethodVersions_set_partial_identity < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions) { (* obj) . partial_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchMethodVersions_set_full_identity < > (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions) { (* obj) . full_identity = value ; } # [doc = "FFI-representation of the [`platform_version :: version :: drive_versions :: DriveGroveBatchMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveGroveBatchMethodVersions { pub batch_insert_empty_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub batch_insert_empty_tree_if_not_exists : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub batch_insert_empty_tree_if_not_exists_check_existing_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub batch_insert : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub batch_insert_if_not_exists : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub batch_insert_if_changed_value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub batch_replace : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub batch_delete : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub batch_remove_raw : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub batch_delete_up_tree_while_empty : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub batch_refresh_reference : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < platform_version :: version :: drive_versions :: DriveGroveBatchMethodVersions > for platform_version_version_drive_versions_DriveGroveBatchMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> platform_version :: version :: drive_versions :: DriveGroveBatchMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveGroveBatchMethodVersions { batch_insert_empty_tree : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . batch_insert_empty_tree) , batch_insert_empty_tree_if_not_exists : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . batch_insert_empty_tree_if_not_exists) , batch_insert_empty_tree_if_not_exists_check_existing_operations : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . batch_insert_empty_tree_if_not_exists_check_existing_operations) , batch_insert : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . batch_insert) , batch_insert_if_not_exists : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . batch_insert_if_not_exists) , batch_insert_if_changed_value : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . batch_insert_if_changed_value) , batch_replace : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . batch_replace) , batch_delete : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . batch_delete) , batch_remove_raw : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . batch_remove_raw) , batch_delete_up_tree_while_empty : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . batch_delete_up_tree_while_empty) , batch_refresh_reference : ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . batch_refresh_reference) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: version :: drive_versions :: DriveGroveBatchMethodVersions > for platform_version_version_drive_versions_DriveGroveBatchMethodVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveGroveBatchMethodVersions) -> * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveGroveBatchMethodVersions { batch_insert_empty_tree : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . batch_insert_empty_tree) , batch_insert_empty_tree_if_not_exists : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . batch_insert_empty_tree_if_not_exists) , batch_insert_empty_tree_if_not_exists_check_existing_operations : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . batch_insert_empty_tree_if_not_exists_check_existing_operations) , batch_insert : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . batch_insert) , batch_insert_if_not_exists : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . batch_insert_if_not_exists) , batch_insert_if_changed_value : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . batch_insert_if_changed_value) , batch_replace : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . batch_replace) , batch_delete : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . batch_delete) , batch_remove_raw : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . batch_remove_raw) , batch_delete_up_tree_while_empty : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . batch_delete_up_tree_while_empty) , batch_refresh_reference : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . batch_refresh_reference) }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: version :: drive_versions :: DriveGroveBatchMethodVersions > for platform_version_version_drive_versions_DriveGroveBatchMethodVersions { unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveGroveBatchMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . batch_insert_empty_tree) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch_insert_empty_tree_if_not_exists) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch_insert_empty_tree_if_not_exists_check_existing_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch_insert) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch_insert_if_not_exists) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch_insert_if_changed_value) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch_replace) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch_delete) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch_remove_raw) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch_delete_up_tree_while_empty) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch_refresh_reference) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_ctor < > (batch_insert_empty_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , batch_insert_empty_tree_if_not_exists : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , batch_insert_empty_tree_if_not_exists_check_existing_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , batch_insert : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , batch_insert_if_not_exists : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , batch_insert_if_changed_value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , batch_replace : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , batch_delete : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , batch_remove_raw : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , batch_delete_up_tree_while_empty : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , batch_refresh_reference : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveGroveBatchMethodVersions { batch_insert_empty_tree , batch_insert_empty_tree_if_not_exists , batch_insert_empty_tree_if_not_exists_check_existing_operations , batch_insert , batch_insert_if_not_exists , batch_insert_if_changed_value , batch_replace , batch_delete , batch_remove_raw , batch_delete_up_tree_while_empty , batch_refresh_reference }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_destroy < > (ffi : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_get_batch_insert_empty_tree < > (obj : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . batch_insert_empty_tree } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_get_batch_insert_empty_tree_if_not_exists < > (obj : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . batch_insert_empty_tree_if_not_exists } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_get_batch_insert_empty_tree_if_not_exists_check_existing_operations < > (obj : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . batch_insert_empty_tree_if_not_exists_check_existing_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_get_batch_insert < > (obj : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . batch_insert } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_get_batch_insert_if_not_exists < > (obj : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . batch_insert_if_not_exists } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_get_batch_insert_if_changed_value < > (obj : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . batch_insert_if_changed_value } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_get_batch_replace < > (obj : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . batch_replace } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_get_batch_delete < > (obj : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . batch_delete } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_get_batch_remove_raw < > (obj : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . batch_remove_raw } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_get_batch_delete_up_tree_while_empty < > (obj : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . batch_delete_up_tree_while_empty } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_get_batch_refresh_reference < > (obj : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . batch_refresh_reference } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_set_batch_insert_empty_tree < > (obj : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . batch_insert_empty_tree = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_set_batch_insert_empty_tree_if_not_exists < > (obj : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . batch_insert_empty_tree_if_not_exists = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_set_batch_insert_empty_tree_if_not_exists_check_existing_operations < > (obj : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . batch_insert_empty_tree_if_not_exists_check_existing_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_set_batch_insert < > (obj : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . batch_insert = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_set_batch_insert_if_not_exists < > (obj : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . batch_insert_if_not_exists = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_set_batch_insert_if_changed_value < > (obj : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . batch_insert_if_changed_value = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_set_batch_replace < > (obj : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . batch_replace = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_set_batch_delete < > (obj : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . batch_delete = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_set_batch_remove_raw < > (obj : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . batch_remove_raw = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_set_batch_delete_up_tree_while_empty < > (obj : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . batch_delete_up_tree_while_empty = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_set_batch_refresh_reference < > (obj : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . batch_refresh_reference = value ; } } } pub mod error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`platform_version :: error :: PlatformVersionError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum platform_version_error_PlatformVersionError { UnknownVersionError (* mut std :: os :: raw :: c_char) } impl ferment_interfaces :: FFIConversionFrom < platform_version :: error :: PlatformVersionError > for platform_version_error_PlatformVersionError { unsafe fn ffi_from_const (ffi : * const platform_version_error_PlatformVersionError) -> platform_version :: error :: PlatformVersionError { let ffi_ref = & * ffi ; match ffi_ref { platform_version_error_PlatformVersionError :: UnknownVersionError (o_0) => platform_version :: error :: PlatformVersionError :: UnknownVersionError (ferment_interfaces :: FFIConversionFrom :: ffi_from (* o_0)) } } } impl ferment_interfaces :: FFIConversionTo < platform_version :: error :: PlatformVersionError > for platform_version_error_PlatformVersionError { unsafe fn ffi_to_const (obj : platform_version :: error :: PlatformVersionError) -> * const platform_version_error_PlatformVersionError { ferment_interfaces :: boxed (match obj { platform_version :: error :: PlatformVersionError :: UnknownVersionError (o_0) => platform_version_error_PlatformVersionError :: UnknownVersionError (ferment_interfaces :: FFIConversionTo :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } } impl ferment_interfaces :: FFIConversionDestroy < platform_version :: error :: PlatformVersionError > for platform_version_error_PlatformVersionError { unsafe fn destroy (ffi : * mut platform_version_error_PlatformVersionError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for platform_version_error_PlatformVersionError { fn drop (& mut self) { unsafe { match self { platform_version_error_PlatformVersionError :: UnknownVersionError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversionDestroy < String >> :: destroy (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_error_PlatformVersionError_UnknownVersionError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_version_error_PlatformVersionError { ferment_interfaces :: boxed (platform_version_error_PlatformVersionError :: UnknownVersionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_version_error_PlatformVersionError_destroy < > (ffi : * mut platform_version_error_PlatformVersionError) { ferment_interfaces :: unbox_any (ffi) ; } } } pub mod ferment_example_platform { use crate as ferment_example_platform ; pub mod spv { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`ferment_example_platform :: spv :: fetch_identity`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_platform_spv_fetch_identity (identifier : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut crate :: fermented :: generics :: Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError { let obj = ferment_example_platform :: spv :: fetch_identity (ferment_interfaces :: FFIConversionFrom :: ffi_from (identifier)) ; ferment_interfaces :: FFIConversionTo :: ffi_to (obj) } } # [doc = "FFI-representation of the [`ferment_example_platform :: SPV`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_platform_SPV { pub version : u32 } impl ferment_interfaces :: FFIConversionFrom < ferment_example_platform :: SPV > for ferment_example_platform_SPV { unsafe fn ffi_from_const (ffi : * const ferment_example_platform_SPV) -> ferment_example_platform :: SPV { let ffi_ref = & * ffi ; ferment_example_platform :: SPV { version : ffi_ref . version } } } impl ferment_interfaces :: FFIConversionTo < ferment_example_platform :: SPV > for ferment_example_platform_SPV { unsafe fn ffi_to_const (obj : ferment_example_platform :: SPV) -> * const ferment_example_platform_SPV { ferment_interfaces :: boxed (ferment_example_platform_SPV { version : obj . version }) } } impl ferment_interfaces :: FFIConversionDestroy < ferment_example_platform :: SPV > for ferment_example_platform_SPV { unsafe fn destroy (ffi : * mut ferment_example_platform_SPV) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_platform_SPV { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_platform_SPV_ctor < > (version : u32) -> * mut ferment_example_platform_SPV { ferment_interfaces :: boxed (ferment_example_platform_SPV { version }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_platform_SPV_destroy < > (ffi : * mut ferment_example_platform_SPV) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_platform_SPV_get_version < > (obj : * const ferment_example_platform_SPV) -> u32 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn ferment_example_platform_SPV_set_version < > (obj : * mut ferment_example_platform_SPV , value : u32) { (* obj) . version = value ; } pub mod custom { use crate as ferment_example_platform ; } } } # [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unreachable_patterns , unused_braces , unused_imports , unused_parens , unused_qualifications , unused_unsafe , unused_variables)] pub mod generics { use crate as ferment_example_platform ; # [repr (C)] # [derive (Clone)] pub struct Vec_platform_value_Value { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value } impl ferment_interfaces :: FFIConversionFrom < Vec < platform_value :: Value > > for Vec_platform_value_Value { unsafe fn ffi_from_const (ffi : * const Vec_platform_value_Value) -> Vec < platform_value :: Value > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } } impl ferment_interfaces :: FFIConversionTo < Vec < platform_value :: Value > > for Vec_platform_value_Value { unsafe fn ffi_to_const (obj : Vec < platform_value :: Value >) -> * const Vec_platform_value_Value { ferment_interfaces :: FFIVecConversion :: encode (obj) } } impl ferment_interfaces :: FFIConversionDestroy < Vec < platform_value :: Value > > for Vec_platform_value_Value { unsafe fn destroy (ffi : * mut Vec_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_platform_value_Value { type Value = Vec < platform_value :: Value > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_platform_value_Value { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_platform_value_Value_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value) -> * mut Vec_platform_value_Value { ferment_interfaces :: boxed (Vec_platform_value_Value { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_platform_value_Value_destroy (ffi : * mut Vec_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_Tuple_String_Arr_u8_32 { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Tuple_String_Arr_u8_32 } impl ferment_interfaces :: FFIConversionFrom < Vec < (String , [u8 ; 32]) > > for Vec_Tuple_String_Arr_u8_32 { unsafe fn ffi_from_const (ffi : * const Vec_Tuple_String_Arr_u8_32) -> Vec < (String , [u8 ; 32]) > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } } impl ferment_interfaces :: FFIConversionTo < Vec < (String , [u8 ; 32]) > > for Vec_Tuple_String_Arr_u8_32 { unsafe fn ffi_to_const (obj : Vec < (String , [u8 ; 32]) >) -> * const Vec_Tuple_String_Arr_u8_32 { ferment_interfaces :: FFIVecConversion :: encode (obj) } } impl ferment_interfaces :: FFIConversionDestroy < Vec < (String , [u8 ; 32]) > > for Vec_Tuple_String_Arr_u8_32 { unsafe fn destroy (ffi : * mut Vec_Tuple_String_Arr_u8_32) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_Tuple_String_Arr_u8_32 { type Value = Vec < (String , [u8 ; 32]) > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_Tuple_String_Arr_u8_32 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_String_Arr_u8_32_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Tuple_String_Arr_u8_32) -> * mut Vec_Tuple_String_Arr_u8_32 { ferment_interfaces :: boxed (Vec_Tuple_String_Arr_u8_32 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_String_Arr_u8_32_destroy (ffi : * mut Vec_Tuple_String_Arr_u8_32) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: voting :: contender_structs :: dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo } impl ferment_interfaces :: FFIConversionFrom < Vec < dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo > > for Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { unsafe fn ffi_from_const (ffi : * const Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo) -> Vec < dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } } impl ferment_interfaces :: FFIConversionTo < Vec < dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo > > for Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { unsafe fn ffi_to_const (obj : Vec < dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo >) -> * const Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { ferment_interfaces :: FFIVecConversion :: encode (obj) } } impl ferment_interfaces :: FFIConversionDestroy < Vec < dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo > > for Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { unsafe fn destroy (ffi : * mut Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { type Value = Vec < dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: voting :: contender_structs :: dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo) -> * mut Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { ferment_interfaces :: boxed (Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo_destroy (ffi : * mut Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] # [cfg (any (any (feature = "json-schema-validation")))] pub struct serde_json_Map_String_serde_json_Value { pub count : usize , pub keys : * mut * mut std :: os :: raw :: c_char , pub values : * mut * mut ferment_example_platform :: custom :: serde_json :: serde_json_JsonValue } # [cfg (any (any (feature = "json-schema-validation")))] impl ferment_interfaces :: FFIConversionFrom < serde_json :: Map < String , serde_json :: Value > > for serde_json_Map_String_serde_json_Value { unsafe fn ffi_from_const (ffi : * const serde_json_Map_String_serde_json_Value) -> serde_json :: Map < String , serde_json :: Value > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o) , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o)) } } # [cfg (any (any (feature = "json-schema-validation")))] impl ferment_interfaces :: FFIConversionTo < serde_json :: Map < String , serde_json :: Value > > for serde_json_Map_String_serde_json_Value { unsafe fn ffi_to_const (obj : serde_json :: Map < String , serde_json :: Value >) -> * const serde_json_Map_String_serde_json_Value { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } } # [cfg (any (any (feature = "json-schema-validation")))] impl ferment_interfaces :: FFIConversionDestroy < serde_json :: Map < String , serde_json :: Value > > for serde_json_Map_String_serde_json_Value { unsafe fn destroy (ffi : * mut serde_json_Map_String_serde_json_Value) { ferment_interfaces :: unbox_any (ffi) ; ; } } # [cfg (any (any (feature = "json-schema-validation")))] impl Drop for serde_json_Map_String_serde_json_Value { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [cfg (any (any (feature = "json-schema-validation")))] # [no_mangle] pub unsafe extern "C" fn serde_json_Map_String_serde_json_Value_ctor (count : usize , keys : * mut * mut std :: os :: raw :: c_char , values : * mut * mut ferment_example_platform :: custom :: serde_json :: serde_json_JsonValue) -> * mut serde_json_Map_String_serde_json_Value { ferment_interfaces :: boxed (serde_json_Map_String_serde_json_Value { count , keys , values }) } # [cfg (any (any (feature = "json-schema-validation")))] # [no_mangle] pub unsafe extern "C" fn serde_json_Map_String_serde_json_Value_destroy (ffi : * mut serde_json_Map_String_serde_json_Value) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_BTreeSet_String { pub count : usize , pub values : * mut * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < std :: collections :: BTreeSet < String > > for std_collections_BTreeSet_String { unsafe fn ffi_from_const (ffi : * const std_collections_BTreeSet_String) -> std :: collections :: BTreeSet < String > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } } impl ferment_interfaces :: FFIConversionTo < std :: collections :: BTreeSet < String > > for std_collections_BTreeSet_String { unsafe fn ffi_to_const (obj : std :: collections :: BTreeSet < String >) -> * const std_collections_BTreeSet_String { ferment_interfaces :: FFIVecConversion :: encode (obj) } } impl ferment_interfaces :: FFIConversionDestroy < std :: collections :: BTreeSet < String > > for std_collections_BTreeSet_String { unsafe fn destroy (ffi : * mut std_collections_BTreeSet_String) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for std_collections_BTreeSet_String { type Value = std :: collections :: BTreeSet < String > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for std_collections_BTreeSet_String { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_BTreeSet_String_ctor (count : usize , values : * mut * mut std :: os :: raw :: c_char) -> * mut std_collections_BTreeSet_String { ferment_interfaces :: boxed (std_collections_BTreeSet_String { count , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_BTreeSet_String_destroy (ffi : * mut std_collections_BTreeSet_String) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversionFrom < std :: collections :: BTreeSet < dpp :: identity :: identity_public_key :: KeyID > > for std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { unsafe fn ffi_from_const (ffi : * const std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID) -> std :: collections :: BTreeSet < dpp :: identity :: identity_public_key :: KeyID > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } } impl ferment_interfaces :: FFIConversionTo < std :: collections :: BTreeSet < dpp :: identity :: identity_public_key :: KeyID > > for std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { unsafe fn ffi_to_const (obj : std :: collections :: BTreeSet < dpp :: identity :: identity_public_key :: KeyID >) -> * const std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { ferment_interfaces :: FFIVecConversion :: encode (obj) } } impl ferment_interfaces :: FFIConversionDestroy < std :: collections :: BTreeSet < dpp :: identity :: identity_public_key :: KeyID > > for std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { unsafe fn destroy (ffi : * mut std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { type Value = std :: collections :: BTreeSet < dpp :: identity :: identity_public_key :: KeyID > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { ferment_interfaces :: boxed (std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { count , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID_destroy (ffi : * mut std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index { pub count : usize , pub keys : * mut * mut std :: os :: raw :: c_char , pub values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_Index } impl ferment_interfaces :: FFIConversionFrom < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: Index > > for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index) -> std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: Index > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o) , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o)) } } impl ferment_interfaces :: FFIConversionTo < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: Index > > for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: Index >) -> * const std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } } impl ferment_interfaces :: FFIConversionDestroy < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: Index > > for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index { unsafe fn destroy (ffi : * mut std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index_ctor (count : usize , keys : * mut * mut std :: os :: raw :: c_char , values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_Index) -> * mut std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index { ferment_interfaces :: boxed (std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index_destroy (ffi : * mut std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch { pub count : usize , pub keys : * mut * mut std :: os :: raw :: c_char , pub values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexFieldMatch } impl ferment_interfaces :: FFIConversionFrom < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch > > for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch) -> std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o) , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o)) } } impl ferment_interfaces :: FFIConversionTo < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch > > for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch >) -> * const std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } } impl ferment_interfaces :: FFIConversionDestroy < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch > > for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch { unsafe fn destroy (ffi : * mut std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch_ctor (count : usize , keys : * mut * mut std :: os :: raw :: c_char , values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexFieldMatch) -> * mut std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch { ferment_interfaces :: boxed (std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch_destroy (ffi : * mut std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DocumentName , pub values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value } impl ferment_interfaces :: FFIConversionFrom < std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , platform_value :: Value > > for std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value) -> std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , platform_value :: Value > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o) , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o)) } } impl ferment_interfaces :: FFIConversionTo < std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , platform_value :: Value > > for std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , platform_value :: Value >) -> * const std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } } impl ferment_interfaces :: FFIConversionDestroy < std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , platform_value :: Value > > for std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { unsafe fn destroy (ffi : * mut std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DocumentName , values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value) -> * mut std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { ferment_interfaces :: boxed (std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value_destroy (ffi : * mut std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] # [cfg (any (any (feature = "state-transitions")))] pub struct std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub values : * mut * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document } # [cfg (any (any (feature = "state-transitions")))] impl ferment_interfaces :: FFIConversionFrom < std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > > for std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document) -> std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o) , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from_opt (o)) } } # [cfg (any (any (feature = "state-transitions")))] impl ferment_interfaces :: FFIConversionTo < std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > > for std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > >) -> * const std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_opt_complex_group (obj . values () . cloned ()) }) } } # [cfg (any (any (feature = "state-transitions")))] impl ferment_interfaces :: FFIConversionDestroy < std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > > for std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document { unsafe fn destroy (ffi : * mut std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document) { ferment_interfaces :: unbox_any (ffi) ; ; } } # [cfg (any (any (feature = "state-transitions")))] impl Drop for std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [cfg (any (any (feature = "state-transitions")))] # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , values : * mut * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document) -> * mut std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document { ferment_interfaces :: boxed (std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document { count , keys , values }) } # [cfg (any (any (feature = "state-transitions")))] # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document_destroy (ffi : * mut std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DocumentName , pub values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: dpp_data_contract_document_type_DocumentType } impl ferment_interfaces :: FFIConversionFrom < std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , dpp :: data_contract :: document_type :: DocumentType > > for std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType) -> std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , dpp :: data_contract :: document_type :: DocumentType > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o) , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o)) } } impl ferment_interfaces :: FFIConversionTo < std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , dpp :: data_contract :: document_type :: DocumentType > > for std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , dpp :: data_contract :: document_type :: DocumentType >) -> * const std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } } impl ferment_interfaces :: FFIConversionDestroy < std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , dpp :: data_contract :: document_type :: DocumentType > > for std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { unsafe fn destroy (ffi : * mut std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DocumentName , values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: dpp_data_contract_document_type_DocumentType) -> * mut std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { ferment_interfaces :: boxed (std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType_destroy (ffi : * mut std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { pub count : usize , pub keys : * mut * mut std :: os :: raw :: c_char , pub values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevel } impl ferment_interfaces :: FFIConversionFrom < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index_level :: IndexLevel > > for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel) -> std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index_level :: IndexLevel > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o) , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o)) } } impl ferment_interfaces :: FFIConversionTo < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index_level :: IndexLevel > > for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index_level :: IndexLevel >) -> * const std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } } impl ferment_interfaces :: FFIConversionDestroy < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index_level :: IndexLevel > > for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { unsafe fn destroy (ffi : * mut std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel_ctor (count : usize , keys : * mut * mut std :: os :: raw :: c_char , values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevel) -> * mut std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { ferment_interfaces :: boxed (std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel_destroy (ffi : * mut std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Tuple_String_Arr_u8_32 { pub o_0 : * mut std :: os :: raw :: c_char , pub o_1 : * mut crate :: fermented :: generics :: Arr_u8_32 } impl ferment_interfaces :: FFIConversionFrom < (String , [u8 ; 32]) > for Tuple_String_Arr_u8_32 { unsafe fn ffi_from_const (ffi : * const Tuple_String_Arr_u8_32) -> (String , [u8 ; 32]) { let ffi_ref = & * ffi ; (ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . o_0) , ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . o_1)) } } impl ferment_interfaces :: FFIConversionTo < (String , [u8 ; 32]) > for Tuple_String_Arr_u8_32 { unsafe fn ffi_to_const (obj : (String , [u8 ; 32])) -> * const Tuple_String_Arr_u8_32 { ferment_interfaces :: boxed (Self { o_0 : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . 0) , o_1 : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . 1) }) } } impl ferment_interfaces :: FFIConversionDestroy < (String , [u8 ; 32]) > for Tuple_String_Arr_u8_32 { unsafe fn destroy (ffi : * mut Tuple_String_Arr_u8_32) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Tuple_String_Arr_u8_32 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any (self . o_0) ; ferment_interfaces :: unbox_any (self . o_1) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Tuple_String_Arr_u8_32_ctor (o_0 : * mut std :: os :: raw :: c_char , o_1 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut Tuple_String_Arr_u8_32 { ferment_interfaces :: boxed (Tuple_String_Arr_u8_32 { o_0 , o_1 }) } # [no_mangle] pub unsafe extern "C" fn Tuple_String_Arr_u8_32_destroy (ffi : * mut Tuple_String_Arr_u8_32) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError { pub ok : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity , pub error : * mut crate :: fermented :: types :: dpp :: errors :: protocol_error :: dpp_errors_protocol_error_ProtocolError } impl ferment_interfaces :: FFIConversionFrom < Result < dpp :: identity :: identity :: Identity , dpp :: errors :: protocol_error :: ProtocolError > > for Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError { unsafe fn ffi_from_const (ffi : * const Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError) -> Result < dpp :: identity :: identity :: Identity , dpp :: errors :: protocol_error :: ProtocolError > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_result (ffi_ref . ok , ffi_ref . error , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o) , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o)) } } impl ferment_interfaces :: FFIConversionTo < Result < dpp :: identity :: identity :: Identity , dpp :: errors :: protocol_error :: ProtocolError > > for Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError { unsafe fn ffi_to_const (obj : Result < dpp :: identity :: identity :: Identity , dpp :: errors :: protocol_error :: ProtocolError >) -> * const Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError { let (ok , error) = ferment_interfaces :: to_result (obj , | o | ferment_interfaces :: FFIConversionTo :: ffi_to (o) , | o | ferment_interfaces :: FFIConversionTo :: ffi_to (o)) ; ferment_interfaces :: boxed (Self { ok , error }) } } impl ferment_interfaces :: FFIConversionDestroy < Result < dpp :: identity :: identity :: Identity , dpp :: errors :: protocol_error :: ProtocolError > > for Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError { unsafe fn destroy (ffi : * mut Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_opt (self . ok) ; ferment_interfaces :: unbox_any_opt (self . error) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError_ctor (ok : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity , error : * mut crate :: fermented :: types :: dpp :: errors :: protocol_error :: dpp_errors_protocol_error_ProtocolError) -> * mut Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError_destroy (ffi : * mut Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_errors_consensus_consensus_error_ConsensusError { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: errors :: consensus :: consensus_error :: dpp_errors_consensus_consensus_error_ConsensusError } impl ferment_interfaces :: FFIConversionFrom < Vec < dpp :: errors :: consensus :: consensus_error :: ConsensusError > > for Vec_dpp_errors_consensus_consensus_error_ConsensusError { unsafe fn ffi_from_const (ffi : * const Vec_dpp_errors_consensus_consensus_error_ConsensusError) -> Vec < dpp :: errors :: consensus :: consensus_error :: ConsensusError > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } } impl ferment_interfaces :: FFIConversionTo < Vec < dpp :: errors :: consensus :: consensus_error :: ConsensusError > > for Vec_dpp_errors_consensus_consensus_error_ConsensusError { unsafe fn ffi_to_const (obj : Vec < dpp :: errors :: consensus :: consensus_error :: ConsensusError >) -> * const Vec_dpp_errors_consensus_consensus_error_ConsensusError { ferment_interfaces :: FFIVecConversion :: encode (obj) } } impl ferment_interfaces :: FFIConversionDestroy < Vec < dpp :: errors :: consensus :: consensus_error :: ConsensusError > > for Vec_dpp_errors_consensus_consensus_error_ConsensusError { unsafe fn destroy (ffi : * mut Vec_dpp_errors_consensus_consensus_error_ConsensusError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dpp_errors_consensus_consensus_error_ConsensusError { type Value = Vec < dpp :: errors :: consensus :: consensus_error :: ConsensusError > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dpp_errors_consensus_consensus_error_ConsensusError { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_errors_consensus_consensus_error_ConsensusError_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: errors :: consensus :: consensus_error :: dpp_errors_consensus_consensus_error_ConsensusError) -> * mut Vec_dpp_errors_consensus_consensus_error_ConsensusError { ferment_interfaces :: boxed (Vec_dpp_errors_consensus_consensus_error_ConsensusError { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_errors_consensus_consensus_error_ConsensusError_destroy (ffi : * mut Vec_dpp_errors_consensus_consensus_error_ConsensusError) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_2 { pub count : usize , pub values : * mut u8 } impl ferment_interfaces :: FFIConversionFrom < [u8 ; 2] > for Arr_u8_2 { unsafe fn ffi_from_const (ffi : * const Arr_u8_2) -> [u8 ; 2] { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) . try_into () . unwrap () } } impl ferment_interfaces :: FFIConversionTo < [u8 ; 2] > for Arr_u8_2 { unsafe fn ffi_to_const (obj : [u8 ; 2]) -> * const Arr_u8_2 { ferment_interfaces :: FFIVecConversion :: encode (obj . to_vec ()) } } impl ferment_interfaces :: FFIConversionDestroy < [u8 ; 2] > for Arr_u8_2 { unsafe fn destroy (ffi : * mut Arr_u8_2) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Arr_u8_2 { type Value = Vec < u8 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_primitive_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_2 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_2_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_2 { ferment_interfaces :: boxed (Arr_u8_2 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_2_destroy (ffi : * mut Arr_u8_2) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] # [cfg (any (any (feature = "state-transitions")))] pub struct Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition } # [cfg (any (any (feature = "state-transitions")))] impl ferment_interfaces :: FFIConversionFrom < Vec < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition > > for Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { unsafe fn ffi_from_const (ffi : * const Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) -> Vec < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } } # [cfg (any (any (feature = "state-transitions")))] impl ferment_interfaces :: FFIConversionTo < Vec < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition > > for Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { unsafe fn ffi_to_const (obj : Vec < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition >) -> * const Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment_interfaces :: FFIVecConversion :: encode (obj) } } # [cfg (any (any (feature = "state-transitions")))] impl ferment_interfaces :: FFIConversionDestroy < Vec < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition > > for Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { unsafe fn destroy (ffi : * mut Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } # [cfg (any (any (feature = "state-transitions")))] impl ferment_interfaces :: FFIVecConversion for Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { type Value = Vec < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } # [cfg (any (any (feature = "state-transitions")))] impl Drop for Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [cfg (any (any (feature = "state-transitions")))] # [no_mangle] pub unsafe extern "C" fn Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) -> * mut Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment_interfaces :: boxed (Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { count , values }) } # [cfg (any (any (feature = "state-transitions")))] # [no_mangle] pub unsafe extern "C" fn Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_destroy (ffi : * mut Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] # [cfg (any (any (feature = "state-transitions")))] pub struct Tuple_String_dpp_balances_credits_Credits { pub o_0 : * mut std :: os :: raw :: c_char , pub o_1 : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits } # [cfg (any (any (feature = "state-transitions")))] impl ferment_interfaces :: FFIConversionFrom < (String , dpp :: balances :: credits :: Credits) > for Tuple_String_dpp_balances_credits_Credits { unsafe fn ffi_from_const (ffi : * const Tuple_String_dpp_balances_credits_Credits) -> (String , dpp :: balances :: credits :: Credits) { let ffi_ref = & * ffi ; (ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . o_0) , ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . o_1)) } } # [cfg (any (any (feature = "state-transitions")))] impl ferment_interfaces :: FFIConversionTo < (String , dpp :: balances :: credits :: Credits) > for Tuple_String_dpp_balances_credits_Credits { unsafe fn ffi_to_const (obj : (String , dpp :: balances :: credits :: Credits)) -> * const Tuple_String_dpp_balances_credits_Credits { ferment_interfaces :: boxed (Self { o_0 : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . 0) , o_1 : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . 1) }) } } # [cfg (any (any (feature = "state-transitions")))] impl ferment_interfaces :: FFIConversionDestroy < (String , dpp :: balances :: credits :: Credits) > for Tuple_String_dpp_balances_credits_Credits { unsafe fn destroy (ffi : * mut Tuple_String_dpp_balances_credits_Credits) { ferment_interfaces :: unbox_any (ffi) ; ; } } # [cfg (any (any (feature = "state-transitions")))] impl Drop for Tuple_String_dpp_balances_credits_Credits { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any (self . o_0) ; ferment_interfaces :: unbox_any (self . o_1) ; ; } } } # [cfg (any (any (feature = "state-transitions")))] # [no_mangle] pub unsafe extern "C" fn Tuple_String_dpp_balances_credits_Credits_ctor (o_0 : * mut std :: os :: raw :: c_char , o_1 : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) -> * mut Tuple_String_dpp_balances_credits_Credits { ferment_interfaces :: boxed (Tuple_String_dpp_balances_credits_Credits { o_0 , o_1 }) } # [cfg (any (any (feature = "state-transitions")))] # [no_mangle] pub unsafe extern "C" fn Tuple_String_dpp_balances_credits_Credits_destroy (ffi : * mut Tuple_String_dpp_balances_credits_Credits) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_String_values_platform_value_Value { pub count : usize , pub keys : * mut * mut std :: os :: raw :: c_char , pub values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value } impl ferment_interfaces :: FFIConversionFrom < std :: collections :: BTreeMap < String , platform_value :: Value > > for std_collections_Map_keys_String_values_platform_value_Value { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_String_values_platform_value_Value) -> std :: collections :: BTreeMap < String , platform_value :: Value > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o) , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o)) } } impl ferment_interfaces :: FFIConversionTo < std :: collections :: BTreeMap < String , platform_value :: Value > > for std_collections_Map_keys_String_values_platform_value_Value { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < String , platform_value :: Value >) -> * const std_collections_Map_keys_String_values_platform_value_Value { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } } impl ferment_interfaces :: FFIConversionDestroy < std :: collections :: BTreeMap < String , platform_value :: Value > > for std_collections_Map_keys_String_values_platform_value_Value { unsafe fn destroy (ffi : * mut std_collections_Map_keys_String_values_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_String_values_platform_value_Value { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_platform_value_Value_ctor (count : usize , keys : * mut * mut std :: os :: raw :: c_char , values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value) -> * mut std_collections_Map_keys_String_values_platform_value_Value { ferment_interfaces :: boxed (std_collections_Map_keys_String_values_platform_value_Value { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_platform_value_Value_destroy (ffi : * mut std_collections_Map_keys_String_values_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_32 { pub count : usize , pub values : * mut u8 } impl ferment_interfaces :: FFIConversionFrom < [u8 ; 32] > for Arr_u8_32 { unsafe fn ffi_from_const (ffi : * const Arr_u8_32) -> [u8 ; 32] { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) . try_into () . unwrap () } } impl ferment_interfaces :: FFIConversionTo < [u8 ; 32] > for Arr_u8_32 { unsafe fn ffi_to_const (obj : [u8 ; 32]) -> * const Arr_u8_32 { ferment_interfaces :: FFIVecConversion :: encode (obj . to_vec ()) } } impl ferment_interfaces :: FFIConversionDestroy < [u8 ; 32] > for Arr_u8_32 { unsafe fn destroy (ffi : * mut Arr_u8_32) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Arr_u8_32 { type Value = Vec < u8 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_primitive_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_32 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_32_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_32 { ferment_interfaces :: boxed (Arr_u8_32 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_32_destroy (ffi : * mut Arr_u8_32) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_document_Document { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document } impl ferment_interfaces :: FFIConversionFrom < Vec < dpp :: document :: Document > > for Vec_dpp_document_Document { unsafe fn ffi_from_const (ffi : * const Vec_dpp_document_Document) -> Vec < dpp :: document :: Document > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } } impl ferment_interfaces :: FFIConversionTo < Vec < dpp :: document :: Document > > for Vec_dpp_document_Document { unsafe fn ffi_to_const (obj : Vec < dpp :: document :: Document >) -> * const Vec_dpp_document_Document { ferment_interfaces :: FFIVecConversion :: encode (obj) } } impl ferment_interfaces :: FFIConversionDestroy < Vec < dpp :: document :: Document > > for Vec_dpp_document_Document { unsafe fn destroy (ffi : * mut Vec_dpp_document_Document) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dpp_document_Document { type Value = Vec < dpp :: document :: Document > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dpp_document_Document { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_document_Document_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document) -> * mut Vec_dpp_document_Document { ferment_interfaces :: boxed (Vec_dpp_document_Document { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_document_Document_destroy (ffi : * mut Vec_dpp_document_Document) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DefinitionName , pub values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value } impl ferment_interfaces :: FFIConversionFrom < std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , platform_value :: Value > > for std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value) -> std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , platform_value :: Value > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o) , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o)) } } impl ferment_interfaces :: FFIConversionTo < std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , platform_value :: Value > > for std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , platform_value :: Value >) -> * const std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } } impl ferment_interfaces :: FFIConversionDestroy < std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , platform_value :: Value > > for std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { unsafe fn destroy (ffi : * mut std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DefinitionName , values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value) -> * mut std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { ferment_interfaces :: boxed (std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value_destroy (ffi : * mut std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_u8 { pub count : usize , pub values : * mut u8 } impl ferment_interfaces :: FFIConversionFrom < Vec < u8 > > for Vec_u8 { unsafe fn ffi_from_const (ffi : * const Vec_u8) -> Vec < u8 > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } } impl ferment_interfaces :: FFIConversionTo < Vec < u8 > > for Vec_u8 { unsafe fn ffi_to_const (obj : Vec < u8 >) -> * const Vec_u8 { ferment_interfaces :: FFIVecConversion :: encode (obj) } } impl ferment_interfaces :: FFIConversionDestroy < Vec < u8 > > for Vec_u8 { unsafe fn destroy (ffi : * mut Vec_u8) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_u8 { type Value = Vec < u8 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_primitive_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Vec_u8 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_u8_ctor (count : usize , values : * mut u8) -> * mut Vec_u8 { ferment_interfaces :: boxed (Vec_u8 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_u8_destroy (ffi : * mut Vec_u8) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_String { pub count : usize , pub values : * mut * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversionFrom < Vec < String > > for Vec_String { unsafe fn ffi_from_const (ffi : * const Vec_String) -> Vec < String > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } } impl ferment_interfaces :: FFIConversionTo < Vec < String > > for Vec_String { unsafe fn ffi_to_const (obj : Vec < String >) -> * const Vec_String { ferment_interfaces :: FFIVecConversion :: encode (obj) } } impl ferment_interfaces :: FFIConversionDestroy < Vec < String > > for Vec_String { unsafe fn destroy (ffi : * mut Vec_String) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_String { type Value = Vec < String > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_String { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_String_ctor (count : usize , values : * mut * mut std :: os :: raw :: c_char) -> * mut Vec_String { ferment_interfaces :: boxed (Vec_String { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_String_destroy (ffi : * mut Vec_String) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey } impl ferment_interfaces :: FFIConversionFrom < std :: collections :: BTreeMap < dpp :: identity :: identity_public_key :: KeyID , dpp :: identity :: identity_public_key :: IdentityPublicKey > > for std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey) -> std :: collections :: BTreeMap < dpp :: identity :: identity_public_key :: KeyID , dpp :: identity :: identity_public_key :: IdentityPublicKey > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o) , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o)) } } impl ferment_interfaces :: FFIConversionTo < std :: collections :: BTreeMap < dpp :: identity :: identity_public_key :: KeyID , dpp :: identity :: identity_public_key :: IdentityPublicKey > > for std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dpp :: identity :: identity_public_key :: KeyID , dpp :: identity :: identity_public_key :: IdentityPublicKey >) -> * const std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } } impl ferment_interfaces :: FFIConversionDestroy < std :: collections :: BTreeMap < dpp :: identity :: identity_public_key :: KeyID , dpp :: identity :: identity_public_key :: IdentityPublicKey > > for std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { unsafe fn destroy (ffi : * mut std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey) -> * mut std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { ferment_interfaces :: boxed (std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey_destroy (ffi : * mut std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] # [cfg (any (any (feature = "state-transitions")))] pub struct Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation } # [cfg (any (any (feature = "state-transitions")))] impl ferment_interfaces :: FFIConversionFrom < Vec < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > > for Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { unsafe fn ffi_from_const (ffi : * const Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) -> Vec < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } } # [cfg (any (any (feature = "state-transitions")))] impl ferment_interfaces :: FFIConversionTo < Vec < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > > for Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { unsafe fn ffi_to_const (obj : Vec < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation >) -> * const Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { ferment_interfaces :: FFIVecConversion :: encode (obj) } } # [cfg (any (any (feature = "state-transitions")))] impl ferment_interfaces :: FFIConversionDestroy < Vec < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > > for Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { unsafe fn destroy (ffi : * mut Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) { ferment_interfaces :: unbox_any (ffi) ; ; } } # [cfg (any (any (feature = "state-transitions")))] impl ferment_interfaces :: FFIVecConversion for Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { type Value = Vec < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } # [cfg (any (any (feature = "state-transitions")))] impl Drop for Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [cfg (any (any (feature = "state-transitions")))] # [no_mangle] pub unsafe extern "C" fn Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) -> * mut Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { ferment_interfaces :: boxed (Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { count , values }) } # [cfg (any (any (feature = "state-transitions")))] # [no_mangle] pub unsafe extern "C" fn Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation_destroy (ffi : * mut Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 } impl ferment_interfaces :: FFIConversionFrom < Vec < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0 > > for Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { unsafe fn ffi_from_const (ffi : * const Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) -> Vec < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0 > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } } impl ferment_interfaces :: FFIConversionTo < Vec < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0 > > for Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { unsafe fn ffi_to_const (obj : Vec < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0 >) -> * const Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { ferment_interfaces :: FFIVecConversion :: encode (obj) } } impl ferment_interfaces :: FFIConversionDestroy < Vec < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0 > > for Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { unsafe fn destroy (ffi : * mut Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { type Value = Vec < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) -> * mut Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { ferment_interfaces :: boxed (Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_destroy (ffi : * mut Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_20 { pub count : usize , pub values : * mut u8 } impl ferment_interfaces :: FFIConversionFrom < [u8 ; 20] > for Arr_u8_20 { unsafe fn ffi_from_const (ffi : * const Arr_u8_20) -> [u8 ; 20] { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) . try_into () . unwrap () } } impl ferment_interfaces :: FFIConversionTo < [u8 ; 20] > for Arr_u8_20 { unsafe fn ffi_to_const (obj : [u8 ; 20]) -> * const Arr_u8_20 { ferment_interfaces :: FFIVecConversion :: encode (obj . to_vec ()) } } impl ferment_interfaces :: FFIConversionDestroy < [u8 ; 20] > for Arr_u8_20 { unsafe fn destroy (ffi : * mut Arr_u8_20) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Arr_u8_20 { type Value = Vec < u8 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_primitive_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_20 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_20_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_20 { ferment_interfaces :: boxed (Arr_u8_20 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_20_destroy (ffi : * mut Arr_u8_20) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_identity_identity_public_key_KeyID { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversionFrom < Vec < dpp :: identity :: identity_public_key :: KeyID > > for Vec_dpp_identity_identity_public_key_KeyID { unsafe fn ffi_from_const (ffi : * const Vec_dpp_identity_identity_public_key_KeyID) -> Vec < dpp :: identity :: identity_public_key :: KeyID > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } } impl ferment_interfaces :: FFIConversionTo < Vec < dpp :: identity :: identity_public_key :: KeyID > > for Vec_dpp_identity_identity_public_key_KeyID { unsafe fn ffi_to_const (obj : Vec < dpp :: identity :: identity_public_key :: KeyID >) -> * const Vec_dpp_identity_identity_public_key_KeyID { ferment_interfaces :: FFIVecConversion :: encode (obj) } } impl ferment_interfaces :: FFIConversionDestroy < Vec < dpp :: identity :: identity_public_key :: KeyID > > for Vec_dpp_identity_identity_public_key_KeyID { unsafe fn destroy (ffi : * mut Vec_dpp_identity_identity_public_key_KeyID) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dpp_identity_identity_public_key_KeyID { type Value = Vec < dpp :: identity :: identity_public_key :: KeyID > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dpp_identity_identity_public_key_KeyID { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_identity_identity_public_key_KeyID_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut Vec_dpp_identity_identity_public_key_KeyID { ferment_interfaces :: boxed (Vec_dpp_identity_identity_public_key_KeyID { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_identity_identity_public_key_KeyID_destroy (ffi : * mut Vec_dpp_identity_identity_public_key_KeyID) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { pub count : usize , pub keys : * mut * mut std :: os :: raw :: c_char , pub values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_DocumentProperty } impl ferment_interfaces :: FFIConversionFrom < indexmap :: IndexMap < String , dpp :: data_contract :: document_type :: property :: DocumentProperty > > for indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { unsafe fn ffi_from_const (ffi : * const indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty) -> indexmap :: IndexMap < String , dpp :: data_contract :: document_type :: property :: DocumentProperty > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o) , | o | ferment_interfaces :: FFIConversionFrom :: ffi_from (o)) } } impl ferment_interfaces :: FFIConversionTo < indexmap :: IndexMap < String , dpp :: data_contract :: document_type :: property :: DocumentProperty > > for indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { unsafe fn ffi_to_const (obj : indexmap :: IndexMap < String , dpp :: data_contract :: document_type :: property :: DocumentProperty >) -> * const indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } } impl ferment_interfaces :: FFIConversionDestroy < indexmap :: IndexMap < String , dpp :: data_contract :: document_type :: property :: DocumentProperty > > for indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { unsafe fn destroy (ffi : * mut indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty_ctor (count : usize , keys : * mut * mut std :: os :: raw :: c_char , values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_DocumentProperty) -> * mut indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { ferment_interfaces :: boxed (indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty_destroy (ffi : * mut indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_data_contract_document_type_index_IndexProperty { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_IndexProperty } impl ferment_interfaces :: FFIConversionFrom < Vec < dpp :: data_contract :: document_type :: index :: IndexProperty > > for Vec_dpp_data_contract_document_type_index_IndexProperty { unsafe fn ffi_from_const (ffi : * const Vec_dpp_data_contract_document_type_index_IndexProperty) -> Vec < dpp :: data_contract :: document_type :: index :: IndexProperty > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } } impl ferment_interfaces :: FFIConversionTo < Vec < dpp :: data_contract :: document_type :: index :: IndexProperty > > for Vec_dpp_data_contract_document_type_index_IndexProperty { unsafe fn ffi_to_const (obj : Vec < dpp :: data_contract :: document_type :: index :: IndexProperty >) -> * const Vec_dpp_data_contract_document_type_index_IndexProperty { ferment_interfaces :: FFIVecConversion :: encode (obj) } } impl ferment_interfaces :: FFIConversionDestroy < Vec < dpp :: data_contract :: document_type :: index :: IndexProperty > > for Vec_dpp_data_contract_document_type_index_IndexProperty { unsafe fn destroy (ffi : * mut Vec_dpp_data_contract_document_type_index_IndexProperty) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dpp_data_contract_document_type_index_IndexProperty { type Value = Vec < dpp :: data_contract :: document_type :: index :: IndexProperty > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dpp_data_contract_document_type_index_IndexProperty { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_data_contract_document_type_index_IndexProperty_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_IndexProperty) -> * mut Vec_dpp_data_contract_document_type_index_IndexProperty { ferment_interfaces :: boxed (Vec_dpp_data_contract_document_type_index_IndexProperty { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_data_contract_document_type_index_IndexProperty_destroy (ffi : * mut Vec_dpp_data_contract_document_type_index_IndexProperty) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_Tuple_platform_value_Value_platform_value_Value { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Tuple_platform_value_Value_platform_value_Value } impl ferment_interfaces :: FFIConversionFrom < Vec < (platform_value :: Value , platform_value :: Value) > > for Vec_Tuple_platform_value_Value_platform_value_Value { unsafe fn ffi_from_const (ffi : * const Vec_Tuple_platform_value_Value_platform_value_Value) -> Vec < (platform_value :: Value , platform_value :: Value) > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } } impl ferment_interfaces :: FFIConversionTo < Vec < (platform_value :: Value , platform_value :: Value) > > for Vec_Tuple_platform_value_Value_platform_value_Value { unsafe fn ffi_to_const (obj : Vec < (platform_value :: Value , platform_value :: Value) >) -> * const Vec_Tuple_platform_value_Value_platform_value_Value { ferment_interfaces :: FFIVecConversion :: encode (obj) } } impl ferment_interfaces :: FFIConversionDestroy < Vec < (platform_value :: Value , platform_value :: Value) > > for Vec_Tuple_platform_value_Value_platform_value_Value { unsafe fn destroy (ffi : * mut Vec_Tuple_platform_value_Value_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_Tuple_platform_value_Value_platform_value_Value { type Value = Vec < (platform_value :: Value , platform_value :: Value) > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_Tuple_platform_value_Value_platform_value_Value { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_platform_value_Value_platform_value_Value_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Tuple_platform_value_Value_platform_value_Value) -> * mut Vec_Tuple_platform_value_Value_platform_value_Value { ferment_interfaces :: boxed (Vec_Tuple_platform_value_Value_platform_value_Value { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_platform_value_Value_platform_value_Value_destroy (ffi : * mut Vec_Tuple_platform_value_Value_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel } impl ferment_interfaces :: FFIConversionFrom < Vec < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel > > for Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { unsafe fn ffi_from_const (ffi : * const Vec_dpp_identity_identity_public_key_security_level_SecurityLevel) -> Vec < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } } impl ferment_interfaces :: FFIConversionTo < Vec < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel > > for Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { unsafe fn ffi_to_const (obj : Vec < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >) -> * const Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { ferment_interfaces :: FFIVecConversion :: encode (obj) } } impl ferment_interfaces :: FFIConversionDestroy < Vec < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel > > for Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { unsafe fn destroy (ffi : * mut Vec_dpp_identity_identity_public_key_security_level_SecurityLevel) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { type Value = Vec < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_identity_identity_public_key_security_level_SecurityLevel_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) -> * mut Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { ferment_interfaces :: boxed (Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_identity_identity_public_key_security_level_SecurityLevel_destroy (ffi : * mut Vec_dpp_identity_identity_public_key_security_level_SecurityLevel) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_platform_version_version_protocol_version_FeatureVersion { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversionFrom < Vec < platform_version :: version :: protocol_version :: FeatureVersion > > for Vec_platform_version_version_protocol_version_FeatureVersion { unsafe fn ffi_from_const (ffi : * const Vec_platform_version_version_protocol_version_FeatureVersion) -> Vec < platform_version :: version :: protocol_version :: FeatureVersion > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } } impl ferment_interfaces :: FFIConversionTo < Vec < platform_version :: version :: protocol_version :: FeatureVersion > > for Vec_platform_version_version_protocol_version_FeatureVersion { unsafe fn ffi_to_const (obj : Vec < platform_version :: version :: protocol_version :: FeatureVersion >) -> * const Vec_platform_version_version_protocol_version_FeatureVersion { ferment_interfaces :: FFIVecConversion :: encode (obj) } } impl ferment_interfaces :: FFIConversionDestroy < Vec < platform_version :: version :: protocol_version :: FeatureVersion > > for Vec_platform_version_version_protocol_version_FeatureVersion { unsafe fn destroy (ffi : * mut Vec_platform_version_version_protocol_version_FeatureVersion) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_platform_version_version_protocol_version_FeatureVersion { type Value = Vec < platform_version :: version :: protocol_version :: FeatureVersion > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_platform_version_version_protocol_version_FeatureVersion { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_platform_version_version_protocol_version_FeatureVersion_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut Vec_platform_version_version_protocol_version_FeatureVersion { ferment_interfaces :: boxed (Vec_platform_version_version_protocol_version_FeatureVersion { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_platform_version_version_protocol_version_FeatureVersion_destroy (ffi : * mut Vec_platform_version_version_protocol_version_FeatureVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_36 { pub count : usize , pub values : * mut u8 } impl ferment_interfaces :: FFIConversionFrom < [u8 ; 36] > for Arr_u8_36 { unsafe fn ffi_from_const (ffi : * const Arr_u8_36) -> [u8 ; 36] { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) . try_into () . unwrap () } } impl ferment_interfaces :: FFIConversionTo < [u8 ; 36] > for Arr_u8_36 { unsafe fn ffi_to_const (obj : [u8 ; 36]) -> * const Arr_u8_36 { ferment_interfaces :: FFIVecConversion :: encode (obj . to_vec ()) } } impl ferment_interfaces :: FFIConversionDestroy < [u8 ; 36] > for Arr_u8_36 { unsafe fn destroy (ffi : * mut Arr_u8_36) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Arr_u8_36 { type Value = Vec < u8 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_primitive_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_36 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_36_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_36 { ferment_interfaces :: boxed (Arr_u8_36 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_36_destroy (ffi : * mut Arr_u8_36) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_data_contract_document_type_property_array_ArrayItemType { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: array :: dpp_data_contract_document_type_property_array_ArrayItemType } impl ferment_interfaces :: FFIConversionFrom < Vec < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType > > for Vec_dpp_data_contract_document_type_property_array_ArrayItemType { unsafe fn ffi_from_const (ffi : * const Vec_dpp_data_contract_document_type_property_array_ArrayItemType) -> Vec < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } } impl ferment_interfaces :: FFIConversionTo < Vec < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType > > for Vec_dpp_data_contract_document_type_property_array_ArrayItemType { unsafe fn ffi_to_const (obj : Vec < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType >) -> * const Vec_dpp_data_contract_document_type_property_array_ArrayItemType { ferment_interfaces :: FFIVecConversion :: encode (obj) } } impl ferment_interfaces :: FFIConversionDestroy < Vec < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType > > for Vec_dpp_data_contract_document_type_property_array_ArrayItemType { unsafe fn destroy (ffi : * mut Vec_dpp_data_contract_document_type_property_array_ArrayItemType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dpp_data_contract_document_type_property_array_ArrayItemType { type Value = Vec < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dpp_data_contract_document_type_property_array_ArrayItemType { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_data_contract_document_type_property_array_ArrayItemType_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: array :: dpp_data_contract_document_type_property_array_ArrayItemType) -> * mut Vec_dpp_data_contract_document_type_property_array_ArrayItemType { ferment_interfaces :: boxed (Vec_dpp_data_contract_document_type_property_array_ArrayItemType { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_data_contract_document_type_property_array_ArrayItemType_destroy (ffi : * mut Vec_dpp_data_contract_document_type_property_array_ArrayItemType) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Tuple_platform_value_types_identifier_Identifier_u8 { pub o_0 : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub o_1 : u8 } impl ferment_interfaces :: FFIConversionFrom < (platform_value :: types :: identifier :: Identifier , u8) > for Tuple_platform_value_types_identifier_Identifier_u8 { unsafe fn ffi_from_const (ffi : * const Tuple_platform_value_types_identifier_Identifier_u8) -> (platform_value :: types :: identifier :: Identifier , u8) { let ffi_ref = & * ffi ; (ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . o_0) , ffi_ref . o_1) } } impl ferment_interfaces :: FFIConversionTo < (platform_value :: types :: identifier :: Identifier , u8) > for Tuple_platform_value_types_identifier_Identifier_u8 { unsafe fn ffi_to_const (obj : (platform_value :: types :: identifier :: Identifier , u8)) -> * const Tuple_platform_value_types_identifier_Identifier_u8 { ferment_interfaces :: boxed (Self { o_0 : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . 0) , o_1 : obj . 1 }) } } impl ferment_interfaces :: FFIConversionDestroy < (platform_value :: types :: identifier :: Identifier , u8) > for Tuple_platform_value_types_identifier_Identifier_u8 { unsafe fn destroy (ffi : * mut Tuple_platform_value_types_identifier_Identifier_u8) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Tuple_platform_value_types_identifier_Identifier_u8 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any (self . o_0) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn Tuple_platform_value_types_identifier_Identifier_u8_ctor (o_0 : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , o_1 : u8) -> * mut Tuple_platform_value_types_identifier_Identifier_u8 { ferment_interfaces :: boxed (Tuple_platform_value_types_identifier_Identifier_u8 { o_0 , o_1 }) } # [no_mangle] pub unsafe extern "C" fn Tuple_platform_value_types_identifier_Identifier_u8_destroy (ffi : * mut Tuple_platform_value_types_identifier_Identifier_u8) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_Tuple_platform_value_types_identifier_Identifier_u8 { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Tuple_platform_value_types_identifier_Identifier_u8 } impl ferment_interfaces :: FFIConversionFrom < Vec < (platform_value :: types :: identifier :: Identifier , u8) > > for Vec_Tuple_platform_value_types_identifier_Identifier_u8 { unsafe fn ffi_from_const (ffi : * const Vec_Tuple_platform_value_types_identifier_Identifier_u8) -> Vec < (platform_value :: types :: identifier :: Identifier , u8) > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } } impl ferment_interfaces :: FFIConversionTo < Vec < (platform_value :: types :: identifier :: Identifier , u8) > > for Vec_Tuple_platform_value_types_identifier_Identifier_u8 { unsafe fn ffi_to_const (obj : Vec < (platform_value :: types :: identifier :: Identifier , u8) >) -> * const Vec_Tuple_platform_value_types_identifier_Identifier_u8 { ferment_interfaces :: FFIVecConversion :: encode (obj) } } impl ferment_interfaces :: FFIConversionDestroy < Vec < (platform_value :: types :: identifier :: Identifier , u8) > > for Vec_Tuple_platform_value_types_identifier_Identifier_u8 { unsafe fn destroy (ffi : * mut Vec_Tuple_platform_value_types_identifier_Identifier_u8) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_Tuple_platform_value_types_identifier_Identifier_u8 { type Value = Vec < (platform_value :: types :: identifier :: Identifier , u8) > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_Tuple_platform_value_types_identifier_Identifier_u8 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_platform_value_types_identifier_Identifier_u8_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Tuple_platform_value_types_identifier_Identifier_u8) -> * mut Vec_Tuple_platform_value_types_identifier_Identifier_u8 { ferment_interfaces :: boxed (Vec_Tuple_platform_value_types_identifier_Identifier_u8 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_platform_value_types_identifier_Identifier_u8_destroy (ffi : * mut Vec_Tuple_platform_value_types_identifier_Identifier_u8) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Tuple_platform_value_Value_platform_value_Value { pub o_0 : * mut crate :: fermented :: types :: platform_value :: platform_value_Value , pub o_1 : * mut crate :: fermented :: types :: platform_value :: platform_value_Value } impl ferment_interfaces :: FFIConversionFrom < (platform_value :: Value , platform_value :: Value) > for Tuple_platform_value_Value_platform_value_Value { unsafe fn ffi_from_const (ffi : * const Tuple_platform_value_Value_platform_value_Value) -> (platform_value :: Value , platform_value :: Value) { let ffi_ref = & * ffi ; (ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . o_0) , ferment_interfaces :: FFIConversionFrom :: ffi_from (ffi_ref . o_1)) } } impl ferment_interfaces :: FFIConversionTo < (platform_value :: Value , platform_value :: Value) > for Tuple_platform_value_Value_platform_value_Value { unsafe fn ffi_to_const (obj : (platform_value :: Value , platform_value :: Value)) -> * const Tuple_platform_value_Value_platform_value_Value { ferment_interfaces :: boxed (Self { o_0 : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . 0) , o_1 : ferment_interfaces :: FFIConversionTo :: ffi_to (obj . 1) }) } } impl ferment_interfaces :: FFIConversionDestroy < (platform_value :: Value , platform_value :: Value) > for Tuple_platform_value_Value_platform_value_Value { unsafe fn destroy (ffi : * mut Tuple_platform_value_Value_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Tuple_platform_value_Value_platform_value_Value { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any (self . o_0) ; ferment_interfaces :: unbox_any (self . o_1) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Tuple_platform_value_Value_platform_value_Value_ctor (o_0 : * mut crate :: fermented :: types :: platform_value :: platform_value_Value , o_1 : * mut crate :: fermented :: types :: platform_value :: platform_value_Value) -> * mut Tuple_platform_value_Value_platform_value_Value { ferment_interfaces :: boxed (Tuple_platform_value_Value_platform_value_Value { o_0 , o_1 }) } # [no_mangle] pub unsafe extern "C" fn Tuple_platform_value_Value_platform_value_Value_destroy (ffi : * mut Tuple_platform_value_Value_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; } }