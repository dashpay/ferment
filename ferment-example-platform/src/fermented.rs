# [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unused_braces , unused_imports , unused_unsafe , unused_variables , unused_qualifications)] pub mod types { pub mod platform_value { use crate as ferment_example_platform ; pub mod btreemap_extensions { use crate as ferment_example_platform ; } pub mod value_serialization { use crate as ferment_example_platform ; pub mod tests { use crate as ferment_example_platform ; } } pub mod converter { use crate as ferment_example_platform ; pub mod serde_json { use crate as ferment_example_platform ; pub mod tests { use crate as ferment_example_platform ; } } } pub mod error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_value::error::Error`]"] # [repr (C)] # [derive (Clone)] pub enum platform_value_error_Error { Unsupported (* mut std :: os :: raw :: c_char) , StructureError (* mut std :: os :: raw :: c_char) , PathError (* mut std :: os :: raw :: c_char) , IntegerSizeError , IntegerParsingError , StringDecodingError (* mut std :: os :: raw :: c_char) , KeyMustBeAString , ByteLengthNot20BytesError (* mut std :: os :: raw :: c_char) , ByteLengthNot32BytesError (* mut std :: os :: raw :: c_char) , ByteLengthNot36BytesError (* mut std :: os :: raw :: c_char) , SerdeSerializationError (* mut std :: os :: raw :: c_char) , SerdeDeserializationError (* mut std :: os :: raw :: c_char) , CborSerializationError (* mut std :: os :: raw :: c_char) } impl ferment_interfaces :: FFIConversion < platform_value :: error :: Error > for platform_value_error_Error { unsafe fn ffi_from_const (ffi : * const platform_value_error_Error) -> platform_value :: error :: Error { let ffi_ref = & * ffi ; match ffi_ref { platform_value_error_Error :: Unsupported (o_0) => platform_value :: error :: Error :: Unsupported (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , platform_value_error_Error :: StructureError (o_0) => platform_value :: error :: Error :: StructureError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , platform_value_error_Error :: PathError (o_0) => platform_value :: error :: Error :: PathError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , platform_value_error_Error :: IntegerSizeError => platform_value :: error :: Error :: IntegerSizeError , platform_value_error_Error :: IntegerParsingError => platform_value :: error :: Error :: IntegerParsingError , platform_value_error_Error :: StringDecodingError (o_0) => platform_value :: error :: Error :: StringDecodingError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , platform_value_error_Error :: KeyMustBeAString => platform_value :: error :: Error :: KeyMustBeAString , platform_value_error_Error :: ByteLengthNot20BytesError (o_0) => platform_value :: error :: Error :: ByteLengthNot20BytesError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , platform_value_error_Error :: ByteLengthNot32BytesError (o_0) => platform_value :: error :: Error :: ByteLengthNot32BytesError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , platform_value_error_Error :: ByteLengthNot36BytesError (o_0) => platform_value :: error :: Error :: ByteLengthNot36BytesError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , platform_value_error_Error :: SerdeSerializationError (o_0) => platform_value :: error :: Error :: SerdeSerializationError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , platform_value_error_Error :: SerdeDeserializationError (o_0) => platform_value :: error :: Error :: SerdeDeserializationError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , platform_value_error_Error :: CborSerializationError (o_0) => platform_value :: error :: Error :: CborSerializationError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : platform_value :: error :: Error) -> * const platform_value_error_Error { ferment_interfaces :: boxed (match obj { platform_value :: error :: Error :: Unsupported (o_0) => platform_value_error_Error :: Unsupported (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , platform_value :: error :: Error :: StructureError (o_0) => platform_value_error_Error :: StructureError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , platform_value :: error :: Error :: PathError (o_0) => platform_value_error_Error :: PathError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , platform_value :: error :: Error :: IntegerSizeError => platform_value_error_Error :: IntegerSizeError , platform_value :: error :: Error :: IntegerParsingError => platform_value_error_Error :: IntegerParsingError , platform_value :: error :: Error :: StringDecodingError (o_0) => platform_value_error_Error :: StringDecodingError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , platform_value :: error :: Error :: KeyMustBeAString => platform_value_error_Error :: KeyMustBeAString , platform_value :: error :: Error :: ByteLengthNot20BytesError (o_0) => platform_value_error_Error :: ByteLengthNot20BytesError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , platform_value :: error :: Error :: ByteLengthNot32BytesError (o_0) => platform_value_error_Error :: ByteLengthNot32BytesError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , platform_value :: error :: Error :: ByteLengthNot36BytesError (o_0) => platform_value_error_Error :: ByteLengthNot36BytesError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , platform_value :: error :: Error :: SerdeSerializationError (o_0) => platform_value_error_Error :: SerdeSerializationError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , platform_value :: error :: Error :: SerdeDeserializationError (o_0) => platform_value_error_Error :: SerdeDeserializationError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , platform_value :: error :: Error :: CborSerializationError (o_0) => platform_value_error_Error :: CborSerializationError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut platform_value_error_Error) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for platform_value_error_Error { fn drop (& mut self) { unsafe { match self { platform_value_error_Error :: Unsupported (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , platform_value_error_Error :: StructureError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , platform_value_error_Error :: PathError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , platform_value_error_Error :: IntegerSizeError => { } , platform_value_error_Error :: IntegerParsingError => { } , platform_value_error_Error :: StringDecodingError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , platform_value_error_Error :: KeyMustBeAString => { } , platform_value_error_Error :: ByteLengthNot20BytesError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , platform_value_error_Error :: ByteLengthNot32BytesError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , platform_value_error_Error :: ByteLengthNot36BytesError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , platform_value_error_Error :: SerdeSerializationError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , platform_value_error_Error :: SerdeDeserializationError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , platform_value_error_Error :: CborSerializationError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } } ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_Unsupported_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: Unsupported (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_StructureError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: StructureError (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_PathError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: PathError (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_IntegerSizeError_ctor () -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: IntegerSizeError) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_IntegerParsingError_ctor () -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: IntegerParsingError) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_StringDecodingError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: StringDecodingError (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_KeyMustBeAString_ctor () -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: KeyMustBeAString) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_ByteLengthNot20BytesError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: ByteLengthNot20BytesError (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_ByteLengthNot32BytesError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: ByteLengthNot32BytesError (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_ByteLengthNot36BytesError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: ByteLengthNot36BytesError (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_SerdeSerializationError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: SerdeSerializationError (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_SerdeDeserializationError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: SerdeDeserializationError (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_CborSerializationError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment_interfaces :: boxed (platform_value_error_Error :: CborSerializationError (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_destroy (ffi : * mut platform_value_error_Error) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod patch { use crate as ferment_example_platform ; pub mod diff { use crate as ferment_example_platform ; pub mod tests { use crate as ferment_example_platform ; } } } pub mod inner_value_at_path { use crate as ferment_example_platform ; pub mod test { use crate as ferment_example_platform ; } } pub mod macros { use crate as ferment_example_platform ; pub mod test { use crate as ferment_example_platform ; } } pub mod index { use crate as ferment_example_platform ; pub mod private { use crate as ferment_example_platform ; } } pub mod value_map { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_value::value_map::ValueMap`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_value_map_ValueMap (* mut crate :: fermented :: generics :: Vec_Tuple_platform_value_Value_platform_value_Value) ; impl ferment_interfaces :: FFIConversion < platform_value :: value_map :: ValueMap > for platform_value_value_map_ValueMap { unsafe fn ffi_from_const (ffi : * const platform_value_value_map_ValueMap) -> platform_value :: value_map :: ValueMap { let ffi_ref = & * ffi ; ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0) } unsafe fn ffi_to_const (obj : platform_value :: value_map :: ValueMap) -> * const platform_value_value_map_ValueMap { ferment_interfaces :: boxed (platform_value_value_map_ValueMap (ferment_interfaces :: FFIConversion :: ffi_to (obj))) } unsafe fn destroy (ffi : * mut platform_value_value_map_ValueMap) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_value_value_map_ValueMap { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_value_map_ValueMap_ctor (o_0 : * mut crate :: fermented :: generics :: Vec_Tuple_platform_value_Value_platform_value_Value) -> * mut platform_value_value_map_ValueMap { ferment_interfaces :: boxed (platform_value_value_map_ValueMap (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_value_map_ValueMap_destroy (ffi : * mut platform_value_value_map_ValueMap) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_value_value_map_ValueMap_get_0 (obj : * const platform_value_value_map_ValueMap) -> * mut crate :: fermented :: generics :: Vec_Tuple_platform_value_Value_platform_value_Value { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_value_value_map_ValueMap_set_0 (obj : * mut platform_value_value_map_ValueMap , value : * mut crate :: fermented :: generics :: Vec_Tuple_platform_value_Value_platform_value_Value) { (* obj) . 0 = value ; } } # [doc = "FFI-representation of the [`platform_value::Hash256`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_Hash256 (* mut crate :: fermented :: generics :: Arr_u8_32) ; impl ferment_interfaces :: FFIConversion < platform_value :: Hash256 > for platform_value_Hash256 { unsafe fn ffi_from_const (ffi : * const platform_value_Hash256) -> platform_value :: Hash256 { let ffi_ref = & * ffi ; ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0) } unsafe fn ffi_to_const (obj : platform_value :: Hash256) -> * const platform_value_Hash256 { ferment_interfaces :: boxed (platform_value_Hash256 (ferment_interfaces :: FFIConversion :: ffi_to (obj))) } unsafe fn destroy (ffi : * mut platform_value_Hash256) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_value_Hash256 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_Hash256_ctor (o_0 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut platform_value_Hash256 { ferment_interfaces :: boxed (platform_value_Hash256 (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Hash256_destroy (ffi : * mut platform_value_Hash256) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_value_Hash256_get_0 (obj : * const platform_value_Hash256) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_value_Hash256_set_0 (obj : * mut platform_value_Hash256 , value : * mut crate :: fermented :: generics :: Arr_u8_32) { (* obj) . 0 = value ; } pub mod types { use crate as ferment_example_platform ; pub mod identifier { use crate as ferment_example_platform ; pub mod tests { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`platform_value::types::identifier::IdentifierBytes32`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_types_identifier_IdentifierBytes32 (* mut crate :: fermented :: generics :: Arr_u8_32) ; impl ferment_interfaces :: FFIConversion < platform_value :: types :: identifier :: IdentifierBytes32 > for platform_value_types_identifier_IdentifierBytes32 { unsafe fn ffi_from_const (ffi : * const platform_value_types_identifier_IdentifierBytes32) -> platform_value :: types :: identifier :: IdentifierBytes32 { let ffi_ref = & * ffi ; platform_value :: types :: identifier :: IdentifierBytes32 (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0)) } unsafe fn ffi_to_const (obj : platform_value :: types :: identifier :: IdentifierBytes32) -> * const platform_value_types_identifier_IdentifierBytes32 { ferment_interfaces :: boxed (platform_value_types_identifier_IdentifierBytes32 (ferment_interfaces :: FFIConversion :: ffi_to (obj . 0))) } unsafe fn destroy (ffi : * mut platform_value_types_identifier_IdentifierBytes32) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_value_types_identifier_IdentifierBytes32 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_IdentifierBytes32_ctor (o_0 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut platform_value_types_identifier_IdentifierBytes32 { ferment_interfaces :: boxed (platform_value_types_identifier_IdentifierBytes32 (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_IdentifierBytes32_destroy (ffi : * mut platform_value_types_identifier_IdentifierBytes32) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_IdentifierBytes32_get_0 (obj : * const platform_value_types_identifier_IdentifierBytes32) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_IdentifierBytes32_set_0 (obj : * mut platform_value_types_identifier_IdentifierBytes32 , value : * mut crate :: fermented :: generics :: Arr_u8_32) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`platform_value::types::identifier::Identifier`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_types_identifier_Identifier (* mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_IdentifierBytes32) ; impl ferment_interfaces :: FFIConversion < platform_value :: types :: identifier :: Identifier > for platform_value_types_identifier_Identifier { unsafe fn ffi_from_const (ffi : * const platform_value_types_identifier_Identifier) -> platform_value :: types :: identifier :: Identifier { let ffi_ref = & * ffi ; platform_value :: types :: identifier :: Identifier (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0)) } unsafe fn ffi_to_const (obj : platform_value :: types :: identifier :: Identifier) -> * const platform_value_types_identifier_Identifier { ferment_interfaces :: boxed (platform_value_types_identifier_Identifier (ferment_interfaces :: FFIConversion :: ffi_to (obj . 0))) } unsafe fn destroy (ffi : * mut platform_value_types_identifier_Identifier) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_value_types_identifier_Identifier { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_Identifier_ctor (o_0 : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_IdentifierBytes32) -> * mut platform_value_types_identifier_Identifier { ferment_interfaces :: boxed (platform_value_types_identifier_Identifier (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_Identifier_destroy (ffi : * mut platform_value_types_identifier_Identifier) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_Identifier_get_0 (obj : * const platform_value_types_identifier_Identifier) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_IdentifierBytes32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_Identifier_set_0 (obj : * mut platform_value_types_identifier_Identifier , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_IdentifierBytes32) { (* obj) . 0 = value ; } } pub mod binary_data { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_value::types::binary_data::BinaryData`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_types_binary_data_BinaryData (* mut crate :: fermented :: generics :: Vec_u8) ; impl ferment_interfaces :: FFIConversion < platform_value :: types :: binary_data :: BinaryData > for platform_value_types_binary_data_BinaryData { unsafe fn ffi_from_const (ffi : * const platform_value_types_binary_data_BinaryData) -> platform_value :: types :: binary_data :: BinaryData { let ffi_ref = & * ffi ; platform_value :: types :: binary_data :: BinaryData (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0)) } unsafe fn ffi_to_const (obj : platform_value :: types :: binary_data :: BinaryData) -> * const platform_value_types_binary_data_BinaryData { ferment_interfaces :: boxed (platform_value_types_binary_data_BinaryData (ferment_interfaces :: FFIConversion :: ffi_to (obj . 0))) } unsafe fn destroy (ffi : * mut platform_value_types_binary_data_BinaryData) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_value_types_binary_data_BinaryData { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_types_binary_data_BinaryData_ctor (o_0 : * mut crate :: fermented :: generics :: Vec_u8) -> * mut platform_value_types_binary_data_BinaryData { ferment_interfaces :: boxed (platform_value_types_binary_data_BinaryData (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_types_binary_data_BinaryData_destroy (ffi : * mut platform_value_types_binary_data_BinaryData) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_value_types_binary_data_BinaryData_get_0 (obj : * const platform_value_types_binary_data_BinaryData) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_value_types_binary_data_BinaryData_set_0 (obj : * mut platform_value_types_binary_data_BinaryData , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . 0 = value ; } pub mod tests { use crate as ferment_example_platform ; } } pub mod bytes_32 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_value::types::bytes_32::Bytes32`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_types_bytes_32_Bytes32 (* mut crate :: fermented :: generics :: Arr_u8_32) ; impl ferment_interfaces :: FFIConversion < platform_value :: types :: bytes_32 :: Bytes32 > for platform_value_types_bytes_32_Bytes32 { unsafe fn ffi_from_const (ffi : * const platform_value_types_bytes_32_Bytes32) -> platform_value :: types :: bytes_32 :: Bytes32 { let ffi_ref = & * ffi ; platform_value :: types :: bytes_32 :: Bytes32 (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0)) } unsafe fn ffi_to_const (obj : platform_value :: types :: bytes_32 :: Bytes32) -> * const platform_value_types_bytes_32_Bytes32 { ferment_interfaces :: boxed (platform_value_types_bytes_32_Bytes32 (ferment_interfaces :: FFIConversion :: ffi_to (obj . 0))) } unsafe fn destroy (ffi : * mut platform_value_types_bytes_32_Bytes32) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_value_types_bytes_32_Bytes32 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_types_bytes_32_Bytes32_ctor (o_0 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut platform_value_types_bytes_32_Bytes32 { ferment_interfaces :: boxed (platform_value_types_bytes_32_Bytes32 (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_types_bytes_32_Bytes32_destroy (ffi : * mut platform_value_types_bytes_32_Bytes32) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_value_types_bytes_32_Bytes32_get_0 (obj : * const platform_value_types_bytes_32_Bytes32) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_value_types_bytes_32_Bytes32_set_0 (obj : * mut platform_value_types_bytes_32_Bytes32 , value : * mut crate :: fermented :: generics :: Arr_u8_32) { (* obj) . 0 = value ; } } } } pub mod platform_version { use crate as ferment_example_platform ; pub mod error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_version::error::PlatformVersionError`]"] # [repr (C)] # [derive (Clone)] pub enum platform_version_error_PlatformVersionError { UnknownVersionError (* mut std :: os :: raw :: c_char) } impl ferment_interfaces :: FFIConversion < platform_version :: error :: PlatformVersionError > for platform_version_error_PlatformVersionError { unsafe fn ffi_from_const (ffi : * const platform_version_error_PlatformVersionError) -> platform_version :: error :: PlatformVersionError { let ffi_ref = & * ffi ; match ffi_ref { platform_version_error_PlatformVersionError :: UnknownVersionError (o_0) => platform_version :: error :: PlatformVersionError :: UnknownVersionError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : platform_version :: error :: PlatformVersionError) -> * const platform_version_error_PlatformVersionError { ferment_interfaces :: boxed (match obj { platform_version :: error :: PlatformVersionError :: UnknownVersionError (o_0) => platform_version_error_PlatformVersionError :: UnknownVersionError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut platform_version_error_PlatformVersionError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for platform_version_error_PlatformVersionError { fn drop (& mut self) { unsafe { match self { platform_version_error_PlatformVersionError :: UnknownVersionError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } } ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_error_PlatformVersionError_UnknownVersionError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_version_error_PlatformVersionError { ferment_interfaces :: boxed (platform_version_error_PlatformVersionError :: UnknownVersionError (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_version_error_PlatformVersionError_destroy (ffi : * mut platform_version_error_PlatformVersionError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod version { use crate as ferment_example_platform ; pub mod dpp_versions { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::StateTransitionSerializationVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_StateTransitionSerializationVersions { pub identity_public_key_in_creation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub identity_create_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub identity_update_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub identity_top_up_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub identity_credit_withdrawal_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub identity_credit_transfer_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub contract_create_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub contract_update_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub documents_batch_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub document_base_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub document_create_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds , pub document_replace_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds , pub document_delete_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: StateTransitionSerializationVersions > for platform_version_version_dpp_versions_StateTransitionSerializationVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> platform_version :: version :: dpp_versions :: StateTransitionSerializationVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: StateTransitionSerializationVersions { identity_public_key_in_creation : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_public_key_in_creation) , identity_create_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_create_state_transition) , identity_update_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_update_state_transition) , identity_top_up_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_top_up_state_transition) , identity_credit_withdrawal_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_credit_withdrawal_state_transition) , identity_credit_transfer_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_credit_transfer_state_transition) , contract_create_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . contract_create_state_transition) , contract_update_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . contract_update_state_transition) , documents_batch_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . documents_batch_state_transition) , document_base_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_base_state_transition) , document_create_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_create_state_transition) , document_replace_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_replace_state_transition) , document_delete_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_delete_state_transition) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: StateTransitionSerializationVersions) -> * const platform_version_version_dpp_versions_StateTransitionSerializationVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_StateTransitionSerializationVersions { identity_public_key_in_creation : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_public_key_in_creation) , identity_create_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_create_state_transition) , identity_update_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_update_state_transition) , identity_top_up_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_top_up_state_transition) , identity_credit_withdrawal_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_credit_withdrawal_state_transition) , identity_credit_transfer_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_credit_transfer_state_transition) , contract_create_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . contract_create_state_transition) , contract_update_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . contract_update_state_transition) , documents_batch_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . documents_batch_state_transition) , document_base_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_base_state_transition) , document_create_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_create_state_transition) , document_replace_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_replace_state_transition) , document_delete_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_delete_state_transition) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_StateTransitionSerializationVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_public_key_in_creation) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_create_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_update_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_top_up_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_credit_withdrawal_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_credit_transfer_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . contract_create_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . contract_update_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . documents_batch_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_base_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_create_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_replace_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_delete_state_transition) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_ctor (identity_public_key_in_creation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , identity_create_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , identity_update_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , identity_top_up_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , identity_credit_withdrawal_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , identity_credit_transfer_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , contract_create_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , contract_update_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , documents_batch_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , document_base_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , document_create_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds , document_replace_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds , document_delete_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds) -> * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_StateTransitionSerializationVersions { identity_public_key_in_creation , identity_create_state_transition , identity_update_state_transition , identity_top_up_state_transition , identity_credit_withdrawal_state_transition , identity_credit_transfer_state_transition , contract_create_state_transition , contract_update_state_transition , documents_batch_state_transition , document_base_state_transition , document_create_state_transition , document_replace_state_transition , document_delete_state_transition }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_destroy (ffi : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_identity_public_key_in_creation (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identity_public_key_in_creation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_identity_create_state_transition (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identity_create_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_identity_update_state_transition (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identity_update_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_identity_top_up_state_transition (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identity_top_up_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_identity_credit_withdrawal_state_transition (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identity_credit_withdrawal_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_identity_credit_transfer_state_transition (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identity_credit_transfer_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_contract_create_state_transition (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . contract_create_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_contract_update_state_transition (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . contract_update_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_documents_batch_state_transition (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . documents_batch_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_document_base_state_transition (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . document_base_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_document_create_state_transition (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds { (* obj) . document_create_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_document_replace_state_transition (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds { (* obj) . document_replace_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_get_document_delete_state_transition (obj : * const platform_version_version_dpp_versions_StateTransitionSerializationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds { (* obj) . document_delete_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_identity_public_key_in_creation (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identity_public_key_in_creation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_identity_create_state_transition (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identity_create_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_identity_update_state_transition (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identity_update_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_identity_top_up_state_transition (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identity_top_up_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_identity_credit_withdrawal_state_transition (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identity_credit_withdrawal_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_identity_credit_transfer_state_transition (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identity_credit_transfer_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_contract_create_state_transition (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . contract_create_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_contract_update_state_transition (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . contract_update_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_documents_batch_state_transition (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . documents_batch_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_document_base_state_transition (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . document_base_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_document_create_state_transition (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds) { (* obj) . document_create_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_document_replace_state_transition (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds) { (* obj) . document_replace_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionSerializationVersions_set_document_delete_state_transition (obj : * mut platform_version_version_dpp_versions_StateTransitionSerializationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentFeatureVersionBounds) { (* obj) . document_delete_state_transition = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::DocumentMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentMethodVersions { pub hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_raw_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_raw_for_document_type : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: DocumentMethodVersions > for platform_version_version_dpp_versions_DocumentMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentMethodVersions) -> platform_version :: version :: dpp_versions :: DocumentMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentMethodVersions { hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . hash) , get_raw_for_contract : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_raw_for_contract) , get_raw_for_document_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_raw_for_document_type) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentMethodVersions) -> * const platform_version_version_dpp_versions_DocumentMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentMethodVersions { hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . hash) , get_raw_for_contract : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_raw_for_contract) , get_raw_for_document_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_raw_for_document_type) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_raw_for_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_raw_for_document_type) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentMethodVersions_ctor (hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_raw_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_raw_for_document_type : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_DocumentMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentMethodVersions { hash , get_raw_for_contract , get_raw_for_document_type }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentMethodVersions_destroy (ffi : * mut platform_version_version_dpp_versions_DocumentMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentMethodVersions_get_hash (obj : * const platform_version_version_dpp_versions_DocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentMethodVersions_get_get_raw_for_contract (obj : * const platform_version_version_dpp_versions_DocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_raw_for_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentMethodVersions_get_get_raw_for_document_type (obj : * const platform_version_version_dpp_versions_DocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_raw_for_document_type } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentMethodVersions_set_hash (obj : * mut platform_version_version_dpp_versions_DocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentMethodVersions_set_get_raw_for_contract (obj : * mut platform_version_version_dpp_versions_DocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_raw_for_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentMethodVersions_set_get_raw_for_document_type (obj : * mut platform_version_version_dpp_versions_DocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_raw_for_document_type = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::IdentityVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_IdentityVersions { pub identity_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub identity_key_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub identity_key_type_method_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: IdentityVersions > for platform_version_version_dpp_versions_IdentityVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_IdentityVersions) -> platform_version :: version :: dpp_versions :: IdentityVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: IdentityVersions { identity_structure_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_structure_version) , identity_key_structure_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_key_structure_version) , identity_key_type_method_versions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_key_type_method_versions) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: IdentityVersions) -> * const platform_version_version_dpp_versions_IdentityVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_IdentityVersions { identity_structure_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_structure_version) , identity_key_structure_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_key_structure_version) , identity_key_type_method_versions : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_key_type_method_versions) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_IdentityVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_IdentityVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_structure_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_key_structure_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_key_type_method_versions) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityVersions_ctor (identity_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , identity_key_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , identity_key_type_method_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions) -> * mut platform_version_version_dpp_versions_IdentityVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_IdentityVersions { identity_structure_version , identity_key_structure_version , identity_key_type_method_versions }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityVersions_destroy (ffi : * mut platform_version_version_dpp_versions_IdentityVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityVersions_get_identity_structure_version (obj : * const platform_version_version_dpp_versions_IdentityVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . identity_structure_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityVersions_get_identity_key_structure_version (obj : * const platform_version_version_dpp_versions_IdentityVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . identity_key_structure_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityVersions_get_identity_key_type_method_versions (obj : * const platform_version_version_dpp_versions_IdentityVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions { (* obj) . identity_key_type_method_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityVersions_set_identity_structure_version (obj : * mut platform_version_version_dpp_versions_IdentityVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . identity_structure_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityVersions_set_identity_key_structure_version (obj : * mut platform_version_version_dpp_versions_IdentityVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . identity_key_structure_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityVersions_set_identity_key_type_method_versions (obj : * mut platform_version_version_dpp_versions_IdentityVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions) { (* obj) . identity_key_type_method_versions = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::DocumentTypeClassMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentTypeClassMethodVersions { pub try_from_schema : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_document_types_from_document_schemas : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: DocumentTypeClassMethodVersions > for platform_version_version_dpp_versions_DocumentTypeClassMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentTypeClassMethodVersions) -> platform_version :: version :: dpp_versions :: DocumentTypeClassMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentTypeClassMethodVersions { try_from_schema : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . try_from_schema) , create_document_types_from_document_schemas : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . create_document_types_from_document_schemas) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentTypeClassMethodVersions) -> * const platform_version_version_dpp_versions_DocumentTypeClassMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeClassMethodVersions { try_from_schema : ferment_interfaces :: FFIConversion :: ffi_to (obj . try_from_schema) , create_document_types_from_document_schemas : ferment_interfaces :: FFIConversion :: ffi_to (obj . create_document_types_from_document_schemas) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentTypeClassMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentTypeClassMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . try_from_schema) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_document_types_from_document_schemas) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeClassMethodVersions_ctor (try_from_schema : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_document_types_from_document_schemas : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_DocumentTypeClassMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeClassMethodVersions { try_from_schema , create_document_types_from_document_schemas }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeClassMethodVersions_destroy (ffi : * mut platform_version_version_dpp_versions_DocumentTypeClassMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeClassMethodVersions_get_try_from_schema (obj : * const platform_version_version_dpp_versions_DocumentTypeClassMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . try_from_schema } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeClassMethodVersions_get_create_document_types_from_document_schemas (obj : * const platform_version_version_dpp_versions_DocumentTypeClassMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_document_types_from_document_schemas } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeClassMethodVersions_set_try_from_schema (obj : * mut platform_version_version_dpp_versions_DocumentTypeClassMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . try_from_schema = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeClassMethodVersions_set_create_document_types_from_document_schemas (obj : * mut platform_version_version_dpp_versions_DocumentTypeClassMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_document_types_from_document_schemas = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::DocumentFeatureVersionBounds`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentFeatureVersionBounds { pub bounds : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: DocumentFeatureVersionBounds > for platform_version_version_dpp_versions_DocumentFeatureVersionBounds { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentFeatureVersionBounds) -> platform_version :: version :: dpp_versions :: DocumentFeatureVersionBounds { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentFeatureVersionBounds { bounds : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . bounds) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentFeatureVersionBounds) -> * const platform_version_version_dpp_versions_DocumentFeatureVersionBounds { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentFeatureVersionBounds { bounds : ferment_interfaces :: FFIConversion :: ffi_to (obj . bounds) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentFeatureVersionBounds) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentFeatureVersionBounds { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . bounds) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentFeatureVersionBounds_ctor (bounds : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) -> * mut platform_version_version_dpp_versions_DocumentFeatureVersionBounds { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentFeatureVersionBounds { bounds }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentFeatureVersionBounds_destroy (ffi : * mut platform_version_version_dpp_versions_DocumentFeatureVersionBounds) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentFeatureVersionBounds_get_bounds (obj : * const platform_version_version_dpp_versions_DocumentFeatureVersionBounds) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . bounds } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentFeatureVersionBounds_set_bounds (obj : * mut platform_version_version_dpp_versions_DocumentFeatureVersionBounds , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . bounds = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::DPPValidationVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DPPValidationVersions { pub validate_time_in_block_time_window : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub json_schema_validator : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_JsonSchemaValidatorVersions , pub data_contract : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DataContractValidationVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: DPPValidationVersions > for platform_version_version_dpp_versions_DPPValidationVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DPPValidationVersions) -> platform_version :: version :: dpp_versions :: DPPValidationVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DPPValidationVersions { validate_time_in_block_time_window : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_time_in_block_time_window) , json_schema_validator : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . json_schema_validator) , data_contract : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DPPValidationVersions) -> * const platform_version_version_dpp_versions_DPPValidationVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DPPValidationVersions { validate_time_in_block_time_window : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_time_in_block_time_window) , json_schema_validator : ferment_interfaces :: FFIConversion :: ffi_to (obj . json_schema_validator) , data_contract : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DPPValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DPPValidationVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . validate_time_in_block_time_window) ; ; ferment_interfaces :: unbox_any (ffi_ref . json_schema_validator) ; ; ferment_interfaces :: unbox_any (ffi_ref . data_contract) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPValidationVersions_ctor (validate_time_in_block_time_window : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , json_schema_validator : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_JsonSchemaValidatorVersions , data_contract : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DataContractValidationVersions) -> * mut platform_version_version_dpp_versions_DPPValidationVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DPPValidationVersions { validate_time_in_block_time_window , json_schema_validator , data_contract }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPValidationVersions_destroy (ffi : * mut platform_version_version_dpp_versions_DPPValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPValidationVersions_get_validate_time_in_block_time_window (obj : * const platform_version_version_dpp_versions_DPPValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_time_in_block_time_window } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPValidationVersions_get_json_schema_validator (obj : * const platform_version_version_dpp_versions_DPPValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_JsonSchemaValidatorVersions { (* obj) . json_schema_validator } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPValidationVersions_get_data_contract (obj : * const platform_version_version_dpp_versions_DPPValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DataContractValidationVersions { (* obj) . data_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPValidationVersions_set_validate_time_in_block_time_window (obj : * mut platform_version_version_dpp_versions_DPPValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_time_in_block_time_window = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPValidationVersions_set_json_schema_validator (obj : * mut platform_version_version_dpp_versions_DPPValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_JsonSchemaValidatorVersions) { (* obj) . json_schema_validator = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPValidationVersions_set_data_contract (obj : * mut platform_version_version_dpp_versions_DPPValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DataContractValidationVersions) { (* obj) . data_contract = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::PublicKeyInCreationMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions { pub from_public_key_signed_with_private_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub from_public_key_signed_external : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub duplicated_key_ids_witness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub duplicated_keys_witness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_identity_public_keys_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: PublicKeyInCreationMethodVersions > for platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) -> platform_version :: version :: dpp_versions :: PublicKeyInCreationMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: PublicKeyInCreationMethodVersions { from_public_key_signed_with_private_key : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . from_public_key_signed_with_private_key) , from_public_key_signed_external : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . from_public_key_signed_external) , hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . hash) , duplicated_key_ids_witness : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . duplicated_key_ids_witness) , duplicated_keys_witness : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . duplicated_keys_witness) , validate_identity_public_keys_structure : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_identity_public_keys_structure) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: PublicKeyInCreationMethodVersions) -> * const platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions { from_public_key_signed_with_private_key : ferment_interfaces :: FFIConversion :: ffi_to (obj . from_public_key_signed_with_private_key) , from_public_key_signed_external : ferment_interfaces :: FFIConversion :: ffi_to (obj . from_public_key_signed_external) , hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . hash) , duplicated_key_ids_witness : ferment_interfaces :: FFIConversion :: ffi_to (obj . duplicated_key_ids_witness) , duplicated_keys_witness : ferment_interfaces :: FFIConversion :: ffi_to (obj . duplicated_keys_witness) , validate_identity_public_keys_structure : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_identity_public_keys_structure) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . from_public_key_signed_with_private_key) ; ; ferment_interfaces :: unbox_any (ffi_ref . from_public_key_signed_external) ; ; ferment_interfaces :: unbox_any (ffi_ref . hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . duplicated_key_ids_witness) ; ; ferment_interfaces :: unbox_any (ffi_ref . duplicated_keys_witness) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_identity_public_keys_structure) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_ctor (from_public_key_signed_with_private_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , from_public_key_signed_external : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , duplicated_key_ids_witness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , duplicated_keys_witness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_identity_public_keys_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions { from_public_key_signed_with_private_key , from_public_key_signed_external , hash , duplicated_key_ids_witness , duplicated_keys_witness , validate_identity_public_keys_structure }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_destroy (ffi : * mut platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_get_from_public_key_signed_with_private_key (obj : * const platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . from_public_key_signed_with_private_key } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_get_from_public_key_signed_external (obj : * const platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . from_public_key_signed_external } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_get_hash (obj : * const platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_get_duplicated_key_ids_witness (obj : * const platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . duplicated_key_ids_witness } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_get_duplicated_keys_witness (obj : * const platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . duplicated_keys_witness } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_get_validate_identity_public_keys_structure (obj : * const platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_identity_public_keys_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_set_from_public_key_signed_with_private_key (obj : * mut platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . from_public_key_signed_with_private_key = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_set_from_public_key_signed_external (obj : * mut platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . from_public_key_signed_external = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_set_hash (obj : * mut platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_set_duplicated_key_ids_witness (obj : * mut platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . duplicated_key_ids_witness = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_set_duplicated_keys_witness (obj : * mut platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . duplicated_keys_witness = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions_set_validate_identity_public_keys_structure (obj : * mut platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_identity_public_keys_structure = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::DPPVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DPPVersion { pub costs : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_CostVersions , pub validation : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DPPValidationVersions , pub state_transition_serialization_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionSerializationVersions , pub state_transition_conversion_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionConversionVersions , pub state_transition_method_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionMethodVersions , pub state_transitions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionVersions , pub contract_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_ContractVersions , pub document_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentVersions , pub identity_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: DPPVersion > for platform_version_version_dpp_versions_DPPVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DPPVersion) -> platform_version :: version :: dpp_versions :: DPPVersion { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DPPVersion { costs : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . costs) , validation : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validation) , state_transition_serialization_versions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . state_transition_serialization_versions) , state_transition_conversion_versions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . state_transition_conversion_versions) , state_transition_method_versions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . state_transition_method_versions) , state_transitions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . state_transitions) , contract_versions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . contract_versions) , document_versions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_versions) , identity_versions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_versions) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DPPVersion) -> * const platform_version_version_dpp_versions_DPPVersion { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DPPVersion { costs : ferment_interfaces :: FFIConversion :: ffi_to (obj . costs) , validation : ferment_interfaces :: FFIConversion :: ffi_to (obj . validation) , state_transition_serialization_versions : ferment_interfaces :: FFIConversion :: ffi_to (obj . state_transition_serialization_versions) , state_transition_conversion_versions : ferment_interfaces :: FFIConversion :: ffi_to (obj . state_transition_conversion_versions) , state_transition_method_versions : ferment_interfaces :: FFIConversion :: ffi_to (obj . state_transition_method_versions) , state_transitions : ferment_interfaces :: FFIConversion :: ffi_to (obj . state_transitions) , contract_versions : ferment_interfaces :: FFIConversion :: ffi_to (obj . contract_versions) , document_versions : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_versions) , identity_versions : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_versions) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DPPVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DPPVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . costs) ; ; ferment_interfaces :: unbox_any (ffi_ref . validation) ; ; ferment_interfaces :: unbox_any (ffi_ref . state_transition_serialization_versions) ; ; ferment_interfaces :: unbox_any (ffi_ref . state_transition_conversion_versions) ; ; ferment_interfaces :: unbox_any (ffi_ref . state_transition_method_versions) ; ; ferment_interfaces :: unbox_any (ffi_ref . state_transitions) ; ; ferment_interfaces :: unbox_any (ffi_ref . contract_versions) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_versions) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_versions) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_ctor (costs : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_CostVersions , validation : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DPPValidationVersions , state_transition_serialization_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionSerializationVersions , state_transition_conversion_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionConversionVersions , state_transition_method_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionMethodVersions , state_transitions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionVersions , contract_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_ContractVersions , document_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentVersions , identity_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityVersions) -> * mut platform_version_version_dpp_versions_DPPVersion { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DPPVersion { costs , validation , state_transition_serialization_versions , state_transition_conversion_versions , state_transition_method_versions , state_transitions , contract_versions , document_versions , identity_versions }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_destroy (ffi : * mut platform_version_version_dpp_versions_DPPVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_get_costs (obj : * const platform_version_version_dpp_versions_DPPVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_CostVersions { (* obj) . costs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_get_validation (obj : * const platform_version_version_dpp_versions_DPPVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DPPValidationVersions { (* obj) . validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_get_state_transition_serialization_versions (obj : * const platform_version_version_dpp_versions_DPPVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionSerializationVersions { (* obj) . state_transition_serialization_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_get_state_transition_conversion_versions (obj : * const platform_version_version_dpp_versions_DPPVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionConversionVersions { (* obj) . state_transition_conversion_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_get_state_transition_method_versions (obj : * const platform_version_version_dpp_versions_DPPVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionMethodVersions { (* obj) . state_transition_method_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_get_state_transitions (obj : * const platform_version_version_dpp_versions_DPPVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionVersions { (* obj) . state_transitions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_get_contract_versions (obj : * const platform_version_version_dpp_versions_DPPVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_ContractVersions { (* obj) . contract_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_get_document_versions (obj : * const platform_version_version_dpp_versions_DPPVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentVersions { (* obj) . document_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_get_identity_versions (obj : * const platform_version_version_dpp_versions_DPPVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityVersions { (* obj) . identity_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_set_costs (obj : * mut platform_version_version_dpp_versions_DPPVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_CostVersions) { (* obj) . costs = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_set_validation (obj : * mut platform_version_version_dpp_versions_DPPVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DPPValidationVersions) { (* obj) . validation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_set_state_transition_serialization_versions (obj : * mut platform_version_version_dpp_versions_DPPVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionSerializationVersions) { (* obj) . state_transition_serialization_versions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_set_state_transition_conversion_versions (obj : * mut platform_version_version_dpp_versions_DPPVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionConversionVersions) { (* obj) . state_transition_conversion_versions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_set_state_transition_method_versions (obj : * mut platform_version_version_dpp_versions_DPPVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionMethodVersions) { (* obj) . state_transition_method_versions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_set_state_transitions (obj : * mut platform_version_version_dpp_versions_DPPVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_StateTransitionVersions) { (* obj) . state_transitions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_set_contract_versions (obj : * mut platform_version_version_dpp_versions_DPPVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_ContractVersions) { (* obj) . contract_versions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_set_document_versions (obj : * mut platform_version_version_dpp_versions_DPPVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentVersions) { (* obj) . document_versions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DPPVersion_set_identity_versions (obj : * mut platform_version_version_dpp_versions_DPPVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityVersions) { (* obj) . identity_versions = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::DocumentTypeIndexVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentTypeIndexVersions { pub index_levels_from_indices : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: DocumentTypeIndexVersions > for platform_version_version_dpp_versions_DocumentTypeIndexVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentTypeIndexVersions) -> platform_version :: version :: dpp_versions :: DocumentTypeIndexVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentTypeIndexVersions { index_levels_from_indices : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . index_levels_from_indices) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentTypeIndexVersions) -> * const platform_version_version_dpp_versions_DocumentTypeIndexVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeIndexVersions { index_levels_from_indices : ferment_interfaces :: FFIConversion :: ffi_to (obj . index_levels_from_indices) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentTypeIndexVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentTypeIndexVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . index_levels_from_indices) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeIndexVersions_ctor (index_levels_from_indices : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_DocumentTypeIndexVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeIndexVersions { index_levels_from_indices }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeIndexVersions_destroy (ffi : * mut platform_version_version_dpp_versions_DocumentTypeIndexVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeIndexVersions_get_index_levels_from_indices (obj : * const platform_version_version_dpp_versions_DocumentTypeIndexVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . index_levels_from_indices } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeIndexVersions_set_index_levels_from_indices (obj : * mut platform_version_version_dpp_versions_DocumentTypeIndexVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . index_levels_from_indices = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::DocumentTypeSchemaVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentTypeSchemaVersions { pub enrich_with_base_schema : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub find_identifier_and_binary_paths : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_max_depth : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub recursive_schema_validator_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions , pub validate_schema_compatibility : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: DocumentTypeSchemaVersions > for platform_version_version_dpp_versions_DocumentTypeSchemaVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentTypeSchemaVersions) -> platform_version :: version :: dpp_versions :: DocumentTypeSchemaVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentTypeSchemaVersions { enrich_with_base_schema : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . enrich_with_base_schema) , find_identifier_and_binary_paths : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . find_identifier_and_binary_paths) , validate_max_depth : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_max_depth) , recursive_schema_validator_versions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . recursive_schema_validator_versions) , validate_schema_compatibility : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_schema_compatibility) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentTypeSchemaVersions) -> * const platform_version_version_dpp_versions_DocumentTypeSchemaVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeSchemaVersions { enrich_with_base_schema : ferment_interfaces :: FFIConversion :: ffi_to (obj . enrich_with_base_schema) , find_identifier_and_binary_paths : ferment_interfaces :: FFIConversion :: ffi_to (obj . find_identifier_and_binary_paths) , validate_max_depth : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_max_depth) , recursive_schema_validator_versions : ferment_interfaces :: FFIConversion :: ffi_to (obj . recursive_schema_validator_versions) , validate_schema_compatibility : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_schema_compatibility) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentTypeSchemaVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentTypeSchemaVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . enrich_with_base_schema) ; ; ferment_interfaces :: unbox_any (ffi_ref . find_identifier_and_binary_paths) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_max_depth) ; ; ferment_interfaces :: unbox_any (ffi_ref . recursive_schema_validator_versions) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_schema_compatibility) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_ctor (enrich_with_base_schema : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , find_identifier_and_binary_paths : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_max_depth : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , recursive_schema_validator_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions , validate_schema_compatibility : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_DocumentTypeSchemaVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeSchemaVersions { enrich_with_base_schema , find_identifier_and_binary_paths , validate_max_depth , recursive_schema_validator_versions , validate_schema_compatibility }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_destroy (ffi : * mut platform_version_version_dpp_versions_DocumentTypeSchemaVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_get_enrich_with_base_schema (obj : * const platform_version_version_dpp_versions_DocumentTypeSchemaVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . enrich_with_base_schema } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_get_find_identifier_and_binary_paths (obj : * const platform_version_version_dpp_versions_DocumentTypeSchemaVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . find_identifier_and_binary_paths } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_get_validate_max_depth (obj : * const platform_version_version_dpp_versions_DocumentTypeSchemaVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_max_depth } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_get_recursive_schema_validator_versions (obj : * const platform_version_version_dpp_versions_DocumentTypeSchemaVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions { (* obj) . recursive_schema_validator_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_get_validate_schema_compatibility (obj : * const platform_version_version_dpp_versions_DocumentTypeSchemaVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_schema_compatibility } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_set_enrich_with_base_schema (obj : * mut platform_version_version_dpp_versions_DocumentTypeSchemaVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . enrich_with_base_schema = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_set_find_identifier_and_binary_paths (obj : * mut platform_version_version_dpp_versions_DocumentTypeSchemaVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . find_identifier_and_binary_paths = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_set_validate_max_depth (obj : * mut platform_version_version_dpp_versions_DocumentTypeSchemaVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_max_depth = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_set_recursive_schema_validator_versions (obj : * mut platform_version_version_dpp_versions_DocumentTypeSchemaVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions) { (* obj) . recursive_schema_validator_versions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeSchemaVersions_set_validate_schema_compatibility (obj : * mut platform_version_version_dpp_versions_DocumentTypeSchemaVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_schema_compatibility = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::StateTransitionConversionVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_StateTransitionConversionVersions { pub identity_to_identity_create_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub identity_to_identity_top_up_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub identity_to_identity_withdrawal_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub identity_to_identity_create_transition_with_signer : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: StateTransitionConversionVersions > for platform_version_version_dpp_versions_StateTransitionConversionVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_StateTransitionConversionVersions) -> platform_version :: version :: dpp_versions :: StateTransitionConversionVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: StateTransitionConversionVersions { identity_to_identity_create_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_to_identity_create_transition) , identity_to_identity_top_up_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_to_identity_top_up_transition) , identity_to_identity_withdrawal_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_to_identity_withdrawal_transition) , identity_to_identity_create_transition_with_signer : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_to_identity_create_transition_with_signer) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: StateTransitionConversionVersions) -> * const platform_version_version_dpp_versions_StateTransitionConversionVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_StateTransitionConversionVersions { identity_to_identity_create_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_to_identity_create_transition) , identity_to_identity_top_up_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_to_identity_top_up_transition) , identity_to_identity_withdrawal_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_to_identity_withdrawal_transition) , identity_to_identity_create_transition_with_signer : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_to_identity_create_transition_with_signer) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_StateTransitionConversionVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_StateTransitionConversionVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_to_identity_create_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_to_identity_top_up_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_to_identity_withdrawal_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_to_identity_create_transition_with_signer) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionConversionVersions_ctor (identity_to_identity_create_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , identity_to_identity_top_up_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , identity_to_identity_withdrawal_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , identity_to_identity_create_transition_with_signer : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_StateTransitionConversionVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_StateTransitionConversionVersions { identity_to_identity_create_transition , identity_to_identity_top_up_transition , identity_to_identity_withdrawal_transition , identity_to_identity_create_transition_with_signer }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionConversionVersions_destroy (ffi : * mut platform_version_version_dpp_versions_StateTransitionConversionVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionConversionVersions_get_identity_to_identity_create_transition (obj : * const platform_version_version_dpp_versions_StateTransitionConversionVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . identity_to_identity_create_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionConversionVersions_get_identity_to_identity_top_up_transition (obj : * const platform_version_version_dpp_versions_StateTransitionConversionVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . identity_to_identity_top_up_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionConversionVersions_get_identity_to_identity_withdrawal_transition (obj : * const platform_version_version_dpp_versions_StateTransitionConversionVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . identity_to_identity_withdrawal_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionConversionVersions_get_identity_to_identity_create_transition_with_signer (obj : * const platform_version_version_dpp_versions_StateTransitionConversionVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . identity_to_identity_create_transition_with_signer } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionConversionVersions_set_identity_to_identity_create_transition (obj : * mut platform_version_version_dpp_versions_StateTransitionConversionVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . identity_to_identity_create_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionConversionVersions_set_identity_to_identity_top_up_transition (obj : * mut platform_version_version_dpp_versions_StateTransitionConversionVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . identity_to_identity_top_up_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionConversionVersions_set_identity_to_identity_withdrawal_transition (obj : * mut platform_version_version_dpp_versions_StateTransitionConversionVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . identity_to_identity_withdrawal_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionConversionVersions_set_identity_to_identity_create_transition_with_signer (obj : * mut platform_version_version_dpp_versions_StateTransitionConversionVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . identity_to_identity_create_transition_with_signer = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::CostVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_CostVersions { pub signature_verify : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: CostVersions > for platform_version_version_dpp_versions_CostVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_CostVersions) -> platform_version :: version :: dpp_versions :: CostVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: CostVersions { signature_verify : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . signature_verify) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: CostVersions) -> * const platform_version_version_dpp_versions_CostVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_CostVersions { signature_verify : ferment_interfaces :: FFIConversion :: ffi_to (obj . signature_verify) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_CostVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_CostVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . signature_verify) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_CostVersions_ctor (signature_verify : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_CostVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_CostVersions { signature_verify }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_CostVersions_destroy (ffi : * mut platform_version_version_dpp_versions_CostVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_CostVersions_get_signature_verify (obj : * const platform_version_version_dpp_versions_CostVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . signature_verify } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_CostVersions_set_signature_verify (obj : * mut platform_version_version_dpp_versions_CostVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . signature_verify = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::JsonSchemaValidatorVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_JsonSchemaValidatorVersions { pub new : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub compile : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: JsonSchemaValidatorVersions > for platform_version_version_dpp_versions_JsonSchemaValidatorVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_JsonSchemaValidatorVersions) -> platform_version :: version :: dpp_versions :: JsonSchemaValidatorVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: JsonSchemaValidatorVersions { new : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . new) , validate : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate) , compile : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . compile) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: JsonSchemaValidatorVersions) -> * const platform_version_version_dpp_versions_JsonSchemaValidatorVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_JsonSchemaValidatorVersions { new : ferment_interfaces :: FFIConversion :: ffi_to (obj . new) , validate : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate) , compile : ferment_interfaces :: FFIConversion :: ffi_to (obj . compile) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_JsonSchemaValidatorVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_JsonSchemaValidatorVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . new) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate) ; ; ferment_interfaces :: unbox_any (ffi_ref . compile) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_JsonSchemaValidatorVersions_ctor (new : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , compile : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_JsonSchemaValidatorVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_JsonSchemaValidatorVersions { new , validate , compile }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_JsonSchemaValidatorVersions_destroy (ffi : * mut platform_version_version_dpp_versions_JsonSchemaValidatorVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_JsonSchemaValidatorVersions_get_new (obj : * const platform_version_version_dpp_versions_JsonSchemaValidatorVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . new } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_JsonSchemaValidatorVersions_get_validate (obj : * const platform_version_version_dpp_versions_JsonSchemaValidatorVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_JsonSchemaValidatorVersions_get_compile (obj : * const platform_version_version_dpp_versions_JsonSchemaValidatorVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . compile } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_JsonSchemaValidatorVersions_set_new (obj : * mut platform_version_version_dpp_versions_JsonSchemaValidatorVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . new = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_JsonSchemaValidatorVersions_set_validate (obj : * mut platform_version_version_dpp_versions_JsonSchemaValidatorVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_JsonSchemaValidatorVersions_set_compile (obj : * mut platform_version_version_dpp_versions_JsonSchemaValidatorVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . compile = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::DocumentsBatchTransitionValidationVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions { pub find_duplicates_by_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_base_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: DocumentsBatchTransitionValidationVersions > for platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions) -> platform_version :: version :: dpp_versions :: DocumentsBatchTransitionValidationVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentsBatchTransitionValidationVersions { find_duplicates_by_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . find_duplicates_by_id) , validate_base_structure : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_base_structure) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentsBatchTransitionValidationVersions) -> * const platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions { find_duplicates_by_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . find_duplicates_by_id) , validate_base_structure : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_base_structure) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . find_duplicates_by_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_base_structure) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions_ctor (find_duplicates_by_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_base_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions { find_duplicates_by_id , validate_base_structure }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions_destroy (ffi : * mut platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions_get_find_duplicates_by_id (obj : * const platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . find_duplicates_by_id } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions_get_validate_base_structure (obj : * const platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_base_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions_set_find_duplicates_by_id (obj : * mut platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . find_duplicates_by_id = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions_set_validate_base_structure (obj : * mut platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_base_structure = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::DocumentVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentVersions { pub document_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_serialization_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub document_cbor_serialization_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub extended_document_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub extended_document_serialization_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub document_method_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentMethodVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: DocumentVersions > for platform_version_version_dpp_versions_DocumentVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentVersions) -> platform_version :: version :: dpp_versions :: DocumentVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentVersions { document_structure_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_structure_version) , document_serialization_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_serialization_version) , document_cbor_serialization_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_cbor_serialization_version) , extended_document_structure_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . extended_document_structure_version) , extended_document_serialization_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . extended_document_serialization_version) , document_method_versions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_method_versions) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentVersions) -> * const platform_version_version_dpp_versions_DocumentVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentVersions { document_structure_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_structure_version) , document_serialization_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_serialization_version) , document_cbor_serialization_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_cbor_serialization_version) , extended_document_structure_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . extended_document_structure_version) , extended_document_serialization_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . extended_document_serialization_version) , document_method_versions : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_method_versions) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document_structure_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_serialization_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_cbor_serialization_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . extended_document_structure_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . extended_document_serialization_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_method_versions) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_ctor (document_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_serialization_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , document_cbor_serialization_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , extended_document_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , extended_document_serialization_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , document_method_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentMethodVersions) -> * mut platform_version_version_dpp_versions_DocumentVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentVersions { document_structure_version , document_serialization_version , document_cbor_serialization_version , extended_document_structure_version , extended_document_serialization_version , document_method_versions }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_destroy (ffi : * mut platform_version_version_dpp_versions_DocumentVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_get_document_structure_version (obj : * const platform_version_version_dpp_versions_DocumentVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_structure_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_get_document_serialization_version (obj : * const platform_version_version_dpp_versions_DocumentVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . document_serialization_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_get_document_cbor_serialization_version (obj : * const platform_version_version_dpp_versions_DocumentVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . document_cbor_serialization_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_get_extended_document_structure_version (obj : * const platform_version_version_dpp_versions_DocumentVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . extended_document_structure_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_get_extended_document_serialization_version (obj : * const platform_version_version_dpp_versions_DocumentVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . extended_document_serialization_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_get_document_method_versions (obj : * const platform_version_version_dpp_versions_DocumentVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentMethodVersions { (* obj) . document_method_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_set_document_structure_version (obj : * mut platform_version_version_dpp_versions_DocumentVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_structure_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_set_document_serialization_version (obj : * mut platform_version_version_dpp_versions_DocumentVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . document_serialization_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_set_document_cbor_serialization_version (obj : * mut platform_version_version_dpp_versions_DocumentVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . document_cbor_serialization_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_set_extended_document_structure_version (obj : * mut platform_version_version_dpp_versions_DocumentVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . extended_document_structure_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_set_extended_document_serialization_version (obj : * mut platform_version_version_dpp_versions_DocumentVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . extended_document_serialization_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentVersions_set_document_method_versions (obj : * mut platform_version_version_dpp_versions_DocumentVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentMethodVersions) { (* obj) . document_method_versions = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::DocumentTransitionVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentTransitionVersions { pub documents_batch_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentsBatchTransitionVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: DocumentTransitionVersions > for platform_version_version_dpp_versions_DocumentTransitionVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentTransitionVersions) -> platform_version :: version :: dpp_versions :: DocumentTransitionVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentTransitionVersions { documents_batch_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . documents_batch_transition) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentTransitionVersions) -> * const platform_version_version_dpp_versions_DocumentTransitionVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTransitionVersions { documents_batch_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . documents_batch_transition) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentTransitionVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentTransitionVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . documents_batch_transition) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTransitionVersions_ctor (documents_batch_transition : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentsBatchTransitionVersions) -> * mut platform_version_version_dpp_versions_DocumentTransitionVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTransitionVersions { documents_batch_transition }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTransitionVersions_destroy (ffi : * mut platform_version_version_dpp_versions_DocumentTransitionVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTransitionVersions_get_documents_batch_transition (obj : * const platform_version_version_dpp_versions_DocumentTransitionVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentsBatchTransitionVersions { (* obj) . documents_batch_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTransitionVersions_set_documents_batch_transition (obj : * mut platform_version_version_dpp_versions_DocumentTransitionVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentsBatchTransitionVersions) { (* obj) . documents_batch_transition = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::IdentityTransitionVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_IdentityTransitionVersions { pub asset_locks : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: IdentityTransitionVersions > for platform_version_version_dpp_versions_IdentityTransitionVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_IdentityTransitionVersions) -> platform_version :: version :: dpp_versions :: IdentityTransitionVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: IdentityTransitionVersions { asset_locks : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . asset_locks) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: IdentityTransitionVersions) -> * const platform_version_version_dpp_versions_IdentityTransitionVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_IdentityTransitionVersions { asset_locks : ferment_interfaces :: FFIConversion :: ffi_to (obj . asset_locks) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_IdentityTransitionVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_IdentityTransitionVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . asset_locks) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionVersions_ctor (asset_locks : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions) -> * mut platform_version_version_dpp_versions_IdentityTransitionVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_IdentityTransitionVersions { asset_locks }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionVersions_destroy (ffi : * mut platform_version_version_dpp_versions_IdentityTransitionVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionVersions_get_asset_locks (obj : * const platform_version_version_dpp_versions_IdentityTransitionVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions { (* obj) . asset_locks } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionVersions_set_asset_locks (obj : * mut platform_version_version_dpp_versions_IdentityTransitionVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions) { (* obj) . asset_locks = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::DocumentsBatchTransitionVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentsBatchTransitionVersions { pub validation : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: DocumentsBatchTransitionVersions > for platform_version_version_dpp_versions_DocumentsBatchTransitionVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentsBatchTransitionVersions) -> platform_version :: version :: dpp_versions :: DocumentsBatchTransitionVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentsBatchTransitionVersions { validation : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validation) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentsBatchTransitionVersions) -> * const platform_version_version_dpp_versions_DocumentsBatchTransitionVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentsBatchTransitionVersions { validation : ferment_interfaces :: FFIConversion :: ffi_to (obj . validation) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentsBatchTransitionVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentsBatchTransitionVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . validation) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentsBatchTransitionVersions_ctor (validation : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions) -> * mut platform_version_version_dpp_versions_DocumentsBatchTransitionVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentsBatchTransitionVersions { validation }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentsBatchTransitionVersions_destroy (ffi : * mut platform_version_version_dpp_versions_DocumentsBatchTransitionVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentsBatchTransitionVersions_get_validation (obj : * const platform_version_version_dpp_versions_DocumentsBatchTransitionVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions { (* obj) . validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentsBatchTransitionVersions_set_validation (obj : * mut platform_version_version_dpp_versions_DocumentsBatchTransitionVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentsBatchTransitionValidationVersions) { (* obj) . validation = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::RecursiveSchemaValidatorVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions { pub traversal_validator : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub byte_array_has_no_items_as_parent_validator : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub pattern_is_valid_regex_validator : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: RecursiveSchemaValidatorVersions > for platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions) -> platform_version :: version :: dpp_versions :: RecursiveSchemaValidatorVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: RecursiveSchemaValidatorVersions { traversal_validator : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . traversal_validator) , byte_array_has_no_items_as_parent_validator : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . byte_array_has_no_items_as_parent_validator) , pattern_is_valid_regex_validator : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . pattern_is_valid_regex_validator) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: RecursiveSchemaValidatorVersions) -> * const platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions { traversal_validator : ferment_interfaces :: FFIConversion :: ffi_to (obj . traversal_validator) , byte_array_has_no_items_as_parent_validator : ferment_interfaces :: FFIConversion :: ffi_to (obj . byte_array_has_no_items_as_parent_validator) , pattern_is_valid_regex_validator : ferment_interfaces :: FFIConversion :: ffi_to (obj . pattern_is_valid_regex_validator) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . traversal_validator) ; ; ferment_interfaces :: unbox_any (ffi_ref . byte_array_has_no_items_as_parent_validator) ; ; ferment_interfaces :: unbox_any (ffi_ref . pattern_is_valid_regex_validator) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions_ctor (traversal_validator : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , byte_array_has_no_items_as_parent_validator : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pattern_is_valid_regex_validator : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions { traversal_validator , byte_array_has_no_items_as_parent_validator , pattern_is_valid_regex_validator }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions_destroy (ffi : * mut platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions_get_traversal_validator (obj : * const platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . traversal_validator } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions_get_byte_array_has_no_items_as_parent_validator (obj : * const platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . byte_array_has_no_items_as_parent_validator } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions_get_pattern_is_valid_regex_validator (obj : * const platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . pattern_is_valid_regex_validator } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions_set_traversal_validator (obj : * mut platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . traversal_validator = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions_set_byte_array_has_no_items_as_parent_validator (obj : * mut platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . byte_array_has_no_items_as_parent_validator = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions_set_pattern_is_valid_regex_validator (obj : * mut platform_version_version_dpp_versions_RecursiveSchemaValidatorVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . pattern_is_valid_regex_validator = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::ContractVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_ContractVersions { pub contract_serialization_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub contract_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub created_data_contract_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub config : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub methods : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DataContractMethodVersions , pub document_type_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: ContractVersions > for platform_version_version_dpp_versions_ContractVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_ContractVersions) -> platform_version :: version :: dpp_versions :: ContractVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: ContractVersions { contract_serialization_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . contract_serialization_version) , contract_structure_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . contract_structure_version) , created_data_contract_structure : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . created_data_contract_structure) , config : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . config) , methods : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . methods) , document_type_versions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_type_versions) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: ContractVersions) -> * const platform_version_version_dpp_versions_ContractVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_ContractVersions { contract_serialization_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . contract_serialization_version) , contract_structure_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . contract_structure_version) , created_data_contract_structure : ferment_interfaces :: FFIConversion :: ffi_to (obj . created_data_contract_structure) , config : ferment_interfaces :: FFIConversion :: ffi_to (obj . config) , methods : ferment_interfaces :: FFIConversion :: ffi_to (obj . methods) , document_type_versions : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_type_versions) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_ContractVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_ContractVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . contract_serialization_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . contract_structure_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . created_data_contract_structure) ; ; ferment_interfaces :: unbox_any (ffi_ref . config) ; ; ferment_interfaces :: unbox_any (ffi_ref . methods) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_type_versions) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_ctor (contract_serialization_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , contract_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , created_data_contract_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , config : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , methods : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DataContractMethodVersions , document_type_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeVersions) -> * mut platform_version_version_dpp_versions_ContractVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_ContractVersions { contract_serialization_version , contract_structure_version , created_data_contract_structure , config , methods , document_type_versions }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_destroy (ffi : * mut platform_version_version_dpp_versions_ContractVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_get_contract_serialization_version (obj : * const platform_version_version_dpp_versions_ContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . contract_serialization_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_get_contract_structure_version (obj : * const platform_version_version_dpp_versions_ContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . contract_structure_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_get_created_data_contract_structure (obj : * const platform_version_version_dpp_versions_ContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . created_data_contract_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_get_config (obj : * const platform_version_version_dpp_versions_ContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . config } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_get_methods (obj : * const platform_version_version_dpp_versions_ContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DataContractMethodVersions { (* obj) . methods } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_get_document_type_versions (obj : * const platform_version_version_dpp_versions_ContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeVersions { (* obj) . document_type_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_set_contract_serialization_version (obj : * mut platform_version_version_dpp_versions_ContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . contract_serialization_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_set_contract_structure_version (obj : * mut platform_version_version_dpp_versions_ContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . contract_structure_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_set_created_data_contract_structure (obj : * mut platform_version_version_dpp_versions_ContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . created_data_contract_structure = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_set_config (obj : * mut platform_version_version_dpp_versions_ContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . config = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_set_methods (obj : * mut platform_version_version_dpp_versions_ContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DataContractMethodVersions) { (* obj) . methods = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_ContractVersions_set_document_type_versions (obj : * mut platform_version_version_dpp_versions_ContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeVersions) { (* obj) . document_type_versions = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::IdentityTransitionAssetLockVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions { pub validate_asset_lock_transaction_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_instant_asset_lock_proof_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub minimal_asset_lock_value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: IdentityTransitionAssetLockVersions > for platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions) -> platform_version :: version :: dpp_versions :: IdentityTransitionAssetLockVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: IdentityTransitionAssetLockVersions { validate_asset_lock_transaction_structure : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_asset_lock_transaction_structure) , validate_instant_asset_lock_proof_structure : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_instant_asset_lock_proof_structure) , minimal_asset_lock_value : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . minimal_asset_lock_value) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: IdentityTransitionAssetLockVersions) -> * const platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions { validate_asset_lock_transaction_structure : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_asset_lock_transaction_structure) , validate_instant_asset_lock_proof_structure : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_instant_asset_lock_proof_structure) , minimal_asset_lock_value : ferment_interfaces :: FFIConversion :: ffi_to (obj . minimal_asset_lock_value) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . validate_asset_lock_transaction_structure) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_instant_asset_lock_proof_structure) ; ; ferment_interfaces :: unbox_any (ffi_ref . minimal_asset_lock_value) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions_ctor (validate_asset_lock_transaction_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_instant_asset_lock_proof_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , minimal_asset_lock_value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions { validate_asset_lock_transaction_structure , validate_instant_asset_lock_proof_structure , minimal_asset_lock_value }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions_destroy (ffi : * mut platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions_get_validate_asset_lock_transaction_structure (obj : * const platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_asset_lock_transaction_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions_get_validate_instant_asset_lock_proof_structure (obj : * const platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_instant_asset_lock_proof_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions_get_minimal_asset_lock_value (obj : * const platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . minimal_asset_lock_value } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions_set_validate_asset_lock_transaction_structure (obj : * mut platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_asset_lock_transaction_structure = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions_set_validate_instant_asset_lock_proof_structure (obj : * mut platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_instant_asset_lock_proof_structure = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions_set_minimal_asset_lock_value (obj : * mut platform_version_version_dpp_versions_IdentityTransitionAssetLockVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . minimal_asset_lock_value = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::StateTransitionMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_StateTransitionMethodVersions { pub public_key_in_creation_methods : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: StateTransitionMethodVersions > for platform_version_version_dpp_versions_StateTransitionMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_StateTransitionMethodVersions) -> platform_version :: version :: dpp_versions :: StateTransitionMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: StateTransitionMethodVersions { public_key_in_creation_methods : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_key_in_creation_methods) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: StateTransitionMethodVersions) -> * const platform_version_version_dpp_versions_StateTransitionMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_StateTransitionMethodVersions { public_key_in_creation_methods : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_key_in_creation_methods) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_StateTransitionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_StateTransitionMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_in_creation_methods) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionMethodVersions_ctor (public_key_in_creation_methods : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) -> * mut platform_version_version_dpp_versions_StateTransitionMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_StateTransitionMethodVersions { public_key_in_creation_methods }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionMethodVersions_destroy (ffi : * mut platform_version_version_dpp_versions_StateTransitionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionMethodVersions_get_public_key_in_creation_methods (obj : * const platform_version_version_dpp_versions_StateTransitionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions { (* obj) . public_key_in_creation_methods } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionMethodVersions_set_public_key_in_creation_methods (obj : * mut platform_version_version_dpp_versions_StateTransitionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_PublicKeyInCreationMethodVersions) { (* obj) . public_key_in_creation_methods = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::DocumentTypeVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentTypeVersions { pub index_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeIndexVersions , pub class_method_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeClassMethodVersions , pub structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub schema : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeSchemaVersions , pub methods : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeMethodVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: DocumentTypeVersions > for platform_version_version_dpp_versions_DocumentTypeVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentTypeVersions) -> platform_version :: version :: dpp_versions :: DocumentTypeVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentTypeVersions { index_versions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . index_versions) , class_method_versions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . class_method_versions) , structure_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . structure_version) , schema : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . schema) , methods : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . methods) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentTypeVersions) -> * const platform_version_version_dpp_versions_DocumentTypeVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeVersions { index_versions : ferment_interfaces :: FFIConversion :: ffi_to (obj . index_versions) , class_method_versions : ferment_interfaces :: FFIConversion :: ffi_to (obj . class_method_versions) , structure_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . structure_version) , schema : ferment_interfaces :: FFIConversion :: ffi_to (obj . schema) , methods : ferment_interfaces :: FFIConversion :: ffi_to (obj . methods) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentTypeVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentTypeVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . index_versions) ; ; ferment_interfaces :: unbox_any (ffi_ref . class_method_versions) ; ; ferment_interfaces :: unbox_any (ffi_ref . structure_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . schema) ; ; ferment_interfaces :: unbox_any (ffi_ref . methods) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_ctor (index_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeIndexVersions , class_method_versions : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeClassMethodVersions , structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , schema : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeSchemaVersions , methods : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeMethodVersions) -> * mut platform_version_version_dpp_versions_DocumentTypeVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeVersions { index_versions , class_method_versions , structure_version , schema , methods }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_destroy (ffi : * mut platform_version_version_dpp_versions_DocumentTypeVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_get_index_versions (obj : * const platform_version_version_dpp_versions_DocumentTypeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeIndexVersions { (* obj) . index_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_get_class_method_versions (obj : * const platform_version_version_dpp_versions_DocumentTypeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeClassMethodVersions { (* obj) . class_method_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_get_structure_version (obj : * const platform_version_version_dpp_versions_DocumentTypeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . structure_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_get_schema (obj : * const platform_version_version_dpp_versions_DocumentTypeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeSchemaVersions { (* obj) . schema } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_get_methods (obj : * const platform_version_version_dpp_versions_DocumentTypeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeMethodVersions { (* obj) . methods } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_set_index_versions (obj : * mut platform_version_version_dpp_versions_DocumentTypeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeIndexVersions) { (* obj) . index_versions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_set_class_method_versions (obj : * mut platform_version_version_dpp_versions_DocumentTypeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeClassMethodVersions) { (* obj) . class_method_versions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_set_structure_version (obj : * mut platform_version_version_dpp_versions_DocumentTypeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . structure_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_set_schema (obj : * mut platform_version_version_dpp_versions_DocumentTypeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeSchemaVersions) { (* obj) . schema = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeVersions_set_methods (obj : * mut platform_version_version_dpp_versions_DocumentTypeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTypeMethodVersions) { (* obj) . methods = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::StateTransitionVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_StateTransitionVersions { pub documents : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTransitionVersions , pub identities : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityTransitionVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: StateTransitionVersions > for platform_version_version_dpp_versions_StateTransitionVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_StateTransitionVersions) -> platform_version :: version :: dpp_versions :: StateTransitionVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: StateTransitionVersions { documents : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . documents) , identities : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identities) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: StateTransitionVersions) -> * const platform_version_version_dpp_versions_StateTransitionVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_StateTransitionVersions { documents : ferment_interfaces :: FFIConversion :: ffi_to (obj . documents) , identities : ferment_interfaces :: FFIConversion :: ffi_to (obj . identities) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_StateTransitionVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_StateTransitionVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . documents) ; ; ferment_interfaces :: unbox_any (ffi_ref . identities) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionVersions_ctor (documents : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTransitionVersions , identities : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityTransitionVersions) -> * mut platform_version_version_dpp_versions_StateTransitionVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_StateTransitionVersions { documents , identities }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionVersions_destroy (ffi : * mut platform_version_version_dpp_versions_StateTransitionVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionVersions_get_documents (obj : * const platform_version_version_dpp_versions_StateTransitionVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTransitionVersions { (* obj) . documents } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionVersions_get_identities (obj : * const platform_version_version_dpp_versions_StateTransitionVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityTransitionVersions { (* obj) . identities } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionVersions_set_documents (obj : * mut platform_version_version_dpp_versions_StateTransitionVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DocumentTransitionVersions) { (* obj) . documents = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_StateTransitionVersions_set_identities (obj : * mut platform_version_version_dpp_versions_StateTransitionVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_IdentityTransitionVersions) { (* obj) . identities = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::DocumentTypeMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DocumentTypeMethodVersions { pub create_document_from_data : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_document_with_prevalidated_properties : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub estimated_size : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub index_for_types : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub max_size : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub serialize_value_for_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: DocumentTypeMethodVersions > for platform_version_version_dpp_versions_DocumentTypeMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DocumentTypeMethodVersions) -> platform_version :: version :: dpp_versions :: DocumentTypeMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DocumentTypeMethodVersions { create_document_from_data : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . create_document_from_data) , create_document_with_prevalidated_properties : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . create_document_with_prevalidated_properties) , estimated_size : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . estimated_size) , index_for_types : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . index_for_types) , max_size : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . max_size) , serialize_value_for_key : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . serialize_value_for_key) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DocumentTypeMethodVersions) -> * const platform_version_version_dpp_versions_DocumentTypeMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeMethodVersions { create_document_from_data : ferment_interfaces :: FFIConversion :: ffi_to (obj . create_document_from_data) , create_document_with_prevalidated_properties : ferment_interfaces :: FFIConversion :: ffi_to (obj . create_document_with_prevalidated_properties) , estimated_size : ferment_interfaces :: FFIConversion :: ffi_to (obj . estimated_size) , index_for_types : ferment_interfaces :: FFIConversion :: ffi_to (obj . index_for_types) , max_size : ferment_interfaces :: FFIConversion :: ffi_to (obj . max_size) , serialize_value_for_key : ferment_interfaces :: FFIConversion :: ffi_to (obj . serialize_value_for_key) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DocumentTypeMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DocumentTypeMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . create_document_from_data) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_document_with_prevalidated_properties) ; ; ferment_interfaces :: unbox_any (ffi_ref . estimated_size) ; ; ferment_interfaces :: unbox_any (ffi_ref . index_for_types) ; ; ferment_interfaces :: unbox_any (ffi_ref . max_size) ; ; ferment_interfaces :: unbox_any (ffi_ref . serialize_value_for_key) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_ctor (create_document_from_data : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_document_with_prevalidated_properties : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , estimated_size : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , index_for_types : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , max_size : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , serialize_value_for_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_DocumentTypeMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DocumentTypeMethodVersions { create_document_from_data , create_document_with_prevalidated_properties , estimated_size , index_for_types , max_size , serialize_value_for_key }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_destroy (ffi : * mut platform_version_version_dpp_versions_DocumentTypeMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_get_create_document_from_data (obj : * const platform_version_version_dpp_versions_DocumentTypeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_document_from_data } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_get_create_document_with_prevalidated_properties (obj : * const platform_version_version_dpp_versions_DocumentTypeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_document_with_prevalidated_properties } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_get_estimated_size (obj : * const platform_version_version_dpp_versions_DocumentTypeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . estimated_size } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_get_index_for_types (obj : * const platform_version_version_dpp_versions_DocumentTypeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . index_for_types } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_get_max_size (obj : * const platform_version_version_dpp_versions_DocumentTypeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . max_size } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_get_serialize_value_for_key (obj : * const platform_version_version_dpp_versions_DocumentTypeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . serialize_value_for_key } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_set_create_document_from_data (obj : * mut platform_version_version_dpp_versions_DocumentTypeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_document_from_data = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_set_create_document_with_prevalidated_properties (obj : * mut platform_version_version_dpp_versions_DocumentTypeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_document_with_prevalidated_properties = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_set_estimated_size (obj : * mut platform_version_version_dpp_versions_DocumentTypeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . estimated_size = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_set_index_for_types (obj : * mut platform_version_version_dpp_versions_DocumentTypeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . index_for_types = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_set_max_size (obj : * mut platform_version_version_dpp_versions_DocumentTypeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . max_size = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DocumentTypeMethodVersions_set_serialize_value_for_key (obj : * mut platform_version_version_dpp_versions_DocumentTypeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . serialize_value_for_key = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::IdentityKeyTypeMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions { pub random_public_key_data : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub random_public_and_private_key_data : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: IdentityKeyTypeMethodVersions > for platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions) -> platform_version :: version :: dpp_versions :: IdentityKeyTypeMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: IdentityKeyTypeMethodVersions { random_public_key_data : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . random_public_key_data) , random_public_and_private_key_data : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . random_public_and_private_key_data) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: IdentityKeyTypeMethodVersions) -> * const platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions { random_public_key_data : ferment_interfaces :: FFIConversion :: ffi_to (obj . random_public_key_data) , random_public_and_private_key_data : ferment_interfaces :: FFIConversion :: ffi_to (obj . random_public_and_private_key_data) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . random_public_key_data) ; ; ferment_interfaces :: unbox_any (ffi_ref . random_public_and_private_key_data) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions_ctor (random_public_key_data : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , random_public_and_private_key_data : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions { random_public_key_data , random_public_and_private_key_data }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions_destroy (ffi : * mut platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions_get_random_public_key_data (obj : * const platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . random_public_key_data } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions_get_random_public_and_private_key_data (obj : * const platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . random_public_and_private_key_data } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions_set_random_public_key_data (obj : * mut platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . random_public_key_data = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions_set_random_public_and_private_key_data (obj : * mut platform_version_version_dpp_versions_IdentityKeyTypeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . random_public_and_private_key_data = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::DataContractValidationVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DataContractValidationVersions { pub validate : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_config_update : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_index_definitions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_index_naming_duplicates : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_not_defined_properties : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_property_definition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: DataContractValidationVersions > for platform_version_version_dpp_versions_DataContractValidationVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DataContractValidationVersions) -> platform_version :: version :: dpp_versions :: DataContractValidationVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DataContractValidationVersions { validate : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate) , validate_config_update : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_config_update) , validate_index_definitions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_index_definitions) , validate_index_naming_duplicates : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_index_naming_duplicates) , validate_not_defined_properties : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_not_defined_properties) , validate_property_definition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_property_definition) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DataContractValidationVersions) -> * const platform_version_version_dpp_versions_DataContractValidationVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DataContractValidationVersions { validate : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate) , validate_config_update : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_config_update) , validate_index_definitions : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_index_definitions) , validate_index_naming_duplicates : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_index_naming_duplicates) , validate_not_defined_properties : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_not_defined_properties) , validate_property_definition : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_property_definition) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DataContractValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DataContractValidationVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . validate) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_config_update) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_index_definitions) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_index_naming_duplicates) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_not_defined_properties) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_property_definition) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_ctor (validate : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_config_update : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_index_definitions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_index_naming_duplicates : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_not_defined_properties : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_property_definition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_DataContractValidationVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DataContractValidationVersions { validate , validate_config_update , validate_index_definitions , validate_index_naming_duplicates , validate_not_defined_properties , validate_property_definition }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_destroy (ffi : * mut platform_version_version_dpp_versions_DataContractValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_get_validate (obj : * const platform_version_version_dpp_versions_DataContractValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_get_validate_config_update (obj : * const platform_version_version_dpp_versions_DataContractValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_config_update } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_get_validate_index_definitions (obj : * const platform_version_version_dpp_versions_DataContractValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_index_definitions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_get_validate_index_naming_duplicates (obj : * const platform_version_version_dpp_versions_DataContractValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_index_naming_duplicates } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_get_validate_not_defined_properties (obj : * const platform_version_version_dpp_versions_DataContractValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_not_defined_properties } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_get_validate_property_definition (obj : * const platform_version_version_dpp_versions_DataContractValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_property_definition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_set_validate (obj : * mut platform_version_version_dpp_versions_DataContractValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_set_validate_config_update (obj : * mut platform_version_version_dpp_versions_DataContractValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_config_update = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_set_validate_index_definitions (obj : * mut platform_version_version_dpp_versions_DataContractValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_index_definitions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_set_validate_index_naming_duplicates (obj : * mut platform_version_version_dpp_versions_DataContractValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_index_naming_duplicates = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_set_validate_not_defined_properties (obj : * mut platform_version_version_dpp_versions_DataContractValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_not_defined_properties = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractValidationVersions_set_validate_property_definition (obj : * mut platform_version_version_dpp_versions_DataContractValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_property_definition = value ; } # [doc = "FFI-representation of the [`platform_version::version::dpp_versions::DataContractMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_dpp_versions_DataContractMethodVersions { pub validate_document : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub schema : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: dpp_versions :: DataContractMethodVersions > for platform_version_version_dpp_versions_DataContractMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_dpp_versions_DataContractMethodVersions) -> platform_version :: version :: dpp_versions :: DataContractMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: dpp_versions :: DataContractMethodVersions { validate_document : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_document) , schema : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . schema) } } unsafe fn ffi_to_const (obj : platform_version :: version :: dpp_versions :: DataContractMethodVersions) -> * const platform_version_version_dpp_versions_DataContractMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DataContractMethodVersions { validate_document : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_document) , schema : ferment_interfaces :: FFIConversion :: ffi_to (obj . schema) }) } unsafe fn destroy (ffi : * mut platform_version_version_dpp_versions_DataContractMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_dpp_versions_DataContractMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . validate_document) ; ; ferment_interfaces :: unbox_any (ffi_ref . schema) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractMethodVersions_ctor (validate_document : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , schema : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_dpp_versions_DataContractMethodVersions { ferment_interfaces :: boxed (platform_version_version_dpp_versions_DataContractMethodVersions { validate_document , schema }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractMethodVersions_destroy (ffi : * mut platform_version_version_dpp_versions_DataContractMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractMethodVersions_get_validate_document (obj : * const platform_version_version_dpp_versions_DataContractMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_document } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractMethodVersions_get_schema (obj : * const platform_version_version_dpp_versions_DataContractMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . schema } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractMethodVersions_set_validate_document (obj : * mut platform_version_version_dpp_versions_DataContractMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_document = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_dpp_versions_DataContractMethodVersions_set_schema (obj : * mut platform_version_version_dpp_versions_DataContractMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . schema = value ; } } pub mod protocol_version { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_version::version::protocol_version::OptionalFeatureVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_protocol_version_OptionalFeatureVersion (u16) ; impl ferment_interfaces :: FFIConversion < platform_version :: version :: protocol_version :: OptionalFeatureVersion > for platform_version_version_protocol_version_OptionalFeatureVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_protocol_version_OptionalFeatureVersion) -> platform_version :: version :: protocol_version :: OptionalFeatureVersion { let ffi_ref = & * ffi ; (ffi_ref . 0 > 0) . then (|| ffi_ref . 0) } unsafe fn ffi_to_const (obj : platform_version :: version :: protocol_version :: OptionalFeatureVersion) -> * const platform_version_version_protocol_version_OptionalFeatureVersion { ferment_interfaces :: boxed (platform_version_version_protocol_version_OptionalFeatureVersion (obj . unwrap_or (0))) } unsafe fn destroy (ffi : * mut platform_version_version_protocol_version_OptionalFeatureVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_protocol_version_OptionalFeatureVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_OptionalFeatureVersion_ctor (o_0 : u16) -> * mut platform_version_version_protocol_version_OptionalFeatureVersion { ferment_interfaces :: boxed (platform_version_version_protocol_version_OptionalFeatureVersion (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_OptionalFeatureVersion_destroy (ffi : * mut platform_version_version_protocol_version_OptionalFeatureVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_OptionalFeatureVersion_get_0 (obj : * const platform_version_version_protocol_version_OptionalFeatureVersion) -> u16 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_OptionalFeatureVersion_set_0 (obj : * mut platform_version_version_protocol_version_OptionalFeatureVersion , value : u16) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`platform_version::version::protocol_version::FeatureVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_protocol_version_FeatureVersion (u16) ; impl ferment_interfaces :: FFIConversion < platform_version :: version :: protocol_version :: FeatureVersion > for platform_version_version_protocol_version_FeatureVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_protocol_version_FeatureVersion) -> platform_version :: version :: protocol_version :: FeatureVersion { let ffi_ref = & * ffi ; ffi_ref . 0 } unsafe fn ffi_to_const (obj : platform_version :: version :: protocol_version :: FeatureVersion) -> * const platform_version_version_protocol_version_FeatureVersion { ferment_interfaces :: boxed (platform_version_version_protocol_version_FeatureVersion (obj)) } unsafe fn destroy (ffi : * mut platform_version_version_protocol_version_FeatureVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_protocol_version_FeatureVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersion_ctor (o_0 : u16) -> * mut platform_version_version_protocol_version_FeatureVersion { ferment_interfaces :: boxed (platform_version_version_protocol_version_FeatureVersion (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersion_destroy (ffi : * mut platform_version_version_protocol_version_FeatureVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersion_get_0 (obj : * const platform_version_version_protocol_version_FeatureVersion) -> u16 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersion_set_0 (obj : * mut platform_version_version_protocol_version_FeatureVersion , value : u16) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`platform_version::version::protocol_version::PlatformVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_protocol_version_PlatformVersion { pub protocol_version : u32 , pub identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub proofs : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub dpp : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DPPVersion , pub drive : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVersion , pub drive_abci : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciVersion , pub abci_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_AbciStructureVersion , pub platform_architecture : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_PlatformArchitectureVersion , pub system_data_contracts : * mut crate :: fermented :: types :: platform_version :: version :: contracts :: platform_version_version_contracts_SystemDataContractVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: protocol_version :: PlatformVersion > for platform_version_version_protocol_version_PlatformVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_protocol_version_PlatformVersion) -> platform_version :: version :: protocol_version :: PlatformVersion { let ffi_ref = & * ffi ; platform_version :: version :: protocol_version :: PlatformVersion { protocol_version : ffi_ref . protocol_version , identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity) , proofs : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . proofs) , dpp : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . dpp) , drive : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . drive) , drive_abci : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . drive_abci) , abci_structure : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . abci_structure) , platform_architecture : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . platform_architecture) , system_data_contracts : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . system_data_contracts) } } unsafe fn ffi_to_const (obj : platform_version :: version :: protocol_version :: PlatformVersion) -> * const platform_version_version_protocol_version_PlatformVersion { ferment_interfaces :: boxed (platform_version_version_protocol_version_PlatformVersion { protocol_version : obj . protocol_version , identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity) , proofs : ferment_interfaces :: FFIConversion :: ffi_to (obj . proofs) , dpp : ferment_interfaces :: FFIConversion :: ffi_to (obj . dpp) , drive : ferment_interfaces :: FFIConversion :: ffi_to (obj . drive) , drive_abci : ferment_interfaces :: FFIConversion :: ffi_to (obj . drive_abci) , abci_structure : ferment_interfaces :: FFIConversion :: ffi_to (obj . abci_structure) , platform_architecture : ferment_interfaces :: FFIConversion :: ffi_to (obj . platform_architecture) , system_data_contracts : ferment_interfaces :: FFIConversion :: ffi_to (obj . system_data_contracts) }) } unsafe fn destroy (ffi : * mut platform_version_version_protocol_version_PlatformVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_protocol_version_PlatformVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment_interfaces :: unbox_any (ffi_ref . identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . proofs) ; ; ferment_interfaces :: unbox_any (ffi_ref . dpp) ; ; ferment_interfaces :: unbox_any (ffi_ref . drive) ; ; ferment_interfaces :: unbox_any (ffi_ref . drive_abci) ; ; ferment_interfaces :: unbox_any (ffi_ref . abci_structure) ; ; ferment_interfaces :: unbox_any (ffi_ref . platform_architecture) ; ; ferment_interfaces :: unbox_any (ffi_ref . system_data_contracts) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformVersion_ctor (protocol_version : u32 , identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , proofs : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , dpp : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DPPVersion , drive : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVersion , drive_abci : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciVersion , abci_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_AbciStructureVersion , platform_architecture : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_PlatformArchitectureVersion , system_data_contracts : * mut crate :: fermented :: types :: platform_version :: version :: contracts :: platform_version_version_contracts_SystemDataContractVersions) -> * mut platform_version_version_protocol_version_PlatformVersion { ferment_interfaces :: boxed (platform_version_version_protocol_version_PlatformVersion { protocol_version , identity , proofs , dpp , drive , drive_abci , abci_structure , platform_architecture , system_data_contracts }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformVersion_destroy (ffi : * mut platform_version_version_protocol_version_PlatformVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformVersion_get_protocol_version (obj : * const platform_version_version_protocol_version_PlatformVersion) -> u32 { (* obj) . protocol_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformVersion_get_identity (obj : * const platform_version_version_protocol_version_PlatformVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformVersion_get_proofs (obj : * const platform_version_version_protocol_version_PlatformVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . proofs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformVersion_get_dpp (obj : * const platform_version_version_protocol_version_PlatformVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DPPVersion { (* obj) . dpp } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformVersion_get_drive (obj : * const platform_version_version_protocol_version_PlatformVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVersion { (* obj) . drive } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformVersion_get_drive_abci (obj : * const platform_version_version_protocol_version_PlatformVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciVersion { (* obj) . drive_abci } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformVersion_get_abci_structure (obj : * const platform_version_version_protocol_version_PlatformVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_AbciStructureVersion { (* obj) . abci_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformVersion_get_platform_architecture (obj : * const platform_version_version_protocol_version_PlatformVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_PlatformArchitectureVersion { (* obj) . platform_architecture } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformVersion_get_system_data_contracts (obj : * const platform_version_version_protocol_version_PlatformVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: contracts :: platform_version_version_contracts_SystemDataContractVersions { (* obj) . system_data_contracts } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformVersion_set_protocol_version (obj : * mut platform_version_version_protocol_version_PlatformVersion , value : u32) { (* obj) . protocol_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformVersion_set_identity (obj : * mut platform_version_version_protocol_version_PlatformVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformVersion_set_proofs (obj : * mut platform_version_version_protocol_version_PlatformVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . proofs = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformVersion_set_dpp (obj : * mut platform_version_version_protocol_version_PlatformVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: dpp_versions :: platform_version_version_dpp_versions_DPPVersion) { (* obj) . dpp = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformVersion_set_drive (obj : * mut platform_version_version_protocol_version_PlatformVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVersion) { (* obj) . drive = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformVersion_set_drive_abci (obj : * mut platform_version_version_protocol_version_PlatformVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciVersion) { (* obj) . drive_abci = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformVersion_set_abci_structure (obj : * mut platform_version_version_protocol_version_PlatformVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_AbciStructureVersion) { (* obj) . abci_structure = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformVersion_set_platform_architecture (obj : * mut platform_version_version_protocol_version_PlatformVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_PlatformArchitectureVersion) { (* obj) . platform_architecture = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformVersion_set_system_data_contracts (obj : * mut platform_version_version_protocol_version_PlatformVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: contracts :: platform_version_version_contracts_SystemDataContractVersions) { (* obj) . system_data_contracts = value ; } # [doc = "FFI-representation of the [`platform_version::version::protocol_version::FeatureVersionBounds`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_protocol_version_FeatureVersionBounds { pub min_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub max_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub default_current_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: protocol_version :: FeatureVersionBounds > for platform_version_version_protocol_version_FeatureVersionBounds { unsafe fn ffi_from_const (ffi : * const platform_version_version_protocol_version_FeatureVersionBounds) -> platform_version :: version :: protocol_version :: FeatureVersionBounds { let ffi_ref = & * ffi ; platform_version :: version :: protocol_version :: FeatureVersionBounds { min_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . min_version) , max_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . max_version) , default_current_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . default_current_version) } } unsafe fn ffi_to_const (obj : platform_version :: version :: protocol_version :: FeatureVersionBounds) -> * const platform_version_version_protocol_version_FeatureVersionBounds { ferment_interfaces :: boxed (platform_version_version_protocol_version_FeatureVersionBounds { min_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . min_version) , max_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . max_version) , default_current_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . default_current_version) }) } unsafe fn destroy (ffi : * mut platform_version_version_protocol_version_FeatureVersionBounds) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_protocol_version_FeatureVersionBounds { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . min_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . max_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . default_current_version) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersionBounds_ctor (min_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , max_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , default_current_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_protocol_version_FeatureVersionBounds { ferment_interfaces :: boxed (platform_version_version_protocol_version_FeatureVersionBounds { min_version , max_version , default_current_version }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersionBounds_destroy (ffi : * mut platform_version_version_protocol_version_FeatureVersionBounds) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersionBounds_get_min_version (obj : * const platform_version_version_protocol_version_FeatureVersionBounds) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . min_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersionBounds_get_max_version (obj : * const platform_version_version_protocol_version_FeatureVersionBounds) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . max_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersionBounds_get_default_current_version (obj : * const platform_version_version_protocol_version_FeatureVersionBounds) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . default_current_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersionBounds_set_min_version (obj : * mut platform_version_version_protocol_version_FeatureVersionBounds , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . min_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersionBounds_set_max_version (obj : * mut platform_version_version_protocol_version_FeatureVersionBounds , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . max_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_FeatureVersionBounds_set_default_current_version (obj : * mut platform_version_version_protocol_version_FeatureVersionBounds , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . default_current_version = value ; } # [doc = "FFI-representation of the [`platform_version::version::protocol_version::AbciStructureVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_protocol_version_AbciStructureVersion { pub extended_block_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds } impl ferment_interfaces :: FFIConversion < platform_version :: version :: protocol_version :: AbciStructureVersion > for platform_version_version_protocol_version_AbciStructureVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_protocol_version_AbciStructureVersion) -> platform_version :: version :: protocol_version :: AbciStructureVersion { let ffi_ref = & * ffi ; platform_version :: version :: protocol_version :: AbciStructureVersion { extended_block_info : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . extended_block_info) } } unsafe fn ffi_to_const (obj : platform_version :: version :: protocol_version :: AbciStructureVersion) -> * const platform_version_version_protocol_version_AbciStructureVersion { ferment_interfaces :: boxed (platform_version_version_protocol_version_AbciStructureVersion { extended_block_info : ferment_interfaces :: FFIConversion :: ffi_to (obj . extended_block_info) }) } unsafe fn destroy (ffi : * mut platform_version_version_protocol_version_AbciStructureVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_protocol_version_AbciStructureVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . extended_block_info) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_AbciStructureVersion_ctor (extended_block_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) -> * mut platform_version_version_protocol_version_AbciStructureVersion { ferment_interfaces :: boxed (platform_version_version_protocol_version_AbciStructureVersion { extended_block_info }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_AbciStructureVersion_destroy (ffi : * mut platform_version_version_protocol_version_AbciStructureVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_AbciStructureVersion_get_extended_block_info (obj : * const platform_version_version_protocol_version_AbciStructureVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . extended_block_info } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_AbciStructureVersion_set_extended_block_info (obj : * mut platform_version_version_protocol_version_AbciStructureVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . extended_block_info = value ; } # [doc = "FFI-representation of the [`platform_version::version::protocol_version::PlatformArchitectureVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_protocol_version_PlatformArchitectureVersion { pub data_contract_factory_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_factory_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: protocol_version :: PlatformArchitectureVersion > for platform_version_version_protocol_version_PlatformArchitectureVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_protocol_version_PlatformArchitectureVersion) -> platform_version :: version :: protocol_version :: PlatformArchitectureVersion { let ffi_ref = & * ffi ; platform_version :: version :: protocol_version :: PlatformArchitectureVersion { data_contract_factory_structure_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract_factory_structure_version) , document_factory_structure_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_factory_structure_version) } } unsafe fn ffi_to_const (obj : platform_version :: version :: protocol_version :: PlatformArchitectureVersion) -> * const platform_version_version_protocol_version_PlatformArchitectureVersion { ferment_interfaces :: boxed (platform_version_version_protocol_version_PlatformArchitectureVersion { data_contract_factory_structure_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract_factory_structure_version) , document_factory_structure_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_factory_structure_version) }) } unsafe fn destroy (ffi : * mut platform_version_version_protocol_version_PlatformArchitectureVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_protocol_version_PlatformArchitectureVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_factory_structure_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_factory_structure_version) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformArchitectureVersion_ctor (data_contract_factory_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_factory_structure_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_protocol_version_PlatformArchitectureVersion { ferment_interfaces :: boxed (platform_version_version_protocol_version_PlatformArchitectureVersion { data_contract_factory_structure_version , document_factory_structure_version }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformArchitectureVersion_destroy (ffi : * mut platform_version_version_protocol_version_PlatformArchitectureVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformArchitectureVersion_get_data_contract_factory_structure_version (obj : * const platform_version_version_protocol_version_PlatformArchitectureVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . data_contract_factory_structure_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformArchitectureVersion_get_document_factory_structure_version (obj : * const platform_version_version_protocol_version_PlatformArchitectureVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_factory_structure_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformArchitectureVersion_set_data_contract_factory_structure_version (obj : * mut platform_version_version_protocol_version_PlatformArchitectureVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . data_contract_factory_structure_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_protocol_version_PlatformArchitectureVersion_set_document_factory_structure_version (obj : * mut platform_version_version_protocol_version_PlatformArchitectureVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_factory_structure_version = value ; } } pub mod contracts { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_version::version::contracts::SystemDataContractVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_contracts_SystemDataContractVersions { pub withdrawals : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub dpns : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub dashpay : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub masternode_reward_shares : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub feature_flags : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: contracts :: SystemDataContractVersions > for platform_version_version_contracts_SystemDataContractVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_contracts_SystemDataContractVersions) -> platform_version :: version :: contracts :: SystemDataContractVersions { let ffi_ref = & * ffi ; platform_version :: version :: contracts :: SystemDataContractVersions { withdrawals : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . withdrawals) , dpns : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . dpns) , dashpay : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . dashpay) , masternode_reward_shares : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . masternode_reward_shares) , feature_flags : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . feature_flags) } } unsafe fn ffi_to_const (obj : platform_version :: version :: contracts :: SystemDataContractVersions) -> * const platform_version_version_contracts_SystemDataContractVersions { ferment_interfaces :: boxed (platform_version_version_contracts_SystemDataContractVersions { withdrawals : ferment_interfaces :: FFIConversion :: ffi_to (obj . withdrawals) , dpns : ferment_interfaces :: FFIConversion :: ffi_to (obj . dpns) , dashpay : ferment_interfaces :: FFIConversion :: ffi_to (obj . dashpay) , masternode_reward_shares : ferment_interfaces :: FFIConversion :: ffi_to (obj . masternode_reward_shares) , feature_flags : ferment_interfaces :: FFIConversion :: ffi_to (obj . feature_flags) }) } unsafe fn destroy (ffi : * mut platform_version_version_contracts_SystemDataContractVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_contracts_SystemDataContractVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . withdrawals) ; ; ferment_interfaces :: unbox_any (ffi_ref . dpns) ; ; ferment_interfaces :: unbox_any (ffi_ref . dashpay) ; ; ferment_interfaces :: unbox_any (ffi_ref . masternode_reward_shares) ; ; ferment_interfaces :: unbox_any (ffi_ref . feature_flags) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_ctor (withdrawals : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , dpns : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , dashpay : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , masternode_reward_shares : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , feature_flags : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_contracts_SystemDataContractVersions { ferment_interfaces :: boxed (platform_version_version_contracts_SystemDataContractVersions { withdrawals , dpns , dashpay , masternode_reward_shares , feature_flags }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_destroy (ffi : * mut platform_version_version_contracts_SystemDataContractVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_get_withdrawals (obj : * const platform_version_version_contracts_SystemDataContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . withdrawals } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_get_dpns (obj : * const platform_version_version_contracts_SystemDataContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . dpns } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_get_dashpay (obj : * const platform_version_version_contracts_SystemDataContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . dashpay } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_get_masternode_reward_shares (obj : * const platform_version_version_contracts_SystemDataContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . masternode_reward_shares } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_get_feature_flags (obj : * const platform_version_version_contracts_SystemDataContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . feature_flags } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_set_withdrawals (obj : * mut platform_version_version_contracts_SystemDataContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . withdrawals = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_set_dpns (obj : * mut platform_version_version_contracts_SystemDataContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . dpns = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_set_dashpay (obj : * mut platform_version_version_contracts_SystemDataContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . dashpay = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_set_masternode_reward_shares (obj : * mut platform_version_version_contracts_SystemDataContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . masternode_reward_shares = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_contracts_SystemDataContractVersions_set_feature_flags (obj : * mut platform_version_version_contracts_SystemDataContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . feature_flags = value ; } } pub mod mocks { use crate as ferment_example_platform ; } pub mod drive_versions { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveVerifyContractMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVerifyContractMethodVersions { pub verify_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_contract_history : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveVerifyContractMethodVersions > for platform_version_version_drive_versions_DriveVerifyContractMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVerifyContractMethodVersions) -> platform_version :: version :: drive_versions :: DriveVerifyContractMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVerifyContractMethodVersions { verify_contract : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_contract) , verify_contract_history : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_contract_history) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVerifyContractMethodVersions) -> * const platform_version_version_drive_versions_DriveVerifyContractMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyContractMethodVersions { verify_contract : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_contract) , verify_contract_history : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_contract_history) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifyContractMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVerifyContractMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . verify_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_contract_history) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyContractMethodVersions_ctor (verify_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_contract_history : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveVerifyContractMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyContractMethodVersions { verify_contract , verify_contract_history }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyContractMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifyContractMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyContractMethodVersions_get_verify_contract (obj : * const platform_version_version_drive_versions_DriveVerifyContractMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyContractMethodVersions_get_verify_contract_history (obj : * const platform_version_version_drive_versions_DriveVerifyContractMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_contract_history } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyContractMethodVersions_set_verify_contract (obj : * mut platform_version_version_drive_versions_DriveVerifyContractMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyContractMethodVersions_set_verify_contract_history (obj : * mut platform_version_version_drive_versions_DriveVerifyContractMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_contract_history = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveBatchOperationsMethodVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveBatchOperationsMethodVersion { pub convert_drive_operations_to_grove_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub apply_drive_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveBatchOperationsMethodVersion > for platform_version_version_drive_versions_DriveBatchOperationsMethodVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveBatchOperationsMethodVersion) -> platform_version :: version :: drive_versions :: DriveBatchOperationsMethodVersion { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveBatchOperationsMethodVersion { convert_drive_operations_to_grove_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . convert_drive_operations_to_grove_operations) , apply_drive_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . apply_drive_operations) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveBatchOperationsMethodVersion) -> * const platform_version_version_drive_versions_DriveBatchOperationsMethodVersion { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveBatchOperationsMethodVersion { convert_drive_operations_to_grove_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . convert_drive_operations_to_grove_operations) , apply_drive_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . apply_drive_operations) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveBatchOperationsMethodVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveBatchOperationsMethodVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . convert_drive_operations_to_grove_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . apply_drive_operations) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBatchOperationsMethodVersion_ctor (convert_drive_operations_to_grove_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , apply_drive_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveBatchOperationsMethodVersion { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveBatchOperationsMethodVersion { convert_drive_operations_to_grove_operations , apply_drive_operations }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBatchOperationsMethodVersion_destroy (ffi : * mut platform_version_version_drive_versions_DriveBatchOperationsMethodVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBatchOperationsMethodVersion_get_convert_drive_operations_to_grove_operations (obj : * const platform_version_version_drive_versions_DriveBatchOperationsMethodVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . convert_drive_operations_to_grove_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBatchOperationsMethodVersion_get_apply_drive_operations (obj : * const platform_version_version_drive_versions_DriveBatchOperationsMethodVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . apply_drive_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBatchOperationsMethodVersion_set_convert_drive_operations_to_grove_operations (obj : * mut platform_version_version_drive_versions_DriveBatchOperationsMethodVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . convert_drive_operations_to_grove_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBatchOperationsMethodVersion_set_apply_drive_operations (obj : * mut platform_version_version_drive_versions_DriveBatchOperationsMethodVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . apply_drive_operations = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveContractInsertMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveContractInsertMethodVersions { pub add_contract_to_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub insert_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveContractInsertMethodVersions > for platform_version_version_drive_versions_DriveContractInsertMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveContractInsertMethodVersions) -> platform_version :: version :: drive_versions :: DriveContractInsertMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveContractInsertMethodVersions { add_contract_to_storage : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_contract_to_storage) , insert_contract : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . insert_contract) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveContractInsertMethodVersions) -> * const platform_version_version_drive_versions_DriveContractInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractInsertMethodVersions { add_contract_to_storage : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_contract_to_storage) , insert_contract : ferment_interfaces :: FFIConversion :: ffi_to (obj . insert_contract) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveContractInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveContractInsertMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_contract_to_storage) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_contract) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractInsertMethodVersions_ctor (add_contract_to_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , insert_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveContractInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractInsertMethodVersions { add_contract_to_storage , insert_contract }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractInsertMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveContractInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractInsertMethodVersions_get_add_contract_to_storage (obj : * const platform_version_version_drive_versions_DriveContractInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_contract_to_storage } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractInsertMethodVersions_get_insert_contract (obj : * const platform_version_version_drive_versions_DriveContractInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . insert_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractInsertMethodVersions_set_add_contract_to_storage (obj : * mut platform_version_version_drive_versions_DriveContractInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_contract_to_storage = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractInsertMethodVersions_set_insert_contract (obj : * mut platform_version_version_drive_versions_DriveContractInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . insert_contract = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveIdentityKeysProveMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions { pub prove_identities_all_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub prove_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveIdentityKeysProveMethodVersions > for platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityKeysProveMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityKeysProveMethodVersions { prove_identities_all_keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . prove_identities_all_keys) , prove_identity_keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . prove_identity_keys) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityKeysProveMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions { prove_identities_all_keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . prove_identities_all_keys) , prove_identity_keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . prove_identity_keys) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . prove_identities_all_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove_identity_keys) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions_ctor (prove_identities_all_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , prove_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions { prove_identities_all_keys , prove_identity_keys }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions_get_prove_identities_all_keys (obj : * const platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_identities_all_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions_get_prove_identity_keys (obj : * const platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_identity_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions_set_prove_identities_all_keys (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_identities_all_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions_set_prove_identity_keys (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_identity_keys = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveIdentityWithdrawalTransactionIndexMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions { pub fetch_next_withdrawal_transaction_index : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_update_next_withdrawal_transaction_index_operation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionIndexMethodVersions > for platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionIndexMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionIndexMethodVersions { fetch_next_withdrawal_transaction_index : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_next_withdrawal_transaction_index) , add_update_next_withdrawal_transaction_index_operation : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_update_next_withdrawal_transaction_index_operation) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionIndexMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions { fetch_next_withdrawal_transaction_index : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_next_withdrawal_transaction_index) , add_update_next_withdrawal_transaction_index_operation : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_update_next_withdrawal_transaction_index_operation) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_next_withdrawal_transaction_index) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_update_next_withdrawal_transaction_index_operation) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions_ctor (fetch_next_withdrawal_transaction_index : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_update_next_withdrawal_transaction_index_operation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions { fetch_next_withdrawal_transaction_index , add_update_next_withdrawal_transaction_index_operation }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions_get_fetch_next_withdrawal_transaction_index (obj : * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_next_withdrawal_transaction_index } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions_get_add_update_next_withdrawal_transaction_index_operation (obj : * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_update_next_withdrawal_transaction_index_operation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions_set_fetch_next_withdrawal_transaction_index (obj : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_next_withdrawal_transaction_index = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions_set_add_update_next_withdrawal_transaction_index_operation (obj : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_update_next_withdrawal_transaction_index_operation = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveIdentityWithdrawalDocumentMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions { pub fetch_oldest_withdrawal_documents_by_status : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub find_up_to_100_withdrawal_documents_by_status_and_transaction_indices : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveIdentityWithdrawalDocumentMethodVersions > for platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityWithdrawalDocumentMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityWithdrawalDocumentMethodVersions { fetch_oldest_withdrawal_documents_by_status : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_oldest_withdrawal_documents_by_status) , find_up_to_100_withdrawal_documents_by_status_and_transaction_indices : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . find_up_to_100_withdrawal_documents_by_status_and_transaction_indices) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityWithdrawalDocumentMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions { fetch_oldest_withdrawal_documents_by_status : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_oldest_withdrawal_documents_by_status) , find_up_to_100_withdrawal_documents_by_status_and_transaction_indices : ferment_interfaces :: FFIConversion :: ffi_to (obj . find_up_to_100_withdrawal_documents_by_status_and_transaction_indices) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_oldest_withdrawal_documents_by_status) ; ; ferment_interfaces :: unbox_any (ffi_ref . find_up_to_100_withdrawal_documents_by_status_and_transaction_indices) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions_ctor (fetch_oldest_withdrawal_documents_by_status : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , find_up_to_100_withdrawal_documents_by_status_and_transaction_indices : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions { fetch_oldest_withdrawal_documents_by_status , find_up_to_100_withdrawal_documents_by_status_and_transaction_indices }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions_get_fetch_oldest_withdrawal_documents_by_status (obj : * const platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_oldest_withdrawal_documents_by_status } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions_get_find_up_to_100_withdrawal_documents_by_status_and_transaction_indices (obj : * const platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . find_up_to_100_withdrawal_documents_by_status_and_transaction_indices } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions_set_fetch_oldest_withdrawal_documents_by_status (obj : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_oldest_withdrawal_documents_by_status = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions_set_find_up_to_100_withdrawal_documents_by_status_and_transaction_indices (obj : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . find_up_to_100_withdrawal_documents_by_status_and_transaction_indices = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveOperationsMethodVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveOperationsMethodVersion { pub rollback_transaction : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub drop_cache : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub commit_transaction : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub apply_partial_batch_low_level_drive_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub apply_partial_batch_grovedb_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub apply_batch_low_level_drive_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub apply_batch_grovedb_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveOperationsMethodVersion > for platform_version_version_drive_versions_DriveOperationsMethodVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveOperationsMethodVersion) -> platform_version :: version :: drive_versions :: DriveOperationsMethodVersion { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveOperationsMethodVersion { rollback_transaction : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . rollback_transaction) , drop_cache : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . drop_cache) , commit_transaction : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . commit_transaction) , apply_partial_batch_low_level_drive_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . apply_partial_batch_low_level_drive_operations) , apply_partial_batch_grovedb_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . apply_partial_batch_grovedb_operations) , apply_batch_low_level_drive_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . apply_batch_low_level_drive_operations) , apply_batch_grovedb_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . apply_batch_grovedb_operations) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveOperationsMethodVersion) -> * const platform_version_version_drive_versions_DriveOperationsMethodVersion { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveOperationsMethodVersion { rollback_transaction : ferment_interfaces :: FFIConversion :: ffi_to (obj . rollback_transaction) , drop_cache : ferment_interfaces :: FFIConversion :: ffi_to (obj . drop_cache) , commit_transaction : ferment_interfaces :: FFIConversion :: ffi_to (obj . commit_transaction) , apply_partial_batch_low_level_drive_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . apply_partial_batch_low_level_drive_operations) , apply_partial_batch_grovedb_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . apply_partial_batch_grovedb_operations) , apply_batch_low_level_drive_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . apply_batch_low_level_drive_operations) , apply_batch_grovedb_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . apply_batch_grovedb_operations) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveOperationsMethodVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveOperationsMethodVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . rollback_transaction) ; ; ferment_interfaces :: unbox_any (ffi_ref . drop_cache) ; ; ferment_interfaces :: unbox_any (ffi_ref . commit_transaction) ; ; ferment_interfaces :: unbox_any (ffi_ref . apply_partial_batch_low_level_drive_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . apply_partial_batch_grovedb_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . apply_batch_low_level_drive_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . apply_batch_grovedb_operations) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_ctor (rollback_transaction : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , drop_cache : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , commit_transaction : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , apply_partial_batch_low_level_drive_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , apply_partial_batch_grovedb_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , apply_batch_low_level_drive_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , apply_batch_grovedb_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveOperationsMethodVersion { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveOperationsMethodVersion { rollback_transaction , drop_cache , commit_transaction , apply_partial_batch_low_level_drive_operations , apply_partial_batch_grovedb_operations , apply_batch_low_level_drive_operations , apply_batch_grovedb_operations }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_destroy (ffi : * mut platform_version_version_drive_versions_DriveOperationsMethodVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_get_rollback_transaction (obj : * const platform_version_version_drive_versions_DriveOperationsMethodVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . rollback_transaction } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_get_drop_cache (obj : * const platform_version_version_drive_versions_DriveOperationsMethodVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . drop_cache } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_get_commit_transaction (obj : * const platform_version_version_drive_versions_DriveOperationsMethodVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . commit_transaction } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_get_apply_partial_batch_low_level_drive_operations (obj : * const platform_version_version_drive_versions_DriveOperationsMethodVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . apply_partial_batch_low_level_drive_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_get_apply_partial_batch_grovedb_operations (obj : * const platform_version_version_drive_versions_DriveOperationsMethodVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . apply_partial_batch_grovedb_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_get_apply_batch_low_level_drive_operations (obj : * const platform_version_version_drive_versions_DriveOperationsMethodVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . apply_batch_low_level_drive_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_get_apply_batch_grovedb_operations (obj : * const platform_version_version_drive_versions_DriveOperationsMethodVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . apply_batch_grovedb_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_set_rollback_transaction (obj : * mut platform_version_version_drive_versions_DriveOperationsMethodVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . rollback_transaction = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_set_drop_cache (obj : * mut platform_version_version_drive_versions_DriveOperationsMethodVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . drop_cache = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_set_commit_transaction (obj : * mut platform_version_version_drive_versions_DriveOperationsMethodVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . commit_transaction = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_set_apply_partial_batch_low_level_drive_operations (obj : * mut platform_version_version_drive_versions_DriveOperationsMethodVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . apply_partial_batch_low_level_drive_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_set_apply_partial_batch_grovedb_operations (obj : * mut platform_version_version_drive_versions_DriveOperationsMethodVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . apply_partial_batch_grovedb_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_set_apply_batch_low_level_drive_operations (obj : * mut platform_version_version_drive_versions_DriveOperationsMethodVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . apply_batch_low_level_drive_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveOperationsMethodVersion_set_apply_batch_grovedb_operations (obj : * mut platform_version_version_drive_versions_DriveOperationsMethodVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . apply_batch_grovedb_operations = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveProveMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveProveMethodVersions { pub prove_multiple : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveProveMethodVersions > for platform_version_version_drive_versions_DriveProveMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveProveMethodVersions) -> platform_version :: version :: drive_versions :: DriveProveMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveProveMethodVersions { prove_multiple : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . prove_multiple) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveProveMethodVersions) -> * const platform_version_version_drive_versions_DriveProveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveProveMethodVersions { prove_multiple : ferment_interfaces :: FFIConversion :: ffi_to (obj . prove_multiple) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveProveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveProveMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . prove_multiple) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProveMethodVersions_ctor (prove_multiple : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveProveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveProveMethodVersions { prove_multiple }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProveMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveProveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProveMethodVersions_get_prove_multiple (obj : * const platform_version_version_drive_versions_DriveProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_multiple } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProveMethodVersions_set_prove_multiple (obj : * mut platform_version_version_drive_versions_DriveProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_multiple = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveStructureVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveStructureVersion { pub document_indexes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub identity_indexes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub pools : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveStructureVersion > for platform_version_version_drive_versions_DriveStructureVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveStructureVersion) -> platform_version :: version :: drive_versions :: DriveStructureVersion { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveStructureVersion { document_indexes : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_indexes) , identity_indexes : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_indexes) , pools : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . pools) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveStructureVersion) -> * const platform_version_version_drive_versions_DriveStructureVersion { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveStructureVersion { document_indexes : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_indexes) , identity_indexes : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_indexes) , pools : ferment_interfaces :: FFIConversion :: ffi_to (obj . pools) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveStructureVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveStructureVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document_indexes) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_indexes) ; ; ferment_interfaces :: unbox_any (ffi_ref . pools) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStructureVersion_ctor (document_indexes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , identity_indexes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pools : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) -> * mut platform_version_version_drive_versions_DriveStructureVersion { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveStructureVersion { document_indexes , identity_indexes , pools }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStructureVersion_destroy (ffi : * mut platform_version_version_drive_versions_DriveStructureVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStructureVersion_get_document_indexes (obj : * const platform_version_version_drive_versions_DriveStructureVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . document_indexes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStructureVersion_get_identity_indexes (obj : * const platform_version_version_drive_versions_DriveStructureVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identity_indexes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStructureVersion_get_pools (obj : * const platform_version_version_drive_versions_DriveStructureVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . pools } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStructureVersion_set_document_indexes (obj : * mut platform_version_version_drive_versions_DriveStructureVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . document_indexes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStructureVersion_set_identity_indexes (obj : * mut platform_version_version_drive_versions_DriveStructureVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identity_indexes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStructureVersion_set_pools (obj : * mut platform_version_version_drive_versions_DriveStructureVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . pools = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveDocumentInsertMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveDocumentInsertMethodVersions { pub add_document : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_document_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_document_for_contract_apply_and_add_to_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_document_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_document_to_primary_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_indices_for_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_indices_for_top_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_reference_for_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveDocumentInsertMethodVersions > for platform_version_version_drive_versions_DriveDocumentInsertMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) -> platform_version :: version :: drive_versions :: DriveDocumentInsertMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveDocumentInsertMethodVersions { add_document : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_document) , add_document_for_contract : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_document_for_contract) , add_document_for_contract_apply_and_add_to_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_document_for_contract_apply_and_add_to_operations) , add_document_for_contract_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_document_for_contract_operations) , add_document_to_primary_storage : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_document_to_primary_storage) , add_indices_for_index_level_for_contract_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_indices_for_index_level_for_contract_operations) , add_indices_for_top_index_level_for_contract_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_indices_for_top_index_level_for_contract_operations) , add_reference_for_index_level_for_contract_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_reference_for_index_level_for_contract_operations) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveDocumentInsertMethodVersions) -> * const platform_version_version_drive_versions_DriveDocumentInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentInsertMethodVersions { add_document : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_document) , add_document_for_contract : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_document_for_contract) , add_document_for_contract_apply_and_add_to_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_document_for_contract_apply_and_add_to_operations) , add_document_for_contract_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_document_for_contract_operations) , add_document_to_primary_storage : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_document_to_primary_storage) , add_indices_for_index_level_for_contract_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_indices_for_index_level_for_contract_operations) , add_indices_for_top_index_level_for_contract_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_indices_for_top_index_level_for_contract_operations) , add_reference_for_index_level_for_contract_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_reference_for_index_level_for_contract_operations) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveDocumentInsertMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_document) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_document_for_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_document_for_contract_apply_and_add_to_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_document_for_contract_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_document_to_primary_storage) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_indices_for_index_level_for_contract_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_indices_for_top_index_level_for_contract_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_reference_for_index_level_for_contract_operations) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_ctor (add_document : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_document_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_document_for_contract_apply_and_add_to_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_document_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_document_to_primary_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_indices_for_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_indices_for_top_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_reference_for_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentInsertMethodVersions { add_document , add_document_for_contract , add_document_for_contract_apply_and_add_to_operations , add_document_for_contract_operations , add_document_to_primary_storage , add_indices_for_index_level_for_contract_operations , add_indices_for_top_index_level_for_contract_operations , add_reference_for_index_level_for_contract_operations }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_get_add_document (obj : * const platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_document } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_get_add_document_for_contract (obj : * const platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_document_for_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_get_add_document_for_contract_apply_and_add_to_operations (obj : * const platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_document_for_contract_apply_and_add_to_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_get_add_document_for_contract_operations (obj : * const platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_document_for_contract_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_get_add_document_to_primary_storage (obj : * const platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_document_to_primary_storage } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_get_add_indices_for_index_level_for_contract_operations (obj : * const platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_indices_for_index_level_for_contract_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_get_add_indices_for_top_index_level_for_contract_operations (obj : * const platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_indices_for_top_index_level_for_contract_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_get_add_reference_for_index_level_for_contract_operations (obj : * const platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_reference_for_index_level_for_contract_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_set_add_document (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_document = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_set_add_document_for_contract (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_document_for_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_set_add_document_for_contract_apply_and_add_to_operations (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_document_for_contract_apply_and_add_to_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_set_add_document_for_contract_operations (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_document_for_contract_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_set_add_document_to_primary_storage (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_document_to_primary_storage = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_set_add_indices_for_index_level_for_contract_operations (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_indices_for_index_level_for_contract_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_set_add_indices_for_top_index_level_for_contract_operations (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_indices_for_top_index_level_for_contract_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentInsertMethodVersions_set_add_reference_for_index_level_for_contract_operations (obj : * mut platform_version_version_drive_versions_DriveDocumentInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_reference_for_index_level_for_contract_operations = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveContractMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveContractMethodVersions { pub prove : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractProveMethodVersions , pub apply : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractApplyMethodVersions , pub insert : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractInsertMethodVersions , pub update : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractUpdateMethodVersions , pub costs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractCostsMethodVersions , pub get : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractGetMethodVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveContractMethodVersions > for platform_version_version_drive_versions_DriveContractMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveContractMethodVersions) -> platform_version :: version :: drive_versions :: DriveContractMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveContractMethodVersions { prove : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . prove) , apply : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . apply) , insert : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . insert) , update : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update) , costs : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . costs) , get : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveContractMethodVersions) -> * const platform_version_version_drive_versions_DriveContractMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractMethodVersions { prove : ferment_interfaces :: FFIConversion :: ffi_to (obj . prove) , apply : ferment_interfaces :: FFIConversion :: ffi_to (obj . apply) , insert : ferment_interfaces :: FFIConversion :: ffi_to (obj . insert) , update : ferment_interfaces :: FFIConversion :: ffi_to (obj . update) , costs : ferment_interfaces :: FFIConversion :: ffi_to (obj . costs) , get : ferment_interfaces :: FFIConversion :: ffi_to (obj . get) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveContractMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveContractMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . prove) ; ; ferment_interfaces :: unbox_any (ffi_ref . apply) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert) ; ; ferment_interfaces :: unbox_any (ffi_ref . update) ; ; ferment_interfaces :: unbox_any (ffi_ref . costs) ; ; ferment_interfaces :: unbox_any (ffi_ref . get) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_ctor (prove : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractProveMethodVersions , apply : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractApplyMethodVersions , insert : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractInsertMethodVersions , update : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractUpdateMethodVersions , costs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractCostsMethodVersions , get : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractGetMethodVersions) -> * mut platform_version_version_drive_versions_DriveContractMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractMethodVersions { prove , apply , insert , update , costs , get }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveContractMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_get_prove (obj : * const platform_version_version_drive_versions_DriveContractMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractProveMethodVersions { (* obj) . prove } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_get_apply (obj : * const platform_version_version_drive_versions_DriveContractMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractApplyMethodVersions { (* obj) . apply } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_get_insert (obj : * const platform_version_version_drive_versions_DriveContractMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractInsertMethodVersions { (* obj) . insert } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_get_update (obj : * const platform_version_version_drive_versions_DriveContractMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractUpdateMethodVersions { (* obj) . update } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_get_costs (obj : * const platform_version_version_drive_versions_DriveContractMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractCostsMethodVersions { (* obj) . costs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_get_get (obj : * const platform_version_version_drive_versions_DriveContractMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractGetMethodVersions { (* obj) . get } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_set_prove (obj : * mut platform_version_version_drive_versions_DriveContractMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractProveMethodVersions) { (* obj) . prove = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_set_apply (obj : * mut platform_version_version_drive_versions_DriveContractMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractApplyMethodVersions) { (* obj) . apply = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_set_insert (obj : * mut platform_version_version_drive_versions_DriveContractMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractInsertMethodVersions) { (* obj) . insert = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_set_update (obj : * mut platform_version_version_drive_versions_DriveContractMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractUpdateMethodVersions) { (* obj) . update = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_set_costs (obj : * mut platform_version_version_drive_versions_DriveContractMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractCostsMethodVersions) { (* obj) . costs = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractMethodVersions_set_get (obj : * mut platform_version_version_drive_versions_DriveContractMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractGetMethodVersions) { (* obj) . get = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveCreditPoolMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveCreditPoolMethodVersions { pub epochs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , pub pending_epoch_refunds : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions , pub storage_fee_distribution_pool : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveCreditPoolMethodVersions > for platform_version_version_drive_versions_DriveCreditPoolMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveCreditPoolMethodVersions) -> platform_version :: version :: drive_versions :: DriveCreditPoolMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveCreditPoolMethodVersions { epochs : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . epochs) , pending_epoch_refunds : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . pending_epoch_refunds) , storage_fee_distribution_pool : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . storage_fee_distribution_pool) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveCreditPoolMethodVersions) -> * const platform_version_version_drive_versions_DriveCreditPoolMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveCreditPoolMethodVersions { epochs : ferment_interfaces :: FFIConversion :: ffi_to (obj . epochs) , pending_epoch_refunds : ferment_interfaces :: FFIConversion :: ffi_to (obj . pending_epoch_refunds) , storage_fee_distribution_pool : ferment_interfaces :: FFIConversion :: ffi_to (obj . storage_fee_distribution_pool) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveCreditPoolMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveCreditPoolMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . epochs) ; ; ferment_interfaces :: unbox_any (ffi_ref . pending_epoch_refunds) ; ; ferment_interfaces :: unbox_any (ffi_ref . storage_fee_distribution_pool) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolMethodVersions_ctor (epochs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , pending_epoch_refunds : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions , storage_fee_distribution_pool : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions) -> * mut platform_version_version_drive_versions_DriveCreditPoolMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveCreditPoolMethodVersions { epochs , pending_epoch_refunds , storage_fee_distribution_pool }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveCreditPoolMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolMethodVersions_get_epochs (obj : * const platform_version_version_drive_versions_DriveCreditPoolMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions { (* obj) . epochs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolMethodVersions_get_pending_epoch_refunds (obj : * const platform_version_version_drive_versions_DriveCreditPoolMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions { (* obj) . pending_epoch_refunds } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolMethodVersions_get_storage_fee_distribution_pool (obj : * const platform_version_version_drive_versions_DriveCreditPoolMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions { (* obj) . storage_fee_distribution_pool } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolMethodVersions_set_epochs (obj : * mut platform_version_version_drive_versions_DriveCreditPoolMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) { (* obj) . epochs = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolMethodVersions_set_pending_epoch_refunds (obj : * mut platform_version_version_drive_versions_DriveCreditPoolMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions) { (* obj) . pending_epoch_refunds = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolMethodVersions_set_storage_fee_distribution_pool (obj : * mut platform_version_version_drive_versions_DriveCreditPoolMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions) { (* obj) . storage_fee_distribution_pool = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveIdentityContractInfoMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions { pub add_potential_contract_info_for_contract_bounded_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveIdentityContractInfoMethodVersions > for platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityContractInfoMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityContractInfoMethodVersions { add_potential_contract_info_for_contract_bounded_key : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_potential_contract_info_for_contract_bounded_key) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityContractInfoMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions { add_potential_contract_info_for_contract_bounded_key : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_potential_contract_info_for_contract_bounded_key) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_potential_contract_info_for_contract_bounded_key) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions_ctor (add_potential_contract_info_for_contract_bounded_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions { add_potential_contract_info_for_contract_bounded_key }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions_get_add_potential_contract_info_for_contract_bounded_key (obj : * const platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_potential_contract_info_for_contract_bounded_key } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions_set_add_potential_contract_info_for_contract_bounded_key (obj : * mut platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_potential_contract_info_for_contract_bounded_key = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveIdentityUpdateMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions { pub update_identity_revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_identity_negative_credit_operation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub initialize_identity_revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub disable_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub re_enable_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_new_non_unique_keys_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_new_unique_keys_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_new_keys_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub insert_identity_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub initialize_negative_identity_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_to_identity_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_to_previous_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub apply_balance_change_from_fee_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_from_identity_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveIdentityUpdateMethodVersions > for platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityUpdateMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityUpdateMethodVersions { update_identity_revision : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update_identity_revision) , update_identity_negative_credit_operation : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update_identity_negative_credit_operation) , initialize_identity_revision : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . initialize_identity_revision) , disable_identity_keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . disable_identity_keys) , re_enable_identity_keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . re_enable_identity_keys) , add_new_non_unique_keys_to_identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_new_non_unique_keys_to_identity) , add_new_unique_keys_to_identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_new_unique_keys_to_identity) , add_new_keys_to_identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_new_keys_to_identity) , insert_identity_balance : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . insert_identity_balance) , initialize_negative_identity_balance : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . initialize_negative_identity_balance) , add_to_identity_balance : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_to_identity_balance) , add_to_previous_balance : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_to_previous_balance) , apply_balance_change_from_fee_to_identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . apply_balance_change_from_fee_to_identity) , remove_from_identity_balance : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . remove_from_identity_balance) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityUpdateMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions { update_identity_revision : ferment_interfaces :: FFIConversion :: ffi_to (obj . update_identity_revision) , update_identity_negative_credit_operation : ferment_interfaces :: FFIConversion :: ffi_to (obj . update_identity_negative_credit_operation) , initialize_identity_revision : ferment_interfaces :: FFIConversion :: ffi_to (obj . initialize_identity_revision) , disable_identity_keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . disable_identity_keys) , re_enable_identity_keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . re_enable_identity_keys) , add_new_non_unique_keys_to_identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_new_non_unique_keys_to_identity) , add_new_unique_keys_to_identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_new_unique_keys_to_identity) , add_new_keys_to_identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_new_keys_to_identity) , insert_identity_balance : ferment_interfaces :: FFIConversion :: ffi_to (obj . insert_identity_balance) , initialize_negative_identity_balance : ferment_interfaces :: FFIConversion :: ffi_to (obj . initialize_negative_identity_balance) , add_to_identity_balance : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_to_identity_balance) , add_to_previous_balance : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_to_previous_balance) , apply_balance_change_from_fee_to_identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . apply_balance_change_from_fee_to_identity) , remove_from_identity_balance : ferment_interfaces :: FFIConversion :: ffi_to (obj . remove_from_identity_balance) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . update_identity_revision) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_identity_negative_credit_operation) ; ; ferment_interfaces :: unbox_any (ffi_ref . initialize_identity_revision) ; ; ferment_interfaces :: unbox_any (ffi_ref . disable_identity_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . re_enable_identity_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_new_non_unique_keys_to_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_new_unique_keys_to_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_new_keys_to_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_identity_balance) ; ; ferment_interfaces :: unbox_any (ffi_ref . initialize_negative_identity_balance) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_to_identity_balance) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_to_previous_balance) ; ; ferment_interfaces :: unbox_any (ffi_ref . apply_balance_change_from_fee_to_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_from_identity_balance) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_ctor (update_identity_revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_identity_negative_credit_operation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , initialize_identity_revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , disable_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , re_enable_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_new_non_unique_keys_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_new_unique_keys_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_new_keys_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , insert_identity_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , initialize_negative_identity_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_to_identity_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_to_previous_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , apply_balance_change_from_fee_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_from_identity_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions { update_identity_revision , update_identity_negative_credit_operation , initialize_identity_revision , disable_identity_keys , re_enable_identity_keys , add_new_non_unique_keys_to_identity , add_new_unique_keys_to_identity , add_new_keys_to_identity , insert_identity_balance , initialize_negative_identity_balance , add_to_identity_balance , add_to_previous_balance , apply_balance_change_from_fee_to_identity , remove_from_identity_balance }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_update_identity_revision (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_identity_revision } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_update_identity_negative_credit_operation (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_identity_negative_credit_operation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_initialize_identity_revision (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . initialize_identity_revision } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_disable_identity_keys (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . disable_identity_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_re_enable_identity_keys (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . re_enable_identity_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_add_new_non_unique_keys_to_identity (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_new_non_unique_keys_to_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_add_new_unique_keys_to_identity (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_new_unique_keys_to_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_add_new_keys_to_identity (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_new_keys_to_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_insert_identity_balance (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . insert_identity_balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_initialize_negative_identity_balance (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . initialize_negative_identity_balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_add_to_identity_balance (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_to_identity_balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_add_to_previous_balance (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_to_previous_balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_apply_balance_change_from_fee_to_identity (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . apply_balance_change_from_fee_to_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_get_remove_from_identity_balance (obj : * const platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_from_identity_balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_update_identity_revision (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_identity_revision = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_update_identity_negative_credit_operation (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_identity_negative_credit_operation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_initialize_identity_revision (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . initialize_identity_revision = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_disable_identity_keys (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . disable_identity_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_re_enable_identity_keys (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . re_enable_identity_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_add_new_non_unique_keys_to_identity (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_new_non_unique_keys_to_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_add_new_unique_keys_to_identity (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_new_unique_keys_to_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_add_new_keys_to_identity (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_new_keys_to_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_insert_identity_balance (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . insert_identity_balance = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_initialize_negative_identity_balance (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . initialize_negative_identity_balance = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_add_to_identity_balance (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_to_identity_balance = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_add_to_previous_balance (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_to_previous_balance = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_apply_balance_change_from_fee_to_identity (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . apply_balance_change_from_fee_to_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions_set_remove_from_identity_balance (obj : * mut platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_from_identity_balance = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveCreditPoolPendingEpochRefundsMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions { pub add_delete_pending_epoch_refunds_except_specified : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_and_add_pending_epoch_refunds_to_collection : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_pending_epoch_refunds : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_update_pending_epoch_refunds_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveCreditPoolPendingEpochRefundsMethodVersions > for platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions) -> platform_version :: version :: drive_versions :: DriveCreditPoolPendingEpochRefundsMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveCreditPoolPendingEpochRefundsMethodVersions { add_delete_pending_epoch_refunds_except_specified : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_delete_pending_epoch_refunds_except_specified) , fetch_and_add_pending_epoch_refunds_to_collection : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_and_add_pending_epoch_refunds_to_collection) , fetch_pending_epoch_refunds : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_pending_epoch_refunds) , add_update_pending_epoch_refunds_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_update_pending_epoch_refunds_operations) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveCreditPoolPendingEpochRefundsMethodVersions) -> * const platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions { add_delete_pending_epoch_refunds_except_specified : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_delete_pending_epoch_refunds_except_specified) , fetch_and_add_pending_epoch_refunds_to_collection : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_and_add_pending_epoch_refunds_to_collection) , fetch_pending_epoch_refunds : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_pending_epoch_refunds) , add_update_pending_epoch_refunds_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_update_pending_epoch_refunds_operations) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_delete_pending_epoch_refunds_except_specified) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_and_add_pending_epoch_refunds_to_collection) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_pending_epoch_refunds) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_update_pending_epoch_refunds_operations) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions_ctor (add_delete_pending_epoch_refunds_except_specified : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_and_add_pending_epoch_refunds_to_collection : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_pending_epoch_refunds : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_update_pending_epoch_refunds_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions { add_delete_pending_epoch_refunds_except_specified , fetch_and_add_pending_epoch_refunds_to_collection , fetch_pending_epoch_refunds , add_update_pending_epoch_refunds_operations }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions_get_add_delete_pending_epoch_refunds_except_specified (obj : * const platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_delete_pending_epoch_refunds_except_specified } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions_get_fetch_and_add_pending_epoch_refunds_to_collection (obj : * const platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_and_add_pending_epoch_refunds_to_collection } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions_get_fetch_pending_epoch_refunds (obj : * const platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_pending_epoch_refunds } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions_get_add_update_pending_epoch_refunds_operations (obj : * const platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_update_pending_epoch_refunds_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions_set_add_delete_pending_epoch_refunds_except_specified (obj : * mut platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_delete_pending_epoch_refunds_except_specified = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions_set_fetch_and_add_pending_epoch_refunds_to_collection (obj : * mut platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_and_add_pending_epoch_refunds_to_collection = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions_set_fetch_pending_epoch_refunds (obj : * mut platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_pending_epoch_refunds = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions_set_add_update_pending_epoch_refunds_operations (obj : * mut platform_version_version_drive_versions_DriveCreditPoolPendingEpochRefundsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_update_pending_epoch_refunds_operations = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveDocumentQueryMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveDocumentQueryMethodVersions { pub query_documents : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveDocumentQueryMethodVersions > for platform_version_version_drive_versions_DriveDocumentQueryMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveDocumentQueryMethodVersions) -> platform_version :: version :: drive_versions :: DriveDocumentQueryMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveDocumentQueryMethodVersions { query_documents : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . query_documents) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveDocumentQueryMethodVersions) -> * const platform_version_version_drive_versions_DriveDocumentQueryMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentQueryMethodVersions { query_documents : ferment_interfaces :: FFIConversion :: ffi_to (obj . query_documents) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentQueryMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveDocumentQueryMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . query_documents) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentQueryMethodVersions_ctor (query_documents : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveDocumentQueryMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentQueryMethodVersions { query_documents }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentQueryMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentQueryMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentQueryMethodVersions_get_query_documents (obj : * const platform_version_version_drive_versions_DriveDocumentQueryMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . query_documents } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentQueryMethodVersions_set_query_documents (obj : * mut platform_version_version_drive_versions_DriveDocumentQueryMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . query_documents = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveAssetLockMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveAssetLockMethodVersions { pub add_asset_lock_outpoint : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_estimation_costs_for_adding_asset_lock : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub has_asset_lock_outpoint : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveAssetLockMethodVersions > for platform_version_version_drive_versions_DriveAssetLockMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveAssetLockMethodVersions) -> platform_version :: version :: drive_versions :: DriveAssetLockMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveAssetLockMethodVersions { add_asset_lock_outpoint : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_asset_lock_outpoint) , add_estimation_costs_for_adding_asset_lock : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_estimation_costs_for_adding_asset_lock) , has_asset_lock_outpoint : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . has_asset_lock_outpoint) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveAssetLockMethodVersions) -> * const platform_version_version_drive_versions_DriveAssetLockMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveAssetLockMethodVersions { add_asset_lock_outpoint : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_asset_lock_outpoint) , add_estimation_costs_for_adding_asset_lock : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_estimation_costs_for_adding_asset_lock) , has_asset_lock_outpoint : ferment_interfaces :: FFIConversion :: ffi_to (obj . has_asset_lock_outpoint) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveAssetLockMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveAssetLockMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_asset_lock_outpoint) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_estimation_costs_for_adding_asset_lock) ; ; ferment_interfaces :: unbox_any (ffi_ref . has_asset_lock_outpoint) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveAssetLockMethodVersions_ctor (add_asset_lock_outpoint : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_estimation_costs_for_adding_asset_lock : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , has_asset_lock_outpoint : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveAssetLockMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveAssetLockMethodVersions { add_asset_lock_outpoint , add_estimation_costs_for_adding_asset_lock , has_asset_lock_outpoint }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveAssetLockMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveAssetLockMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveAssetLockMethodVersions_get_add_asset_lock_outpoint (obj : * const platform_version_version_drive_versions_DriveAssetLockMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_asset_lock_outpoint } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveAssetLockMethodVersions_get_add_estimation_costs_for_adding_asset_lock (obj : * const platform_version_version_drive_versions_DriveAssetLockMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_estimation_costs_for_adding_asset_lock } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveAssetLockMethodVersions_get_has_asset_lock_outpoint (obj : * const platform_version_version_drive_versions_DriveAssetLockMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . has_asset_lock_outpoint } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveAssetLockMethodVersions_set_add_asset_lock_outpoint (obj : * mut platform_version_version_drive_versions_DriveAssetLockMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_asset_lock_outpoint = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveAssetLockMethodVersions_set_add_estimation_costs_for_adding_asset_lock (obj : * mut platform_version_version_drive_versions_DriveAssetLockMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_estimation_costs_for_adding_asset_lock = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveAssetLockMethodVersions_set_has_asset_lock_outpoint (obj : * mut platform_version_version_drive_versions_DriveAssetLockMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . has_asset_lock_outpoint = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveIdentityFetchPartialIdentityMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions { pub fetch_identity_balance_with_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_identity_balance_with_keys_and_revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_identity_with_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveIdentityFetchPartialIdentityMethodVersions > for platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityFetchPartialIdentityMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityFetchPartialIdentityMethodVersions { fetch_identity_balance_with_keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_identity_balance_with_keys) , fetch_identity_balance_with_keys_and_revision : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_identity_balance_with_keys_and_revision) , fetch_identity_with_balance : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_identity_with_balance) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityFetchPartialIdentityMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions { fetch_identity_balance_with_keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_identity_balance_with_keys) , fetch_identity_balance_with_keys_and_revision : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_identity_balance_with_keys_and_revision) , fetch_identity_with_balance : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_identity_with_balance) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_identity_balance_with_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_identity_balance_with_keys_and_revision) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_identity_with_balance) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions_ctor (fetch_identity_balance_with_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_identity_balance_with_keys_and_revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_identity_with_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions { fetch_identity_balance_with_keys , fetch_identity_balance_with_keys_and_revision , fetch_identity_with_balance }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions_get_fetch_identity_balance_with_keys (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_identity_balance_with_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions_get_fetch_identity_balance_with_keys_and_revision (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_identity_balance_with_keys_and_revision } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions_get_fetch_identity_with_balance (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_identity_with_balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions_set_fetch_identity_balance_with_keys (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_identity_balance_with_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions_set_fetch_identity_balance_with_keys_and_revision (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_identity_balance_with_keys_and_revision = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions_set_fetch_identity_with_balance (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_identity_with_balance = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveStateTransitionOperationMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions { pub finalization_tasks : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub contracts : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDataContractOperationMethodVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveStateTransitionOperationMethodVersions > for platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions) -> platform_version :: version :: drive_versions :: DriveStateTransitionOperationMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveStateTransitionOperationMethodVersions { finalization_tasks : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . finalization_tasks) , contracts : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . contracts) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveStateTransitionOperationMethodVersions) -> * const platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions { finalization_tasks : ferment_interfaces :: FFIConversion :: ffi_to (obj . finalization_tasks) , contracts : ferment_interfaces :: FFIConversion :: ffi_to (obj . contracts) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . finalization_tasks) ; ; ferment_interfaces :: unbox_any (ffi_ref . contracts) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions_ctor (finalization_tasks : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , contracts : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDataContractOperationMethodVersions) -> * mut platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions { finalization_tasks , contracts }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions_get_finalization_tasks (obj : * const platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . finalization_tasks } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions_get_contracts (obj : * const platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDataContractOperationMethodVersions { (* obj) . contracts } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions_set_finalization_tasks (obj : * mut platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . finalization_tasks = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions_set_contracts (obj : * mut platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDataContractOperationMethodVersions) { (* obj) . contracts = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveDocumentIndexUniquenessMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions { pub validate_document_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_document_create_transition_action_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_document_replace_transition_action_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_uniqueness_of_data : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveDocumentIndexUniquenessMethodVersions > for platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions) -> platform_version :: version :: drive_versions :: DriveDocumentIndexUniquenessMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveDocumentIndexUniquenessMethodVersions { validate_document_uniqueness : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_document_uniqueness) , validate_document_create_transition_action_uniqueness : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_document_create_transition_action_uniqueness) , validate_document_replace_transition_action_uniqueness : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_document_replace_transition_action_uniqueness) , validate_uniqueness_of_data : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_uniqueness_of_data) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveDocumentIndexUniquenessMethodVersions) -> * const platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions { validate_document_uniqueness : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_document_uniqueness) , validate_document_create_transition_action_uniqueness : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_document_create_transition_action_uniqueness) , validate_document_replace_transition_action_uniqueness : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_document_replace_transition_action_uniqueness) , validate_uniqueness_of_data : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_uniqueness_of_data) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . validate_document_uniqueness) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_document_create_transition_action_uniqueness) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_document_replace_transition_action_uniqueness) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_uniqueness_of_data) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_ctor (validate_document_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_document_create_transition_action_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_document_replace_transition_action_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_uniqueness_of_data : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions { validate_document_uniqueness , validate_document_create_transition_action_uniqueness , validate_document_replace_transition_action_uniqueness , validate_uniqueness_of_data }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_get_validate_document_uniqueness (obj : * const platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_document_uniqueness } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_get_validate_document_create_transition_action_uniqueness (obj : * const platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_document_create_transition_action_uniqueness } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_get_validate_document_replace_transition_action_uniqueness (obj : * const platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_document_replace_transition_action_uniqueness } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_get_validate_uniqueness_of_data (obj : * const platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_uniqueness_of_data } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_set_validate_document_uniqueness (obj : * mut platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_document_uniqueness = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_set_validate_document_create_transition_action_uniqueness (obj : * mut platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_document_create_transition_action_uniqueness = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_set_validate_document_replace_transition_action_uniqueness (obj : * mut platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_document_replace_transition_action_uniqueness = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions_set_validate_uniqueness_of_data (obj : * mut platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_uniqueness_of_data = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveDocumentUpdateMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions { pub add_update_multiple_documents_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_document_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_document_for_contract_apply_and_add_to_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_document_for_contract_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_document_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_document_with_serialization_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_serialized_document_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveDocumentUpdateMethodVersions > for platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) -> platform_version :: version :: drive_versions :: DriveDocumentUpdateMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveDocumentUpdateMethodVersions { add_update_multiple_documents_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_update_multiple_documents_operations) , update_document_for_contract : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update_document_for_contract) , update_document_for_contract_apply_and_add_to_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update_document_for_contract_apply_and_add_to_operations) , update_document_for_contract_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update_document_for_contract_id) , update_document_for_contract_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update_document_for_contract_operations) , update_document_with_serialization_for_contract : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update_document_with_serialization_for_contract) , update_serialized_document_for_contract : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update_serialized_document_for_contract) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveDocumentUpdateMethodVersions) -> * const platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions { add_update_multiple_documents_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_update_multiple_documents_operations) , update_document_for_contract : ferment_interfaces :: FFIConversion :: ffi_to (obj . update_document_for_contract) , update_document_for_contract_apply_and_add_to_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . update_document_for_contract_apply_and_add_to_operations) , update_document_for_contract_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . update_document_for_contract_id) , update_document_for_contract_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . update_document_for_contract_operations) , update_document_with_serialization_for_contract : ferment_interfaces :: FFIConversion :: ffi_to (obj . update_document_with_serialization_for_contract) , update_serialized_document_for_contract : ferment_interfaces :: FFIConversion :: ffi_to (obj . update_serialized_document_for_contract) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_update_multiple_documents_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_document_for_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_document_for_contract_apply_and_add_to_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_document_for_contract_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_document_for_contract_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_document_with_serialization_for_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_serialized_document_for_contract) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_ctor (add_update_multiple_documents_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_document_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_document_for_contract_apply_and_add_to_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_document_for_contract_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_document_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_document_with_serialization_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_serialized_document_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions { add_update_multiple_documents_operations , update_document_for_contract , update_document_for_contract_apply_and_add_to_operations , update_document_for_contract_id , update_document_for_contract_operations , update_document_with_serialization_for_contract , update_serialized_document_for_contract }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_get_add_update_multiple_documents_operations (obj : * const platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_update_multiple_documents_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_get_update_document_for_contract (obj : * const platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_document_for_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_get_update_document_for_contract_apply_and_add_to_operations (obj : * const platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_document_for_contract_apply_and_add_to_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_get_update_document_for_contract_id (obj : * const platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_document_for_contract_id } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_get_update_document_for_contract_operations (obj : * const platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_document_for_contract_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_get_update_document_with_serialization_for_contract (obj : * const platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_document_with_serialization_for_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_get_update_serialized_document_for_contract (obj : * const platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_serialized_document_for_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_set_add_update_multiple_documents_operations (obj : * mut platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_update_multiple_documents_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_set_update_document_for_contract (obj : * mut platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_document_for_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_set_update_document_for_contract_apply_and_add_to_operations (obj : * mut platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_document_for_contract_apply_and_add_to_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_set_update_document_for_contract_id (obj : * mut platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_document_for_contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_set_update_document_for_contract_operations (obj : * mut platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_document_for_contract_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_set_update_document_with_serialization_for_contract (obj : * mut platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_document_with_serialization_for_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions_set_update_serialized_document_for_contract (obj : * mut platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_serialized_document_for_contract = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveGroveMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveGroveMethodVersions { pub basic : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveBasicMethodVersions , pub batch : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveBatchMethodVersions , pub apply : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveApplyMethodVersions , pub costs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveCostMethodVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveGroveMethodVersions > for platform_version_version_drive_versions_DriveGroveMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveGroveMethodVersions) -> platform_version :: version :: drive_versions :: DriveGroveMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveGroveMethodVersions { basic : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . basic) , batch : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . batch) , apply : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . apply) , costs : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . costs) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveGroveMethodVersions) -> * const platform_version_version_drive_versions_DriveGroveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveGroveMethodVersions { basic : ferment_interfaces :: FFIConversion :: ffi_to (obj . basic) , batch : ferment_interfaces :: FFIConversion :: ffi_to (obj . batch) , apply : ferment_interfaces :: FFIConversion :: ffi_to (obj . apply) , costs : ferment_interfaces :: FFIConversion :: ffi_to (obj . costs) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveGroveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveGroveMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . basic) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch) ; ; ferment_interfaces :: unbox_any (ffi_ref . apply) ; ; ferment_interfaces :: unbox_any (ffi_ref . costs) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveMethodVersions_ctor (basic : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveBasicMethodVersions , batch : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveBatchMethodVersions , apply : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveApplyMethodVersions , costs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveCostMethodVersions) -> * mut platform_version_version_drive_versions_DriveGroveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveGroveMethodVersions { basic , batch , apply , costs }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveGroveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveMethodVersions_get_basic (obj : * const platform_version_version_drive_versions_DriveGroveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveBasicMethodVersions { (* obj) . basic } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveMethodVersions_get_batch (obj : * const platform_version_version_drive_versions_DriveGroveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveBatchMethodVersions { (* obj) . batch } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveMethodVersions_get_apply (obj : * const platform_version_version_drive_versions_DriveGroveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveApplyMethodVersions { (* obj) . apply } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveMethodVersions_get_costs (obj : * const platform_version_version_drive_versions_DriveGroveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveCostMethodVersions { (* obj) . costs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveMethodVersions_set_basic (obj : * mut platform_version_version_drive_versions_DriveGroveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveBasicMethodVersions) { (* obj) . basic = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveMethodVersions_set_batch (obj : * mut platform_version_version_drive_versions_DriveGroveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveBatchMethodVersions) { (* obj) . batch = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveMethodVersions_set_apply (obj : * mut platform_version_version_drive_versions_DriveGroveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveApplyMethodVersions) { (* obj) . apply = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveMethodVersions_set_costs (obj : * mut platform_version_version_drive_versions_DriveGroveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveCostMethodVersions) { (* obj) . costs = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveIdentityWithdrawalMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions { pub document : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions , pub transaction : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveIdentityWithdrawalMethodVersions > for platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityWithdrawalMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityWithdrawalMethodVersions { document : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document) , transaction : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . transaction) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityWithdrawalMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions { document : ferment_interfaces :: FFIConversion :: ffi_to (obj . document) , transaction : ferment_interfaces :: FFIConversion :: ffi_to (obj . transaction) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document) ; ; ferment_interfaces :: unbox_any (ffi_ref . transaction) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions_ctor (document : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions , transaction : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions) -> * mut platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions { document , transaction }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions_get_document (obj : * const platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions { (* obj) . document } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions_get_transaction (obj : * const platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions { (* obj) . transaction } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions_set_document (obj : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalDocumentMethodVersions) { (* obj) . document = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions_set_transaction (obj : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions) { (* obj) . transaction = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveDocumentDeleteMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions { pub add_estimation_costs_for_remove_document_to_primary_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub delete_document_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub delete_document_for_contract_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub delete_document_for_contract_apply_and_add_to_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_document_from_primary_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_reference_for_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_indices_for_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_indices_for_top_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub delete_document_for_contract_id_with_named_type_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub delete_document_for_contract_with_named_type_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub delete_document_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveDocumentDeleteMethodVersions > for platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> platform_version :: version :: drive_versions :: DriveDocumentDeleteMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveDocumentDeleteMethodVersions { add_estimation_costs_for_remove_document_to_primary_storage : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_estimation_costs_for_remove_document_to_primary_storage) , delete_document_for_contract : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . delete_document_for_contract) , delete_document_for_contract_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . delete_document_for_contract_id) , delete_document_for_contract_apply_and_add_to_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . delete_document_for_contract_apply_and_add_to_operations) , remove_document_from_primary_storage : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . remove_document_from_primary_storage) , remove_reference_for_index_level_for_contract_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . remove_reference_for_index_level_for_contract_operations) , remove_indices_for_index_level_for_contract_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . remove_indices_for_index_level_for_contract_operations) , remove_indices_for_top_index_level_for_contract_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . remove_indices_for_top_index_level_for_contract_operations) , delete_document_for_contract_id_with_named_type_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . delete_document_for_contract_id_with_named_type_operations) , delete_document_for_contract_with_named_type_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . delete_document_for_contract_with_named_type_operations) , delete_document_for_contract_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . delete_document_for_contract_operations) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveDocumentDeleteMethodVersions) -> * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions { add_estimation_costs_for_remove_document_to_primary_storage : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_estimation_costs_for_remove_document_to_primary_storage) , delete_document_for_contract : ferment_interfaces :: FFIConversion :: ffi_to (obj . delete_document_for_contract) , delete_document_for_contract_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . delete_document_for_contract_id) , delete_document_for_contract_apply_and_add_to_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . delete_document_for_contract_apply_and_add_to_operations) , remove_document_from_primary_storage : ferment_interfaces :: FFIConversion :: ffi_to (obj . remove_document_from_primary_storage) , remove_reference_for_index_level_for_contract_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . remove_reference_for_index_level_for_contract_operations) , remove_indices_for_index_level_for_contract_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . remove_indices_for_index_level_for_contract_operations) , remove_indices_for_top_index_level_for_contract_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . remove_indices_for_top_index_level_for_contract_operations) , delete_document_for_contract_id_with_named_type_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . delete_document_for_contract_id_with_named_type_operations) , delete_document_for_contract_with_named_type_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . delete_document_for_contract_with_named_type_operations) , delete_document_for_contract_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . delete_document_for_contract_operations) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_estimation_costs_for_remove_document_to_primary_storage) ; ; ferment_interfaces :: unbox_any (ffi_ref . delete_document_for_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . delete_document_for_contract_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . delete_document_for_contract_apply_and_add_to_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_document_from_primary_storage) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_reference_for_index_level_for_contract_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_indices_for_index_level_for_contract_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_indices_for_top_index_level_for_contract_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . delete_document_for_contract_id_with_named_type_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . delete_document_for_contract_with_named_type_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . delete_document_for_contract_operations) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_ctor (add_estimation_costs_for_remove_document_to_primary_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , delete_document_for_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , delete_document_for_contract_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , delete_document_for_contract_apply_and_add_to_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_document_from_primary_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_reference_for_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_indices_for_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_indices_for_top_index_level_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , delete_document_for_contract_id_with_named_type_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , delete_document_for_contract_with_named_type_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , delete_document_for_contract_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions { add_estimation_costs_for_remove_document_to_primary_storage , delete_document_for_contract , delete_document_for_contract_id , delete_document_for_contract_apply_and_add_to_operations , remove_document_from_primary_storage , remove_reference_for_index_level_for_contract_operations , remove_indices_for_index_level_for_contract_operations , remove_indices_for_top_index_level_for_contract_operations , delete_document_for_contract_id_with_named_type_operations , delete_document_for_contract_with_named_type_operations , delete_document_for_contract_operations }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_add_estimation_costs_for_remove_document_to_primary_storage (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_estimation_costs_for_remove_document_to_primary_storage } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_delete_document_for_contract (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . delete_document_for_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_delete_document_for_contract_id (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . delete_document_for_contract_id } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_delete_document_for_contract_apply_and_add_to_operations (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . delete_document_for_contract_apply_and_add_to_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_remove_document_from_primary_storage (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_document_from_primary_storage } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_remove_reference_for_index_level_for_contract_operations (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_reference_for_index_level_for_contract_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_remove_indices_for_index_level_for_contract_operations (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_indices_for_index_level_for_contract_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_remove_indices_for_top_index_level_for_contract_operations (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_indices_for_top_index_level_for_contract_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_delete_document_for_contract_id_with_named_type_operations (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . delete_document_for_contract_id_with_named_type_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_delete_document_for_contract_with_named_type_operations (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . delete_document_for_contract_with_named_type_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_get_delete_document_for_contract_operations (obj : * const platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . delete_document_for_contract_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_add_estimation_costs_for_remove_document_to_primary_storage (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_estimation_costs_for_remove_document_to_primary_storage = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_delete_document_for_contract (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . delete_document_for_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_delete_document_for_contract_id (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . delete_document_for_contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_delete_document_for_contract_apply_and_add_to_operations (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . delete_document_for_contract_apply_and_add_to_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_remove_document_from_primary_storage (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_document_from_primary_storage = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_remove_reference_for_index_level_for_contract_operations (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_reference_for_index_level_for_contract_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_remove_indices_for_index_level_for_contract_operations (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_indices_for_index_level_for_contract_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_remove_indices_for_top_index_level_for_contract_operations (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_indices_for_top_index_level_for_contract_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_delete_document_for_contract_id_with_named_type_operations (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . delete_document_for_contract_id_with_named_type_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_delete_document_for_contract_with_named_type_operations (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . delete_document_for_contract_with_named_type_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions_set_delete_document_for_contract_operations (obj : * mut platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . delete_document_for_contract_operations = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveSystemProtocolVersionMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions { pub fetch_next_protocol_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub set_next_protocol_version_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveSystemProtocolVersionMethodVersions > for platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions) -> platform_version :: version :: drive_versions :: DriveSystemProtocolVersionMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveSystemProtocolVersionMethodVersions { fetch_next_protocol_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_next_protocol_version) , set_next_protocol_version_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . set_next_protocol_version_operations) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveSystemProtocolVersionMethodVersions) -> * const platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions { fetch_next_protocol_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_next_protocol_version) , set_next_protocol_version_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . set_next_protocol_version_operations) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_next_protocol_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . set_next_protocol_version_operations) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions_ctor (fetch_next_protocol_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , set_next_protocol_version_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions { fetch_next_protocol_version , set_next_protocol_version_operations }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions_get_fetch_next_protocol_version (obj : * const platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_next_protocol_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions_get_set_next_protocol_version_operations (obj : * const platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . set_next_protocol_version_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions_set_fetch_next_protocol_version (obj : * mut platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_next_protocol_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions_set_set_next_protocol_version_operations (obj : * mut platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . set_next_protocol_version_operations = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveVerifySingleDocumentMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions { pub verify_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_proof_keep_serialized : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveVerifySingleDocumentMethodVersions > for platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions) -> platform_version :: version :: drive_versions :: DriveVerifySingleDocumentMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVerifySingleDocumentMethodVersions { verify_proof : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_proof) , verify_proof_keep_serialized : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_proof_keep_serialized) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVerifySingleDocumentMethodVersions) -> * const platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions { verify_proof : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_proof) , verify_proof_keep_serialized : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_proof_keep_serialized) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . verify_proof) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_proof_keep_serialized) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions_ctor (verify_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_proof_keep_serialized : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions { verify_proof , verify_proof_keep_serialized }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions_get_verify_proof (obj : * const platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_proof } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions_get_verify_proof_keep_serialized (obj : * const platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_proof_keep_serialized } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions_set_verify_proof (obj : * mut platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_proof = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions_set_verify_proof_keep_serialized (obj : * mut platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_proof_keep_serialized = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveDocumentEstimationCostsMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions { pub add_estimation_costs_for_add_document_to_primary_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub stateless_delete_of_non_tree_for_costs : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveDocumentEstimationCostsMethodVersions > for platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions) -> platform_version :: version :: drive_versions :: DriveDocumentEstimationCostsMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveDocumentEstimationCostsMethodVersions { add_estimation_costs_for_add_document_to_primary_storage : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_estimation_costs_for_add_document_to_primary_storage) , stateless_delete_of_non_tree_for_costs : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . stateless_delete_of_non_tree_for_costs) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveDocumentEstimationCostsMethodVersions) -> * const platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions { add_estimation_costs_for_add_document_to_primary_storage : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_estimation_costs_for_add_document_to_primary_storage) , stateless_delete_of_non_tree_for_costs : ferment_interfaces :: FFIConversion :: ffi_to (obj . stateless_delete_of_non_tree_for_costs) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_estimation_costs_for_add_document_to_primary_storage) ; ; ferment_interfaces :: unbox_any (ffi_ref . stateless_delete_of_non_tree_for_costs) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions_ctor (add_estimation_costs_for_add_document_to_primary_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , stateless_delete_of_non_tree_for_costs : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions { add_estimation_costs_for_add_document_to_primary_storage , stateless_delete_of_non_tree_for_costs }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions_get_add_estimation_costs_for_add_document_to_primary_storage (obj : * const platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_estimation_costs_for_add_document_to_primary_storage } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions_get_stateless_delete_of_non_tree_for_costs (obj : * const platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . stateless_delete_of_non_tree_for_costs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions_set_add_estimation_costs_for_add_document_to_primary_storage (obj : * mut platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_estimation_costs_for_add_document_to_primary_storage = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions_set_stateless_delete_of_non_tree_for_costs (obj : * mut platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . stateless_delete_of_non_tree_for_costs = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveIdentityKeysMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityKeysMethodVersions { pub fetch : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions , pub prove : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions , pub insert : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions , pub insert_key_hash_identity_reference : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveIdentityKeysMethodVersions > for platform_version_version_drive_versions_DriveIdentityKeysMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityKeysMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityKeysMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityKeysMethodVersions { fetch : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch) , prove : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . prove) , insert : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . insert) , insert_key_hash_identity_reference : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . insert_key_hash_identity_reference) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityKeysMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityKeysMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityKeysMethodVersions { fetch : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch) , prove : ferment_interfaces :: FFIConversion :: ffi_to (obj . prove) , insert : ferment_interfaces :: FFIConversion :: ffi_to (obj . insert) , insert_key_hash_identity_reference : ferment_interfaces :: FFIConversion :: ffi_to (obj . insert_key_hash_identity_reference) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityKeysMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityKeysMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_key_hash_identity_reference) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysMethodVersions_ctor (fetch : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions , prove : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions , insert : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions , insert_key_hash_identity_reference : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) -> * mut platform_version_version_drive_versions_DriveIdentityKeysMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityKeysMethodVersions { fetch , prove , insert , insert_key_hash_identity_reference }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityKeysMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysMethodVersions_get_fetch (obj : * const platform_version_version_drive_versions_DriveIdentityKeysMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions { (* obj) . fetch } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysMethodVersions_get_prove (obj : * const platform_version_version_drive_versions_DriveIdentityKeysMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions { (* obj) . prove } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysMethodVersions_get_insert (obj : * const platform_version_version_drive_versions_DriveIdentityKeysMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions { (* obj) . insert } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysMethodVersions_get_insert_key_hash_identity_reference (obj : * const platform_version_version_drive_versions_DriveIdentityKeysMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions { (* obj) . insert_key_hash_identity_reference } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysMethodVersions_set_fetch (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions) { (* obj) . fetch = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysMethodVersions_set_prove (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysProveMethodVersions) { (* obj) . prove = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysMethodVersions_set_insert (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) { (* obj) . insert = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysMethodVersions_set_insert_key_hash_identity_reference (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) { (* obj) . insert_key_hash_identity_reference = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveContractQueryMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveContractQueryMethodVersions { pub fetch_contract_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_contract_with_history_latest_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_contracts_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_contract_history_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveContractQueryMethodVersions > for platform_version_version_drive_versions_DriveContractQueryMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveContractQueryMethodVersions) -> platform_version :: version :: drive_versions :: DriveContractQueryMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveContractQueryMethodVersions { fetch_contract_query : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_contract_query) , fetch_contract_with_history_latest_query : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_contract_with_history_latest_query) , fetch_contracts_query : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_contracts_query) , fetch_contract_history_query : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_contract_history_query) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveContractQueryMethodVersions) -> * const platform_version_version_drive_versions_DriveContractQueryMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractQueryMethodVersions { fetch_contract_query : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_contract_query) , fetch_contract_with_history_latest_query : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_contract_with_history_latest_query) , fetch_contracts_query : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_contracts_query) , fetch_contract_history_query : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_contract_history_query) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveContractQueryMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveContractQueryMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_contract_query) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_contract_with_history_latest_query) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_contracts_query) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_contract_history_query) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractQueryMethodVersions_ctor (fetch_contract_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_contract_with_history_latest_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_contracts_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_contract_history_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveContractQueryMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractQueryMethodVersions { fetch_contract_query , fetch_contract_with_history_latest_query , fetch_contracts_query , fetch_contract_history_query }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractQueryMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveContractQueryMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractQueryMethodVersions_get_fetch_contract_query (obj : * const platform_version_version_drive_versions_DriveContractQueryMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_contract_query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractQueryMethodVersions_get_fetch_contract_with_history_latest_query (obj : * const platform_version_version_drive_versions_DriveContractQueryMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_contract_with_history_latest_query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractQueryMethodVersions_get_fetch_contracts_query (obj : * const platform_version_version_drive_versions_DriveContractQueryMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_contracts_query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractQueryMethodVersions_get_fetch_contract_history_query (obj : * const platform_version_version_drive_versions_DriveContractQueryMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_contract_history_query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractQueryMethodVersions_set_fetch_contract_query (obj : * mut platform_version_version_drive_versions_DriveContractQueryMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_contract_query = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractQueryMethodVersions_set_fetch_contract_with_history_latest_query (obj : * mut platform_version_version_drive_versions_DriveContractQueryMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_contract_with_history_latest_query = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractQueryMethodVersions_set_fetch_contracts_query (obj : * mut platform_version_version_drive_versions_DriveContractQueryMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_contracts_query = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractQueryMethodVersions_set_fetch_contract_history_query (obj : * mut platform_version_version_drive_versions_DriveContractQueryMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_contract_history_query = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveEstimatedCostsMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions { pub add_estimation_costs_for_levels_up_to_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_estimation_costs_for_levels_up_to_contract_document_type_excluded : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveEstimatedCostsMethodVersions > for platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions) -> platform_version :: version :: drive_versions :: DriveEstimatedCostsMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveEstimatedCostsMethodVersions { add_estimation_costs_for_levels_up_to_contract : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_estimation_costs_for_levels_up_to_contract) , add_estimation_costs_for_levels_up_to_contract_document_type_excluded : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_estimation_costs_for_levels_up_to_contract_document_type_excluded) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveEstimatedCostsMethodVersions) -> * const platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions { add_estimation_costs_for_levels_up_to_contract : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_estimation_costs_for_levels_up_to_contract) , add_estimation_costs_for_levels_up_to_contract_document_type_excluded : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_estimation_costs_for_levels_up_to_contract_document_type_excluded) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_estimation_costs_for_levels_up_to_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_estimation_costs_for_levels_up_to_contract_document_type_excluded) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions_ctor (add_estimation_costs_for_levels_up_to_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_estimation_costs_for_levels_up_to_contract_document_type_excluded : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions { add_estimation_costs_for_levels_up_to_contract , add_estimation_costs_for_levels_up_to_contract_document_type_excluded }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions_get_add_estimation_costs_for_levels_up_to_contract (obj : * const platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_estimation_costs_for_levels_up_to_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions_get_add_estimation_costs_for_levels_up_to_contract_document_type_excluded (obj : * const platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_estimation_costs_for_levels_up_to_contract_document_type_excluded } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions_set_add_estimation_costs_for_levels_up_to_contract (obj : * mut platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_estimation_costs_for_levels_up_to_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions_set_add_estimation_costs_for_levels_up_to_contract_document_type_excluded (obj : * mut platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_estimation_costs_for_levels_up_to_contract_document_type_excluded = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveIdentityKeysInsertMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions { pub create_key_tree_with_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_new_identity_key_query_trees : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub insert_key_searchable_references : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub insert_key_to_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub insert_new_non_unique_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub insert_new_unique_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub replace_key_in_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveIdentityKeysInsertMethodVersions > for platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityKeysInsertMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityKeysInsertMethodVersions { create_key_tree_with_keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . create_key_tree_with_keys) , create_new_identity_key_query_trees : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . create_new_identity_key_query_trees) , insert_key_searchable_references : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . insert_key_searchable_references) , insert_key_to_storage : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . insert_key_to_storage) , insert_new_non_unique_key : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . insert_new_non_unique_key) , insert_new_unique_key : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . insert_new_unique_key) , replace_key_in_storage : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . replace_key_in_storage) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityKeysInsertMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions { create_key_tree_with_keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . create_key_tree_with_keys) , create_new_identity_key_query_trees : ferment_interfaces :: FFIConversion :: ffi_to (obj . create_new_identity_key_query_trees) , insert_key_searchable_references : ferment_interfaces :: FFIConversion :: ffi_to (obj . insert_key_searchable_references) , insert_key_to_storage : ferment_interfaces :: FFIConversion :: ffi_to (obj . insert_key_to_storage) , insert_new_non_unique_key : ferment_interfaces :: FFIConversion :: ffi_to (obj . insert_new_non_unique_key) , insert_new_unique_key : ferment_interfaces :: FFIConversion :: ffi_to (obj . insert_new_unique_key) , replace_key_in_storage : ferment_interfaces :: FFIConversion :: ffi_to (obj . replace_key_in_storage) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . create_key_tree_with_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_new_identity_key_query_trees) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_key_searchable_references) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_key_to_storage) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_new_non_unique_key) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_new_unique_key) ; ; ferment_interfaces :: unbox_any (ffi_ref . replace_key_in_storage) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_ctor (create_key_tree_with_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_new_identity_key_query_trees : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , insert_key_searchable_references : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , insert_key_to_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , insert_new_non_unique_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , insert_new_unique_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , replace_key_in_storage : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions { create_key_tree_with_keys , create_new_identity_key_query_trees , insert_key_searchable_references , insert_key_to_storage , insert_new_non_unique_key , insert_new_unique_key , replace_key_in_storage }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_get_create_key_tree_with_keys (obj : * const platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_key_tree_with_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_get_create_new_identity_key_query_trees (obj : * const platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_new_identity_key_query_trees } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_get_insert_key_searchable_references (obj : * const platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . insert_key_searchable_references } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_get_insert_key_to_storage (obj : * const platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . insert_key_to_storage } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_get_insert_new_non_unique_key (obj : * const platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . insert_new_non_unique_key } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_get_insert_new_unique_key (obj : * const platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . insert_new_unique_key } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_get_replace_key_in_storage (obj : * const platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . replace_key_in_storage } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_set_create_key_tree_with_keys (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_key_tree_with_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_set_create_new_identity_key_query_trees (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_new_identity_key_query_trees = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_set_insert_key_searchable_references (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . insert_key_searchable_references = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_set_insert_key_to_storage (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . insert_key_to_storage = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_set_insert_new_non_unique_key (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . insert_new_non_unique_key = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_set_insert_new_unique_key (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . insert_new_unique_key = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions_set_replace_key_in_storage (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . replace_key_in_storage = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveDocumentMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveDocumentMethodVersions { pub query : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentQueryMethodVersions , pub delete : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , pub insert : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentInsertMethodVersions , pub update : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions , pub estimation_costs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions , pub index_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveDocumentMethodVersions > for platform_version_version_drive_versions_DriveDocumentMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveDocumentMethodVersions) -> platform_version :: version :: drive_versions :: DriveDocumentMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveDocumentMethodVersions { query : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . query) , delete : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . delete) , insert : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . insert) , update : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update) , estimation_costs : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . estimation_costs) , index_uniqueness : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . index_uniqueness) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveDocumentMethodVersions) -> * const platform_version_version_drive_versions_DriveDocumentMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentMethodVersions { query : ferment_interfaces :: FFIConversion :: ffi_to (obj . query) , delete : ferment_interfaces :: FFIConversion :: ffi_to (obj . delete) , insert : ferment_interfaces :: FFIConversion :: ffi_to (obj . insert) , update : ferment_interfaces :: FFIConversion :: ffi_to (obj . update) , estimation_costs : ferment_interfaces :: FFIConversion :: ffi_to (obj . estimation_costs) , index_uniqueness : ferment_interfaces :: FFIConversion :: ffi_to (obj . index_uniqueness) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveDocumentMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . query) ; ; ferment_interfaces :: unbox_any (ffi_ref . delete) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert) ; ; ferment_interfaces :: unbox_any (ffi_ref . update) ; ; ferment_interfaces :: unbox_any (ffi_ref . estimation_costs) ; ; ferment_interfaces :: unbox_any (ffi_ref . index_uniqueness) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_ctor (query : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentQueryMethodVersions , delete : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions , insert : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentInsertMethodVersions , update : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions , estimation_costs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions , index_uniqueness : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions) -> * mut platform_version_version_drive_versions_DriveDocumentMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDocumentMethodVersions { query , delete , insert , update , estimation_costs , index_uniqueness }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveDocumentMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_get_query (obj : * const platform_version_version_drive_versions_DriveDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentQueryMethodVersions { (* obj) . query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_get_delete (obj : * const platform_version_version_drive_versions_DriveDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions { (* obj) . delete } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_get_insert (obj : * const platform_version_version_drive_versions_DriveDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentInsertMethodVersions { (* obj) . insert } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_get_update (obj : * const platform_version_version_drive_versions_DriveDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions { (* obj) . update } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_get_estimation_costs (obj : * const platform_version_version_drive_versions_DriveDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions { (* obj) . estimation_costs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_get_index_uniqueness (obj : * const platform_version_version_drive_versions_DriveDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions { (* obj) . index_uniqueness } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_set_query (obj : * mut platform_version_version_drive_versions_DriveDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentQueryMethodVersions) { (* obj) . query = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_set_delete (obj : * mut platform_version_version_drive_versions_DriveDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentDeleteMethodVersions) { (* obj) . delete = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_set_insert (obj : * mut platform_version_version_drive_versions_DriveDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentInsertMethodVersions) { (* obj) . insert = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_set_update (obj : * mut platform_version_version_drive_versions_DriveDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentUpdateMethodVersions) { (* obj) . update = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_set_estimation_costs (obj : * mut platform_version_version_drive_versions_DriveDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentEstimationCostsMethodVersions) { (* obj) . estimation_costs = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDocumentMethodVersions_set_index_uniqueness (obj : * mut platform_version_version_drive_versions_DriveDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentIndexUniquenessMethodVersions) { (* obj) . index_uniqueness = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveIdentityWithdrawalTransactionQueueMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions { pub add_enqueue_untied_withdrawal_transaction_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub dequeue_untied_withdrawal_transactions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionQueueMethodVersions > for platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionQueueMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionQueueMethodVersions { add_enqueue_untied_withdrawal_transaction_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_enqueue_untied_withdrawal_transaction_operations) , dequeue_untied_withdrawal_transactions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . dequeue_untied_withdrawal_transactions) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionQueueMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions { add_enqueue_untied_withdrawal_transaction_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_enqueue_untied_withdrawal_transaction_operations) , dequeue_untied_withdrawal_transactions : ferment_interfaces :: FFIConversion :: ffi_to (obj . dequeue_untied_withdrawal_transactions) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_enqueue_untied_withdrawal_transaction_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . dequeue_untied_withdrawal_transactions) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions_ctor (add_enqueue_untied_withdrawal_transaction_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , dequeue_untied_withdrawal_transactions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions { add_enqueue_untied_withdrawal_transaction_operations , dequeue_untied_withdrawal_transactions }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions_get_add_enqueue_untied_withdrawal_transaction_operations (obj : * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_enqueue_untied_withdrawal_transaction_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions_get_dequeue_untied_withdrawal_transactions (obj : * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . dequeue_untied_withdrawal_transactions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions_set_add_enqueue_untied_withdrawal_transaction_operations (obj : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_enqueue_untied_withdrawal_transaction_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions_set_dequeue_untied_withdrawal_transactions (obj : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . dequeue_untied_withdrawal_transactions = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveSystemEstimationCostsMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions { pub for_total_system_credits_update : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveSystemEstimationCostsMethodVersions > for platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions) -> platform_version :: version :: drive_versions :: DriveSystemEstimationCostsMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveSystemEstimationCostsMethodVersions { for_total_system_credits_update : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . for_total_system_credits_update) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveSystemEstimationCostsMethodVersions) -> * const platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions { for_total_system_credits_update : ferment_interfaces :: FFIConversion :: ffi_to (obj . for_total_system_credits_update) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . for_total_system_credits_update) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions_ctor (for_total_system_credits_update : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions { for_total_system_credits_update }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions_get_for_total_system_credits_update (obj : * const platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_total_system_credits_update } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions_set_for_total_system_credits_update (obj : * mut platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_total_system_credits_update = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveCreditPoolStorageFeeDistributionPoolMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions { pub get_storage_fees_from_distribution_pool : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveCreditPoolStorageFeeDistributionPoolMethodVersions > for platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions) -> platform_version :: version :: drive_versions :: DriveCreditPoolStorageFeeDistributionPoolMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveCreditPoolStorageFeeDistributionPoolMethodVersions { get_storage_fees_from_distribution_pool : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_storage_fees_from_distribution_pool) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveCreditPoolStorageFeeDistributionPoolMethodVersions) -> * const platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions { get_storage_fees_from_distribution_pool : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_storage_fees_from_distribution_pool) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . get_storage_fees_from_distribution_pool) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions_ctor (get_storage_fees_from_distribution_pool : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions { get_storage_fees_from_distribution_pool }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions_get_get_storage_fees_from_distribution_pool (obj : * const platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_storage_fees_from_distribution_pool } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions_set_get_storage_fees_from_distribution_pool (obj : * mut platform_version_version_drive_versions_DriveCreditPoolStorageFeeDistributionPoolMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_storage_fees_from_distribution_pool = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveDataContractOperationMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveDataContractOperationMethodVersions { pub finalization_tasks : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveDataContractOperationMethodVersions > for platform_version_version_drive_versions_DriveDataContractOperationMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveDataContractOperationMethodVersions) -> platform_version :: version :: drive_versions :: DriveDataContractOperationMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveDataContractOperationMethodVersions { finalization_tasks : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . finalization_tasks) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveDataContractOperationMethodVersions) -> * const platform_version_version_drive_versions_DriveDataContractOperationMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDataContractOperationMethodVersions { finalization_tasks : ferment_interfaces :: FFIConversion :: ffi_to (obj . finalization_tasks) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveDataContractOperationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveDataContractOperationMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . finalization_tasks) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDataContractOperationMethodVersions_ctor (finalization_tasks : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveDataContractOperationMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveDataContractOperationMethodVersions { finalization_tasks }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDataContractOperationMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveDataContractOperationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDataContractOperationMethodVersions_get_finalization_tasks (obj : * const platform_version_version_drive_versions_DriveDataContractOperationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . finalization_tasks } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveDataContractOperationMethodVersions_set_finalization_tasks (obj : * mut platform_version_version_drive_versions_DriveDataContractOperationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . finalization_tasks = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveGroveBasicMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveGroveBasicMethodVersions { pub grove_insert : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_insert_empty_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_insert_empty_sum_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_insert_if_not_exists : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_clear : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_delete : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_raw : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_raw_optional : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_raw_value_u64_from_encoded_var_vec : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_path_query_serialized_results : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_path_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_path_query_with_optional : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_raw_path_query_with_optional : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_raw_path_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_proved_path_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_get_sum_tree_total_value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_has_raw : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveGroveBasicMethodVersions > for platform_version_version_drive_versions_DriveGroveBasicMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> platform_version :: version :: drive_versions :: DriveGroveBasicMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveGroveBasicMethodVersions { grove_insert : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_insert) , grove_insert_empty_tree : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_insert_empty_tree) , grove_insert_empty_sum_tree : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_insert_empty_sum_tree) , grove_insert_if_not_exists : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_insert_if_not_exists) , grove_clear : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_clear) , grove_delete : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_delete) , grove_get_raw : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_get_raw) , grove_get_raw_optional : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_get_raw_optional) , grove_get_raw_value_u64_from_encoded_var_vec : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_get_raw_value_u64_from_encoded_var_vec) , grove_get : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_get) , grove_get_path_query_serialized_results : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_get_path_query_serialized_results) , grove_get_path_query : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_get_path_query) , grove_get_path_query_with_optional : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_get_path_query_with_optional) , grove_get_raw_path_query_with_optional : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_get_raw_path_query_with_optional) , grove_get_raw_path_query : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_get_raw_path_query) , grove_get_proved_path_query : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_get_proved_path_query) , grove_get_sum_tree_total_value : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_get_sum_tree_total_value) , grove_has_raw : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_has_raw) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveGroveBasicMethodVersions) -> * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveGroveBasicMethodVersions { grove_insert : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_insert) , grove_insert_empty_tree : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_insert_empty_tree) , grove_insert_empty_sum_tree : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_insert_empty_sum_tree) , grove_insert_if_not_exists : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_insert_if_not_exists) , grove_clear : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_clear) , grove_delete : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_delete) , grove_get_raw : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_get_raw) , grove_get_raw_optional : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_get_raw_optional) , grove_get_raw_value_u64_from_encoded_var_vec : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_get_raw_value_u64_from_encoded_var_vec) , grove_get : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_get) , grove_get_path_query_serialized_results : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_get_path_query_serialized_results) , grove_get_path_query : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_get_path_query) , grove_get_path_query_with_optional : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_get_path_query_with_optional) , grove_get_raw_path_query_with_optional : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_get_raw_path_query_with_optional) , grove_get_raw_path_query : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_get_raw_path_query) , grove_get_proved_path_query : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_get_proved_path_query) , grove_get_sum_tree_total_value : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_get_sum_tree_total_value) , grove_has_raw : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_has_raw) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveGroveBasicMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . grove_insert) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_insert_empty_tree) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_insert_empty_sum_tree) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_insert_if_not_exists) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_clear) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_delete) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_raw) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_raw_optional) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_raw_value_u64_from_encoded_var_vec) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_path_query_serialized_results) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_path_query) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_path_query_with_optional) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_raw_path_query_with_optional) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_raw_path_query) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_proved_path_query) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_get_sum_tree_total_value) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_has_raw) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_ctor (grove_insert : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_insert_empty_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_insert_empty_sum_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_insert_if_not_exists : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_clear : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_delete : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_raw : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_raw_optional : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_raw_value_u64_from_encoded_var_vec : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_path_query_serialized_results : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_path_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_path_query_with_optional : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_raw_path_query_with_optional : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_raw_path_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_proved_path_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_get_sum_tree_total_value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_has_raw : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveGroveBasicMethodVersions { grove_insert , grove_insert_empty_tree , grove_insert_empty_sum_tree , grove_insert_if_not_exists , grove_clear , grove_delete , grove_get_raw , grove_get_raw_optional , grove_get_raw_value_u64_from_encoded_var_vec , grove_get , grove_get_path_query_serialized_results , grove_get_path_query , grove_get_path_query_with_optional , grove_get_raw_path_query_with_optional , grove_get_raw_path_query , grove_get_proved_path_query , grove_get_sum_tree_total_value , grove_has_raw }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_insert (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_insert } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_insert_empty_tree (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_insert_empty_tree } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_insert_empty_sum_tree (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_insert_empty_sum_tree } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_insert_if_not_exists (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_insert_if_not_exists } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_clear (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_clear } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_delete (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_delete } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_raw (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_raw } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_raw_optional (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_raw_optional } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_raw_value_u64_from_encoded_var_vec (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_raw_value_u64_from_encoded_var_vec } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_path_query_serialized_results (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_path_query_serialized_results } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_path_query (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_path_query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_path_query_with_optional (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_path_query_with_optional } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_raw_path_query_with_optional (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_raw_path_query_with_optional } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_raw_path_query (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_raw_path_query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_proved_path_query (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_proved_path_query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_get_sum_tree_total_value (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_get_sum_tree_total_value } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_get_grove_has_raw (obj : * const platform_version_version_drive_versions_DriveGroveBasicMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_has_raw } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_insert (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_insert = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_insert_empty_tree (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_insert_empty_tree = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_insert_empty_sum_tree (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_insert_empty_sum_tree = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_insert_if_not_exists (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_insert_if_not_exists = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_clear (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_clear = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_delete (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_delete = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_raw (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_raw = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_raw_optional (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_raw_optional = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_raw_value_u64_from_encoded_var_vec (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_raw_value_u64_from_encoded_var_vec = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_path_query_serialized_results (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_path_query_serialized_results = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_path_query (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_path_query = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_path_query_with_optional (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_path_query_with_optional = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_raw_path_query_with_optional (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_raw_path_query_with_optional = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_raw_path_query (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_raw_path_query = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_proved_path_query (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_proved_path_query = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_get_sum_tree_total_value (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_get_sum_tree_total_value = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBasicMethodVersions_set_grove_has_raw (obj : * mut platform_version_version_drive_versions_DriveGroveBasicMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_has_raw = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveVerifyStateTransitionMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions { pub verify_state_transition_was_executed_with_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveVerifyStateTransitionMethodVersions > for platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions) -> platform_version :: version :: drive_versions :: DriveVerifyStateTransitionMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVerifyStateTransitionMethodVersions { verify_state_transition_was_executed_with_proof : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_state_transition_was_executed_with_proof) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVerifyStateTransitionMethodVersions) -> * const platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions { verify_state_transition_was_executed_with_proof : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_state_transition_was_executed_with_proof) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . verify_state_transition_was_executed_with_proof) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions_ctor (verify_state_transition_was_executed_with_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions { verify_state_transition_was_executed_with_proof }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions_get_verify_state_transition_was_executed_with_proof (obj : * const platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_state_transition_was_executed_with_proof } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions_set_verify_state_transition_was_executed_with_proof (obj : * mut platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_state_transition_was_executed_with_proof = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveCreditPoolEpochsMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions { pub get_epochs_infos : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub prove_epochs_infos : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_epoch_fee_multiplier : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_epoch_processing_credits_for_distribution : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_epoch_storage_credits_for_distribution : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_epoch_total_credits_for_distribution : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_storage_credits_for_distribution_for_epochs_in_range : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_epoch_start_time : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_epoch_start_block_core_height : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_epoch_start_block_height : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_first_epoch_start_block_info_between_epochs : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_epoch_proposers : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_epochs_proposer_block_count : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_update_pending_epoch_refunds_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub is_epochs_proposers_tree_empty : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveCreditPoolEpochsMethodVersions > for platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> platform_version :: version :: drive_versions :: DriveCreditPoolEpochsMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveCreditPoolEpochsMethodVersions { get_epochs_infos : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_epochs_infos) , prove_epochs_infos : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . prove_epochs_infos) , get_epoch_fee_multiplier : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_epoch_fee_multiplier) , get_epoch_processing_credits_for_distribution : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_epoch_processing_credits_for_distribution) , get_epoch_storage_credits_for_distribution : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_epoch_storage_credits_for_distribution) , get_epoch_total_credits_for_distribution : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_epoch_total_credits_for_distribution) , get_storage_credits_for_distribution_for_epochs_in_range : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_storage_credits_for_distribution_for_epochs_in_range) , get_epoch_start_time : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_epoch_start_time) , get_epoch_start_block_core_height : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_epoch_start_block_core_height) , get_epoch_start_block_height : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_epoch_start_block_height) , get_first_epoch_start_block_info_between_epochs : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_first_epoch_start_block_info_between_epochs) , get_epoch_proposers : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_epoch_proposers) , get_epochs_proposer_block_count : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_epochs_proposer_block_count) , add_update_pending_epoch_refunds_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_update_pending_epoch_refunds_operations) , is_epochs_proposers_tree_empty : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . is_epochs_proposers_tree_empty) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveCreditPoolEpochsMethodVersions) -> * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions { get_epochs_infos : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_epochs_infos) , prove_epochs_infos : ferment_interfaces :: FFIConversion :: ffi_to (obj . prove_epochs_infos) , get_epoch_fee_multiplier : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_epoch_fee_multiplier) , get_epoch_processing_credits_for_distribution : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_epoch_processing_credits_for_distribution) , get_epoch_storage_credits_for_distribution : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_epoch_storage_credits_for_distribution) , get_epoch_total_credits_for_distribution : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_epoch_total_credits_for_distribution) , get_storage_credits_for_distribution_for_epochs_in_range : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_storage_credits_for_distribution_for_epochs_in_range) , get_epoch_start_time : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_epoch_start_time) , get_epoch_start_block_core_height : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_epoch_start_block_core_height) , get_epoch_start_block_height : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_epoch_start_block_height) , get_first_epoch_start_block_info_between_epochs : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_first_epoch_start_block_info_between_epochs) , get_epoch_proposers : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_epoch_proposers) , get_epochs_proposer_block_count : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_epochs_proposer_block_count) , add_update_pending_epoch_refunds_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_update_pending_epoch_refunds_operations) , is_epochs_proposers_tree_empty : ferment_interfaces :: FFIConversion :: ffi_to (obj . is_epochs_proposers_tree_empty) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . get_epochs_infos) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove_epochs_infos) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_epoch_fee_multiplier) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_epoch_processing_credits_for_distribution) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_epoch_storage_credits_for_distribution) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_epoch_total_credits_for_distribution) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_storage_credits_for_distribution_for_epochs_in_range) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_epoch_start_time) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_epoch_start_block_core_height) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_epoch_start_block_height) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_first_epoch_start_block_info_between_epochs) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_epoch_proposers) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_epochs_proposer_block_count) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_update_pending_epoch_refunds_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . is_epochs_proposers_tree_empty) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_ctor (get_epochs_infos : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , prove_epochs_infos : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_epoch_fee_multiplier : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_epoch_processing_credits_for_distribution : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_epoch_storage_credits_for_distribution : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_epoch_total_credits_for_distribution : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_storage_credits_for_distribution_for_epochs_in_range : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_epoch_start_time : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_epoch_start_block_core_height : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_epoch_start_block_height : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_first_epoch_start_block_info_between_epochs : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_epoch_proposers : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_epochs_proposer_block_count : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_update_pending_epoch_refunds_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , is_epochs_proposers_tree_empty : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions { get_epochs_infos , prove_epochs_infos , get_epoch_fee_multiplier , get_epoch_processing_credits_for_distribution , get_epoch_storage_credits_for_distribution , get_epoch_total_credits_for_distribution , get_storage_credits_for_distribution_for_epochs_in_range , get_epoch_start_time , get_epoch_start_block_core_height , get_epoch_start_block_height , get_first_epoch_start_block_info_between_epochs , get_epoch_proposers , get_epochs_proposer_block_count , add_update_pending_epoch_refunds_operations , is_epochs_proposers_tree_empty }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_epochs_infos (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_epochs_infos } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_prove_epochs_infos (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_epochs_infos } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_epoch_fee_multiplier (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_epoch_fee_multiplier } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_epoch_processing_credits_for_distribution (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_epoch_processing_credits_for_distribution } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_epoch_storage_credits_for_distribution (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_epoch_storage_credits_for_distribution } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_epoch_total_credits_for_distribution (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_epoch_total_credits_for_distribution } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_storage_credits_for_distribution_for_epochs_in_range (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_storage_credits_for_distribution_for_epochs_in_range } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_epoch_start_time (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_epoch_start_time } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_epoch_start_block_core_height (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_epoch_start_block_core_height } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_epoch_start_block_height (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_epoch_start_block_height } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_first_epoch_start_block_info_between_epochs (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_first_epoch_start_block_info_between_epochs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_epoch_proposers (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_epoch_proposers } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_get_epochs_proposer_block_count (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_epochs_proposer_block_count } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_add_update_pending_epoch_refunds_operations (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_update_pending_epoch_refunds_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_get_is_epochs_proposers_tree_empty (obj : * const platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . is_epochs_proposers_tree_empty } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_epochs_infos (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_epochs_infos = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_prove_epochs_infos (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_epochs_infos = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_epoch_fee_multiplier (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_epoch_fee_multiplier = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_epoch_processing_credits_for_distribution (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_epoch_processing_credits_for_distribution = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_epoch_storage_credits_for_distribution (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_epoch_storage_credits_for_distribution = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_epoch_total_credits_for_distribution (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_epoch_total_credits_for_distribution = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_storage_credits_for_distribution_for_epochs_in_range (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_storage_credits_for_distribution_for_epochs_in_range = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_epoch_start_time (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_epoch_start_time = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_epoch_start_block_core_height (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_epoch_start_block_core_height = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_epoch_start_block_height (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_epoch_start_block_height = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_first_epoch_start_block_info_between_epochs (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_first_epoch_start_block_info_between_epochs = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_epoch_proposers (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_epoch_proposers = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_get_epochs_proposer_block_count (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_epochs_proposer_block_count = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_add_update_pending_epoch_refunds_operations (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_update_pending_epoch_refunds_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions_set_is_epochs_proposers_tree_empty (obj : * mut platform_version_version_drive_versions_DriveCreditPoolEpochsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . is_epochs_proposers_tree_empty = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveProtocolUpgradeVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveProtocolUpgradeVersions { pub clear_version_information : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub change_to_new_version_and_clear_version_information : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_versions_with_counter : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_proved_versions_with_counter : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_validator_version_votes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_proved_validator_version_votes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_validators_proposed_app_versions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_validator_proposed_app_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveProtocolUpgradeVersions > for platform_version_version_drive_versions_DriveProtocolUpgradeVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveProtocolUpgradeVersions) -> platform_version :: version :: drive_versions :: DriveProtocolUpgradeVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveProtocolUpgradeVersions { clear_version_information : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . clear_version_information) , change_to_new_version_and_clear_version_information : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . change_to_new_version_and_clear_version_information) , fetch_versions_with_counter : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_versions_with_counter) , fetch_proved_versions_with_counter : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_proved_versions_with_counter) , fetch_validator_version_votes : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_validator_version_votes) , fetch_proved_validator_version_votes : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_proved_validator_version_votes) , remove_validators_proposed_app_versions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . remove_validators_proposed_app_versions) , update_validator_proposed_app_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update_validator_proposed_app_version) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveProtocolUpgradeVersions) -> * const platform_version_version_drive_versions_DriveProtocolUpgradeVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveProtocolUpgradeVersions { clear_version_information : ferment_interfaces :: FFIConversion :: ffi_to (obj . clear_version_information) , change_to_new_version_and_clear_version_information : ferment_interfaces :: FFIConversion :: ffi_to (obj . change_to_new_version_and_clear_version_information) , fetch_versions_with_counter : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_versions_with_counter) , fetch_proved_versions_with_counter : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_proved_versions_with_counter) , fetch_validator_version_votes : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_validator_version_votes) , fetch_proved_validator_version_votes : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_proved_validator_version_votes) , remove_validators_proposed_app_versions : ferment_interfaces :: FFIConversion :: ffi_to (obj . remove_validators_proposed_app_versions) , update_validator_proposed_app_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . update_validator_proposed_app_version) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveProtocolUpgradeVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveProtocolUpgradeVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . clear_version_information) ; ; ferment_interfaces :: unbox_any (ffi_ref . change_to_new_version_and_clear_version_information) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_versions_with_counter) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_proved_versions_with_counter) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_validator_version_votes) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_proved_validator_version_votes) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_validators_proposed_app_versions) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_validator_proposed_app_version) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_ctor (clear_version_information : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , change_to_new_version_and_clear_version_information : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_versions_with_counter : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_proved_versions_with_counter : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_validator_version_votes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_proved_validator_version_votes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_validators_proposed_app_versions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_validator_proposed_app_version : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveProtocolUpgradeVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveProtocolUpgradeVersions { clear_version_information , change_to_new_version_and_clear_version_information , fetch_versions_with_counter , fetch_proved_versions_with_counter , fetch_validator_version_votes , fetch_proved_validator_version_votes , remove_validators_proposed_app_versions , update_validator_proposed_app_version }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveProtocolUpgradeVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_get_clear_version_information (obj : * const platform_version_version_drive_versions_DriveProtocolUpgradeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . clear_version_information } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_get_change_to_new_version_and_clear_version_information (obj : * const platform_version_version_drive_versions_DriveProtocolUpgradeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . change_to_new_version_and_clear_version_information } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_get_fetch_versions_with_counter (obj : * const platform_version_version_drive_versions_DriveProtocolUpgradeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_versions_with_counter } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_get_fetch_proved_versions_with_counter (obj : * const platform_version_version_drive_versions_DriveProtocolUpgradeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_proved_versions_with_counter } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_get_fetch_validator_version_votes (obj : * const platform_version_version_drive_versions_DriveProtocolUpgradeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_validator_version_votes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_get_fetch_proved_validator_version_votes (obj : * const platform_version_version_drive_versions_DriveProtocolUpgradeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_proved_validator_version_votes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_get_remove_validators_proposed_app_versions (obj : * const platform_version_version_drive_versions_DriveProtocolUpgradeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_validators_proposed_app_versions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_get_update_validator_proposed_app_version (obj : * const platform_version_version_drive_versions_DriveProtocolUpgradeVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_validator_proposed_app_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_set_clear_version_information (obj : * mut platform_version_version_drive_versions_DriveProtocolUpgradeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . clear_version_information = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_set_change_to_new_version_and_clear_version_information (obj : * mut platform_version_version_drive_versions_DriveProtocolUpgradeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . change_to_new_version_and_clear_version_information = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_set_fetch_versions_with_counter (obj : * mut platform_version_version_drive_versions_DriveProtocolUpgradeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_versions_with_counter = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_set_fetch_proved_versions_with_counter (obj : * mut platform_version_version_drive_versions_DriveProtocolUpgradeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_proved_versions_with_counter = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_set_fetch_validator_version_votes (obj : * mut platform_version_version_drive_versions_DriveProtocolUpgradeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_validator_version_votes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_set_fetch_proved_validator_version_votes (obj : * mut platform_version_version_drive_versions_DriveProtocolUpgradeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_proved_validator_version_votes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_set_remove_validators_proposed_app_versions (obj : * mut platform_version_version_drive_versions_DriveProtocolUpgradeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_validators_proposed_app_versions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveProtocolUpgradeVersions_set_update_validator_proposed_app_version (obj : * mut platform_version_version_drive_versions_DriveProtocolUpgradeVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_validator_proposed_app_version = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveIdentityMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityMethodVersions { pub fetch : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchMethodVersions , pub prove : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityProveMethodVersions , pub keys : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysMethodVersions , pub update : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , pub insert : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityInsertMethodVersions , pub contract_info : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions , pub cost_estimation : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , pub withdrawals : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveIdentityMethodVersions > for platform_version_version_drive_versions_DriveIdentityMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityMethodVersions { fetch : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch) , prove : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . prove) , keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . keys) , update : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update) , insert : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . insert) , contract_info : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . contract_info) , cost_estimation : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . cost_estimation) , withdrawals : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . withdrawals) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityMethodVersions { fetch : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch) , prove : ferment_interfaces :: FFIConversion :: ffi_to (obj . prove) , keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . keys) , update : ferment_interfaces :: FFIConversion :: ffi_to (obj . update) , insert : ferment_interfaces :: FFIConversion :: ffi_to (obj . insert) , contract_info : ferment_interfaces :: FFIConversion :: ffi_to (obj . contract_info) , cost_estimation : ferment_interfaces :: FFIConversion :: ffi_to (obj . cost_estimation) , withdrawals : ferment_interfaces :: FFIConversion :: ffi_to (obj . withdrawals) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove) ; ; ferment_interfaces :: unbox_any (ffi_ref . keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . update) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert) ; ; ferment_interfaces :: unbox_any (ffi_ref . contract_info) ; ; ferment_interfaces :: unbox_any (ffi_ref . cost_estimation) ; ; ferment_interfaces :: unbox_any (ffi_ref . withdrawals) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_ctor (fetch : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchMethodVersions , prove : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityProveMethodVersions , keys : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysMethodVersions , update : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions , insert : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityInsertMethodVersions , contract_info : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions , cost_estimation : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , withdrawals : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions) -> * mut platform_version_version_drive_versions_DriveIdentityMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityMethodVersions { fetch , prove , keys , update , insert , contract_info , cost_estimation , withdrawals }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_get_fetch (obj : * const platform_version_version_drive_versions_DriveIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchMethodVersions { (* obj) . fetch } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_get_prove (obj : * const platform_version_version_drive_versions_DriveIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityProveMethodVersions { (* obj) . prove } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_get_keys (obj : * const platform_version_version_drive_versions_DriveIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysMethodVersions { (* obj) . keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_get_update (obj : * const platform_version_version_drive_versions_DriveIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions { (* obj) . update } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_get_insert (obj : * const platform_version_version_drive_versions_DriveIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityInsertMethodVersions { (* obj) . insert } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_get_contract_info (obj : * const platform_version_version_drive_versions_DriveIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions { (* obj) . contract_info } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_get_cost_estimation (obj : * const platform_version_version_drive_versions_DriveIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions { (* obj) . cost_estimation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_get_withdrawals (obj : * const platform_version_version_drive_versions_DriveIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions { (* obj) . withdrawals } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_set_fetch (obj : * mut platform_version_version_drive_versions_DriveIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchMethodVersions) { (* obj) . fetch = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_set_prove (obj : * mut platform_version_version_drive_versions_DriveIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityProveMethodVersions) { (* obj) . prove = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_set_keys (obj : * mut platform_version_version_drive_versions_DriveIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityKeysMethodVersions) { (* obj) . keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_set_update (obj : * mut platform_version_version_drive_versions_DriveIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityUpdateMethodVersions) { (* obj) . update = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_set_insert (obj : * mut platform_version_version_drive_versions_DriveIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityInsertMethodVersions) { (* obj) . insert = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_set_contract_info (obj : * mut platform_version_version_drive_versions_DriveIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityContractInfoMethodVersions) { (* obj) . contract_info = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_set_cost_estimation (obj : * mut platform_version_version_drive_versions_DriveIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) { (* obj) . cost_estimation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityMethodVersions_set_withdrawals (obj : * mut platform_version_version_drive_versions_DriveIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalMethodVersions) { (* obj) . withdrawals = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveIdentityKeyHashesToIdentityInsertMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions { pub add_estimation_costs_for_insert_non_unique_public_key_hash_reference : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_estimation_costs_for_insert_unique_public_key_hash_reference : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub insert_non_unique_public_key_hash_reference_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub insert_reference_to_non_unique_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub insert_reference_to_unique_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub insert_unique_public_key_hash_reference_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveIdentityKeyHashesToIdentityInsertMethodVersions > for platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityKeyHashesToIdentityInsertMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityKeyHashesToIdentityInsertMethodVersions { add_estimation_costs_for_insert_non_unique_public_key_hash_reference : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_estimation_costs_for_insert_non_unique_public_key_hash_reference) , add_estimation_costs_for_insert_unique_public_key_hash_reference : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_estimation_costs_for_insert_unique_public_key_hash_reference) , insert_non_unique_public_key_hash_reference_to_identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . insert_non_unique_public_key_hash_reference_to_identity) , insert_reference_to_non_unique_key : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . insert_reference_to_non_unique_key) , insert_reference_to_unique_key : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . insert_reference_to_unique_key) , insert_unique_public_key_hash_reference_to_identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . insert_unique_public_key_hash_reference_to_identity) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityKeyHashesToIdentityInsertMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions { add_estimation_costs_for_insert_non_unique_public_key_hash_reference : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_estimation_costs_for_insert_non_unique_public_key_hash_reference) , add_estimation_costs_for_insert_unique_public_key_hash_reference : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_estimation_costs_for_insert_unique_public_key_hash_reference) , insert_non_unique_public_key_hash_reference_to_identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . insert_non_unique_public_key_hash_reference_to_identity) , insert_reference_to_non_unique_key : ferment_interfaces :: FFIConversion :: ffi_to (obj . insert_reference_to_non_unique_key) , insert_reference_to_unique_key : ferment_interfaces :: FFIConversion :: ffi_to (obj . insert_reference_to_unique_key) , insert_unique_public_key_hash_reference_to_identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . insert_unique_public_key_hash_reference_to_identity) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_estimation_costs_for_insert_non_unique_public_key_hash_reference) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_estimation_costs_for_insert_unique_public_key_hash_reference) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_non_unique_public_key_hash_reference_to_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_reference_to_non_unique_key) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_reference_to_unique_key) ; ; ferment_interfaces :: unbox_any (ffi_ref . insert_unique_public_key_hash_reference_to_identity) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_ctor (add_estimation_costs_for_insert_non_unique_public_key_hash_reference : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_estimation_costs_for_insert_unique_public_key_hash_reference : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , insert_non_unique_public_key_hash_reference_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , insert_reference_to_non_unique_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , insert_reference_to_unique_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , insert_unique_public_key_hash_reference_to_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions { add_estimation_costs_for_insert_non_unique_public_key_hash_reference , add_estimation_costs_for_insert_unique_public_key_hash_reference , insert_non_unique_public_key_hash_reference_to_identity , insert_reference_to_non_unique_key , insert_reference_to_unique_key , insert_unique_public_key_hash_reference_to_identity }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_get_add_estimation_costs_for_insert_non_unique_public_key_hash_reference (obj : * const platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_estimation_costs_for_insert_non_unique_public_key_hash_reference } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_get_add_estimation_costs_for_insert_unique_public_key_hash_reference (obj : * const platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_estimation_costs_for_insert_unique_public_key_hash_reference } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_get_insert_non_unique_public_key_hash_reference_to_identity (obj : * const platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . insert_non_unique_public_key_hash_reference_to_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_get_insert_reference_to_non_unique_key (obj : * const platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . insert_reference_to_non_unique_key } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_get_insert_reference_to_unique_key (obj : * const platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . insert_reference_to_unique_key } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_get_insert_unique_public_key_hash_reference_to_identity (obj : * const platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . insert_unique_public_key_hash_reference_to_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_set_add_estimation_costs_for_insert_non_unique_public_key_hash_reference (obj : * mut platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_estimation_costs_for_insert_non_unique_public_key_hash_reference = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_set_add_estimation_costs_for_insert_unique_public_key_hash_reference (obj : * mut platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_estimation_costs_for_insert_unique_public_key_hash_reference = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_set_insert_non_unique_public_key_hash_reference_to_identity (obj : * mut platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . insert_non_unique_public_key_hash_reference_to_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_set_insert_reference_to_non_unique_key (obj : * mut platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . insert_reference_to_non_unique_key = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_set_insert_reference_to_unique_key (obj : * mut platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . insert_reference_to_unique_key = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions_set_insert_unique_public_key_hash_reference_to_identity (obj : * mut platform_version_version_drive_versions_DriveIdentityKeyHashesToIdentityInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . insert_unique_public_key_hash_reference_to_identity = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveIdentityInsertMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityInsertMethodVersions { pub add_new_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveIdentityInsertMethodVersions > for platform_version_version_drive_versions_DriveIdentityInsertMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityInsertMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityInsertMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityInsertMethodVersions { add_new_identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_new_identity) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityInsertMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityInsertMethodVersions { add_new_identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_new_identity) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityInsertMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_new_identity) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityInsertMethodVersions_ctor (add_new_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityInsertMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityInsertMethodVersions { add_new_identity }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityInsertMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityInsertMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityInsertMethodVersions_get_add_new_identity (obj : * const platform_version_version_drive_versions_DriveIdentityInsertMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_new_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityInsertMethodVersions_set_add_new_identity (obj : * mut platform_version_version_drive_versions_DriveIdentityInsertMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_new_identity = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveVerifyDocumentMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions { pub verify_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_proof_keep_serialized : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_start_at_document_in_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveVerifyDocumentMethodVersions > for platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions) -> platform_version :: version :: drive_versions :: DriveVerifyDocumentMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVerifyDocumentMethodVersions { verify_proof : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_proof) , verify_proof_keep_serialized : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_proof_keep_serialized) , verify_start_at_document_in_proof : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_start_at_document_in_proof) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVerifyDocumentMethodVersions) -> * const platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions { verify_proof : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_proof) , verify_proof_keep_serialized : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_proof_keep_serialized) , verify_start_at_document_in_proof : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_start_at_document_in_proof) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . verify_proof) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_proof_keep_serialized) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_start_at_document_in_proof) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions_ctor (verify_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_proof_keep_serialized : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_start_at_document_in_proof : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions { verify_proof , verify_proof_keep_serialized , verify_start_at_document_in_proof }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions_get_verify_proof (obj : * const platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_proof } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions_get_verify_proof_keep_serialized (obj : * const platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_proof_keep_serialized } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions_get_verify_start_at_document_in_proof (obj : * const platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_start_at_document_in_proof } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions_set_verify_proof (obj : * mut platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_proof = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions_set_verify_proof_keep_serialized (obj : * mut platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_proof_keep_serialized = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions_set_verify_start_at_document_in_proof (obj : * mut platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_start_at_document_in_proof = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveContractCostsMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveContractCostsMethodVersions { pub add_estimation_costs_for_contract_insertion : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveContractCostsMethodVersions > for platform_version_version_drive_versions_DriveContractCostsMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveContractCostsMethodVersions) -> platform_version :: version :: drive_versions :: DriveContractCostsMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveContractCostsMethodVersions { add_estimation_costs_for_contract_insertion : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_estimation_costs_for_contract_insertion) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveContractCostsMethodVersions) -> * const platform_version_version_drive_versions_DriveContractCostsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractCostsMethodVersions { add_estimation_costs_for_contract_insertion : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_estimation_costs_for_contract_insertion) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveContractCostsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveContractCostsMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_estimation_costs_for_contract_insertion) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractCostsMethodVersions_ctor (add_estimation_costs_for_contract_insertion : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveContractCostsMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractCostsMethodVersions { add_estimation_costs_for_contract_insertion }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractCostsMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveContractCostsMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractCostsMethodVersions_get_add_estimation_costs_for_contract_insertion (obj : * const platform_version_version_drive_versions_DriveContractCostsMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_estimation_costs_for_contract_insertion } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractCostsMethodVersions_set_add_estimation_costs_for_contract_insertion (obj : * mut platform_version_version_drive_versions_DriveContractCostsMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_estimation_costs_for_contract_insertion = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVersion { pub structure : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStructureVersion , pub methods : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveMethodVersions , pub grove_methods : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveMethodVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveVersion > for platform_version_version_drive_versions_DriveVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVersion) -> platform_version :: version :: drive_versions :: DriveVersion { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVersion { structure : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . structure) , methods : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . methods) , grove_methods : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_methods) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVersion) -> * const platform_version_version_drive_versions_DriveVersion { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVersion { structure : ferment_interfaces :: FFIConversion :: ffi_to (obj . structure) , methods : ferment_interfaces :: FFIConversion :: ffi_to (obj . methods) , grove_methods : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_methods) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . structure) ; ; ferment_interfaces :: unbox_any (ffi_ref . methods) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_methods) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVersion_ctor (structure : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStructureVersion , methods : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveMethodVersions , grove_methods : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveMethodVersions) -> * mut platform_version_version_drive_versions_DriveVersion { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVersion { structure , methods , grove_methods }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVersion_destroy (ffi : * mut platform_version_version_drive_versions_DriveVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVersion_get_structure (obj : * const platform_version_version_drive_versions_DriveVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStructureVersion { (* obj) . structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVersion_get_methods (obj : * const platform_version_version_drive_versions_DriveVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveMethodVersions { (* obj) . methods } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVersion_get_grove_methods (obj : * const platform_version_version_drive_versions_DriveVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveMethodVersions { (* obj) . grove_methods } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVersion_set_structure (obj : * mut platform_version_version_drive_versions_DriveVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStructureVersion) { (* obj) . structure = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVersion_set_methods (obj : * mut platform_version_version_drive_versions_DriveVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveMethodVersions) { (* obj) . methods = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVersion_set_grove_methods (obj : * mut platform_version_version_drive_versions_DriveVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveGroveMethodVersions) { (* obj) . grove_methods = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveContractApplyMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveContractApplyMethodVersions { pub apply_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub apply_contract_with_serialization : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveContractApplyMethodVersions > for platform_version_version_drive_versions_DriveContractApplyMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveContractApplyMethodVersions) -> platform_version :: version :: drive_versions :: DriveContractApplyMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveContractApplyMethodVersions { apply_contract : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . apply_contract) , apply_contract_with_serialization : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . apply_contract_with_serialization) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveContractApplyMethodVersions) -> * const platform_version_version_drive_versions_DriveContractApplyMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractApplyMethodVersions { apply_contract : ferment_interfaces :: FFIConversion :: ffi_to (obj . apply_contract) , apply_contract_with_serialization : ferment_interfaces :: FFIConversion :: ffi_to (obj . apply_contract_with_serialization) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveContractApplyMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveContractApplyMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . apply_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . apply_contract_with_serialization) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractApplyMethodVersions_ctor (apply_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , apply_contract_with_serialization : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveContractApplyMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractApplyMethodVersions { apply_contract , apply_contract_with_serialization }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractApplyMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveContractApplyMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractApplyMethodVersions_get_apply_contract (obj : * const platform_version_version_drive_versions_DriveContractApplyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . apply_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractApplyMethodVersions_get_apply_contract_with_serialization (obj : * const platform_version_version_drive_versions_DriveContractApplyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . apply_contract_with_serialization } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractApplyMethodVersions_set_apply_contract (obj : * mut platform_version_version_drive_versions_DriveContractApplyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . apply_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractApplyMethodVersions_set_apply_contract_with_serialization (obj : * mut platform_version_version_drive_versions_DriveContractApplyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . apply_contract_with_serialization = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveMethodVersions { pub initialization : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveInitializationMethodVersions , pub credit_pools : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolMethodVersions , pub protocol_upgrade : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveProtocolUpgradeVersions , pub balances : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveBalancesMethodVersions , pub document : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentMethodVersions , pub contract : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractMethodVersions , pub fees : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveFeesMethodVersions , pub estimated_costs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions , pub asset_lock : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveAssetLockMethodVersions , pub verify : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyMethodVersions , pub identity : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityMethodVersions , pub platform_system : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DrivePlatformSystemMethodVersions , pub operations : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveOperationsMethodVersion , pub batch_operations : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveBatchOperationsMethodVersion , pub prove : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveProveMethodVersions , pub state_transitions : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStateTransitionMethodVersions , pub platform_state : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DrivePlatformStateMethodVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveMethodVersions > for platform_version_version_drive_versions_DriveMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveMethodVersions) -> platform_version :: version :: drive_versions :: DriveMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveMethodVersions { initialization : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . initialization) , credit_pools : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . credit_pools) , protocol_upgrade : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . protocol_upgrade) , balances : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . balances) , document : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document) , contract : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . contract) , fees : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fees) , estimated_costs : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . estimated_costs) , asset_lock : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . asset_lock) , verify : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify) , identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity) , platform_system : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . platform_system) , operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . operations) , batch_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . batch_operations) , prove : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . prove) , state_transitions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . state_transitions) , platform_state : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . platform_state) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveMethodVersions) -> * const platform_version_version_drive_versions_DriveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveMethodVersions { initialization : ferment_interfaces :: FFIConversion :: ffi_to (obj . initialization) , credit_pools : ferment_interfaces :: FFIConversion :: ffi_to (obj . credit_pools) , protocol_upgrade : ferment_interfaces :: FFIConversion :: ffi_to (obj . protocol_upgrade) , balances : ferment_interfaces :: FFIConversion :: ffi_to (obj . balances) , document : ferment_interfaces :: FFIConversion :: ffi_to (obj . document) , contract : ferment_interfaces :: FFIConversion :: ffi_to (obj . contract) , fees : ferment_interfaces :: FFIConversion :: ffi_to (obj . fees) , estimated_costs : ferment_interfaces :: FFIConversion :: ffi_to (obj . estimated_costs) , asset_lock : ferment_interfaces :: FFIConversion :: ffi_to (obj . asset_lock) , verify : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify) , identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity) , platform_system : ferment_interfaces :: FFIConversion :: ffi_to (obj . platform_system) , operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . operations) , batch_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . batch_operations) , prove : ferment_interfaces :: FFIConversion :: ffi_to (obj . prove) , state_transitions : ferment_interfaces :: FFIConversion :: ffi_to (obj . state_transitions) , platform_state : ferment_interfaces :: FFIConversion :: ffi_to (obj . platform_state) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . initialization) ; ; ferment_interfaces :: unbox_any (ffi_ref . credit_pools) ; ; ferment_interfaces :: unbox_any (ffi_ref . protocol_upgrade) ; ; ferment_interfaces :: unbox_any (ffi_ref . balances) ; ; ferment_interfaces :: unbox_any (ffi_ref . document) ; ; ferment_interfaces :: unbox_any (ffi_ref . contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . fees) ; ; ferment_interfaces :: unbox_any (ffi_ref . estimated_costs) ; ; ferment_interfaces :: unbox_any (ffi_ref . asset_lock) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . platform_system) ; ; ferment_interfaces :: unbox_any (ffi_ref . operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove) ; ; ferment_interfaces :: unbox_any (ffi_ref . state_transitions) ; ; ferment_interfaces :: unbox_any (ffi_ref . platform_state) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_ctor (initialization : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveInitializationMethodVersions , credit_pools : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolMethodVersions , protocol_upgrade : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveProtocolUpgradeVersions , balances : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveBalancesMethodVersions , document : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentMethodVersions , contract : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractMethodVersions , fees : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveFeesMethodVersions , estimated_costs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions , asset_lock : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveAssetLockMethodVersions , verify : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyMethodVersions , identity : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityMethodVersions , platform_system : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DrivePlatformSystemMethodVersions , operations : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveOperationsMethodVersion , batch_operations : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveBatchOperationsMethodVersion , prove : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveProveMethodVersions , state_transitions : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStateTransitionMethodVersions , platform_state : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DrivePlatformStateMethodVersions) -> * mut platform_version_version_drive_versions_DriveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveMethodVersions { initialization , credit_pools , protocol_upgrade , balances , document , contract , fees , estimated_costs , asset_lock , verify , identity , platform_system , operations , batch_operations , prove , state_transitions , platform_state }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_initialization (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveInitializationMethodVersions { (* obj) . initialization } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_credit_pools (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolMethodVersions { (* obj) . credit_pools } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_protocol_upgrade (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveProtocolUpgradeVersions { (* obj) . protocol_upgrade } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_balances (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveBalancesMethodVersions { (* obj) . balances } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_document (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentMethodVersions { (* obj) . document } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_contract (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractMethodVersions { (* obj) . contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_fees (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveFeesMethodVersions { (* obj) . fees } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_estimated_costs (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions { (* obj) . estimated_costs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_asset_lock (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveAssetLockMethodVersions { (* obj) . asset_lock } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_verify (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyMethodVersions { (* obj) . verify } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_identity (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityMethodVersions { (* obj) . identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_platform_system (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DrivePlatformSystemMethodVersions { (* obj) . platform_system } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_operations (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveOperationsMethodVersion { (* obj) . operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_batch_operations (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveBatchOperationsMethodVersion { (* obj) . batch_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_prove (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveProveMethodVersions { (* obj) . prove } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_state_transitions (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStateTransitionMethodVersions { (* obj) . state_transitions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_get_platform_state (obj : * const platform_version_version_drive_versions_DriveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DrivePlatformStateMethodVersions { (* obj) . platform_state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_initialization (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveInitializationMethodVersions) { (* obj) . initialization = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_credit_pools (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveCreditPoolMethodVersions) { (* obj) . credit_pools = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_protocol_upgrade (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveProtocolUpgradeVersions) { (* obj) . protocol_upgrade = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_balances (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveBalancesMethodVersions) { (* obj) . balances = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_document (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveDocumentMethodVersions) { (* obj) . document = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_contract (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveContractMethodVersions) { (* obj) . contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_fees (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveFeesMethodVersions) { (* obj) . fees = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_estimated_costs (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveEstimatedCostsMethodVersions) { (* obj) . estimated_costs = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_asset_lock (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveAssetLockMethodVersions) { (* obj) . asset_lock = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_verify (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyMethodVersions) { (* obj) . verify = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_identity (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityMethodVersions) { (* obj) . identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_platform_system (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DrivePlatformSystemMethodVersions) { (* obj) . platform_system = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_operations (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveOperationsMethodVersion) { (* obj) . operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_batch_operations (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveBatchOperationsMethodVersion) { (* obj) . batch_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_prove (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveProveMethodVersions) { (* obj) . prove = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_state_transitions (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStateTransitionMethodVersions) { (* obj) . state_transitions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveMethodVersions_set_platform_state (obj : * mut platform_version_version_drive_versions_DriveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DrivePlatformStateMethodVersions) { (* obj) . platform_state = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveIdentityWithdrawalTransactionMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions { pub index : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions , pub queue : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionMethodVersions > for platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionMethodVersions { index : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . index) , queue : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . queue) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityWithdrawalTransactionMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions { index : ferment_interfaces :: FFIConversion :: ffi_to (obj . index) , queue : ferment_interfaces :: FFIConversion :: ffi_to (obj . queue) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . index) ; ; ferment_interfaces :: unbox_any (ffi_ref . queue) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions_ctor (index : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions , queue : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions) -> * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions { index , queue }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions_get_index (obj : * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions { (* obj) . index } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions_get_queue (obj : * const platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions { (* obj) . queue } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions_set_index (obj : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionIndexMethodVersions) { (* obj) . index = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions_set_queue (obj : * mut platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityWithdrawalTransactionQueueMethodVersions) { (* obj) . queue = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveIdentityFetchFullIdentityMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions { pub fetch_full_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion , pub fetch_full_identities : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveIdentityFetchFullIdentityMethodVersions > for platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityFetchFullIdentityMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityFetchFullIdentityMethodVersions { fetch_full_identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_full_identity) , fetch_full_identities : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_full_identities) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityFetchFullIdentityMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions { fetch_full_identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_full_identity) , fetch_full_identities : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_full_identities) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_full_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_full_identities) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions_ctor (fetch_full_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion , fetch_full_identities : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions { fetch_full_identity , fetch_full_identities }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions_get_fetch_full_identity (obj : * const platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion { (* obj) . fetch_full_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions_get_fetch_full_identities (obj : * const platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion { (* obj) . fetch_full_identities } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions_set_fetch_full_identity (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion) { (* obj) . fetch_full_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions_set_fetch_full_identities (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion) { (* obj) . fetch_full_identities = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DrivePlatformStateMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DrivePlatformStateMethodVersions { pub fetch_platform_state_bytes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub store_platform_state_bytes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DrivePlatformStateMethodVersions > for platform_version_version_drive_versions_DrivePlatformStateMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DrivePlatformStateMethodVersions) -> platform_version :: version :: drive_versions :: DrivePlatformStateMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DrivePlatformStateMethodVersions { fetch_platform_state_bytes : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_platform_state_bytes) , store_platform_state_bytes : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . store_platform_state_bytes) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DrivePlatformStateMethodVersions) -> * const platform_version_version_drive_versions_DrivePlatformStateMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DrivePlatformStateMethodVersions { fetch_platform_state_bytes : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_platform_state_bytes) , store_platform_state_bytes : ferment_interfaces :: FFIConversion :: ffi_to (obj . store_platform_state_bytes) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DrivePlatformStateMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DrivePlatformStateMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_platform_state_bytes) ; ; ferment_interfaces :: unbox_any (ffi_ref . store_platform_state_bytes) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformStateMethodVersions_ctor (fetch_platform_state_bytes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , store_platform_state_bytes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DrivePlatformStateMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DrivePlatformStateMethodVersions { fetch_platform_state_bytes , store_platform_state_bytes }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformStateMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DrivePlatformStateMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformStateMethodVersions_get_fetch_platform_state_bytes (obj : * const platform_version_version_drive_versions_DrivePlatformStateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_platform_state_bytes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformStateMethodVersions_get_store_platform_state_bytes (obj : * const platform_version_version_drive_versions_DrivePlatformStateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . store_platform_state_bytes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformStateMethodVersions_set_fetch_platform_state_bytes (obj : * mut platform_version_version_drive_versions_DrivePlatformStateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_platform_state_bytes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformStateMethodVersions_set_store_platform_state_bytes (obj : * mut platform_version_version_drive_versions_DrivePlatformStateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . store_platform_state_bytes = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveIdentityCostEstimationMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions { pub for_authentication_keys_security_level_in_key_reference_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub for_balances : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub for_contract_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub for_contract_info_group : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub for_contract_info_group_key_purpose : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub for_keys_for_identity_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub for_negative_credit : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub for_purpose_in_key_reference_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub for_root_key_reference_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub for_update_revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveIdentityCostEstimationMethodVersions > for platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityCostEstimationMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityCostEstimationMethodVersions { for_authentication_keys_security_level_in_key_reference_tree : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . for_authentication_keys_security_level_in_key_reference_tree) , for_balances : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . for_balances) , for_contract_info : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . for_contract_info) , for_contract_info_group : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . for_contract_info_group) , for_contract_info_group_key_purpose : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . for_contract_info_group_key_purpose) , for_keys_for_identity_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . for_keys_for_identity_id) , for_negative_credit : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . for_negative_credit) , for_purpose_in_key_reference_tree : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . for_purpose_in_key_reference_tree) , for_root_key_reference_tree : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . for_root_key_reference_tree) , for_update_revision : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . for_update_revision) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityCostEstimationMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions { for_authentication_keys_security_level_in_key_reference_tree : ferment_interfaces :: FFIConversion :: ffi_to (obj . for_authentication_keys_security_level_in_key_reference_tree) , for_balances : ferment_interfaces :: FFIConversion :: ffi_to (obj . for_balances) , for_contract_info : ferment_interfaces :: FFIConversion :: ffi_to (obj . for_contract_info) , for_contract_info_group : ferment_interfaces :: FFIConversion :: ffi_to (obj . for_contract_info_group) , for_contract_info_group_key_purpose : ferment_interfaces :: FFIConversion :: ffi_to (obj . for_contract_info_group_key_purpose) , for_keys_for_identity_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . for_keys_for_identity_id) , for_negative_credit : ferment_interfaces :: FFIConversion :: ffi_to (obj . for_negative_credit) , for_purpose_in_key_reference_tree : ferment_interfaces :: FFIConversion :: ffi_to (obj . for_purpose_in_key_reference_tree) , for_root_key_reference_tree : ferment_interfaces :: FFIConversion :: ffi_to (obj . for_root_key_reference_tree) , for_update_revision : ferment_interfaces :: FFIConversion :: ffi_to (obj . for_update_revision) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . for_authentication_keys_security_level_in_key_reference_tree) ; ; ferment_interfaces :: unbox_any (ffi_ref . for_balances) ; ; ferment_interfaces :: unbox_any (ffi_ref . for_contract_info) ; ; ferment_interfaces :: unbox_any (ffi_ref . for_contract_info_group) ; ; ferment_interfaces :: unbox_any (ffi_ref . for_contract_info_group_key_purpose) ; ; ferment_interfaces :: unbox_any (ffi_ref . for_keys_for_identity_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . for_negative_credit) ; ; ferment_interfaces :: unbox_any (ffi_ref . for_purpose_in_key_reference_tree) ; ; ferment_interfaces :: unbox_any (ffi_ref . for_root_key_reference_tree) ; ; ferment_interfaces :: unbox_any (ffi_ref . for_update_revision) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_ctor (for_authentication_keys_security_level_in_key_reference_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , for_balances : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , for_contract_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , for_contract_info_group : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , for_contract_info_group_key_purpose : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , for_keys_for_identity_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , for_negative_credit : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , for_purpose_in_key_reference_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , for_root_key_reference_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , for_update_revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions { for_authentication_keys_security_level_in_key_reference_tree , for_balances , for_contract_info , for_contract_info_group , for_contract_info_group_key_purpose , for_keys_for_identity_id , for_negative_credit , for_purpose_in_key_reference_tree , for_root_key_reference_tree , for_update_revision }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_get_for_authentication_keys_security_level_in_key_reference_tree (obj : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_authentication_keys_security_level_in_key_reference_tree } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_get_for_balances (obj : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_balances } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_get_for_contract_info (obj : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_contract_info } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_get_for_contract_info_group (obj : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_contract_info_group } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_get_for_contract_info_group_key_purpose (obj : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_contract_info_group_key_purpose } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_get_for_keys_for_identity_id (obj : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_keys_for_identity_id } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_get_for_negative_credit (obj : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_negative_credit } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_get_for_purpose_in_key_reference_tree (obj : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_purpose_in_key_reference_tree } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_get_for_root_key_reference_tree (obj : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_root_key_reference_tree } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_get_for_update_revision (obj : * const platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . for_update_revision } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_set_for_authentication_keys_security_level_in_key_reference_tree (obj : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_authentication_keys_security_level_in_key_reference_tree = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_set_for_balances (obj : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_balances = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_set_for_contract_info (obj : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_contract_info = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_set_for_contract_info_group (obj : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_contract_info_group = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_set_for_contract_info_group_key_purpose (obj : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_contract_info_group_key_purpose = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_set_for_keys_for_identity_id (obj : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_keys_for_identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_set_for_negative_credit (obj : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_negative_credit = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_set_for_purpose_in_key_reference_tree (obj : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_purpose_in_key_reference_tree = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_set_for_root_key_reference_tree (obj : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_root_key_reference_tree = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions_set_for_update_revision (obj : * mut platform_version_version_drive_versions_DriveIdentityCostEstimationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . for_update_revision = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveVerifySystemMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVerifySystemMethodVersions { pub verify_epoch_infos : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_upgrade_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_upgrade_vote_status : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveVerifySystemMethodVersions > for platform_version_version_drive_versions_DriveVerifySystemMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVerifySystemMethodVersions) -> platform_version :: version :: drive_versions :: DriveVerifySystemMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVerifySystemMethodVersions { verify_epoch_infos : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_epoch_infos) , verify_upgrade_state : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_upgrade_state) , verify_upgrade_vote_status : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_upgrade_vote_status) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVerifySystemMethodVersions) -> * const platform_version_version_drive_versions_DriveVerifySystemMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifySystemMethodVersions { verify_epoch_infos : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_epoch_infos) , verify_upgrade_state : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_upgrade_state) , verify_upgrade_vote_status : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_upgrade_vote_status) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifySystemMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVerifySystemMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . verify_epoch_infos) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_upgrade_state) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_upgrade_vote_status) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySystemMethodVersions_ctor (verify_epoch_infos : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_upgrade_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_upgrade_vote_status : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveVerifySystemMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifySystemMethodVersions { verify_epoch_infos , verify_upgrade_state , verify_upgrade_vote_status }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySystemMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifySystemMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySystemMethodVersions_get_verify_epoch_infos (obj : * const platform_version_version_drive_versions_DriveVerifySystemMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_epoch_infos } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySystemMethodVersions_get_verify_upgrade_state (obj : * const platform_version_version_drive_versions_DriveVerifySystemMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_upgrade_state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySystemMethodVersions_get_verify_upgrade_vote_status (obj : * const platform_version_version_drive_versions_DriveVerifySystemMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_upgrade_vote_status } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySystemMethodVersions_set_verify_epoch_infos (obj : * mut platform_version_version_drive_versions_DriveVerifySystemMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_epoch_infos = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySystemMethodVersions_set_verify_upgrade_state (obj : * mut platform_version_version_drive_versions_DriveVerifySystemMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_upgrade_state = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifySystemMethodVersions_set_verify_upgrade_vote_status (obj : * mut platform_version_version_drive_versions_DriveVerifySystemMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_upgrade_vote_status = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveGroveCostMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveGroveCostMethodVersions { pub grove_batch_operations_costs : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveGroveCostMethodVersions > for platform_version_version_drive_versions_DriveGroveCostMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveGroveCostMethodVersions) -> platform_version :: version :: drive_versions :: DriveGroveCostMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveGroveCostMethodVersions { grove_batch_operations_costs : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_batch_operations_costs) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveGroveCostMethodVersions) -> * const platform_version_version_drive_versions_DriveGroveCostMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveGroveCostMethodVersions { grove_batch_operations_costs : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_batch_operations_costs) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveGroveCostMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveGroveCostMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . grove_batch_operations_costs) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveCostMethodVersions_ctor (grove_batch_operations_costs : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveGroveCostMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveGroveCostMethodVersions { grove_batch_operations_costs }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveCostMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveGroveCostMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveCostMethodVersions_get_grove_batch_operations_costs (obj : * const platform_version_version_drive_versions_DriveGroveCostMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_batch_operations_costs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveCostMethodVersions_set_grove_batch_operations_costs (obj : * mut platform_version_version_drive_versions_DriveGroveCostMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_batch_operations_costs = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveIdentityFetchAttributesMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions { pub revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub balance_include_debt : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub negative_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveIdentityFetchAttributesMethodVersions > for platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityFetchAttributesMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityFetchAttributesMethodVersions { revision : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . revision) , balance : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . balance) , balance_include_debt : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . balance_include_debt) , negative_balance : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . negative_balance) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityFetchAttributesMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions { revision : ferment_interfaces :: FFIConversion :: ffi_to (obj . revision) , balance : ferment_interfaces :: FFIConversion :: ffi_to (obj . balance) , balance_include_debt : ferment_interfaces :: FFIConversion :: ffi_to (obj . balance_include_debt) , negative_balance : ferment_interfaces :: FFIConversion :: ffi_to (obj . negative_balance) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . revision) ; ; ferment_interfaces :: unbox_any (ffi_ref . balance) ; ; ferment_interfaces :: unbox_any (ffi_ref . balance_include_debt) ; ; ferment_interfaces :: unbox_any (ffi_ref . negative_balance) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_ctor (revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , balance_include_debt : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , negative_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions { revision , balance , balance_include_debt , negative_balance }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_get_revision (obj : * const platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_get_balance (obj : * const platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_get_balance_include_debt (obj : * const platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . balance_include_debt } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_get_negative_balance (obj : * const platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . negative_balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_set_revision (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . revision = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_set_balance (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . balance = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_set_balance_include_debt (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . balance_include_debt = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions_set_negative_balance (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . negative_balance = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveIdentityKeysFetchMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions { pub fetch_all_current_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_all_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_identities_all_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveIdentityKeysFetchMethodVersions > for platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityKeysFetchMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityKeysFetchMethodVersions { fetch_all_current_identity_keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_all_current_identity_keys) , fetch_all_identity_keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_all_identity_keys) , fetch_identities_all_keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_identities_all_keys) , fetch_identity_keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_identity_keys) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityKeysFetchMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions { fetch_all_current_identity_keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_all_current_identity_keys) , fetch_all_identity_keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_all_identity_keys) , fetch_identities_all_keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_identities_all_keys) , fetch_identity_keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_identity_keys) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_all_current_identity_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_all_identity_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_identities_all_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_identity_keys) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_ctor (fetch_all_current_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_all_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_identities_all_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions { fetch_all_current_identity_keys , fetch_all_identity_keys , fetch_identities_all_keys , fetch_identity_keys }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_get_fetch_all_current_identity_keys (obj : * const platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_all_current_identity_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_get_fetch_all_identity_keys (obj : * const platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_all_identity_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_get_fetch_identities_all_keys (obj : * const platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_identities_all_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_get_fetch_identity_keys (obj : * const platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_identity_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_set_fetch_all_current_identity_keys (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_all_current_identity_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_set_fetch_all_identity_keys (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_all_identity_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_set_fetch_identities_all_keys (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_identities_all_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions_set_fetch_identity_keys (obj : * mut platform_version_version_drive_versions_DriveIdentityKeysFetchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_identity_keys = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveIdentityProveMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityProveMethodVersions { pub full_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub full_identities : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub prove_full_identities_by_unique_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub prove_full_identity_by_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub prove_identity_id_by_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub prove_identity_ids_by_unique_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveIdentityProveMethodVersions > for platform_version_version_drive_versions_DriveIdentityProveMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityProveMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityProveMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityProveMethodVersions { full_identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . full_identity) , full_identities : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . full_identities) , prove_full_identities_by_unique_public_key_hashes : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . prove_full_identities_by_unique_public_key_hashes) , prove_full_identity_by_unique_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . prove_full_identity_by_unique_public_key_hash) , prove_identity_id_by_unique_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . prove_identity_id_by_unique_public_key_hash) , prove_identity_ids_by_unique_public_key_hashes : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . prove_identity_ids_by_unique_public_key_hashes) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityProveMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityProveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityProveMethodVersions { full_identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . full_identity) , full_identities : ferment_interfaces :: FFIConversion :: ffi_to (obj . full_identities) , prove_full_identities_by_unique_public_key_hashes : ferment_interfaces :: FFIConversion :: ffi_to (obj . prove_full_identities_by_unique_public_key_hashes) , prove_full_identity_by_unique_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . prove_full_identity_by_unique_public_key_hash) , prove_identity_id_by_unique_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . prove_identity_id_by_unique_public_key_hash) , prove_identity_ids_by_unique_public_key_hashes : ferment_interfaces :: FFIConversion :: ffi_to (obj . prove_identity_ids_by_unique_public_key_hashes) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityProveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityProveMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . full_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . full_identities) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove_full_identities_by_unique_public_key_hashes) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove_full_identity_by_unique_public_key_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove_identity_id_by_unique_public_key_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove_identity_ids_by_unique_public_key_hashes) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_ctor (full_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , full_identities : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , prove_full_identities_by_unique_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , prove_full_identity_by_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , prove_identity_id_by_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , prove_identity_ids_by_unique_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityProveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityProveMethodVersions { full_identity , full_identities , prove_full_identities_by_unique_public_key_hashes , prove_full_identity_by_unique_public_key_hash , prove_identity_id_by_unique_public_key_hash , prove_identity_ids_by_unique_public_key_hashes }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityProveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_get_full_identity (obj : * const platform_version_version_drive_versions_DriveIdentityProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . full_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_get_full_identities (obj : * const platform_version_version_drive_versions_DriveIdentityProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . full_identities } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_get_prove_full_identities_by_unique_public_key_hashes (obj : * const platform_version_version_drive_versions_DriveIdentityProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_full_identities_by_unique_public_key_hashes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_get_prove_full_identity_by_unique_public_key_hash (obj : * const platform_version_version_drive_versions_DriveIdentityProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_full_identity_by_unique_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_get_prove_identity_id_by_unique_public_key_hash (obj : * const platform_version_version_drive_versions_DriveIdentityProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_identity_id_by_unique_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_get_prove_identity_ids_by_unique_public_key_hashes (obj : * const platform_version_version_drive_versions_DriveIdentityProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_identity_ids_by_unique_public_key_hashes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_set_full_identity (obj : * mut platform_version_version_drive_versions_DriveIdentityProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . full_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_set_full_identities (obj : * mut platform_version_version_drive_versions_DriveIdentityProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . full_identities = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_set_prove_full_identities_by_unique_public_key_hashes (obj : * mut platform_version_version_drive_versions_DriveIdentityProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_full_identities_by_unique_public_key_hashes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_set_prove_full_identity_by_unique_public_key_hash (obj : * mut platform_version_version_drive_versions_DriveIdentityProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_full_identity_by_unique_public_key_hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_set_prove_identity_id_by_unique_public_key_hash (obj : * mut platform_version_version_drive_versions_DriveIdentityProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_identity_id_by_unique_public_key_hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityProveMethodVersions_set_prove_identity_ids_by_unique_public_key_hashes (obj : * mut platform_version_version_drive_versions_DriveIdentityProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_identity_ids_by_unique_public_key_hashes = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DrivePlatformSystemMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DrivePlatformSystemMethodVersions { pub protocol_version : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions , pub estimation_costs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DrivePlatformSystemMethodVersions > for platform_version_version_drive_versions_DrivePlatformSystemMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DrivePlatformSystemMethodVersions) -> platform_version :: version :: drive_versions :: DrivePlatformSystemMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DrivePlatformSystemMethodVersions { protocol_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . protocol_version) , estimation_costs : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . estimation_costs) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DrivePlatformSystemMethodVersions) -> * const platform_version_version_drive_versions_DrivePlatformSystemMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DrivePlatformSystemMethodVersions { protocol_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . protocol_version) , estimation_costs : ferment_interfaces :: FFIConversion :: ffi_to (obj . estimation_costs) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DrivePlatformSystemMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DrivePlatformSystemMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . protocol_version) ; ; ferment_interfaces :: unbox_any (ffi_ref . estimation_costs) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformSystemMethodVersions_ctor (protocol_version : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions , estimation_costs : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions) -> * mut platform_version_version_drive_versions_DrivePlatformSystemMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DrivePlatformSystemMethodVersions { protocol_version , estimation_costs }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformSystemMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DrivePlatformSystemMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformSystemMethodVersions_get_protocol_version (obj : * const platform_version_version_drive_versions_DrivePlatformSystemMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions { (* obj) . protocol_version } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformSystemMethodVersions_get_estimation_costs (obj : * const platform_version_version_drive_versions_DrivePlatformSystemMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions { (* obj) . estimation_costs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformSystemMethodVersions_set_protocol_version (obj : * mut platform_version_version_drive_versions_DrivePlatformSystemMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveSystemProtocolVersionMethodVersions) { (* obj) . protocol_version = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DrivePlatformSystemMethodVersions_set_estimation_costs (obj : * mut platform_version_version_drive_versions_DrivePlatformSystemMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveSystemEstimationCostsMethodVersions) { (* obj) . estimation_costs = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveGroveApplyMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveGroveApplyMethodVersions { pub grove_apply_operation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_apply_batch : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_apply_batch_with_add_costs : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_apply_partial_batch : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub grove_apply_partial_batch_with_add_costs : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveGroveApplyMethodVersions > for platform_version_version_drive_versions_DriveGroveApplyMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveGroveApplyMethodVersions) -> platform_version :: version :: drive_versions :: DriveGroveApplyMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveGroveApplyMethodVersions { grove_apply_operation : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_apply_operation) , grove_apply_batch : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_apply_batch) , grove_apply_batch_with_add_costs : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_apply_batch_with_add_costs) , grove_apply_partial_batch : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_apply_partial_batch) , grove_apply_partial_batch_with_add_costs : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . grove_apply_partial_batch_with_add_costs) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveGroveApplyMethodVersions) -> * const platform_version_version_drive_versions_DriveGroveApplyMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveGroveApplyMethodVersions { grove_apply_operation : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_apply_operation) , grove_apply_batch : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_apply_batch) , grove_apply_batch_with_add_costs : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_apply_batch_with_add_costs) , grove_apply_partial_batch : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_apply_partial_batch) , grove_apply_partial_batch_with_add_costs : ferment_interfaces :: FFIConversion :: ffi_to (obj . grove_apply_partial_batch_with_add_costs) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveGroveApplyMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveGroveApplyMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . grove_apply_operation) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_apply_batch) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_apply_batch_with_add_costs) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_apply_partial_batch) ; ; ferment_interfaces :: unbox_any (ffi_ref . grove_apply_partial_batch_with_add_costs) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveApplyMethodVersions_ctor (grove_apply_operation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_apply_batch : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_apply_batch_with_add_costs : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_apply_partial_batch : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , grove_apply_partial_batch_with_add_costs : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveGroveApplyMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveGroveApplyMethodVersions { grove_apply_operation , grove_apply_batch , grove_apply_batch_with_add_costs , grove_apply_partial_batch , grove_apply_partial_batch_with_add_costs }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveApplyMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveGroveApplyMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveApplyMethodVersions_get_grove_apply_operation (obj : * const platform_version_version_drive_versions_DriveGroveApplyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_apply_operation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveApplyMethodVersions_get_grove_apply_batch (obj : * const platform_version_version_drive_versions_DriveGroveApplyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_apply_batch } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveApplyMethodVersions_get_grove_apply_batch_with_add_costs (obj : * const platform_version_version_drive_versions_DriveGroveApplyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_apply_batch_with_add_costs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveApplyMethodVersions_get_grove_apply_partial_batch (obj : * const platform_version_version_drive_versions_DriveGroveApplyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_apply_partial_batch } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveApplyMethodVersions_get_grove_apply_partial_batch_with_add_costs (obj : * const platform_version_version_drive_versions_DriveGroveApplyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . grove_apply_partial_batch_with_add_costs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveApplyMethodVersions_set_grove_apply_operation (obj : * mut platform_version_version_drive_versions_DriveGroveApplyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_apply_operation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveApplyMethodVersions_set_grove_apply_batch (obj : * mut platform_version_version_drive_versions_DriveGroveApplyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_apply_batch = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveApplyMethodVersions_set_grove_apply_batch_with_add_costs (obj : * mut platform_version_version_drive_versions_DriveGroveApplyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_apply_batch_with_add_costs = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveApplyMethodVersions_set_grove_apply_partial_batch (obj : * mut platform_version_version_drive_versions_DriveGroveApplyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_apply_partial_batch = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveApplyMethodVersions_set_grove_apply_partial_batch_with_add_costs (obj : * mut platform_version_version_drive_versions_DriveGroveApplyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . grove_apply_partial_batch_with_add_costs = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveFeesMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveFeesMethodVersions { pub calculate_fee : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveFeesMethodVersions > for platform_version_version_drive_versions_DriveFeesMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveFeesMethodVersions) -> platform_version :: version :: drive_versions :: DriveFeesMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveFeesMethodVersions { calculate_fee : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . calculate_fee) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveFeesMethodVersions) -> * const platform_version_version_drive_versions_DriveFeesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveFeesMethodVersions { calculate_fee : ferment_interfaces :: FFIConversion :: ffi_to (obj . calculate_fee) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveFeesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveFeesMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . calculate_fee) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveFeesMethodVersions_ctor (calculate_fee : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveFeesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveFeesMethodVersions { calculate_fee }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveFeesMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveFeesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveFeesMethodVersions_get_calculate_fee (obj : * const platform_version_version_drive_versions_DriveFeesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . calculate_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveFeesMethodVersions_set_calculate_fee (obj : * mut platform_version_version_drive_versions_DriveFeesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . calculate_fee = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveContractUpdateMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveContractUpdateMethodVersions { pub update_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveContractUpdateMethodVersions > for platform_version_version_drive_versions_DriveContractUpdateMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveContractUpdateMethodVersions) -> platform_version :: version :: drive_versions :: DriveContractUpdateMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveContractUpdateMethodVersions { update_contract : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update_contract) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveContractUpdateMethodVersions) -> * const platform_version_version_drive_versions_DriveContractUpdateMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractUpdateMethodVersions { update_contract : ferment_interfaces :: FFIConversion :: ffi_to (obj . update_contract) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveContractUpdateMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveContractUpdateMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . update_contract) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractUpdateMethodVersions_ctor (update_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveContractUpdateMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractUpdateMethodVersions { update_contract }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractUpdateMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveContractUpdateMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractUpdateMethodVersions_get_update_contract (obj : * const platform_version_version_drive_versions_DriveContractUpdateMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractUpdateMethodVersions_set_update_contract (obj : * mut platform_version_version_drive_versions_DriveContractUpdateMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_contract = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveIdentityFetchPublicKeyHashesMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions { pub fetch_full_identities_by_unique_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_full_identity_by_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_identity_id_by_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_identity_ids_by_non_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_identity_ids_by_unique_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_serialized_full_identity_by_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub has_any_of_unique_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub has_non_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub has_non_unique_public_key_hash_already_for_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub has_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveIdentityFetchPublicKeyHashesMethodVersions > for platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityFetchPublicKeyHashesMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityFetchPublicKeyHashesMethodVersions { fetch_full_identities_by_unique_public_key_hashes : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_full_identities_by_unique_public_key_hashes) , fetch_full_identity_by_unique_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_full_identity_by_unique_public_key_hash) , fetch_identity_id_by_unique_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_identity_id_by_unique_public_key_hash) , fetch_identity_ids_by_non_unique_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_identity_ids_by_non_unique_public_key_hash) , fetch_identity_ids_by_unique_public_key_hashes : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_identity_ids_by_unique_public_key_hashes) , fetch_serialized_full_identity_by_unique_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_serialized_full_identity_by_unique_public_key_hash) , has_any_of_unique_public_key_hashes : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . has_any_of_unique_public_key_hashes) , has_non_unique_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . has_non_unique_public_key_hash) , has_non_unique_public_key_hash_already_for_identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . has_non_unique_public_key_hash_already_for_identity) , has_unique_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . has_unique_public_key_hash) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityFetchPublicKeyHashesMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions { fetch_full_identities_by_unique_public_key_hashes : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_full_identities_by_unique_public_key_hashes) , fetch_full_identity_by_unique_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_full_identity_by_unique_public_key_hash) , fetch_identity_id_by_unique_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_identity_id_by_unique_public_key_hash) , fetch_identity_ids_by_non_unique_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_identity_ids_by_non_unique_public_key_hash) , fetch_identity_ids_by_unique_public_key_hashes : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_identity_ids_by_unique_public_key_hashes) , fetch_serialized_full_identity_by_unique_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_serialized_full_identity_by_unique_public_key_hash) , has_any_of_unique_public_key_hashes : ferment_interfaces :: FFIConversion :: ffi_to (obj . has_any_of_unique_public_key_hashes) , has_non_unique_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . has_non_unique_public_key_hash) , has_non_unique_public_key_hash_already_for_identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . has_non_unique_public_key_hash_already_for_identity) , has_unique_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . has_unique_public_key_hash) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_full_identities_by_unique_public_key_hashes) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_full_identity_by_unique_public_key_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_identity_id_by_unique_public_key_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_identity_ids_by_non_unique_public_key_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_identity_ids_by_unique_public_key_hashes) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_serialized_full_identity_by_unique_public_key_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . has_any_of_unique_public_key_hashes) ; ; ferment_interfaces :: unbox_any (ffi_ref . has_non_unique_public_key_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . has_non_unique_public_key_hash_already_for_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . has_unique_public_key_hash) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_ctor (fetch_full_identities_by_unique_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_full_identity_by_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_identity_id_by_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_identity_ids_by_non_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_identity_ids_by_unique_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_serialized_full_identity_by_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , has_any_of_unique_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , has_non_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , has_non_unique_public_key_hash_already_for_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , has_unique_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions { fetch_full_identities_by_unique_public_key_hashes , fetch_full_identity_by_unique_public_key_hash , fetch_identity_id_by_unique_public_key_hash , fetch_identity_ids_by_non_unique_public_key_hash , fetch_identity_ids_by_unique_public_key_hashes , fetch_serialized_full_identity_by_unique_public_key_hash , has_any_of_unique_public_key_hashes , has_non_unique_public_key_hash , has_non_unique_public_key_hash_already_for_identity , has_unique_public_key_hash }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_get_fetch_full_identities_by_unique_public_key_hashes (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_full_identities_by_unique_public_key_hashes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_get_fetch_full_identity_by_unique_public_key_hash (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_full_identity_by_unique_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_get_fetch_identity_id_by_unique_public_key_hash (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_identity_id_by_unique_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_get_fetch_identity_ids_by_non_unique_public_key_hash (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_identity_ids_by_non_unique_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_get_fetch_identity_ids_by_unique_public_key_hashes (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_identity_ids_by_unique_public_key_hashes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_get_fetch_serialized_full_identity_by_unique_public_key_hash (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_serialized_full_identity_by_unique_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_get_has_any_of_unique_public_key_hashes (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . has_any_of_unique_public_key_hashes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_get_has_non_unique_public_key_hash (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . has_non_unique_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_get_has_non_unique_public_key_hash_already_for_identity (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . has_non_unique_public_key_hash_already_for_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_get_has_unique_public_key_hash (obj : * const platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . has_unique_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_set_fetch_full_identities_by_unique_public_key_hashes (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_full_identities_by_unique_public_key_hashes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_set_fetch_full_identity_by_unique_public_key_hash (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_full_identity_by_unique_public_key_hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_set_fetch_identity_id_by_unique_public_key_hash (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_identity_id_by_unique_public_key_hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_set_fetch_identity_ids_by_non_unique_public_key_hash (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_identity_ids_by_non_unique_public_key_hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_set_fetch_identity_ids_by_unique_public_key_hashes (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_identity_ids_by_unique_public_key_hashes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_set_fetch_serialized_full_identity_by_unique_public_key_hash (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_serialized_full_identity_by_unique_public_key_hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_set_has_any_of_unique_public_key_hashes (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . has_any_of_unique_public_key_hashes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_set_has_non_unique_public_key_hash (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . has_non_unique_public_key_hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_set_has_non_unique_public_key_hash_already_for_identity (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . has_non_unique_public_key_hash_already_for_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions_set_has_unique_public_key_hash (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . has_unique_public_key_hash = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveContractGetMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveContractGetMethodVersions { pub fetch_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_contract_with_history : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_cached_contract_with_fetch_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_contract_with_fetch_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_contracts_with_fetch_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveContractGetMethodVersions > for platform_version_version_drive_versions_DriveContractGetMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveContractGetMethodVersions) -> platform_version :: version :: drive_versions :: DriveContractGetMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveContractGetMethodVersions { fetch_contract : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_contract) , fetch_contract_with_history : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_contract_with_history) , get_cached_contract_with_fetch_info : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_cached_contract_with_fetch_info) , get_contract_with_fetch_info : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_contract_with_fetch_info) , get_contracts_with_fetch_info : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_contracts_with_fetch_info) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveContractGetMethodVersions) -> * const platform_version_version_drive_versions_DriveContractGetMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractGetMethodVersions { fetch_contract : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_contract) , fetch_contract_with_history : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_contract_with_history) , get_cached_contract_with_fetch_info : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_cached_contract_with_fetch_info) , get_contract_with_fetch_info : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_contract_with_fetch_info) , get_contracts_with_fetch_info : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_contracts_with_fetch_info) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveContractGetMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveContractGetMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_contract_with_history) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_cached_contract_with_fetch_info) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_contract_with_fetch_info) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_contracts_with_fetch_info) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_ctor (fetch_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_contract_with_history : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_cached_contract_with_fetch_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_contract_with_fetch_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_contracts_with_fetch_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveContractGetMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractGetMethodVersions { fetch_contract , fetch_contract_with_history , get_cached_contract_with_fetch_info , get_contract_with_fetch_info , get_contracts_with_fetch_info }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveContractGetMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_get_fetch_contract (obj : * const platform_version_version_drive_versions_DriveContractGetMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_get_fetch_contract_with_history (obj : * const platform_version_version_drive_versions_DriveContractGetMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_contract_with_history } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_get_get_cached_contract_with_fetch_info (obj : * const platform_version_version_drive_versions_DriveContractGetMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_cached_contract_with_fetch_info } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_get_get_contract_with_fetch_info (obj : * const platform_version_version_drive_versions_DriveContractGetMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_contract_with_fetch_info } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_get_get_contracts_with_fetch_info (obj : * const platform_version_version_drive_versions_DriveContractGetMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_contracts_with_fetch_info } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_set_fetch_contract (obj : * mut platform_version_version_drive_versions_DriveContractGetMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_set_fetch_contract_with_history (obj : * mut platform_version_version_drive_versions_DriveContractGetMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_contract_with_history = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_set_get_cached_contract_with_fetch_info (obj : * mut platform_version_version_drive_versions_DriveContractGetMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_cached_contract_with_fetch_info = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_set_get_contract_with_fetch_info (obj : * mut platform_version_version_drive_versions_DriveContractGetMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_contract_with_fetch_info = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractGetMethodVersions_set_get_contracts_with_fetch_info (obj : * mut platform_version_version_drive_versions_DriveContractGetMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_contracts_with_fetch_info = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveGroveBatchMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveGroveBatchMethodVersions { pub batch_insert_empty_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub batch_insert_empty_tree_if_not_exists : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub batch_insert_empty_tree_if_not_exists_check_existing_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub batch_insert : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub batch_insert_if_not_exists : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub batch_insert_if_changed_value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub batch_delete : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub batch_remove_raw : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub batch_delete_up_tree_while_empty : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub batch_refresh_reference : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveGroveBatchMethodVersions > for platform_version_version_drive_versions_DriveGroveBatchMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> platform_version :: version :: drive_versions :: DriveGroveBatchMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveGroveBatchMethodVersions { batch_insert_empty_tree : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . batch_insert_empty_tree) , batch_insert_empty_tree_if_not_exists : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . batch_insert_empty_tree_if_not_exists) , batch_insert_empty_tree_if_not_exists_check_existing_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . batch_insert_empty_tree_if_not_exists_check_existing_operations) , batch_insert : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . batch_insert) , batch_insert_if_not_exists : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . batch_insert_if_not_exists) , batch_insert_if_changed_value : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . batch_insert_if_changed_value) , batch_delete : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . batch_delete) , batch_remove_raw : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . batch_remove_raw) , batch_delete_up_tree_while_empty : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . batch_delete_up_tree_while_empty) , batch_refresh_reference : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . batch_refresh_reference) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveGroveBatchMethodVersions) -> * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveGroveBatchMethodVersions { batch_insert_empty_tree : ferment_interfaces :: FFIConversion :: ffi_to (obj . batch_insert_empty_tree) , batch_insert_empty_tree_if_not_exists : ferment_interfaces :: FFIConversion :: ffi_to (obj . batch_insert_empty_tree_if_not_exists) , batch_insert_empty_tree_if_not_exists_check_existing_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . batch_insert_empty_tree_if_not_exists_check_existing_operations) , batch_insert : ferment_interfaces :: FFIConversion :: ffi_to (obj . batch_insert) , batch_insert_if_not_exists : ferment_interfaces :: FFIConversion :: ffi_to (obj . batch_insert_if_not_exists) , batch_insert_if_changed_value : ferment_interfaces :: FFIConversion :: ffi_to (obj . batch_insert_if_changed_value) , batch_delete : ferment_interfaces :: FFIConversion :: ffi_to (obj . batch_delete) , batch_remove_raw : ferment_interfaces :: FFIConversion :: ffi_to (obj . batch_remove_raw) , batch_delete_up_tree_while_empty : ferment_interfaces :: FFIConversion :: ffi_to (obj . batch_delete_up_tree_while_empty) , batch_refresh_reference : ferment_interfaces :: FFIConversion :: ffi_to (obj . batch_refresh_reference) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveGroveBatchMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . batch_insert_empty_tree) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch_insert_empty_tree_if_not_exists) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch_insert_empty_tree_if_not_exists_check_existing_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch_insert) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch_insert_if_not_exists) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch_insert_if_changed_value) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch_delete) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch_remove_raw) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch_delete_up_tree_while_empty) ; ; ferment_interfaces :: unbox_any (ffi_ref . batch_refresh_reference) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_ctor (batch_insert_empty_tree : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , batch_insert_empty_tree_if_not_exists : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , batch_insert_empty_tree_if_not_exists_check_existing_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , batch_insert : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , batch_insert_if_not_exists : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , batch_insert_if_changed_value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , batch_delete : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , batch_remove_raw : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , batch_delete_up_tree_while_empty : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , batch_refresh_reference : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveGroveBatchMethodVersions { batch_insert_empty_tree , batch_insert_empty_tree_if_not_exists , batch_insert_empty_tree_if_not_exists_check_existing_operations , batch_insert , batch_insert_if_not_exists , batch_insert_if_changed_value , batch_delete , batch_remove_raw , batch_delete_up_tree_while_empty , batch_refresh_reference }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_get_batch_insert_empty_tree (obj : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . batch_insert_empty_tree } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_get_batch_insert_empty_tree_if_not_exists (obj : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . batch_insert_empty_tree_if_not_exists } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_get_batch_insert_empty_tree_if_not_exists_check_existing_operations (obj : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . batch_insert_empty_tree_if_not_exists_check_existing_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_get_batch_insert (obj : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . batch_insert } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_get_batch_insert_if_not_exists (obj : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . batch_insert_if_not_exists } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_get_batch_insert_if_changed_value (obj : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . batch_insert_if_changed_value } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_get_batch_delete (obj : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . batch_delete } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_get_batch_remove_raw (obj : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . batch_remove_raw } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_get_batch_delete_up_tree_while_empty (obj : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . batch_delete_up_tree_while_empty } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_get_batch_refresh_reference (obj : * const platform_version_version_drive_versions_DriveGroveBatchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . batch_refresh_reference } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_set_batch_insert_empty_tree (obj : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . batch_insert_empty_tree = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_set_batch_insert_empty_tree_if_not_exists (obj : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . batch_insert_empty_tree_if_not_exists = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_set_batch_insert_empty_tree_if_not_exists_check_existing_operations (obj : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . batch_insert_empty_tree_if_not_exists_check_existing_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_set_batch_insert (obj : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . batch_insert = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_set_batch_insert_if_not_exists (obj : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . batch_insert_if_not_exists = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_set_batch_insert_if_changed_value (obj : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . batch_insert_if_changed_value = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_set_batch_delete (obj : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . batch_delete = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_set_batch_remove_raw (obj : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . batch_remove_raw = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_set_batch_delete_up_tree_while_empty (obj : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . batch_delete_up_tree_while_empty = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveGroveBatchMethodVersions_set_batch_refresh_reference (obj : * mut platform_version_version_drive_versions_DriveGroveBatchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . batch_refresh_reference = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveBalancesMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveBalancesMethodVersions { pub add_to_system_credits : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_to_system_credits_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_from_system_credits : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub remove_from_system_credits_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub calculate_total_credits_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveBalancesMethodVersions > for platform_version_version_drive_versions_DriveBalancesMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveBalancesMethodVersions) -> platform_version :: version :: drive_versions :: DriveBalancesMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveBalancesMethodVersions { add_to_system_credits : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_to_system_credits) , add_to_system_credits_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_to_system_credits_operations) , remove_from_system_credits : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . remove_from_system_credits) , remove_from_system_credits_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . remove_from_system_credits_operations) , calculate_total_credits_balance : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . calculate_total_credits_balance) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveBalancesMethodVersions) -> * const platform_version_version_drive_versions_DriveBalancesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveBalancesMethodVersions { add_to_system_credits : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_to_system_credits) , add_to_system_credits_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_to_system_credits_operations) , remove_from_system_credits : ferment_interfaces :: FFIConversion :: ffi_to (obj . remove_from_system_credits) , remove_from_system_credits_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . remove_from_system_credits_operations) , calculate_total_credits_balance : ferment_interfaces :: FFIConversion :: ffi_to (obj . calculate_total_credits_balance) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveBalancesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveBalancesMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_to_system_credits) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_to_system_credits_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_from_system_credits) ; ; ferment_interfaces :: unbox_any (ffi_ref . remove_from_system_credits_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . calculate_total_credits_balance) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_ctor (add_to_system_credits : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_to_system_credits_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_from_system_credits : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , remove_from_system_credits_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , calculate_total_credits_balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveBalancesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveBalancesMethodVersions { add_to_system_credits , add_to_system_credits_operations , remove_from_system_credits , remove_from_system_credits_operations , calculate_total_credits_balance }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveBalancesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_get_add_to_system_credits (obj : * const platform_version_version_drive_versions_DriveBalancesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_to_system_credits } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_get_add_to_system_credits_operations (obj : * const platform_version_version_drive_versions_DriveBalancesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_to_system_credits_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_get_remove_from_system_credits (obj : * const platform_version_version_drive_versions_DriveBalancesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_from_system_credits } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_get_remove_from_system_credits_operations (obj : * const platform_version_version_drive_versions_DriveBalancesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . remove_from_system_credits_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_get_calculate_total_credits_balance (obj : * const platform_version_version_drive_versions_DriveBalancesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . calculate_total_credits_balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_set_add_to_system_credits (obj : * mut platform_version_version_drive_versions_DriveBalancesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_to_system_credits = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_set_add_to_system_credits_operations (obj : * mut platform_version_version_drive_versions_DriveBalancesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_to_system_credits_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_set_remove_from_system_credits (obj : * mut platform_version_version_drive_versions_DriveBalancesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_from_system_credits = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_set_remove_from_system_credits_operations (obj : * mut platform_version_version_drive_versions_DriveBalancesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . remove_from_system_credits_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveBalancesMethodVersions_set_calculate_total_credits_balance (obj : * mut platform_version_version_drive_versions_DriveBalancesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . calculate_total_credits_balance = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveStateTransitionMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveStateTransitionMethodVersions { pub operations : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveStateTransitionMethodVersions > for platform_version_version_drive_versions_DriveStateTransitionMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveStateTransitionMethodVersions) -> platform_version :: version :: drive_versions :: DriveStateTransitionMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveStateTransitionMethodVersions { operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . operations) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveStateTransitionMethodVersions) -> * const platform_version_version_drive_versions_DriveStateTransitionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveStateTransitionMethodVersions { operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . operations) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveStateTransitionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveStateTransitionMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . operations) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionMethodVersions_ctor (operations : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions) -> * mut platform_version_version_drive_versions_DriveStateTransitionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveStateTransitionMethodVersions { operations }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveStateTransitionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionMethodVersions_get_operations (obj : * const platform_version_version_drive_versions_DriveStateTransitionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions { (* obj) . operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveStateTransitionMethodVersions_set_operations (obj : * mut platform_version_version_drive_versions_DriveStateTransitionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveStateTransitionOperationMethodVersions) { (* obj) . operations = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveIdentityFetchMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveIdentityFetchMethodVersions { pub public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , pub attributes : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions , pub partial_identity : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions , pub full_identity : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveIdentityFetchMethodVersions > for platform_version_version_drive_versions_DriveIdentityFetchMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveIdentityFetchMethodVersions) -> platform_version :: version :: drive_versions :: DriveIdentityFetchMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveIdentityFetchMethodVersions { public_key_hashes : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_key_hashes) , attributes : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . attributes) , partial_identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . partial_identity) , full_identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . full_identity) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveIdentityFetchMethodVersions) -> * const platform_version_version_drive_versions_DriveIdentityFetchMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityFetchMethodVersions { public_key_hashes : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_key_hashes) , attributes : ferment_interfaces :: FFIConversion :: ffi_to (obj . attributes) , partial_identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . partial_identity) , full_identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . full_identity) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityFetchMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveIdentityFetchMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_hashes) ; ; ferment_interfaces :: unbox_any (ffi_ref . attributes) ; ; ferment_interfaces :: unbox_any (ffi_ref . partial_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . full_identity) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchMethodVersions_ctor (public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions , attributes : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions , partial_identity : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions , full_identity : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions) -> * mut platform_version_version_drive_versions_DriveIdentityFetchMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveIdentityFetchMethodVersions { public_key_hashes , attributes , partial_identity , full_identity }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveIdentityFetchMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchMethodVersions_get_public_key_hashes (obj : * const platform_version_version_drive_versions_DriveIdentityFetchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions { (* obj) . public_key_hashes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchMethodVersions_get_attributes (obj : * const platform_version_version_drive_versions_DriveIdentityFetchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions { (* obj) . attributes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchMethodVersions_get_partial_identity (obj : * const platform_version_version_drive_versions_DriveIdentityFetchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions { (* obj) . partial_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchMethodVersions_get_full_identity (obj : * const platform_version_version_drive_versions_DriveIdentityFetchMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions { (* obj) . full_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchMethodVersions_set_public_key_hashes (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchPublicKeyHashesMethodVersions) { (* obj) . public_key_hashes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchMethodVersions_set_attributes (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchAttributesMethodVersions) { (* obj) . attributes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchMethodVersions_set_partial_identity (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchPartialIdentityMethodVersions) { (* obj) . partial_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveIdentityFetchMethodVersions_set_full_identity (obj : * mut platform_version_version_drive_versions_DriveIdentityFetchMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveIdentityFetchFullIdentityMethodVersions) { (* obj) . full_identity = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveInitializationMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveInitializationMethodVersions { pub create_initial_state_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveInitializationMethodVersions > for platform_version_version_drive_versions_DriveInitializationMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveInitializationMethodVersions) -> platform_version :: version :: drive_versions :: DriveInitializationMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveInitializationMethodVersions { create_initial_state_structure : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . create_initial_state_structure) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveInitializationMethodVersions) -> * const platform_version_version_drive_versions_DriveInitializationMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveInitializationMethodVersions { create_initial_state_structure : ferment_interfaces :: FFIConversion :: ffi_to (obj . create_initial_state_structure) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveInitializationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveInitializationMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . create_initial_state_structure) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveInitializationMethodVersions_ctor (create_initial_state_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveInitializationMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveInitializationMethodVersions { create_initial_state_structure }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveInitializationMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveInitializationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveInitializationMethodVersions_get_create_initial_state_structure (obj : * const platform_version_version_drive_versions_DriveInitializationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_initial_state_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveInitializationMethodVersions_set_create_initial_state_structure (obj : * mut platform_version_version_drive_versions_DriveInitializationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_initial_state_structure = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveContractProveMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveContractProveMethodVersions { pub prove_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub prove_contract_history : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub prove_contracts : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveContractProveMethodVersions > for platform_version_version_drive_versions_DriveContractProveMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveContractProveMethodVersions) -> platform_version :: version :: drive_versions :: DriveContractProveMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveContractProveMethodVersions { prove_contract : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . prove_contract) , prove_contract_history : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . prove_contract_history) , prove_contracts : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . prove_contracts) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveContractProveMethodVersions) -> * const platform_version_version_drive_versions_DriveContractProveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractProveMethodVersions { prove_contract : ferment_interfaces :: FFIConversion :: ffi_to (obj . prove_contract) , prove_contract_history : ferment_interfaces :: FFIConversion :: ffi_to (obj . prove_contract_history) , prove_contracts : ferment_interfaces :: FFIConversion :: ffi_to (obj . prove_contracts) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveContractProveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveContractProveMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . prove_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove_contract_history) ; ; ferment_interfaces :: unbox_any (ffi_ref . prove_contracts) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractProveMethodVersions_ctor (prove_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , prove_contract_history : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , prove_contracts : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveContractProveMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveContractProveMethodVersions { prove_contract , prove_contract_history , prove_contracts }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractProveMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveContractProveMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractProveMethodVersions_get_prove_contract (obj : * const platform_version_version_drive_versions_DriveContractProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractProveMethodVersions_get_prove_contract_history (obj : * const platform_version_version_drive_versions_DriveContractProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_contract_history } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractProveMethodVersions_get_prove_contracts (obj : * const platform_version_version_drive_versions_DriveContractProveMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . prove_contracts } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractProveMethodVersions_set_prove_contract (obj : * mut platform_version_version_drive_versions_DriveContractProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractProveMethodVersions_set_prove_contract_history (obj : * mut platform_version_version_drive_versions_DriveContractProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_contract_history = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveContractProveMethodVersions_set_prove_contracts (obj : * mut platform_version_version_drive_versions_DriveContractProveMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . prove_contracts = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveVerifyIdentityMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions { pub verify_full_identities_by_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_full_identity_by_identity_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_full_identity_by_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_identity_balance_for_identity_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_identity_balances_for_identity_ids : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_identity_id_by_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_identity_ids_by_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_identity_keys_by_identity_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveVerifyIdentityMethodVersions > for platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) -> platform_version :: version :: drive_versions :: DriveVerifyIdentityMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVerifyIdentityMethodVersions { verify_full_identities_by_public_key_hashes : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_full_identities_by_public_key_hashes) , verify_full_identity_by_identity_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_full_identity_by_identity_id) , verify_full_identity_by_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_full_identity_by_public_key_hash) , verify_identity_balance_for_identity_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_identity_balance_for_identity_id) , verify_identity_balances_for_identity_ids : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_identity_balances_for_identity_ids) , verify_identity_id_by_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_identity_id_by_public_key_hash) , verify_identity_ids_by_public_key_hashes : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_identity_ids_by_public_key_hashes) , verify_identity_keys_by_identity_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_identity_keys_by_identity_id) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVerifyIdentityMethodVersions) -> * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions { verify_full_identities_by_public_key_hashes : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_full_identities_by_public_key_hashes) , verify_full_identity_by_identity_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_full_identity_by_identity_id) , verify_full_identity_by_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_full_identity_by_public_key_hash) , verify_identity_balance_for_identity_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_identity_balance_for_identity_id) , verify_identity_balances_for_identity_ids : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_identity_balances_for_identity_ids) , verify_identity_id_by_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_identity_id_by_public_key_hash) , verify_identity_ids_by_public_key_hashes : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_identity_ids_by_public_key_hashes) , verify_identity_keys_by_identity_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_identity_keys_by_identity_id) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . verify_full_identities_by_public_key_hashes) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_full_identity_by_identity_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_full_identity_by_public_key_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_identity_balance_for_identity_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_identity_balances_for_identity_ids) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_identity_id_by_public_key_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_identity_ids_by_public_key_hashes) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_identity_keys_by_identity_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_ctor (verify_full_identities_by_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_full_identity_by_identity_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_full_identity_by_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_identity_balance_for_identity_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_identity_balances_for_identity_ids : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_identity_id_by_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_identity_ids_by_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_identity_keys_by_identity_id : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions { verify_full_identities_by_public_key_hashes , verify_full_identity_by_identity_id , verify_full_identity_by_public_key_hash , verify_identity_balance_for_identity_id , verify_identity_balances_for_identity_ids , verify_identity_id_by_public_key_hash , verify_identity_ids_by_public_key_hashes , verify_identity_keys_by_identity_id }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_get_verify_full_identities_by_public_key_hashes (obj : * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_full_identities_by_public_key_hashes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_get_verify_full_identity_by_identity_id (obj : * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_full_identity_by_identity_id } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_get_verify_full_identity_by_public_key_hash (obj : * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_full_identity_by_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_get_verify_identity_balance_for_identity_id (obj : * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_identity_balance_for_identity_id } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_get_verify_identity_balances_for_identity_ids (obj : * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_identity_balances_for_identity_ids } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_get_verify_identity_id_by_public_key_hash (obj : * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_identity_id_by_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_get_verify_identity_ids_by_public_key_hashes (obj : * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_identity_ids_by_public_key_hashes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_get_verify_identity_keys_by_identity_id (obj : * const platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_identity_keys_by_identity_id } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_set_verify_full_identities_by_public_key_hashes (obj : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_full_identities_by_public_key_hashes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_set_verify_full_identity_by_identity_id (obj : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_full_identity_by_identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_set_verify_full_identity_by_public_key_hash (obj : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_full_identity_by_public_key_hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_set_verify_identity_balance_for_identity_id (obj : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_identity_balance_for_identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_set_verify_identity_balances_for_identity_ids (obj : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_identity_balances_for_identity_ids = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_set_verify_identity_id_by_public_key_hash (obj : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_identity_id_by_public_key_hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_set_verify_identity_ids_by_public_key_hashes (obj : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_identity_ids_by_public_key_hashes = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions_set_verify_identity_keys_by_identity_id (obj : * mut platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_identity_keys_by_identity_id = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_versions::DriveVerifyMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_versions_DriveVerifyMethodVersions { pub contract : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyContractMethodVersions , pub document : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions , pub identity : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , pub single_document : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions , pub system : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifySystemMethodVersions , pub state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_versions :: DriveVerifyMethodVersions > for platform_version_version_drive_versions_DriveVerifyMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_versions_DriveVerifyMethodVersions) -> platform_version :: version :: drive_versions :: DriveVerifyMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_versions :: DriveVerifyMethodVersions { contract : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . contract) , document : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document) , identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity) , single_document : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . single_document) , system : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . system) , state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . state_transition) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_versions :: DriveVerifyMethodVersions) -> * const platform_version_version_drive_versions_DriveVerifyMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyMethodVersions { contract : ferment_interfaces :: FFIConversion :: ffi_to (obj . contract) , document : ferment_interfaces :: FFIConversion :: ffi_to (obj . document) , identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity) , single_document : ferment_interfaces :: FFIConversion :: ffi_to (obj . single_document) , system : ferment_interfaces :: FFIConversion :: ffi_to (obj . system) , state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . state_transition) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifyMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_versions_DriveVerifyMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . document) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . single_document) ; ; ferment_interfaces :: unbox_any (ffi_ref . system) ; ; ferment_interfaces :: unbox_any (ffi_ref . state_transition) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_ctor (contract : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyContractMethodVersions , document : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions , identity : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions , single_document : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions , system : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifySystemMethodVersions , state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions) -> * mut platform_version_version_drive_versions_DriveVerifyMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_versions_DriveVerifyMethodVersions { contract , document , identity , single_document , system , state_transition }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_destroy (ffi : * mut platform_version_version_drive_versions_DriveVerifyMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_get_contract (obj : * const platform_version_version_drive_versions_DriveVerifyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyContractMethodVersions { (* obj) . contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_get_document (obj : * const platform_version_version_drive_versions_DriveVerifyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions { (* obj) . document } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_get_identity (obj : * const platform_version_version_drive_versions_DriveVerifyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions { (* obj) . identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_get_single_document (obj : * const platform_version_version_drive_versions_DriveVerifyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions { (* obj) . single_document } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_get_system (obj : * const platform_version_version_drive_versions_DriveVerifyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifySystemMethodVersions { (* obj) . system } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_get_state_transition (obj : * const platform_version_version_drive_versions_DriveVerifyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions { (* obj) . state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_set_contract (obj : * mut platform_version_version_drive_versions_DriveVerifyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyContractMethodVersions) { (* obj) . contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_set_document (obj : * mut platform_version_version_drive_versions_DriveVerifyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyDocumentMethodVersions) { (* obj) . document = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_set_identity (obj : * mut platform_version_version_drive_versions_DriveVerifyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyIdentityMethodVersions) { (* obj) . identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_set_single_document (obj : * mut platform_version_version_drive_versions_DriveVerifyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifySingleDocumentMethodVersions) { (* obj) . single_document = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_set_system (obj : * mut platform_version_version_drive_versions_DriveVerifyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifySystemMethodVersions) { (* obj) . system = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_versions_DriveVerifyMethodVersions_set_state_transition (obj : * mut platform_version_version_drive_versions_DriveVerifyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_versions :: platform_version_version_drive_versions_DriveVerifyStateTransitionMethodVersions) { (* obj) . state_transition = value ; } } pub mod drive_abci_versions { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciFeePoolOutwardsDistributionMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions { pub add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_epoch_pool_to_proposers_payout_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub find_oldest_epoch_needing_payment : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_reward_shares_list_for_masternode : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolOutwardsDistributionMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolOutwardsDistributionMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolOutwardsDistributionMethodVersions { add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations) , add_epoch_pool_to_proposers_payout_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_epoch_pool_to_proposers_payout_operations) , find_oldest_epoch_needing_payment : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . find_oldest_epoch_needing_payment) , fetch_reward_shares_list_for_masternode : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_reward_shares_list_for_masternode) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolOutwardsDistributionMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions { add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations) , add_epoch_pool_to_proposers_payout_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_epoch_pool_to_proposers_payout_operations) , find_oldest_epoch_needing_payment : ferment_interfaces :: FFIConversion :: ffi_to (obj . find_oldest_epoch_needing_payment) , fetch_reward_shares_list_for_masternode : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_reward_shares_list_for_masternode) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_epoch_pool_to_proposers_payout_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . find_oldest_epoch_needing_payment) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_reward_shares_list_for_masternode) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions_ctor (add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_epoch_pool_to_proposers_payout_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , find_oldest_epoch_needing_payment : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_reward_shares_list_for_masternode : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions { add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations , add_epoch_pool_to_proposers_payout_operations , find_oldest_epoch_needing_payment , fetch_reward_shares_list_for_masternode }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions_get_add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations (obj : * const platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions_get_add_epoch_pool_to_proposers_payout_operations (obj : * const platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_epoch_pool_to_proposers_payout_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions_get_find_oldest_epoch_needing_payment (obj : * const platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . find_oldest_epoch_needing_payment } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions_get_fetch_reward_shares_list_for_masternode (obj : * const platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_reward_shares_list_for_masternode } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions_set_add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations (obj : * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_distribute_fees_from_oldest_unpaid_epoch_pool_to_proposers_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions_set_add_epoch_pool_to_proposers_payout_operations (obj : * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_epoch_pool_to_proposers_payout_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions_set_find_oldest_epoch_needing_payment (obj : * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . find_oldest_epoch_needing_payment = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions_set_fetch_reward_shares_list_for_masternode (obj : * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_reward_shares_list_for_masternode = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciCoreChainLockMethodVersionsAndConstants`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants { pub choose_quorum : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_chain_lock : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_chain_lock_locally : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub verify_chain_lock_through_core : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub make_sure_core_is_synced_to_chain_lock : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub recent_block_count_amount : u32 } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciCoreChainLockMethodVersionsAndConstants > for platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants) -> platform_version :: version :: drive_abci_versions :: DriveAbciCoreChainLockMethodVersionsAndConstants { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciCoreChainLockMethodVersionsAndConstants { choose_quorum : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . choose_quorum) , verify_chain_lock : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_chain_lock) , verify_chain_lock_locally : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_chain_lock_locally) , verify_chain_lock_through_core : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verify_chain_lock_through_core) , make_sure_core_is_synced_to_chain_lock : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . make_sure_core_is_synced_to_chain_lock) , recent_block_count_amount : ffi_ref . recent_block_count_amount } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciCoreChainLockMethodVersionsAndConstants) -> * const platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants { choose_quorum : ferment_interfaces :: FFIConversion :: ffi_to (obj . choose_quorum) , verify_chain_lock : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_chain_lock) , verify_chain_lock_locally : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_chain_lock_locally) , verify_chain_lock_through_core : ferment_interfaces :: FFIConversion :: ffi_to (obj . verify_chain_lock_through_core) , make_sure_core_is_synced_to_chain_lock : ferment_interfaces :: FFIConversion :: ffi_to (obj . make_sure_core_is_synced_to_chain_lock) , recent_block_count_amount : obj . recent_block_count_amount }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . choose_quorum) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_chain_lock) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_chain_lock_locally) ; ; ferment_interfaces :: unbox_any (ffi_ref . verify_chain_lock_through_core) ; ; ferment_interfaces :: unbox_any (ffi_ref . make_sure_core_is_synced_to_chain_lock) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_ctor (choose_quorum : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_chain_lock : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_chain_lock_locally : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , verify_chain_lock_through_core : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , make_sure_core_is_synced_to_chain_lock : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , recent_block_count_amount : u32) -> * mut platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants { choose_quorum , verify_chain_lock , verify_chain_lock_locally , verify_chain_lock_through_core , make_sure_core_is_synced_to_chain_lock , recent_block_count_amount }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_get_choose_quorum (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . choose_quorum } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_get_verify_chain_lock (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_chain_lock } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_get_verify_chain_lock_locally (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_chain_lock_locally } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_get_verify_chain_lock_through_core (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . verify_chain_lock_through_core } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_get_make_sure_core_is_synced_to_chain_lock (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . make_sure_core_is_synced_to_chain_lock } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_get_recent_block_count_amount (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants) -> u32 { (* obj) . recent_block_count_amount } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_set_choose_quorum (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . choose_quorum = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_set_verify_chain_lock (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_chain_lock = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_set_verify_chain_lock_locally (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_chain_lock_locally = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_set_verify_chain_lock_through_core (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . verify_chain_lock_through_core = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_set_make_sure_core_is_synced_to_chain_lock (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . make_sure_core_is_synced_to_chain_lock = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants_set_recent_block_count_amount (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants , value : u32) { (* obj) . recent_block_count_amount = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciQueryDataContractVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions { pub data_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub data_contract_history : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub data_contracts : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciQueryDataContractVersions > for platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciQueryDataContractVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciQueryDataContractVersions { data_contract : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract) , data_contract_history : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract_history) , data_contracts : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contracts) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciQueryDataContractVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions { data_contract : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract) , data_contract_history : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract_history) , data_contracts : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contracts) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_history) ; ; ferment_interfaces :: unbox_any (ffi_ref . data_contracts) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions_ctor (data_contract : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , data_contract_history : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , data_contracts : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) -> * mut platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions { data_contract , data_contract_history , data_contracts }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions_get_data_contract (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . data_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions_get_data_contract_history (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . data_contract_history } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions_get_data_contracts (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . data_contracts } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions_set_data_contract (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . data_contract = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions_set_data_contract_history (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . data_contract_history = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions_set_data_contracts (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . data_contracts = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciQueryIdentityVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions { pub identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub identities : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub balance_and_revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub identity_by_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub identities_by_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciQueryIdentityVersions > for platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciQueryIdentityVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciQueryIdentityVersions { identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity) , identities : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identities) , keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . keys) , balance : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . balance) , balance_and_revision : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . balance_and_revision) , identity_by_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_by_public_key_hash) , identities_by_public_key_hashes : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identities_by_public_key_hashes) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciQueryIdentityVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions { identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity) , identities : ferment_interfaces :: FFIConversion :: ffi_to (obj . identities) , keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . keys) , balance : ferment_interfaces :: FFIConversion :: ffi_to (obj . balance) , balance_and_revision : ferment_interfaces :: FFIConversion :: ffi_to (obj . balance_and_revision) , identity_by_public_key_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_by_public_key_hash) , identities_by_public_key_hashes : ferment_interfaces :: FFIConversion :: ffi_to (obj . identities_by_public_key_hashes) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . identities) ; ; ferment_interfaces :: unbox_any (ffi_ref . keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . balance) ; ; ferment_interfaces :: unbox_any (ffi_ref . balance_and_revision) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_by_public_key_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . identities_by_public_key_hashes) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_ctor (identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , identities : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , balance : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , balance_and_revision : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , identity_by_public_key_hash : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , identities_by_public_key_hashes : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) -> * mut platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions { identity , identities , keys , balance , balance_and_revision , identity_by_public_key_hash , identities_by_public_key_hashes }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_get_identity (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_get_identities (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identities } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_get_keys (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_get_balance (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_get_balance_and_revision (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . balance_and_revision } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_get_identity_by_public_key_hash (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identity_by_public_key_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_get_identities_by_public_key_hashes (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . identities_by_public_key_hashes } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_set_identity (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_set_identities (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identities = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_set_keys (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_set_balance (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . balance = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_set_balance_and_revision (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . balance_and_revision = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_set_identity_by_public_key_hash (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identity_by_public_key_hash = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions_set_identities_by_public_key_hashes (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . identities_by_public_key_hashes = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciBlockEndMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions { pub update_state_cache : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_drive_cache : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validator_set_update : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciBlockEndMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciBlockEndMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciBlockEndMethodVersions { update_state_cache : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update_state_cache) , update_drive_cache : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update_drive_cache) , validator_set_update : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validator_set_update) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciBlockEndMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions { update_state_cache : ferment_interfaces :: FFIConversion :: ffi_to (obj . update_state_cache) , update_drive_cache : ferment_interfaces :: FFIConversion :: ffi_to (obj . update_drive_cache) , validator_set_update : ferment_interfaces :: FFIConversion :: ffi_to (obj . validator_set_update) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . update_state_cache) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_drive_cache) ; ; ferment_interfaces :: unbox_any (ffi_ref . validator_set_update) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions_ctor (update_state_cache : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_drive_cache : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validator_set_update : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions { update_state_cache , update_drive_cache , validator_set_update }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions_get_update_state_cache (obj : * const platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_state_cache } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions_get_update_drive_cache (obj : * const platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_drive_cache } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions_get_validator_set_update (obj : * const platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validator_set_update } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions_set_update_state_cache (obj : * mut platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_state_cache = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions_set_update_drive_cache (obj : * mut platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_drive_cache = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions_set_validator_set_update (obj : * mut platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validator_set_update = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciBlockFeeProcessingMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions { pub add_process_epoch_change_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub process_block_fees : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciBlockFeeProcessingMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciBlockFeeProcessingMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciBlockFeeProcessingMethodVersions { add_process_epoch_change_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_process_epoch_change_operations) , process_block_fees : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . process_block_fees) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciBlockFeeProcessingMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions { add_process_epoch_change_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_process_epoch_change_operations) , process_block_fees : ferment_interfaces :: FFIConversion :: ffi_to (obj . process_block_fees) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_process_epoch_change_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . process_block_fees) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions_ctor (add_process_epoch_change_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , process_block_fees : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions { add_process_epoch_change_operations , process_block_fees }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions_get_add_process_epoch_change_operations (obj : * const platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_process_epoch_change_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions_get_process_block_fees (obj : * const platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . process_block_fees } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions_set_add_process_epoch_change_operations (obj : * mut platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_process_epoch_change_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions_set_process_block_fees (obj : * mut platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . process_block_fees = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciPlatformStateStorageMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions { pub fetch_platform_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub store_platform_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciPlatformStateStorageMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciPlatformStateStorageMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciPlatformStateStorageMethodVersions { fetch_platform_state : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_platform_state) , store_platform_state : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . store_platform_state) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciPlatformStateStorageMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions { fetch_platform_state : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_platform_state) , store_platform_state : ferment_interfaces :: FFIConversion :: ffi_to (obj . store_platform_state) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_platform_state) ; ; ferment_interfaces :: unbox_any (ffi_ref . store_platform_state) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions_ctor (fetch_platform_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , store_platform_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions { fetch_platform_state , store_platform_state }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions_get_fetch_platform_state (obj : * const platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_platform_state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions_get_store_platform_state (obj : * const platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . store_platform_state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions_set_fetch_platform_state (obj : * mut platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_platform_state = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions_set_store_platform_state (obj : * mut platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . store_platform_state = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciVersion { pub structs : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStructureVersions , pub methods : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciMethodVersions , pub validation_and_processing : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationVersions , pub query : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciVersion > for platform_version_version_drive_abci_versions_DriveAbciVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciVersion) -> platform_version :: version :: drive_abci_versions :: DriveAbciVersion { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciVersion { structs : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . structs) , methods : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . methods) , validation_and_processing : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validation_and_processing) , query : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . query) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciVersion) -> * const platform_version_version_drive_abci_versions_DriveAbciVersion { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciVersion { structs : ferment_interfaces :: FFIConversion :: ffi_to (obj . structs) , methods : ferment_interfaces :: FFIConversion :: ffi_to (obj . methods) , validation_and_processing : ferment_interfaces :: FFIConversion :: ffi_to (obj . validation_and_processing) , query : ferment_interfaces :: FFIConversion :: ffi_to (obj . query) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . structs) ; ; ferment_interfaces :: unbox_any (ffi_ref . methods) ; ; ferment_interfaces :: unbox_any (ffi_ref . validation_and_processing) ; ; ferment_interfaces :: unbox_any (ffi_ref . query) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVersion_ctor (structs : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStructureVersions , methods : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciMethodVersions , validation_and_processing : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationVersions , query : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryVersions) -> * mut platform_version_version_drive_abci_versions_DriveAbciVersion { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciVersion { structs , methods , validation_and_processing , query }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVersion_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVersion_get_structs (obj : * const platform_version_version_drive_abci_versions_DriveAbciVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStructureVersions { (* obj) . structs } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVersion_get_methods (obj : * const platform_version_version_drive_abci_versions_DriveAbciVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciMethodVersions { (* obj) . methods } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVersion_get_validation_and_processing (obj : * const platform_version_version_drive_abci_versions_DriveAbciVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationVersions { (* obj) . validation_and_processing } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVersion_get_query (obj : * const platform_version_version_drive_abci_versions_DriveAbciVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryVersions { (* obj) . query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVersion_set_structs (obj : * mut platform_version_version_drive_abci_versions_DriveAbciVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStructureVersions) { (* obj) . structs = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVersion_set_methods (obj : * mut platform_version_version_drive_abci_versions_DriveAbciVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciMethodVersions) { (* obj) . methods = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVersion_set_validation_and_processing (obj : * mut platform_version_version_drive_abci_versions_DriveAbciVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationVersions) { (* obj) . validation_and_processing = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciVersion_set_query (obj : * mut platform_version_version_drive_abci_versions_DriveAbciVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryVersions) { (* obj) . query = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciValidationVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciValidationVersions { pub state_transitions : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , pub process_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub state_transition_to_execution_event_for_check_tx : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciValidationVersions > for platform_version_version_drive_abci_versions_DriveAbciValidationVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciValidationVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciValidationVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciValidationVersions { state_transitions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . state_transitions) , process_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . process_state_transition) , state_transition_to_execution_event_for_check_tx : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . state_transition_to_execution_event_for_check_tx) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciValidationVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciValidationVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciValidationVersions { state_transitions : ferment_interfaces :: FFIConversion :: ffi_to (obj . state_transitions) , process_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . process_state_transition) , state_transition_to_execution_event_for_check_tx : ferment_interfaces :: FFIConversion :: ffi_to (obj . state_transition_to_execution_event_for_check_tx) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciValidationVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . state_transitions) ; ; ferment_interfaces :: unbox_any (ffi_ref . process_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . state_transition_to_execution_event_for_check_tx) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationVersions_ctor (state_transitions : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , process_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , state_transition_to_execution_event_for_check_tx : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciValidationVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciValidationVersions { state_transitions , process_state_transition , state_transition_to_execution_event_for_check_tx }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationVersions_get_state_transitions (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions { (* obj) . state_transitions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationVersions_get_process_state_transition (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . process_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationVersions_get_state_transition_to_execution_event_for_check_tx (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . state_transition_to_execution_event_for_check_tx } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationVersions_set_state_transitions (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) { (* obj) . state_transitions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationVersions_set_process_state_transition (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . process_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationVersions_set_state_transition_to_execution_event_for_check_tx (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . state_transition_to_execution_event_for_check_tx = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciQuerySystemVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions { pub version_upgrade_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub version_upgrade_vote_status : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub epoch_infos : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciQuerySystemVersions > for platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciQuerySystemVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciQuerySystemVersions { version_upgrade_state : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . version_upgrade_state) , version_upgrade_vote_status : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . version_upgrade_vote_status) , epoch_infos : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . epoch_infos) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciQuerySystemVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions { version_upgrade_state : ferment_interfaces :: FFIConversion :: ffi_to (obj . version_upgrade_state) , version_upgrade_vote_status : ferment_interfaces :: FFIConversion :: ffi_to (obj . version_upgrade_vote_status) , epoch_infos : ferment_interfaces :: FFIConversion :: ffi_to (obj . epoch_infos) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . version_upgrade_state) ; ; ferment_interfaces :: unbox_any (ffi_ref . version_upgrade_vote_status) ; ; ferment_interfaces :: unbox_any (ffi_ref . epoch_infos) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions_ctor (version_upgrade_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , version_upgrade_vote_status : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , epoch_infos : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) -> * mut platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions { version_upgrade_state , version_upgrade_vote_status , epoch_infos }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions_get_version_upgrade_state (obj : * const platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . version_upgrade_state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions_get_version_upgrade_vote_status (obj : * const platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . version_upgrade_vote_status } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions_get_epoch_infos (obj : * const platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . epoch_infos } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions_set_version_upgrade_state (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . version_upgrade_state = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions_set_version_upgrade_vote_status (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . version_upgrade_vote_status = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions_set_epoch_infos (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . epoch_infos = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciEpochMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions { pub gather_epoch_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_genesis_time : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciEpochMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciEpochMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciEpochMethodVersions { gather_epoch_info : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . gather_epoch_info) , get_genesis_time : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_genesis_time) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciEpochMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions { gather_epoch_info : ferment_interfaces :: FFIConversion :: ffi_to (obj . gather_epoch_info) , get_genesis_time : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_genesis_time) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . gather_epoch_info) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_genesis_time) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions_ctor (gather_epoch_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_genesis_time : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions { gather_epoch_info , get_genesis_time }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions_get_gather_epoch_info (obj : * const platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . gather_epoch_info } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions_get_get_genesis_time (obj : * const platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_genesis_time } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions_set_gather_epoch_info (obj : * mut platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . gather_epoch_info = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions_set_get_genesis_time (obj : * mut platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_genesis_time = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciIdentityCreditWithdrawalMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions { pub build_untied_withdrawal_transactions_from_documents : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub dequeue_and_build_unsigned_withdrawal_transactions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub fetch_transactions_block_inclusion_status : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub pool_withdrawals_into_transactions_queue : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_broadcasted_withdrawal_statuses : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub append_signatures_and_broadcast_withdrawal_transactions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciIdentityCreditWithdrawalMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciIdentityCreditWithdrawalMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciIdentityCreditWithdrawalMethodVersions { build_untied_withdrawal_transactions_from_documents : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . build_untied_withdrawal_transactions_from_documents) , dequeue_and_build_unsigned_withdrawal_transactions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . dequeue_and_build_unsigned_withdrawal_transactions) , fetch_transactions_block_inclusion_status : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_transactions_block_inclusion_status) , pool_withdrawals_into_transactions_queue : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . pool_withdrawals_into_transactions_queue) , update_broadcasted_withdrawal_statuses : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update_broadcasted_withdrawal_statuses) , append_signatures_and_broadcast_withdrawal_transactions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . append_signatures_and_broadcast_withdrawal_transactions) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciIdentityCreditWithdrawalMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions { build_untied_withdrawal_transactions_from_documents : ferment_interfaces :: FFIConversion :: ffi_to (obj . build_untied_withdrawal_transactions_from_documents) , dequeue_and_build_unsigned_withdrawal_transactions : ferment_interfaces :: FFIConversion :: ffi_to (obj . dequeue_and_build_unsigned_withdrawal_transactions) , fetch_transactions_block_inclusion_status : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_transactions_block_inclusion_status) , pool_withdrawals_into_transactions_queue : ferment_interfaces :: FFIConversion :: ffi_to (obj . pool_withdrawals_into_transactions_queue) , update_broadcasted_withdrawal_statuses : ferment_interfaces :: FFIConversion :: ffi_to (obj . update_broadcasted_withdrawal_statuses) , append_signatures_and_broadcast_withdrawal_transactions : ferment_interfaces :: FFIConversion :: ffi_to (obj . append_signatures_and_broadcast_withdrawal_transactions) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . build_untied_withdrawal_transactions_from_documents) ; ; ferment_interfaces :: unbox_any (ffi_ref . dequeue_and_build_unsigned_withdrawal_transactions) ; ; ferment_interfaces :: unbox_any (ffi_ref . fetch_transactions_block_inclusion_status) ; ; ferment_interfaces :: unbox_any (ffi_ref . pool_withdrawals_into_transactions_queue) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_broadcasted_withdrawal_statuses) ; ; ferment_interfaces :: unbox_any (ffi_ref . append_signatures_and_broadcast_withdrawal_transactions) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_ctor (build_untied_withdrawal_transactions_from_documents : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , dequeue_and_build_unsigned_withdrawal_transactions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , fetch_transactions_block_inclusion_status : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pool_withdrawals_into_transactions_queue : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_broadcasted_withdrawal_statuses : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , append_signatures_and_broadcast_withdrawal_transactions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions { build_untied_withdrawal_transactions_from_documents , dequeue_and_build_unsigned_withdrawal_transactions , fetch_transactions_block_inclusion_status , pool_withdrawals_into_transactions_queue , update_broadcasted_withdrawal_statuses , append_signatures_and_broadcast_withdrawal_transactions }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_get_build_untied_withdrawal_transactions_from_documents (obj : * const platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . build_untied_withdrawal_transactions_from_documents } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_get_dequeue_and_build_unsigned_withdrawal_transactions (obj : * const platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . dequeue_and_build_unsigned_withdrawal_transactions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_get_fetch_transactions_block_inclusion_status (obj : * const platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_transactions_block_inclusion_status } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_get_pool_withdrawals_into_transactions_queue (obj : * const platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . pool_withdrawals_into_transactions_queue } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_get_update_broadcasted_withdrawal_statuses (obj : * const platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_broadcasted_withdrawal_statuses } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_get_append_signatures_and_broadcast_withdrawal_transactions (obj : * const platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . append_signatures_and_broadcast_withdrawal_transactions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_set_build_untied_withdrawal_transactions_from_documents (obj : * mut platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . build_untied_withdrawal_transactions_from_documents = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_set_dequeue_and_build_unsigned_withdrawal_transactions (obj : * mut platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . dequeue_and_build_unsigned_withdrawal_transactions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_set_fetch_transactions_block_inclusion_status (obj : * mut platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_transactions_block_inclusion_status = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_set_pool_withdrawals_into_transactions_queue (obj : * mut platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . pool_withdrawals_into_transactions_queue = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_set_update_broadcasted_withdrawal_statuses (obj : * mut platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_broadcasted_withdrawal_statuses = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions_set_append_signatures_and_broadcast_withdrawal_transactions (obj : * mut platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . append_signatures_and_broadcast_withdrawal_transactions = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciMethodVersions { pub engine : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions , pub initialization : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions , pub core_based_updates : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions , pub protocol_upgrade : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions , pub block_fee_processing : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions , pub core_subsidy : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions , pub core_chain_lock : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants , pub fee_pool_inwards_distribution : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions , pub fee_pool_outwards_distribution : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions , pub withdrawals : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions , pub state_transition_processing : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions , pub epoch : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions , pub block_start : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions , pub block_end : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions , pub platform_state_storage : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciMethodVersions { engine : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . engine) , initialization : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . initialization) , core_based_updates : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . core_based_updates) , protocol_upgrade : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . protocol_upgrade) , block_fee_processing : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . block_fee_processing) , core_subsidy : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . core_subsidy) , core_chain_lock : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . core_chain_lock) , fee_pool_inwards_distribution : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fee_pool_inwards_distribution) , fee_pool_outwards_distribution : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fee_pool_outwards_distribution) , withdrawals : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . withdrawals) , state_transition_processing : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . state_transition_processing) , epoch : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . epoch) , block_start : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . block_start) , block_end : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . block_end) , platform_state_storage : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . platform_state_storage) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciMethodVersions { engine : ferment_interfaces :: FFIConversion :: ffi_to (obj . engine) , initialization : ferment_interfaces :: FFIConversion :: ffi_to (obj . initialization) , core_based_updates : ferment_interfaces :: FFIConversion :: ffi_to (obj . core_based_updates) , protocol_upgrade : ferment_interfaces :: FFIConversion :: ffi_to (obj . protocol_upgrade) , block_fee_processing : ferment_interfaces :: FFIConversion :: ffi_to (obj . block_fee_processing) , core_subsidy : ferment_interfaces :: FFIConversion :: ffi_to (obj . core_subsidy) , core_chain_lock : ferment_interfaces :: FFIConversion :: ffi_to (obj . core_chain_lock) , fee_pool_inwards_distribution : ferment_interfaces :: FFIConversion :: ffi_to (obj . fee_pool_inwards_distribution) , fee_pool_outwards_distribution : ferment_interfaces :: FFIConversion :: ffi_to (obj . fee_pool_outwards_distribution) , withdrawals : ferment_interfaces :: FFIConversion :: ffi_to (obj . withdrawals) , state_transition_processing : ferment_interfaces :: FFIConversion :: ffi_to (obj . state_transition_processing) , epoch : ferment_interfaces :: FFIConversion :: ffi_to (obj . epoch) , block_start : ferment_interfaces :: FFIConversion :: ffi_to (obj . block_start) , block_end : ferment_interfaces :: FFIConversion :: ffi_to (obj . block_end) , platform_state_storage : ferment_interfaces :: FFIConversion :: ffi_to (obj . platform_state_storage) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . engine) ; ; ferment_interfaces :: unbox_any (ffi_ref . initialization) ; ; ferment_interfaces :: unbox_any (ffi_ref . core_based_updates) ; ; ferment_interfaces :: unbox_any (ffi_ref . protocol_upgrade) ; ; ferment_interfaces :: unbox_any (ffi_ref . block_fee_processing) ; ; ferment_interfaces :: unbox_any (ffi_ref . core_subsidy) ; ; ferment_interfaces :: unbox_any (ffi_ref . core_chain_lock) ; ; ferment_interfaces :: unbox_any (ffi_ref . fee_pool_inwards_distribution) ; ; ferment_interfaces :: unbox_any (ffi_ref . fee_pool_outwards_distribution) ; ; ferment_interfaces :: unbox_any (ffi_ref . withdrawals) ; ; ferment_interfaces :: unbox_any (ffi_ref . state_transition_processing) ; ; ferment_interfaces :: unbox_any (ffi_ref . epoch) ; ; ferment_interfaces :: unbox_any (ffi_ref . block_start) ; ; ferment_interfaces :: unbox_any (ffi_ref . block_end) ; ; ferment_interfaces :: unbox_any (ffi_ref . platform_state_storage) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_ctor (engine : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions , initialization : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions , core_based_updates : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions , protocol_upgrade : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions , block_fee_processing : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions , core_subsidy : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions , core_chain_lock : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants , fee_pool_inwards_distribution : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions , fee_pool_outwards_distribution : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions , withdrawals : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions , state_transition_processing : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions , epoch : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions , block_start : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions , block_end : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions , platform_state_storage : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions) -> * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciMethodVersions { engine , initialization , core_based_updates , protocol_upgrade , block_fee_processing , core_subsidy , core_chain_lock , fee_pool_inwards_distribution , fee_pool_outwards_distribution , withdrawals , state_transition_processing , epoch , block_start , block_end , platform_state_storage }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_engine (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions { (* obj) . engine } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_initialization (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions { (* obj) . initialization } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_core_based_updates (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions { (* obj) . core_based_updates } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_protocol_upgrade (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions { (* obj) . protocol_upgrade } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_block_fee_processing (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions { (* obj) . block_fee_processing } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_core_subsidy (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions { (* obj) . core_subsidy } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_core_chain_lock (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants { (* obj) . core_chain_lock } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_fee_pool_inwards_distribution (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions { (* obj) . fee_pool_inwards_distribution } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_fee_pool_outwards_distribution (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions { (* obj) . fee_pool_outwards_distribution } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_withdrawals (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions { (* obj) . withdrawals } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_state_transition_processing (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions { (* obj) . state_transition_processing } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_epoch (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions { (* obj) . epoch } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_block_start (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions { (* obj) . block_start } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_block_end (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions { (* obj) . block_end } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_get_platform_state_storage (obj : * const platform_version_version_drive_abci_versions_DriveAbciMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions { (* obj) . platform_state_storage } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_engine (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions) { (* obj) . engine = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_initialization (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions) { (* obj) . initialization = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_core_based_updates (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions) { (* obj) . core_based_updates = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_protocol_upgrade (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions) { (* obj) . protocol_upgrade = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_block_fee_processing (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockFeeProcessingMethodVersions) { (* obj) . block_fee_processing = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_core_subsidy (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions) { (* obj) . core_subsidy = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_core_chain_lock (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciCoreChainLockMethodVersionsAndConstants) { (* obj) . core_chain_lock = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_fee_pool_inwards_distribution (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions) { (* obj) . fee_pool_inwards_distribution = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_fee_pool_outwards_distribution (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciFeePoolOutwardsDistributionMethodVersions) { (* obj) . fee_pool_outwards_distribution = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_withdrawals (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciIdentityCreditWithdrawalMethodVersions) { (* obj) . withdrawals = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_state_transition_processing (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions) { (* obj) . state_transition_processing = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_epoch (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciEpochMethodVersions) { (* obj) . epoch = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_block_start (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions) { (* obj) . block_start = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_block_end (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciBlockEndMethodVersions) { (* obj) . block_end = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMethodVersions_set_platform_state_storage (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciPlatformStateStorageMethodVersions) { (* obj) . platform_state_storage = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciProtocolUpgradeMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions { pub check_for_desired_protocol_upgrade : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciProtocolUpgradeMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciProtocolUpgradeMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciProtocolUpgradeMethodVersions { check_for_desired_protocol_upgrade : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . check_for_desired_protocol_upgrade) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciProtocolUpgradeMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions { check_for_desired_protocol_upgrade : ferment_interfaces :: FFIConversion :: ffi_to (obj . check_for_desired_protocol_upgrade) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . check_for_desired_protocol_upgrade) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions_ctor (check_for_desired_protocol_upgrade : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions { check_for_desired_protocol_upgrade }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions_get_check_for_desired_protocol_upgrade (obj : * const platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . check_for_desired_protocol_upgrade } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions_set_check_for_desired_protocol_upgrade (obj : * mut platform_version_version_drive_abci_versions_DriveAbciProtocolUpgradeMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . check_for_desired_protocol_upgrade = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciAssetLockValidationVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions { pub fetch_asset_lock_transaction_output_sync : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciAssetLockValidationVersions > for platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciAssetLockValidationVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciAssetLockValidationVersions { fetch_asset_lock_transaction_output_sync : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fetch_asset_lock_transaction_output_sync) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciAssetLockValidationVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions { fetch_asset_lock_transaction_output_sync : ferment_interfaces :: FFIConversion :: ffi_to (obj . fetch_asset_lock_transaction_output_sync) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . fetch_asset_lock_transaction_output_sync) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions_ctor (fetch_asset_lock_transaction_output_sync : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions { fetch_asset_lock_transaction_output_sync }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions_get_fetch_asset_lock_transaction_output_sync (obj : * const platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . fetch_asset_lock_transaction_output_sync } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions_set_fetch_asset_lock_transaction_output_sync (obj : * mut platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . fetch_asset_lock_transaction_output_sync = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciFeePoolInwardsDistributionMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions { pub add_distribute_block_fees_into_pools_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub add_distribute_storage_fee_to_epochs_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolInwardsDistributionMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolInwardsDistributionMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolInwardsDistributionMethodVersions { add_distribute_block_fees_into_pools_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_distribute_block_fees_into_pools_operations) , add_distribute_storage_fee_to_epochs_operations : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_distribute_storage_fee_to_epochs_operations) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciFeePoolInwardsDistributionMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions { add_distribute_block_fees_into_pools_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_distribute_block_fees_into_pools_operations) , add_distribute_storage_fee_to_epochs_operations : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_distribute_storage_fee_to_epochs_operations) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . add_distribute_block_fees_into_pools_operations) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_distribute_storage_fee_to_epochs_operations) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions_ctor (add_distribute_block_fees_into_pools_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , add_distribute_storage_fee_to_epochs_operations : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions { add_distribute_block_fees_into_pools_operations , add_distribute_storage_fee_to_epochs_operations }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions_get_add_distribute_block_fees_into_pools_operations (obj : * const platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_distribute_block_fees_into_pools_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions_get_add_distribute_storage_fee_to_epochs_operations (obj : * const platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . add_distribute_storage_fee_to_epochs_operations } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions_set_add_distribute_block_fees_into_pools_operations (obj : * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_distribute_block_fees_into_pools_operations = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions_set_add_distribute_storage_fee_to_epochs_operations (obj : * mut platform_version_version_drive_abci_versions_DriveAbciFeePoolInwardsDistributionMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . add_distribute_storage_fee_to_epochs_operations = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciEngineMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions { pub init_chain : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub check_tx : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub run_block_proposal : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub finalize_block_proposal : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciEngineMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciEngineMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciEngineMethodVersions { init_chain : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . init_chain) , check_tx : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . check_tx) , run_block_proposal : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . run_block_proposal) , finalize_block_proposal : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . finalize_block_proposal) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciEngineMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions { init_chain : ferment_interfaces :: FFIConversion :: ffi_to (obj . init_chain) , check_tx : ferment_interfaces :: FFIConversion :: ffi_to (obj . check_tx) , run_block_proposal : ferment_interfaces :: FFIConversion :: ffi_to (obj . run_block_proposal) , finalize_block_proposal : ferment_interfaces :: FFIConversion :: ffi_to (obj . finalize_block_proposal) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . init_chain) ; ; ferment_interfaces :: unbox_any (ffi_ref . check_tx) ; ; ferment_interfaces :: unbox_any (ffi_ref . run_block_proposal) ; ; ferment_interfaces :: unbox_any (ffi_ref . finalize_block_proposal) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions_ctor (init_chain : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , check_tx : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , run_block_proposal : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , finalize_block_proposal : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions { init_chain , check_tx , run_block_proposal , finalize_block_proposal }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions_get_init_chain (obj : * const platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . init_chain } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions_get_check_tx (obj : * const platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . check_tx } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions_get_run_block_proposal (obj : * const platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . run_block_proposal } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions_get_finalize_block_proposal (obj : * const platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . finalize_block_proposal } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions_set_init_chain (obj : * mut platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . init_chain = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions_set_check_tx (obj : * mut platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . check_tx = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions_set_run_block_proposal (obj : * mut platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . run_block_proposal = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions_set_finalize_block_proposal (obj : * mut platform_version_version_drive_abci_versions_DriveAbciEngineMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . finalize_block_proposal = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciMasternodeIdentitiesUpdatesMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions { pub get_voter_identity_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_operator_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_owner_identity_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_voter_identifier : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub get_operator_identifier : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_operator_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_owner_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_voter_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub hash_protxhash_with_key_data : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub disable_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_masternode_identities : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_operator_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_owner_withdrawal_address : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_voter_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciMasternodeIdentitiesUpdatesMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciMasternodeIdentitiesUpdatesMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciMasternodeIdentitiesUpdatesMethodVersions { get_voter_identity_key : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_voter_identity_key) , get_operator_identity_keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_operator_identity_keys) , get_owner_identity_key : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_owner_identity_key) , get_voter_identifier : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_voter_identifier) , get_operator_identifier : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . get_operator_identifier) , create_operator_identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . create_operator_identity) , create_owner_identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . create_owner_identity) , create_voter_identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . create_voter_identity) , hash_protxhash_with_key_data : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . hash_protxhash_with_key_data) , disable_identity_keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . disable_identity_keys) , update_masternode_identities : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update_masternode_identities) , update_operator_identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update_operator_identity) , update_owner_withdrawal_address : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update_owner_withdrawal_address) , update_voter_identity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update_voter_identity) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions { get_voter_identity_key : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_voter_identity_key) , get_operator_identity_keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_operator_identity_keys) , get_owner_identity_key : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_owner_identity_key) , get_voter_identifier : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_voter_identifier) , get_operator_identifier : ferment_interfaces :: FFIConversion :: ffi_to (obj . get_operator_identifier) , create_operator_identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . create_operator_identity) , create_owner_identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . create_owner_identity) , create_voter_identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . create_voter_identity) , hash_protxhash_with_key_data : ferment_interfaces :: FFIConversion :: ffi_to (obj . hash_protxhash_with_key_data) , disable_identity_keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . disable_identity_keys) , update_masternode_identities : ferment_interfaces :: FFIConversion :: ffi_to (obj . update_masternode_identities) , update_operator_identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . update_operator_identity) , update_owner_withdrawal_address : ferment_interfaces :: FFIConversion :: ffi_to (obj . update_owner_withdrawal_address) , update_voter_identity : ferment_interfaces :: FFIConversion :: ffi_to (obj . update_voter_identity) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . get_voter_identity_key) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_operator_identity_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_owner_identity_key) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_voter_identifier) ; ; ferment_interfaces :: unbox_any (ffi_ref . get_operator_identifier) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_operator_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_owner_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_voter_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . hash_protxhash_with_key_data) ; ; ferment_interfaces :: unbox_any (ffi_ref . disable_identity_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_masternode_identities) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_operator_identity) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_owner_withdrawal_address) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_voter_identity) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_ctor (get_voter_identity_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_operator_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_owner_identity_key : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_voter_identifier : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , get_operator_identifier : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_operator_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_owner_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_voter_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , hash_protxhash_with_key_data : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , disable_identity_keys : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_masternode_identities : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_operator_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_owner_withdrawal_address : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_voter_identity : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions { get_voter_identity_key , get_operator_identity_keys , get_owner_identity_key , get_voter_identifier , get_operator_identifier , create_operator_identity , create_owner_identity , create_voter_identity , hash_protxhash_with_key_data , disable_identity_keys , update_masternode_identities , update_operator_identity , update_owner_withdrawal_address , update_voter_identity }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_get_voter_identity_key (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_voter_identity_key } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_get_operator_identity_keys (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_operator_identity_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_get_owner_identity_key (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_owner_identity_key } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_get_voter_identifier (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_voter_identifier } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_get_operator_identifier (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . get_operator_identifier } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_create_operator_identity (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_operator_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_create_owner_identity (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_owner_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_create_voter_identity (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_voter_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_hash_protxhash_with_key_data (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . hash_protxhash_with_key_data } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_disable_identity_keys (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . disable_identity_keys } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_update_masternode_identities (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_masternode_identities } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_update_operator_identity (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_operator_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_update_owner_withdrawal_address (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_owner_withdrawal_address } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_get_update_voter_identity (obj : * const platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_voter_identity } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_get_voter_identity_key (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_voter_identity_key = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_get_operator_identity_keys (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_operator_identity_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_get_owner_identity_key (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_owner_identity_key = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_get_voter_identifier (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_voter_identifier = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_get_operator_identifier (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . get_operator_identifier = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_create_operator_identity (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_operator_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_create_owner_identity (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_owner_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_create_voter_identity (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_voter_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_hash_protxhash_with_key_data (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . hash_protxhash_with_key_data = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_disable_identity_keys (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . disable_identity_keys = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_update_masternode_identities (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_masternode_identities = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_update_operator_identity (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_operator_identity = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_update_owner_withdrawal_address (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_owner_withdrawal_address = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions_set_update_voter_identity (obj : * mut platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_voter_identity = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciValidationDataTriggerAndBindingVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions { pub bindings : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub triggers : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerAndBindingVersions > for platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerAndBindingVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerAndBindingVersions { bindings : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . bindings) , triggers : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . triggers) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerAndBindingVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions { bindings : ferment_interfaces :: FFIConversion :: ffi_to (obj . bindings) , triggers : ferment_interfaces :: FFIConversion :: ffi_to (obj . triggers) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . bindings) ; ; ferment_interfaces :: unbox_any (ffi_ref . triggers) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions_ctor (bindings : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , triggers : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) -> * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions { bindings , triggers }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions_get_bindings (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . bindings } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions_get_triggers (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions { (* obj) . triggers } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions_set_bindings (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . bindings = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions_set_triggers (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) { (* obj) . triggers = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciBlockStartMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions { pub clear_drive_block_cache : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciBlockStartMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciBlockStartMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciBlockStartMethodVersions { clear_drive_block_cache : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . clear_drive_block_cache) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciBlockStartMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions { clear_drive_block_cache : ferment_interfaces :: FFIConversion :: ffi_to (obj . clear_drive_block_cache) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . clear_drive_block_cache) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions_ctor (clear_drive_block_cache : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions { clear_drive_block_cache }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions_get_clear_drive_block_cache (obj : * const platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . clear_drive_block_cache } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions_set_clear_drive_block_cache (obj : * mut platform_version_version_drive_abci_versions_DriveAbciBlockStartMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . clear_drive_block_cache = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciQueryVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciQueryVersions { pub response_metadata : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub base_query_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub proofs_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub document_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , pub identity_based_queries : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions , pub data_contract_based_queries : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions , pub system : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciQueryVersions > for platform_version_version_drive_abci_versions_DriveAbciQueryVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciQueryVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciQueryVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciQueryVersions { response_metadata : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . response_metadata) , base_query_structure : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . base_query_structure) , proofs_query : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . proofs_query) , document_query : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_query) , identity_based_queries : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_based_queries) , data_contract_based_queries : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract_based_queries) , system : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . system) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciQueryVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciQueryVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciQueryVersions { response_metadata : ferment_interfaces :: FFIConversion :: ffi_to (obj . response_metadata) , base_query_structure : ferment_interfaces :: FFIConversion :: ffi_to (obj . base_query_structure) , proofs_query : ferment_interfaces :: FFIConversion :: ffi_to (obj . proofs_query) , document_query : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_query) , identity_based_queries : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_based_queries) , data_contract_based_queries : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract_based_queries) , system : ferment_interfaces :: FFIConversion :: ffi_to (obj . system) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciQueryVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . response_metadata) ; ; ferment_interfaces :: unbox_any (ffi_ref . base_query_structure) ; ; ferment_interfaces :: unbox_any (ffi_ref . proofs_query) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_query) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_based_queries) ; ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_based_queries) ; ; ferment_interfaces :: unbox_any (ffi_ref . system) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_ctor (response_metadata : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , base_query_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , proofs_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , document_query : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds , identity_based_queries : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions , data_contract_based_queries : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions , system : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions) -> * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciQueryVersions { response_metadata , base_query_structure , proofs_query , document_query , identity_based_queries , data_contract_based_queries , system }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_get_response_metadata (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . response_metadata } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_get_base_query_structure (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . base_query_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_get_proofs_query (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . proofs_query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_get_document_query (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds { (* obj) . document_query } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_get_identity_based_queries (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions { (* obj) . identity_based_queries } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_get_data_contract_based_queries (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions { (* obj) . data_contract_based_queries } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_get_system (obj : * const platform_version_version_drive_abci_versions_DriveAbciQueryVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions { (* obj) . system } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_set_response_metadata (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . response_metadata = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_set_base_query_structure (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . base_query_structure = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_set_proofs_query (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . proofs_query = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_set_document_query (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersionBounds) { (* obj) . document_query = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_set_identity_based_queries (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryIdentityVersions) { (* obj) . identity_based_queries = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_set_data_contract_based_queries (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQueryDataContractVersions) { (* obj) . data_contract_based_queries = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciQueryVersions_set_system (obj : * mut platform_version_version_drive_abci_versions_DriveAbciQueryVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciQuerySystemVersions) { (* obj) . system = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciStateTransitionValidationVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { pub structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub identity_signatures : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion , pub state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub transform_into_action : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersion > for platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) -> platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersion { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersion { structure : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . structure) , identity_signatures : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_signatures) , state : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . state) , transform_into_action : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . transform_into_action) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersion) -> * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { structure : ferment_interfaces :: FFIConversion :: ffi_to (obj . structure) , identity_signatures : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_signatures) , state : ferment_interfaces :: FFIConversion :: ffi_to (obj . state) , transform_into_action : ferment_interfaces :: FFIConversion :: ffi_to (obj . transform_into_action) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . structure) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_signatures) ; ; ferment_interfaces :: unbox_any (ffi_ref . state) ; ; ferment_interfaces :: unbox_any (ffi_ref . transform_into_action) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_ctor (structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , identity_signatures : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion , state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , transform_into_action : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { structure , identity_signatures , state , transform_into_action }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_get_structure (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_get_identity_signatures (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion { (* obj) . identity_signatures } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_get_state (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_get_transform_into_action (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . transform_into_action } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_set_structure (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . structure = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_set_identity_signatures (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_OptionalFeatureVersion) { (* obj) . identity_signatures = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_set_state (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . state = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion_set_transform_into_action (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . transform_into_action = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciValidationDataTriggerVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions { pub create_contact_request_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_domain_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_identity_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_feature_flag_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_masternode_reward_shares_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub delete_withdrawal_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub reject_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerVersions > for platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerVersions { create_contact_request_data_trigger : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . create_contact_request_data_trigger) , create_domain_data_trigger : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . create_domain_data_trigger) , create_identity_data_trigger : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . create_identity_data_trigger) , create_feature_flag_data_trigger : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . create_feature_flag_data_trigger) , create_masternode_reward_shares_data_trigger : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . create_masternode_reward_shares_data_trigger) , delete_withdrawal_data_trigger : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . delete_withdrawal_data_trigger) , reject_data_trigger : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . reject_data_trigger) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciValidationDataTriggerVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions { create_contact_request_data_trigger : ferment_interfaces :: FFIConversion :: ffi_to (obj . create_contact_request_data_trigger) , create_domain_data_trigger : ferment_interfaces :: FFIConversion :: ffi_to (obj . create_domain_data_trigger) , create_identity_data_trigger : ferment_interfaces :: FFIConversion :: ffi_to (obj . create_identity_data_trigger) , create_feature_flag_data_trigger : ferment_interfaces :: FFIConversion :: ffi_to (obj . create_feature_flag_data_trigger) , create_masternode_reward_shares_data_trigger : ferment_interfaces :: FFIConversion :: ffi_to (obj . create_masternode_reward_shares_data_trigger) , delete_withdrawal_data_trigger : ferment_interfaces :: FFIConversion :: ffi_to (obj . delete_withdrawal_data_trigger) , reject_data_trigger : ferment_interfaces :: FFIConversion :: ffi_to (obj . reject_data_trigger) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . create_contact_request_data_trigger) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_domain_data_trigger) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_identity_data_trigger) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_feature_flag_data_trigger) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_masternode_reward_shares_data_trigger) ; ; ferment_interfaces :: unbox_any (ffi_ref . delete_withdrawal_data_trigger) ; ; ferment_interfaces :: unbox_any (ffi_ref . reject_data_trigger) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_ctor (create_contact_request_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_domain_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_identity_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_feature_flag_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_masternode_reward_shares_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , delete_withdrawal_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , reject_data_trigger : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions { create_contact_request_data_trigger , create_domain_data_trigger , create_identity_data_trigger , create_feature_flag_data_trigger , create_masternode_reward_shares_data_trigger , delete_withdrawal_data_trigger , reject_data_trigger }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_get_create_contact_request_data_trigger (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_contact_request_data_trigger } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_get_create_domain_data_trigger (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_domain_data_trigger } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_get_create_identity_data_trigger (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_identity_data_trigger } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_get_create_feature_flag_data_trigger (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_feature_flag_data_trigger } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_get_create_masternode_reward_shares_data_trigger (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_masternode_reward_shares_data_trigger } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_get_delete_withdrawal_data_trigger (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . delete_withdrawal_data_trigger } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_get_reject_data_trigger (obj : * const platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . reject_data_trigger } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_set_create_contact_request_data_trigger (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_contact_request_data_trigger = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_set_create_domain_data_trigger (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_domain_data_trigger = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_set_create_identity_data_trigger (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_identity_data_trigger = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_set_create_feature_flag_data_trigger (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_feature_flag_data_trigger = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_set_create_masternode_reward_shares_data_trigger (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_masternode_reward_shares_data_trigger = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_set_delete_withdrawal_data_trigger (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . delete_withdrawal_data_trigger = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions_set_reject_data_trigger (obj : * mut platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . reject_data_trigger = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciInitializationMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions { pub initial_core_height : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub create_genesis_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciInitializationMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciInitializationMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciInitializationMethodVersions { initial_core_height : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . initial_core_height) , create_genesis_state : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . create_genesis_state) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciInitializationMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions { initial_core_height : ferment_interfaces :: FFIConversion :: ffi_to (obj . initial_core_height) , create_genesis_state : ferment_interfaces :: FFIConversion :: ffi_to (obj . create_genesis_state) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . initial_core_height) ; ; ferment_interfaces :: unbox_any (ffi_ref . create_genesis_state) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions_ctor (initial_core_height : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , create_genesis_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions { initial_core_height , create_genesis_state }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions_get_initial_core_height (obj : * const platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . initial_core_height } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions_get_create_genesis_state (obj : * const platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . create_genesis_state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions_set_initial_core_height (obj : * mut platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . initial_core_height = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions_set_create_genesis_state (obj : * mut platform_version_version_drive_abci_versions_DriveAbciInitializationMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . create_genesis_state = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciCoreSubsidyMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions { pub epoch_core_reward_credits_for_distribution : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciCoreSubsidyMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciCoreSubsidyMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciCoreSubsidyMethodVersions { epoch_core_reward_credits_for_distribution : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . epoch_core_reward_credits_for_distribution) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciCoreSubsidyMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions { epoch_core_reward_credits_for_distribution : ferment_interfaces :: FFIConversion :: ffi_to (obj . epoch_core_reward_credits_for_distribution) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . epoch_core_reward_credits_for_distribution) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions_ctor (epoch_core_reward_credits_for_distribution : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions { epoch_core_reward_credits_for_distribution }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions_get_epoch_core_reward_credits_for_distribution (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . epoch_core_reward_credits_for_distribution } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions_set_epoch_core_reward_credits_for_distribution (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreSubsidyMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . epoch_core_reward_credits_for_distribution = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciDocumentsStateTransitionValidationVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions { pub structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub transform_into_action : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub data_triggers : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions , pub document_create_transition_structure_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_delete_transition_structure_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_replace_transition_structure_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_create_transition_state_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_delete_transition_state_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub document_replace_transition_state_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciDocumentsStateTransitionValidationVersions > for platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciDocumentsStateTransitionValidationVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciDocumentsStateTransitionValidationVersions { structure : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . structure) , state : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . state) , transform_into_action : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . transform_into_action) , data_triggers : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_triggers) , document_create_transition_structure_validation : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_create_transition_structure_validation) , document_delete_transition_structure_validation : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_delete_transition_structure_validation) , document_replace_transition_structure_validation : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_replace_transition_structure_validation) , document_create_transition_state_validation : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_create_transition_state_validation) , document_delete_transition_state_validation : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_delete_transition_state_validation) , document_replace_transition_state_validation : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_replace_transition_state_validation) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciDocumentsStateTransitionValidationVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions { structure : ferment_interfaces :: FFIConversion :: ffi_to (obj . structure) , state : ferment_interfaces :: FFIConversion :: ffi_to (obj . state) , transform_into_action : ferment_interfaces :: FFIConversion :: ffi_to (obj . transform_into_action) , data_triggers : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_triggers) , document_create_transition_structure_validation : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_create_transition_structure_validation) , document_delete_transition_structure_validation : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_delete_transition_structure_validation) , document_replace_transition_structure_validation : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_replace_transition_structure_validation) , document_create_transition_state_validation : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_create_transition_state_validation) , document_delete_transition_state_validation : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_delete_transition_state_validation) , document_replace_transition_state_validation : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_replace_transition_state_validation) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . structure) ; ; ferment_interfaces :: unbox_any (ffi_ref . state) ; ; ferment_interfaces :: unbox_any (ffi_ref . transform_into_action) ; ; ferment_interfaces :: unbox_any (ffi_ref . data_triggers) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_create_transition_structure_validation) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_delete_transition_structure_validation) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_replace_transition_structure_validation) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_create_transition_state_validation) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_delete_transition_state_validation) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_replace_transition_state_validation) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_ctor (structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , transform_into_action : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , data_triggers : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions , document_create_transition_structure_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_delete_transition_structure_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_replace_transition_structure_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_create_transition_state_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_delete_transition_state_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , document_replace_transition_state_validation : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions { structure , state , transform_into_action , data_triggers , document_create_transition_structure_validation , document_delete_transition_structure_validation , document_replace_transition_structure_validation , document_create_transition_state_validation , document_delete_transition_state_validation , document_replace_transition_state_validation }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_structure (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_state (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_transform_into_action (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . transform_into_action } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_data_triggers (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions { (* obj) . data_triggers } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_document_create_transition_structure_validation (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_create_transition_structure_validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_document_delete_transition_structure_validation (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_delete_transition_structure_validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_document_replace_transition_structure_validation (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_replace_transition_structure_validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_document_create_transition_state_validation (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_create_transition_state_validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_document_delete_transition_state_validation (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_delete_transition_state_validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_get_document_replace_transition_state_validation (obj : * const platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . document_replace_transition_state_validation } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_structure (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . structure = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_state (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . state = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_transform_into_action (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . transform_into_action = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_data_triggers (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciValidationDataTriggerAndBindingVersions) { (* obj) . data_triggers = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_document_create_transition_structure_validation (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_create_transition_structure_validation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_document_delete_transition_structure_validation (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_delete_transition_structure_validation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_document_replace_transition_structure_validation (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_replace_transition_structure_validation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_document_create_transition_state_validation (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_create_transition_state_validation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_document_delete_transition_state_validation (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_delete_transition_state_validation = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions_set_document_replace_transition_state_validation (obj : * mut platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . document_replace_transition_state_validation = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciStateTransitionProcessingMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions { pub execute_event : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub process_raw_state_transitions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_fees_of_event : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionProcessingMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionProcessingMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionProcessingMethodVersions { execute_event : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . execute_event) , process_raw_state_transitions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . process_raw_state_transitions) , validate_fees_of_event : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_fees_of_event) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionProcessingMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions { execute_event : ferment_interfaces :: FFIConversion :: ffi_to (obj . execute_event) , process_raw_state_transitions : ferment_interfaces :: FFIConversion :: ffi_to (obj . process_raw_state_transitions) , validate_fees_of_event : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_fees_of_event) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . execute_event) ; ; ferment_interfaces :: unbox_any (ffi_ref . process_raw_state_transitions) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_fees_of_event) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions_ctor (execute_event : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , process_raw_state_transitions : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_fees_of_event : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions { execute_event , process_raw_state_transitions , validate_fees_of_event }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions_get_execute_event (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . execute_event } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions_get_process_raw_state_transitions (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . process_raw_state_transitions } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions_get_validate_fees_of_event (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_fees_of_event } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions_set_execute_event (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . execute_event = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions_set_process_raw_state_transitions (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . process_raw_state_transitions = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions_set_validate_fees_of_event (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionProcessingMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_fees_of_event = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciCoreBasedUpdatesMethodVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions { pub update_core_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_masternode_list : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub update_quorum_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub masternode_updates : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciCoreBasedUpdatesMethodVersions > for platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciCoreBasedUpdatesMethodVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciCoreBasedUpdatesMethodVersions { update_core_info : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update_core_info) , update_masternode_list : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update_masternode_list) , update_quorum_info : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . update_quorum_info) , masternode_updates : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . masternode_updates) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciCoreBasedUpdatesMethodVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions { update_core_info : ferment_interfaces :: FFIConversion :: ffi_to (obj . update_core_info) , update_masternode_list : ferment_interfaces :: FFIConversion :: ffi_to (obj . update_masternode_list) , update_quorum_info : ferment_interfaces :: FFIConversion :: ffi_to (obj . update_quorum_info) , masternode_updates : ferment_interfaces :: FFIConversion :: ffi_to (obj . masternode_updates) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . update_core_info) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_masternode_list) ; ; ferment_interfaces :: unbox_any (ffi_ref . update_quorum_info) ; ; ferment_interfaces :: unbox_any (ffi_ref . masternode_updates) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions_ctor (update_core_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_masternode_list : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , update_quorum_info : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , masternode_updates : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) -> * mut platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions { update_core_info , update_masternode_list , update_quorum_info , masternode_updates }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions_get_update_core_info (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_core_info } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions_get_update_masternode_list (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_masternode_list } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions_get_update_quorum_info (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . update_quorum_info } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions_get_masternode_updates (obj : * const platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions { (* obj) . masternode_updates } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions_set_update_core_info (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_core_info = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions_set_update_masternode_list (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_masternode_list = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions_set_update_quorum_info (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . update_quorum_info = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions_set_masternode_updates (obj : * mut platform_version_version_drive_abci_versions_DriveAbciCoreBasedUpdatesMethodVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciMasternodeIdentitiesUpdatesMethodVersions) { (* obj) . masternode_updates = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciStateTransitionCommonValidationVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions { pub asset_locks : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions , pub validate_identity_public_key_contract_bounds : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_identity_public_key_ids_dont_exist_in_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_identity_public_key_ids_exist_in_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_state_transition_identity_signed : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub validate_unique_identity_public_key_hashes_in_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionCommonValidationVersions > for platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionCommonValidationVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionCommonValidationVersions { asset_locks : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . asset_locks) , validate_identity_public_key_contract_bounds : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_identity_public_key_contract_bounds) , validate_identity_public_key_ids_dont_exist_in_state : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_identity_public_key_ids_dont_exist_in_state) , validate_identity_public_key_ids_exist_in_state : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_identity_public_key_ids_exist_in_state) , validate_state_transition_identity_signed : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_state_transition_identity_signed) , validate_unique_identity_public_key_hashes_in_state : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validate_unique_identity_public_key_hashes_in_state) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionCommonValidationVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions { asset_locks : ferment_interfaces :: FFIConversion :: ffi_to (obj . asset_locks) , validate_identity_public_key_contract_bounds : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_identity_public_key_contract_bounds) , validate_identity_public_key_ids_dont_exist_in_state : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_identity_public_key_ids_dont_exist_in_state) , validate_identity_public_key_ids_exist_in_state : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_identity_public_key_ids_exist_in_state) , validate_state_transition_identity_signed : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_state_transition_identity_signed) , validate_unique_identity_public_key_hashes_in_state : ferment_interfaces :: FFIConversion :: ffi_to (obj . validate_unique_identity_public_key_hashes_in_state) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . asset_locks) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_identity_public_key_contract_bounds) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_identity_public_key_ids_dont_exist_in_state) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_identity_public_key_ids_exist_in_state) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_state_transition_identity_signed) ; ; ferment_interfaces :: unbox_any (ffi_ref . validate_unique_identity_public_key_hashes_in_state) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_ctor (asset_locks : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions , validate_identity_public_key_contract_bounds : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_identity_public_key_ids_dont_exist_in_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_identity_public_key_ids_exist_in_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_state_transition_identity_signed : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , validate_unique_identity_public_key_hashes_in_state : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions { asset_locks , validate_identity_public_key_contract_bounds , validate_identity_public_key_ids_dont_exist_in_state , validate_identity_public_key_ids_exist_in_state , validate_state_transition_identity_signed , validate_unique_identity_public_key_hashes_in_state }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_get_asset_locks (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions { (* obj) . asset_locks } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_get_validate_identity_public_key_contract_bounds (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_identity_public_key_contract_bounds } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_get_validate_identity_public_key_ids_dont_exist_in_state (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_identity_public_key_ids_dont_exist_in_state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_get_validate_identity_public_key_ids_exist_in_state (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_identity_public_key_ids_exist_in_state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_get_validate_state_transition_identity_signed (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_state_transition_identity_signed } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_get_validate_unique_identity_public_key_hashes_in_state (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . validate_unique_identity_public_key_hashes_in_state } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_set_asset_locks (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciAssetLockValidationVersions) { (* obj) . asset_locks = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_set_validate_identity_public_key_contract_bounds (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_identity_public_key_contract_bounds = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_set_validate_identity_public_key_ids_dont_exist_in_state (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_identity_public_key_ids_dont_exist_in_state = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_set_validate_identity_public_key_ids_exist_in_state (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_identity_public_key_ids_exist_in_state = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_set_validate_state_transition_identity_signed (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_state_transition_identity_signed = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions_set_validate_unique_identity_public_key_hashes_in_state (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . validate_unique_identity_public_key_hashes_in_state = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciStructureVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciStructureVersions { pub platform_state_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub platform_state_for_saving_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub state_transition_execution_context : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub commit : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , pub masternode : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciStructureVersions > for platform_version_version_drive_abci_versions_DriveAbciStructureVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciStructureVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciStructureVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciStructureVersions { platform_state_structure : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . platform_state_structure) , platform_state_for_saving_structure : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . platform_state_for_saving_structure) , state_transition_execution_context : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . state_transition_execution_context) , commit : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . commit) , masternode : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . masternode) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciStructureVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciStructureVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciStructureVersions { platform_state_structure : ferment_interfaces :: FFIConversion :: ffi_to (obj . platform_state_structure) , platform_state_for_saving_structure : ferment_interfaces :: FFIConversion :: ffi_to (obj . platform_state_for_saving_structure) , state_transition_execution_context : ferment_interfaces :: FFIConversion :: ffi_to (obj . state_transition_execution_context) , commit : ferment_interfaces :: FFIConversion :: ffi_to (obj . commit) , masternode : ferment_interfaces :: FFIConversion :: ffi_to (obj . masternode) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciStructureVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciStructureVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . platform_state_structure) ; ; ferment_interfaces :: unbox_any (ffi_ref . platform_state_for_saving_structure) ; ; ferment_interfaces :: unbox_any (ffi_ref . state_transition_execution_context) ; ; ferment_interfaces :: unbox_any (ffi_ref . commit) ; ; ferment_interfaces :: unbox_any (ffi_ref . masternode) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_ctor (platform_state_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , platform_state_for_saving_structure : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , state_transition_execution_context : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , commit : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion , masternode : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut platform_version_version_drive_abci_versions_DriveAbciStructureVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciStructureVersions { platform_state_structure , platform_state_for_saving_structure , state_transition_execution_context , commit , masternode }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciStructureVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_get_platform_state_structure (obj : * const platform_version_version_drive_abci_versions_DriveAbciStructureVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . platform_state_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_get_platform_state_for_saving_structure (obj : * const platform_version_version_drive_abci_versions_DriveAbciStructureVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . platform_state_for_saving_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_get_state_transition_execution_context (obj : * const platform_version_version_drive_abci_versions_DriveAbciStructureVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . state_transition_execution_context } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_get_commit (obj : * const platform_version_version_drive_abci_versions_DriveAbciStructureVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . commit } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_get_masternode (obj : * const platform_version_version_drive_abci_versions_DriveAbciStructureVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion { (* obj) . masternode } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_set_platform_state_structure (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStructureVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . platform_state_structure = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_set_platform_state_for_saving_structure (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStructureVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . platform_state_for_saving_structure = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_set_state_transition_execution_context (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStructureVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . state_transition_execution_context = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_set_commit (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStructureVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . commit = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStructureVersions_set_masternode (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStructureVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) { (* obj) . masternode = value ; } # [doc = "FFI-representation of the [`platform_version::version::drive_abci_versions::DriveAbciStateTransitionValidationVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions { pub common_validation_methods : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions , pub identity_create_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , pub identity_update_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , pub identity_top_up_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , pub identity_credit_withdrawal_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , pub identity_credit_transfer_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , pub contract_create_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , pub contract_update_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , pub documents_batch_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions } impl ferment_interfaces :: FFIConversion < platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersions > for platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersions { let ffi_ref = & * ffi ; platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersions { common_validation_methods : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . common_validation_methods) , identity_create_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_create_state_transition) , identity_update_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_update_state_transition) , identity_top_up_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_top_up_state_transition) , identity_credit_withdrawal_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_credit_withdrawal_state_transition) , identity_credit_transfer_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_credit_transfer_state_transition) , contract_create_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . contract_create_state_transition) , contract_update_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . contract_update_state_transition) , documents_batch_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . documents_batch_state_transition) } } unsafe fn ffi_to_const (obj : platform_version :: version :: drive_abci_versions :: DriveAbciStateTransitionValidationVersions) -> * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions { common_validation_methods : ferment_interfaces :: FFIConversion :: ffi_to (obj . common_validation_methods) , identity_create_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_create_state_transition) , identity_update_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_update_state_transition) , identity_top_up_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_top_up_state_transition) , identity_credit_withdrawal_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_credit_withdrawal_state_transition) , identity_credit_transfer_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_credit_transfer_state_transition) , contract_create_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . contract_create_state_transition) , contract_update_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . contract_update_state_transition) , documents_batch_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . documents_batch_state_transition) }) } unsafe fn destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . common_validation_methods) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_create_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_update_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_top_up_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_credit_withdrawal_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_credit_transfer_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . contract_create_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . contract_update_state_transition) ; ; ferment_interfaces :: unbox_any (ffi_ref . documents_batch_state_transition) ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_ctor (common_validation_methods : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions , identity_create_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , identity_update_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , identity_top_up_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , identity_credit_withdrawal_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , identity_credit_transfer_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , contract_create_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , contract_update_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion , documents_batch_state_transition : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) -> * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions { ferment_interfaces :: boxed (platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions { common_validation_methods , identity_create_state_transition , identity_update_state_transition , identity_top_up_state_transition , identity_credit_withdrawal_state_transition , identity_credit_transfer_state_transition , contract_create_state_transition , contract_update_state_transition , documents_batch_state_transition }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_destroy (ffi : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_get_common_validation_methods (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions { (* obj) . common_validation_methods } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_get_identity_create_state_transition (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { (* obj) . identity_create_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_get_identity_update_state_transition (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { (* obj) . identity_update_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_get_identity_top_up_state_transition (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { (* obj) . identity_top_up_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_get_identity_credit_withdrawal_state_transition (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { (* obj) . identity_credit_withdrawal_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_get_identity_credit_transfer_state_transition (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { (* obj) . identity_credit_transfer_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_get_contract_create_state_transition (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { (* obj) . contract_create_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_get_contract_update_state_transition (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion { (* obj) . contract_update_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_get_documents_batch_state_transition (obj : * const platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions) -> * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions { (* obj) . documents_batch_state_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_set_common_validation_methods (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionCommonValidationVersions) { (* obj) . common_validation_methods = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_set_identity_create_state_transition (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) { (* obj) . identity_create_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_set_identity_update_state_transition (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) { (* obj) . identity_update_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_set_identity_top_up_state_transition (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) { (* obj) . identity_top_up_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_set_identity_credit_withdrawal_state_transition (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) { (* obj) . identity_credit_withdrawal_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_set_identity_credit_transfer_state_transition (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) { (* obj) . identity_credit_transfer_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_set_contract_create_state_transition (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) { (* obj) . contract_create_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_set_contract_update_state_transition (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersion) { (* obj) . contract_update_state_transition = value ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions_set_documents_batch_state_transition (obj : * mut platform_version_version_drive_abci_versions_DriveAbciStateTransitionValidationVersions , value : * mut crate :: fermented :: types :: platform_version :: version :: drive_abci_versions :: platform_version_version_drive_abci_versions_DriveAbciDocumentsStateTransitionValidationVersions) { (* obj) . documents_batch_state_transition = value ; } } } } pub mod dpp { use crate as ferment_example_platform ; pub mod withdrawal { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::withdrawal::Pooling`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_withdrawal_Pooling { Never = 0 , IfAvailable = 1 , Standard = 2 } impl ferment_interfaces :: FFIConversion < dpp :: withdrawal :: Pooling > for dpp_withdrawal_Pooling { unsafe fn ffi_from_const (ffi : * const dpp_withdrawal_Pooling) -> dpp :: withdrawal :: Pooling { let ffi_ref = & * ffi ; match ffi_ref { dpp_withdrawal_Pooling :: Never => dpp :: withdrawal :: Pooling :: Never , dpp_withdrawal_Pooling :: IfAvailable => dpp :: withdrawal :: Pooling :: IfAvailable , dpp_withdrawal_Pooling :: Standard => dpp :: withdrawal :: Pooling :: Standard } } unsafe fn ffi_to_const (obj : dpp :: withdrawal :: Pooling) -> * const dpp_withdrawal_Pooling { ferment_interfaces :: boxed (match obj { dpp :: withdrawal :: Pooling :: Never => dpp_withdrawal_Pooling :: Never , dpp :: withdrawal :: Pooling :: IfAvailable => dpp_withdrawal_Pooling :: IfAvailable , dpp :: withdrawal :: Pooling :: Standard => dpp_withdrawal_Pooling :: Standard }) } unsafe fn destroy (ffi : * mut dpp_withdrawal_Pooling) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_withdrawal_Pooling { fn drop (& mut self) { unsafe { match self { dpp_withdrawal_Pooling :: Never => { } , dpp_withdrawal_Pooling :: IfAvailable => { } , dpp_withdrawal_Pooling :: Standard => { } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_withdrawal_Pooling_Never_ctor () -> * mut dpp_withdrawal_Pooling { ferment_interfaces :: boxed (dpp_withdrawal_Pooling :: Never) } # [no_mangle] pub unsafe extern "C" fn dpp_withdrawal_Pooling_IfAvailable_ctor () -> * mut dpp_withdrawal_Pooling { ferment_interfaces :: boxed (dpp_withdrawal_Pooling :: IfAvailable) } # [no_mangle] pub unsafe extern "C" fn dpp_withdrawal_Pooling_Standard_ctor () -> * mut dpp_withdrawal_Pooling { ferment_interfaces :: boxed (dpp_withdrawal_Pooling :: Standard) } # [no_mangle] pub unsafe extern "C" fn dpp_withdrawal_Pooling_destroy (ffi : * mut dpp_withdrawal_Pooling) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod serialization { use crate as ferment_example_platform ; } pub mod validation { use crate as ferment_example_platform ; pub mod json_schema_validator { use crate as ferment_example_platform ; pub mod methods { use crate as ferment_example_platform ; pub mod compile { use crate as ferment_example_platform ; } pub mod validate { use crate as ferment_example_platform ; } pub mod new { use crate as ferment_example_platform ; } } } pub mod block_time_window { use crate as ferment_example_platform ; pub mod validate_time_in_block_time_window { use crate as ferment_example_platform ; } } } pub mod balances { use crate as ferment_example_platform ; pub mod credits { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::balances::credits::Credits`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_balances_credits_Credits (u64) ; impl ferment_interfaces :: FFIConversion < dpp :: balances :: credits :: Credits > for dpp_balances_credits_Credits { unsafe fn ffi_from_const (ffi : * const dpp_balances_credits_Credits) -> dpp :: balances :: credits :: Credits { let ffi_ref = & * ffi ; ffi_ref . 0 } unsafe fn ffi_to_const (obj : dpp :: balances :: credits :: Credits) -> * const dpp_balances_credits_Credits { ferment_interfaces :: boxed (dpp_balances_credits_Credits (obj)) } unsafe fn destroy (ffi : * mut dpp_balances_credits_Credits) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_balances_credits_Credits { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_Credits_ctor (o_0 : u64) -> * mut dpp_balances_credits_Credits { ferment_interfaces :: boxed (dpp_balances_credits_Credits (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_Credits_destroy (ffi : * mut dpp_balances_credits_Credits) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_Credits_get_0 (obj : * const dpp_balances_credits_Credits) -> u64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_Credits_set_0 (obj : * mut dpp_balances_credits_Credits , value : u64) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`dpp::balances::credits::SignedCredits`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_balances_credits_SignedCredits (i64) ; impl ferment_interfaces :: FFIConversion < dpp :: balances :: credits :: SignedCredits > for dpp_balances_credits_SignedCredits { unsafe fn ffi_from_const (ffi : * const dpp_balances_credits_SignedCredits) -> dpp :: balances :: credits :: SignedCredits { let ffi_ref = & * ffi ; ffi_ref . 0 } unsafe fn ffi_to_const (obj : dpp :: balances :: credits :: SignedCredits) -> * const dpp_balances_credits_SignedCredits { ferment_interfaces :: boxed (dpp_balances_credits_SignedCredits (obj)) } unsafe fn destroy (ffi : * mut dpp_balances_credits_SignedCredits) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_balances_credits_SignedCredits { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_SignedCredits_ctor (o_0 : i64) -> * mut dpp_balances_credits_SignedCredits { ferment_interfaces :: boxed (dpp_balances_credits_SignedCredits (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_SignedCredits_destroy (ffi : * mut dpp_balances_credits_SignedCredits) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_SignedCredits_get_0 (obj : * const dpp_balances_credits_SignedCredits) -> i64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_SignedCredits_set_0 (obj : * mut dpp_balances_credits_SignedCredits , value : i64) { (* obj) . 0 = value ; } } } pub mod metadata { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::metadata::Metadata`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_metadata_Metadata { pub block_height : u64 , pub core_chain_locked_height : u64 , pub time_ms : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , pub protocol_version : * mut crate :: fermented :: types :: dpp :: util :: deserializer :: dpp_util_deserializer_ProtocolVersion } impl ferment_interfaces :: FFIConversion < dpp :: metadata :: Metadata > for dpp_metadata_Metadata { unsafe fn ffi_from_const (ffi : * const dpp_metadata_Metadata) -> dpp :: metadata :: Metadata { let ffi_ref = & * ffi ; dpp :: metadata :: Metadata { block_height : ffi_ref . block_height , core_chain_locked_height : ffi_ref . core_chain_locked_height , time_ms : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . time_ms) , protocol_version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . protocol_version) } } unsafe fn ffi_to_const (obj : dpp :: metadata :: Metadata) -> * const dpp_metadata_Metadata { ferment_interfaces :: boxed (dpp_metadata_Metadata { block_height : obj . block_height , core_chain_locked_height : obj . core_chain_locked_height , time_ms : ferment_interfaces :: FFIConversion :: ffi_to (obj . time_ms) , protocol_version : ferment_interfaces :: FFIConversion :: ffi_to (obj . protocol_version) }) } unsafe fn destroy (ffi : * mut dpp_metadata_Metadata) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_metadata_Metadata { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ferment_interfaces :: unbox_any (ffi_ref . time_ms) ; ; ferment_interfaces :: unbox_any (ffi_ref . protocol_version) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_ctor (block_height : u64 , core_chain_locked_height : u64 , time_ms : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , protocol_version : * mut crate :: fermented :: types :: dpp :: util :: deserializer :: dpp_util_deserializer_ProtocolVersion) -> * mut dpp_metadata_Metadata { ferment_interfaces :: boxed (dpp_metadata_Metadata { block_height , core_chain_locked_height , time_ms , protocol_version }) } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_destroy (ffi : * mut dpp_metadata_Metadata) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_get_block_height (obj : * const dpp_metadata_Metadata) -> u64 { (* obj) . block_height } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_get_core_chain_locked_height (obj : * const dpp_metadata_Metadata) -> u64 { (* obj) . core_chain_locked_height } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_get_time_ms (obj : * const dpp_metadata_Metadata) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis { (* obj) . time_ms } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_get_protocol_version (obj : * const dpp_metadata_Metadata) -> * mut crate :: fermented :: types :: dpp :: util :: deserializer :: dpp_util_deserializer_ProtocolVersion { (* obj) . protocol_version } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_set_block_height (obj : * mut dpp_metadata_Metadata , value : u64) { (* obj) . block_height = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_set_core_chain_locked_height (obj : * mut dpp_metadata_Metadata , value : u64) { (* obj) . core_chain_locked_height = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_set_time_ms (obj : * mut dpp_metadata_Metadata , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis) { (* obj) . time_ms = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_set_protocol_version (obj : * mut dpp_metadata_Metadata , value : * mut crate :: fermented :: types :: dpp :: util :: deserializer :: dpp_util_deserializer_ProtocolVersion) { (* obj) . protocol_version = value ; } } pub mod document { use crate as ferment_example_platform ; pub mod extended_document { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; } pub mod fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } pub mod test { use crate as ferment_example_platform ; } } pub mod specialized_document_factory { use crate as ferment_example_platform ; } pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::document::v0::DocumentV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_document_v0_DocumentV0 { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub properties : * mut std :: collections :: BTreeMap < String , ferment_example_platform :: custom :: platform_value_Value > , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub created_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis , pub updated_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis } impl ferment_interfaces :: FFIConversion < dpp :: document :: v0 :: DocumentV0 > for dpp_document_v0_DocumentV0 { unsafe fn ffi_from_const (ffi : * const dpp_document_v0_DocumentV0) -> dpp :: document :: v0 :: DocumentV0 { let ffi_ref = & * ffi ; dpp :: document :: v0 :: DocumentV0 { id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . id) , owner_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . owner_id) , properties : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . properties) , revision : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . revision) , created_at : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . created_at) , updated_at : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . updated_at) } } unsafe fn ffi_to_const (obj : dpp :: document :: v0 :: DocumentV0) -> * const dpp_document_v0_DocumentV0 { ferment_interfaces :: boxed (dpp_document_v0_DocumentV0 { id : ferment_interfaces :: FFIConversion :: ffi_to (obj . id) , owner_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . owner_id) , properties : ferment_interfaces :: FFIConversion :: ffi_to (obj . properties) , revision : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . revision) , created_at : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . created_at) , updated_at : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . updated_at) }) } unsafe fn destroy (ffi : * mut dpp_document_v0_DocumentV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_document_v0_DocumentV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; ferment_interfaces :: unbox_any (ffi_ref . owner_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . properties) ; ; if ! (ffi_ref . revision) . is_null () { ferment_interfaces :: unbox_any (ffi_ref . revision) ; } ; if ! (ffi_ref . created_at) . is_null () { ferment_interfaces :: unbox_any (ffi_ref . created_at) ; } ; if ! (ffi_ref . updated_at) . is_null () { ferment_interfaces :: unbox_any (ffi_ref . updated_at) ; } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_ctor (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , properties : * mut std :: collections :: BTreeMap < String , ferment_example_platform :: custom :: platform_value_Value > , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , created_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis , updated_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis) -> * mut dpp_document_v0_DocumentV0 { ferment_interfaces :: boxed (dpp_document_v0_DocumentV0 { id , owner_id , properties , revision , created_at , updated_at }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_destroy (ffi : * mut dpp_document_v0_DocumentV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_id (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_owner_id (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_properties (obj : * const dpp_document_v0_DocumentV0) -> * mut std :: collections :: BTreeMap < String , ferment_example_platform :: custom :: platform_value_Value > { (* obj) . properties } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_revision (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_created_at (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis { (* obj) . created_at } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_updated_at (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis { (* obj) . updated_at } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_id (obj : * mut dpp_document_v0_DocumentV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_owner_id (obj : * mut dpp_document_v0_DocumentV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . owner_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_properties (obj : * mut dpp_document_v0_DocumentV0 , value : * mut std :: collections :: BTreeMap < String , ferment_example_platform :: custom :: platform_value_Value >) { (* obj) . properties = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_revision (obj : * mut dpp_document_v0_DocumentV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . revision = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_created_at (obj : * mut dpp_document_v0_DocumentV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis) { (* obj) . created_at = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_updated_at (obj : * mut dpp_document_v0_DocumentV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis) { (* obj) . updated_at = value ; } } pub mod accessors { use crate as ferment_example_platform ; } pub mod fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } pub mod document_factory { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp::document::Document`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_document_Document { V0 (* mut crate :: fermented :: types :: dpp :: document :: v0 :: dpp_document_v0_DocumentV0) } impl ferment_interfaces :: FFIConversion < dpp :: document :: Document > for dpp_document_Document { unsafe fn ffi_from_const (ffi : * const dpp_document_Document) -> dpp :: document :: Document { let ffi_ref = & * ffi ; match ffi_ref { dpp_document_Document :: V0 (o_0) => dpp :: document :: Document :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: document :: Document) -> * const dpp_document_Document { ferment_interfaces :: boxed (match obj { dpp :: document :: Document :: V0 (o_0) => dpp_document_Document :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_document_Document) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_document_Document { fn drop (& mut self) { unsafe { match self { dpp_document_Document :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_document_Document_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: document :: v0 :: dpp_document_v0_DocumentV0) -> * mut dpp_document_Document { ferment_interfaces :: boxed (dpp_document_Document :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_document_Document_destroy (ffi : * mut dpp_document_Document) { ferment_interfaces :: unbox_any (ffi) ; } pub mod tests { use crate as ferment_example_platform ; } pub mod document_methods { use crate as ferment_example_platform ; pub mod get_raw_for_contract { use crate as ferment_example_platform ; } pub mod hash { use crate as ferment_example_platform ; } pub mod get_raw_for_document_type { use crate as ferment_example_platform ; } } pub mod serialization_traits { use crate as ferment_example_platform ; pub mod platform_value_conversion { use crate as ferment_example_platform ; } pub mod json_conversion { use crate as ferment_example_platform ; } pub mod cbor_conversion { use crate as ferment_example_platform ; pub mod tests { use crate as ferment_example_platform ; } } pub mod platform_serialization_conversion { use crate as ferment_example_platform ; pub mod deserialize { use crate as ferment_example_platform ; } pub mod tests { use crate as ferment_example_platform ; } pub mod serialize { use crate as ferment_example_platform ; } } } pub mod errors { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::document::errors::DocumentError`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_document_errors_DocumentError { DocumentAlreadyExistsError { document_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition } , DocumentNotProvidedError { document_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition } , InvalidActionError (u8) , InvalidActionNameError { actions : * mut crate :: fermented :: generics :: Vec_String } , InvalidDocumentActionError { document_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition } , InvalidDocumentError { errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , raw_document : * mut ferment_example_platform :: custom :: platform_value_Value } , InvalidInitialRevisionError { document : * mut Box } , RevisionAbsentError { document : * mut Box } , TryingToReplaceImmutableDocument { document : * mut Box } , TryingToDeleteImmutableDocument { document : * mut Box } , MismatchOwnerIdsError { documents : * mut crate :: fermented :: generics :: Vec_dpp_document_Document } , DocumentNoRevisionError { document : * mut Box } , NoDocumentsSuppliedError } impl ferment_interfaces :: FFIConversion < dpp :: document :: errors :: DocumentError > for dpp_document_errors_DocumentError { unsafe fn ffi_from_const (ffi : * const dpp_document_errors_DocumentError) -> dpp :: document :: errors :: DocumentError { let ffi_ref = & * ffi ; match ffi_ref { dpp_document_errors_DocumentError :: DocumentAlreadyExistsError { document_transition } => dpp :: document :: errors :: DocumentError :: DocumentAlreadyExistsError { document_transition : ferment_interfaces :: FFIConversion :: ffi_from (* document_transition) } , dpp_document_errors_DocumentError :: DocumentNotProvidedError { document_transition } => dpp :: document :: errors :: DocumentError :: DocumentNotProvidedError { document_transition : ferment_interfaces :: FFIConversion :: ffi_from (* document_transition) } , dpp_document_errors_DocumentError :: InvalidActionError (o_0) => dpp :: document :: errors :: DocumentError :: InvalidActionError (* o_0) , dpp_document_errors_DocumentError :: InvalidActionNameError { actions } => dpp :: document :: errors :: DocumentError :: InvalidActionNameError { actions : ferment_interfaces :: FFIConversion :: ffi_from (* actions) } , dpp_document_errors_DocumentError :: InvalidDocumentActionError { document_transition } => dpp :: document :: errors :: DocumentError :: InvalidDocumentActionError { document_transition : ferment_interfaces :: FFIConversion :: ffi_from (* document_transition) } , dpp_document_errors_DocumentError :: InvalidDocumentError { errors , raw_document } => dpp :: document :: errors :: DocumentError :: InvalidDocumentError { errors : ferment_interfaces :: FFIConversion :: ffi_from (* errors) , raw_document : ferment_interfaces :: FFIConversion :: ffi_from (* raw_document) } , dpp_document_errors_DocumentError :: InvalidInitialRevisionError { document } => dpp :: document :: errors :: DocumentError :: InvalidInitialRevisionError { document : ferment_interfaces :: FFIConversion :: ffi_from (* document) } , dpp_document_errors_DocumentError :: RevisionAbsentError { document } => dpp :: document :: errors :: DocumentError :: RevisionAbsentError { document : ferment_interfaces :: FFIConversion :: ffi_from (* document) } , dpp_document_errors_DocumentError :: TryingToReplaceImmutableDocument { document } => dpp :: document :: errors :: DocumentError :: TryingToReplaceImmutableDocument { document : ferment_interfaces :: FFIConversion :: ffi_from (* document) } , dpp_document_errors_DocumentError :: TryingToDeleteImmutableDocument { document } => dpp :: document :: errors :: DocumentError :: TryingToDeleteImmutableDocument { document : ferment_interfaces :: FFIConversion :: ffi_from (* document) } , dpp_document_errors_DocumentError :: MismatchOwnerIdsError { documents } => dpp :: document :: errors :: DocumentError :: MismatchOwnerIdsError { documents : ferment_interfaces :: FFIConversion :: ffi_from (* documents) } , dpp_document_errors_DocumentError :: DocumentNoRevisionError { document } => dpp :: document :: errors :: DocumentError :: DocumentNoRevisionError { document : ferment_interfaces :: FFIConversion :: ffi_from (* document) } , dpp_document_errors_DocumentError :: NoDocumentsSuppliedError => dpp :: document :: errors :: DocumentError :: NoDocumentsSuppliedError } } unsafe fn ffi_to_const (obj : dpp :: document :: errors :: DocumentError) -> * const dpp_document_errors_DocumentError { ferment_interfaces :: boxed (match obj { dpp :: document :: errors :: DocumentError :: DocumentAlreadyExistsError { document_transition } => dpp_document_errors_DocumentError :: DocumentAlreadyExistsError { document_transition : ferment_interfaces :: FFIConversion :: ffi_to (document_transition) } , dpp :: document :: errors :: DocumentError :: DocumentNotProvidedError { document_transition } => dpp_document_errors_DocumentError :: DocumentNotProvidedError { document_transition : ferment_interfaces :: FFIConversion :: ffi_to (document_transition) } , dpp :: document :: errors :: DocumentError :: InvalidActionError (o_0) => dpp_document_errors_DocumentError :: InvalidActionError (o_0) , dpp :: document :: errors :: DocumentError :: InvalidActionNameError { actions } => dpp_document_errors_DocumentError :: InvalidActionNameError { actions : ferment_interfaces :: FFIConversion :: ffi_to (actions) } , dpp :: document :: errors :: DocumentError :: InvalidDocumentActionError { document_transition } => dpp_document_errors_DocumentError :: InvalidDocumentActionError { document_transition : ferment_interfaces :: FFIConversion :: ffi_to (document_transition) } , dpp :: document :: errors :: DocumentError :: InvalidDocumentError { errors , raw_document } => dpp_document_errors_DocumentError :: InvalidDocumentError { errors : ferment_interfaces :: FFIConversion :: ffi_to (errors) , raw_document : ferment_interfaces :: FFIConversion :: ffi_to (raw_document) } , dpp :: document :: errors :: DocumentError :: InvalidInitialRevisionError { document } => dpp_document_errors_DocumentError :: InvalidInitialRevisionError { document : ferment_interfaces :: FFIConversion :: ffi_to (document) } , dpp :: document :: errors :: DocumentError :: RevisionAbsentError { document } => dpp_document_errors_DocumentError :: RevisionAbsentError { document : ferment_interfaces :: FFIConversion :: ffi_to (document) } , dpp :: document :: errors :: DocumentError :: TryingToReplaceImmutableDocument { document } => dpp_document_errors_DocumentError :: TryingToReplaceImmutableDocument { document : ferment_interfaces :: FFIConversion :: ffi_to (document) } , dpp :: document :: errors :: DocumentError :: TryingToDeleteImmutableDocument { document } => dpp_document_errors_DocumentError :: TryingToDeleteImmutableDocument { document : ferment_interfaces :: FFIConversion :: ffi_to (document) } , dpp :: document :: errors :: DocumentError :: MismatchOwnerIdsError { documents } => dpp_document_errors_DocumentError :: MismatchOwnerIdsError { documents : ferment_interfaces :: FFIConversion :: ffi_to (documents) } , dpp :: document :: errors :: DocumentError :: DocumentNoRevisionError { document } => dpp_document_errors_DocumentError :: DocumentNoRevisionError { document : ferment_interfaces :: FFIConversion :: ffi_to (document) } , dpp :: document :: errors :: DocumentError :: NoDocumentsSuppliedError => dpp_document_errors_DocumentError :: NoDocumentsSuppliedError }) } unsafe fn destroy (ffi : * mut dpp_document_errors_DocumentError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_document_errors_DocumentError { fn drop (& mut self) { unsafe { match self { dpp_document_errors_DocumentError :: DocumentAlreadyExistsError { document_transition } => { ferment_interfaces :: unbox_any (* document_transition) ; } , dpp_document_errors_DocumentError :: DocumentNotProvidedError { document_transition } => { ferment_interfaces :: unbox_any (* document_transition) ; } , dpp_document_errors_DocumentError :: InvalidActionError (o_0) => { } , dpp_document_errors_DocumentError :: InvalidActionNameError { actions } => { ferment_interfaces :: unbox_any (* actions) ; } , dpp_document_errors_DocumentError :: InvalidDocumentActionError { document_transition } => { ferment_interfaces :: unbox_any (* document_transition) ; } , dpp_document_errors_DocumentError :: InvalidDocumentError { errors , raw_document } => { ferment_interfaces :: unbox_any (* errors) ; ; ferment_interfaces :: unbox_any (* raw_document) ; } , dpp_document_errors_DocumentError :: InvalidInitialRevisionError { document } => { ferment_interfaces :: unbox_any (* document) ; } , dpp_document_errors_DocumentError :: RevisionAbsentError { document } => { ferment_interfaces :: unbox_any (* document) ; } , dpp_document_errors_DocumentError :: TryingToReplaceImmutableDocument { document } => { ferment_interfaces :: unbox_any (* document) ; } , dpp_document_errors_DocumentError :: TryingToDeleteImmutableDocument { document } => { ferment_interfaces :: unbox_any (* document) ; } , dpp_document_errors_DocumentError :: MismatchOwnerIdsError { documents } => { ferment_interfaces :: unbox_any (* documents) ; } , dpp_document_errors_DocumentError :: DocumentNoRevisionError { document } => { ferment_interfaces :: unbox_any (* document) ; } , dpp_document_errors_DocumentError :: NoDocumentsSuppliedError => { } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_DocumentAlreadyExistsError_ctor (document_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: DocumentAlreadyExistsError { document_transition }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_DocumentNotProvidedError_ctor (document_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: DocumentNotProvidedError { document_transition }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_InvalidActionError_ctor (o_0 : u8) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: InvalidActionError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_InvalidActionNameError_ctor (actions : * mut crate :: fermented :: generics :: Vec_String) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: InvalidActionNameError { actions }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_InvalidDocumentActionError_ctor (document_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: InvalidDocumentActionError { document_transition }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_InvalidDocumentError_ctor (errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , raw_document : * mut ferment_example_platform :: custom :: platform_value_Value) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: InvalidDocumentError { errors , raw_document }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_InvalidInitialRevisionError_ctor (document : * mut Box) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: InvalidInitialRevisionError { document }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_RevisionAbsentError_ctor (document : * mut Box) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: RevisionAbsentError { document }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_TryingToReplaceImmutableDocument_ctor (document : * mut Box) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: TryingToReplaceImmutableDocument { document }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_TryingToDeleteImmutableDocument_ctor (document : * mut Box) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: TryingToDeleteImmutableDocument { document }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_MismatchOwnerIdsError_ctor (documents : * mut crate :: fermented :: generics :: Vec_dpp_document_Document) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: MismatchOwnerIdsError { documents }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_DocumentNoRevisionError_ctor (document : * mut Box) -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: DocumentNoRevisionError { document }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_NoDocumentsSuppliedError_ctor () -> * mut dpp_document_errors_DocumentError { ferment_interfaces :: boxed (dpp_document_errors_DocumentError :: NoDocumentsSuppliedError) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_destroy (ffi : * mut dpp_document_errors_DocumentError) { ferment_interfaces :: unbox_any (ffi) ; } } } pub mod state_transition { use crate as ferment_example_platform ; pub mod proof_result { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::proof_result::StateTransitionProofResult`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_state_transition_proof_result_StateTransitionProofResult { VerifiedDataContract (* mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) , VerifiedIdentity (* mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity) , VerifiedPartialIdentity (* mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity) , VerifiedBalanceTransfer (* mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity , * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity) , VerifiedDocuments (* mut crate :: fermented :: generics :: std_collections_Map_keys_platform_value_Identifier_values_Option_dpp_document_Document) } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: proof_result :: StateTransitionProofResult > for dpp_state_transition_proof_result_StateTransitionProofResult { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_proof_result_StateTransitionProofResult) -> dpp :: state_transition :: proof_result :: StateTransitionProofResult { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDataContract (o_0) => dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedDataContract (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedIdentity (o_0) => dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedIdentity (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedPartialIdentity (o_0) => dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedPartialIdentity (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedBalanceTransfer (o_0 , o_1) => dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedBalanceTransfer (ferment_interfaces :: FFIConversion :: ffi_from (* o_0) , ferment_interfaces :: FFIConversion :: ffi_from (* o_1)) , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDocuments (o_0) => dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedDocuments (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: proof_result :: StateTransitionProofResult) -> * const dpp_state_transition_proof_result_StateTransitionProofResult { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedDataContract (o_0) => dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDataContract (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedIdentity (o_0) => dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedIdentity (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedPartialIdentity (o_0) => dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedPartialIdentity (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedBalanceTransfer (o_0 , o_1) => dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedBalanceTransfer (ferment_interfaces :: FFIConversion :: ffi_to (o_0) , ferment_interfaces :: FFIConversion :: ffi_to (o_1)) , dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedDocuments (o_0) => dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDocuments (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_proof_result_StateTransitionProofResult) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_proof_result_StateTransitionProofResult { fn drop (& mut self) { unsafe { match self { dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDataContract (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedIdentity (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedPartialIdentity (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedBalanceTransfer (o_0 , o_1) => { ferment_interfaces :: unbox_any (* o_0) ; ; ferment_interfaces :: unbox_any (* o_1) ; } , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDocuments (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_proof_result_StateTransitionProofResult_VerifiedDataContract_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) -> * mut dpp_state_transition_proof_result_StateTransitionProofResult { ferment_interfaces :: boxed (dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDataContract (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_proof_result_StateTransitionProofResult_VerifiedIdentity_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity) -> * mut dpp_state_transition_proof_result_StateTransitionProofResult { ferment_interfaces :: boxed (dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedIdentity (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_proof_result_StateTransitionProofResult_VerifiedPartialIdentity_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity) -> * mut dpp_state_transition_proof_result_StateTransitionProofResult { ferment_interfaces :: boxed (dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedPartialIdentity (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_proof_result_StateTransitionProofResult_VerifiedBalanceTransfer_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity , o_1 : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity) -> * mut dpp_state_transition_proof_result_StateTransitionProofResult { ferment_interfaces :: boxed (dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedBalanceTransfer (o_0 , o_1)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_proof_result_StateTransitionProofResult_VerifiedDocuments_ctor (o_0 : * mut crate :: fermented :: generics :: std_collections_Map_keys_platform_value_Identifier_values_Option_dpp_document_Document) -> * mut dpp_state_transition_proof_result_StateTransitionProofResult { ferment_interfaces :: boxed (dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDocuments (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_proof_result_StateTransitionProofResult_destroy (ffi : * mut dpp_state_transition_proof_result_StateTransitionProofResult) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod state_transition_types { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::state_transition_types::StateTransitionType`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_state_transition_state_transition_types_StateTransitionType { DataContractCreate = 0 , DocumentsBatch = 1 , IdentityCreate = 2 , IdentityTopUp = 3 , DataContractUpdate = 4 , IdentityUpdate = 5 , IdentityCreditWithdrawal = 6 , IdentityCreditTransfer = 7 } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transition_types :: StateTransitionType > for dpp_state_transition_state_transition_types_StateTransitionType { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transition_types_StateTransitionType) -> dpp :: state_transition :: state_transition_types :: StateTransitionType { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transition_types_StateTransitionType :: DataContractCreate => dpp :: state_transition :: state_transition_types :: StateTransitionType :: DataContractCreate , dpp_state_transition_state_transition_types_StateTransitionType :: DocumentsBatch => dpp :: state_transition :: state_transition_types :: StateTransitionType :: DocumentsBatch , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreate => dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityCreate , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityTopUp => dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityTopUp , dpp_state_transition_state_transition_types_StateTransitionType :: DataContractUpdate => dpp :: state_transition :: state_transition_types :: StateTransitionType :: DataContractUpdate , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityUpdate => dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityUpdate , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditWithdrawal => dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityCreditWithdrawal , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditTransfer => dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityCreditTransfer } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transition_types :: StateTransitionType) -> * const dpp_state_transition_state_transition_types_StateTransitionType { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transition_types :: StateTransitionType :: DataContractCreate => dpp_state_transition_state_transition_types_StateTransitionType :: DataContractCreate , dpp :: state_transition :: state_transition_types :: StateTransitionType :: DocumentsBatch => dpp_state_transition_state_transition_types_StateTransitionType :: DocumentsBatch , dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityCreate => dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreate , dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityTopUp => dpp_state_transition_state_transition_types_StateTransitionType :: IdentityTopUp , dpp :: state_transition :: state_transition_types :: StateTransitionType :: DataContractUpdate => dpp_state_transition_state_transition_types_StateTransitionType :: DataContractUpdate , dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityUpdate => dpp_state_transition_state_transition_types_StateTransitionType :: IdentityUpdate , dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityCreditWithdrawal => dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditWithdrawal , dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityCreditTransfer => dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditTransfer }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transition_types_StateTransitionType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transition_types_StateTransitionType { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transition_types_StateTransitionType :: DataContractCreate => { } , dpp_state_transition_state_transition_types_StateTransitionType :: DocumentsBatch => { } , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreate => { } , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityTopUp => { } , dpp_state_transition_state_transition_types_StateTransitionType :: DataContractUpdate => { } , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityUpdate => { } , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditWithdrawal => { } , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditTransfer => { } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_DataContractCreate_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment_interfaces :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: DataContractCreate) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_DocumentsBatch_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment_interfaces :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: DocumentsBatch) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_IdentityCreate_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment_interfaces :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreate) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_IdentityTopUp_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment_interfaces :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: IdentityTopUp) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_DataContractUpdate_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment_interfaces :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: DataContractUpdate) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_IdentityUpdate_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment_interfaces :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: IdentityUpdate) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_IdentityCreditWithdrawal_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment_interfaces :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditWithdrawal) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_IdentityCreditTransfer_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment_interfaces :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditTransfer) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_destroy (ffi : * mut dpp_state_transition_state_transition_types_StateTransitionType) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod state_transitions { use crate as ferment_example_platform ; pub mod contract { use crate as ferment_example_platform ; pub mod common_fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } pub mod data_contract_update_transition { use crate as ferment_example_platform ; pub mod accessors { use crate as ferment_example_platform ; } pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::contract::data_contract_update_transition::v0::DataContractUpdateTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { pub data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat , pub signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: DataContractUpdateTransitionV0 > for dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: DataContractUpdateTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: DataContractUpdateTransitionV0 { data_contract : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract) , signature_public_key_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . signature_public_key_id) , signature : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . signature) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: DataContractUpdateTransitionV0) -> * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { data_contract : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract) , signature_public_key_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . signature_public_key_id) , signature : ferment_interfaces :: FFIConversion :: ffi_to (obj . signature) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature_public_key_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_ctor (data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat , signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { data_contract , signature_public_key_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_destroy (ffi : * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_get_data_contract (obj : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat { (* obj) . data_contract } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_get_signature_public_key_id (obj : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_get_signature (obj : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_set_data_contract (obj : * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat) { (* obj) . data_contract = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_set_signature_public_key_id (obj : * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . signature_public_key_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_set_signature (obj : * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . signature = value ; } } pub mod methods { use crate as ferment_example_platform ; } pub mod test { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::contract::data_contract_update_transition::DataContractUpdateTransition`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: DataContractUpdateTransition > for dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition) -> dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: DataContractUpdateTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: DataContractUpdateTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: DataContractUpdateTransition) -> * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: DataContractUpdateTransition :: V0 (o_0) => dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition_destroy (ffi : * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod data_contract_create_transition { use crate as ferment_example_platform ; pub mod methods { use crate as ferment_example_platform ; } pub mod accessors { use crate as ferment_example_platform ; } pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::contract::data_contract_create_transition::v0::DataContractCreateTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { pub data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat , pub entropy : * mut crate :: fermented :: types :: platform_value :: types :: bytes_32 :: platform_value_types_bytes_32_Bytes32 , pub signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: DataContractCreateTransitionV0 > for dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: DataContractCreateTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: DataContractCreateTransitionV0 { data_contract : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract) , entropy : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . entropy) , signature_public_key_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . signature_public_key_id) , signature : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . signature) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: DataContractCreateTransitionV0) -> * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { data_contract : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract) , entropy : ferment_interfaces :: FFIConversion :: ffi_to (obj . entropy) , signature_public_key_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . signature_public_key_id) , signature : ferment_interfaces :: FFIConversion :: ffi_to (obj . signature) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract) ; ; ferment_interfaces :: unbox_any (ffi_ref . entropy) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature_public_key_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_ctor (data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat , entropy : * mut crate :: fermented :: types :: platform_value :: types :: bytes_32 :: platform_value_types_bytes_32_Bytes32 , signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { data_contract , entropy , signature_public_key_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_destroy (ffi : * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_get_data_contract (obj : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat { (* obj) . data_contract } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_get_entropy (obj : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: bytes_32 :: platform_value_types_bytes_32_Bytes32 { (* obj) . entropy } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_get_signature_public_key_id (obj : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_get_signature (obj : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_set_data_contract (obj : * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat) { (* obj) . data_contract = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_set_entropy (obj : * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: bytes_32 :: platform_value_types_bytes_32_Bytes32) { (* obj) . entropy = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_set_signature_public_key_id (obj : * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . signature_public_key_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_set_signature (obj : * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . signature = value ; } } pub mod test { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::contract::data_contract_create_transition::DataContractCreateTransition`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition > for dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition) -> dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition) -> * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition :: V0 (o_0) => dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition_destroy (ffi : * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition) { ferment_interfaces :: unbox_any (ffi) ; } pub mod json_conversion { use crate as ferment_example_platform ; pub mod test { use crate as ferment_example_platform ; } } } } pub mod identity { use crate as ferment_example_platform ; pub mod identity_topup_transition { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::identity::identity_topup_transition::IdentityTopUpTransition`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: IdentityTopUpTransition > for dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition) -> dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: IdentityTopUpTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: IdentityTopUpTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: IdentityTopUpTransition) -> * const dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: IdentityTopUpTransition :: V0 (o_0) => dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) -> * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition_destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition) { ferment_interfaces :: unbox_any (ffi) ; } pub mod accessors { use crate as ferment_example_platform ; } pub mod methods { use crate as ferment_example_platform ; } pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::identity::identity_topup_transition::v0::IdentityTopUpTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { pub asset_lock_proof : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof , pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: IdentityTopUpTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) -> dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: IdentityTopUpTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: IdentityTopUpTransitionV0 { asset_lock_proof : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . asset_lock_proof) , identity_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_id) , signature : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . signature) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: IdentityTopUpTransitionV0) -> * const dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { asset_lock_proof : ferment_interfaces :: FFIConversion :: ffi_to (obj . asset_lock_proof) , identity_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_id) , signature : ferment_interfaces :: FFIConversion :: ffi_to (obj . signature) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . asset_lock_proof) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_ctor (asset_lock_proof : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof , identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { asset_lock_proof , identity_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_get_asset_lock_proof (obj : * const dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof { (* obj) . asset_lock_proof } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_get_identity_id (obj : * const dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_get_signature (obj : * const dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_set_asset_lock_proof (obj : * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof) { (* obj) . asset_lock_proof = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_set_identity_id (obj : * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_set_signature (obj : * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . signature = value ; } pub mod property_names { use crate as ferment_example_platform ; } } } pub mod identity_credit_withdrawal_transition { use crate as ferment_example_platform ; pub mod accessors { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::identity::identity_credit_withdrawal_transition::IdentityCreditWithdrawalTransition`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition > for dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition) -> dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition) -> * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition :: V0 (o_0) => dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition_destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition) { ferment_interfaces :: unbox_any (ffi) ; } pub mod v0 { use crate as ferment_example_platform ; pub mod test { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::identity::identity_credit_withdrawal_transition::v0::IdentityCreditWithdrawalTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub amount : u64 , pub core_fee_per_byte : u32 , pub pooling : * mut crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling , pub output_script : * mut ferment_example_platform :: custom :: CoreScriptFFI , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: IdentityCreditWithdrawalTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: IdentityCreditWithdrawalTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: IdentityCreditWithdrawalTransitionV0 { identity_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_id) , amount : ffi_ref . amount , core_fee_per_byte : ffi_ref . core_fee_per_byte , pooling : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . pooling) , output_script : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . output_script) , revision : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . revision) , signature_public_key_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . signature_public_key_id) , signature : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . signature) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: IdentityCreditWithdrawalTransitionV0) -> * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { identity_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_id) , amount : obj . amount , core_fee_per_byte : obj . core_fee_per_byte , pooling : ferment_interfaces :: FFIConversion :: ffi_to (obj . pooling) , output_script : ferment_interfaces :: FFIConversion :: ffi_to (obj . output_script) , revision : ferment_interfaces :: FFIConversion :: ffi_to (obj . revision) , signature_public_key_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . signature_public_key_id) , signature : ferment_interfaces :: FFIConversion :: ffi_to (obj . signature) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; ; ; ferment_interfaces :: unbox_any (ffi_ref . pooling) ; ; ferment_interfaces :: unbox_any (ffi_ref . output_script) ; ; ferment_interfaces :: unbox_any (ffi_ref . revision) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature_public_key_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_ctor (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , amount : u64 , core_fee_per_byte : u32 , pooling : * mut crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling , output_script : * mut ferment_example_platform :: custom :: CoreScriptFFI , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { identity_id , amount , core_fee_per_byte , pooling , output_script , revision , signature_public_key_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_identity_id (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_amount (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> u64 { (* obj) . amount } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_core_fee_per_byte (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> u32 { (* obj) . core_fee_per_byte } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_pooling (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling { (* obj) . pooling } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_output_script (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut ferment_example_platform :: custom :: CoreScriptFFI { (* obj) . output_script } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_revision (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_signature_public_key_id (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_signature (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_identity_id (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_amount (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 , value : u64) { (* obj) . amount = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_core_fee_per_byte (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 , value : u32) { (* obj) . core_fee_per_byte = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_pooling (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling) { (* obj) . pooling = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_output_script (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 , value : * mut ferment_example_platform :: custom :: CoreScriptFFI) { (* obj) . output_script = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_revision (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . revision = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_signature_public_key_id (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . signature_public_key_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_signature (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . signature = value ; } } pub mod methods { use crate as ferment_example_platform ; } } pub mod identity_create_transition { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::identity::identity_create_transition::IdentityCreateTransition`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: IdentityCreateTransition > for dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition) -> dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: IdentityCreateTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: IdentityCreateTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: IdentityCreateTransition) -> * const dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: IdentityCreateTransition :: V0 (o_0) => dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition_destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition) { ferment_interfaces :: unbox_any (ffi) ; } pub mod accessors { use crate as ferment_example_platform ; } pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::identity::identity_create_transition::v0::IdentityCreateTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { pub public_keys : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation , pub asset_lock_proof : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: IdentityCreateTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: IdentityCreateTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: IdentityCreateTransitionV0 { public_keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_keys) , asset_lock_proof : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . asset_lock_proof) , signature : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . signature) , identity_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_id) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: IdentityCreateTransitionV0) -> * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { public_keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_keys) , asset_lock_proof : ferment_interfaces :: FFIConversion :: ffi_to (obj . asset_lock_proof) , signature : ferment_interfaces :: FFIConversion :: ffi_to (obj . signature) , identity_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_id) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . asset_lock_proof) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature) ; ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_ctor (public_keys : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation , asset_lock_proof : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { public_keys , asset_lock_proof , signature , identity_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_get_public_keys (obj : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { (* obj) . public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_get_asset_lock_proof (obj : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof { (* obj) . asset_lock_proof } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_get_signature (obj : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_get_identity_id (obj : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_set_public_keys (obj : * mut dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 , value : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) { (* obj) . public_keys = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_set_asset_lock_proof (obj : * mut dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof) { (* obj) . asset_lock_proof = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_set_signature (obj : * mut dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . signature = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_set_identity_id (obj : * mut dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } } pub mod methods { use crate as ferment_example_platform ; } } pub mod identity_update_transition { use crate as ferment_example_platform ; pub mod accessors { use crate as ferment_example_platform ; } pub mod methods { use crate as ferment_example_platform ; } pub mod fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } pub mod v0 { use crate as ferment_example_platform ; pub mod json_conversion { use crate as ferment_example_platform ; pub mod test { use crate as ferment_example_platform ; } } # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::identity::identity_update_transition::v0::IdentityUpdateTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub add_public_keys : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation , pub disable_public_keys : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID , pub public_keys_disabled_at : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , pub signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: IdentityUpdateTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: IdentityUpdateTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: IdentityUpdateTransitionV0 { identity_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_id) , revision : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . revision) , add_public_keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . add_public_keys) , disable_public_keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . disable_public_keys) , public_keys_disabled_at : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . public_keys_disabled_at) , signature_public_key_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . signature_public_key_id) , signature : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . signature) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: IdentityUpdateTransitionV0) -> * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { identity_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_id) , revision : ferment_interfaces :: FFIConversion :: ffi_to (obj . revision) , add_public_keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . add_public_keys) , disable_public_keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . disable_public_keys) , public_keys_disabled_at : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . public_keys_disabled_at) , signature_public_key_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . signature_public_key_id) , signature : ferment_interfaces :: FFIConversion :: ffi_to (obj . signature) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . revision) ; ; ferment_interfaces :: unbox_any (ffi_ref . add_public_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . disable_public_keys) ; ; if ! (ffi_ref . public_keys_disabled_at) . is_null () { ferment_interfaces :: unbox_any (ffi_ref . public_keys_disabled_at) ; } ; ferment_interfaces :: unbox_any (ffi_ref . signature_public_key_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_ctor (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , add_public_keys : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation , disable_public_keys : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID , public_keys_disabled_at : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { identity_id , revision , add_public_keys , disable_public_keys , public_keys_disabled_at , signature_public_key_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_identity_id (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_revision (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_add_public_keys (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { (* obj) . add_public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_disable_public_keys (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . disable_public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_public_keys_disabled_at (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis { (* obj) . public_keys_disabled_at } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_signature_public_key_id (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_signature (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_identity_id (obj : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_revision (obj : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . revision = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_add_public_keys (obj : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 , value : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) { (* obj) . add_public_keys = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_disable_public_keys (obj : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 , value : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) { (* obj) . disable_public_keys = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_public_keys_disabled_at (obj : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis) { (* obj) . public_keys_disabled_at = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_signature_public_key_id (obj : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . signature_public_key_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_signature (obj : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . signature = value ; } } # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::identity::identity_update_transition::IdentityUpdateTransition`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: IdentityUpdateTransition > for dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition) -> dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: IdentityUpdateTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: IdentityUpdateTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: IdentityUpdateTransition) -> * const dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: IdentityUpdateTransition :: V0 (o_0) => dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition_destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod identity_credit_transfer_transition { use crate as ferment_example_platform ; pub mod accessors { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::identity::identity_credit_transfer_transition::IdentityCreditTransferTransition`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: IdentityCreditTransferTransition > for dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition) -> dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: IdentityCreditTransferTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: IdentityCreditTransferTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: IdentityCreditTransferTransition) -> * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: IdentityCreditTransferTransition :: V0 (o_0) => dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition_destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition) { ferment_interfaces :: unbox_any (ffi) ; } pub mod v0 { use crate as ferment_example_platform ; pub mod test { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::identity::identity_credit_transfer_transition::v0::IdentityCreditTransferTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub recipient_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub amount : u64 , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: IdentityCreditTransferTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: IdentityCreditTransferTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: IdentityCreditTransferTransitionV0 { identity_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_id) , recipient_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . recipient_id) , amount : ffi_ref . amount , revision : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . revision) , signature_public_key_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . signature_public_key_id) , signature : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . signature) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: IdentityCreditTransferTransitionV0) -> * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { identity_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_id) , recipient_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . recipient_id) , amount : obj . amount , revision : ferment_interfaces :: FFIConversion :: ffi_to (obj . revision) , signature_public_key_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . signature_public_key_id) , signature : ferment_interfaces :: FFIConversion :: ffi_to (obj . signature) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . recipient_id) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . revision) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature_public_key_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_ctor (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , recipient_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , amount : u64 , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { identity_id , recipient_id , amount , revision , signature_public_key_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_destroy (ffi : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_get_identity_id (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_get_recipient_id (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . recipient_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_get_amount (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> u64 { (* obj) . amount } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_get_revision (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_get_signature_public_key_id (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_get_signature (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_set_identity_id (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_set_recipient_id (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . recipient_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_set_amount (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 , value : u64) { (* obj) . amount = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_set_revision (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . revision = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_set_signature_public_key_id (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . signature_public_key_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_set_signature (obj : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . signature = value ; } } pub mod methods { use crate as ferment_example_platform ; } pub mod fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } } pub mod public_key_in_creation { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::identity::public_key_in_creation::v0::IdentityPublicKeyInCreationV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { pub id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType , pub purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , pub security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub contract_bounds : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds , pub read_only : bool , pub data : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: IdentityPublicKeyInCreationV0 > for dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: IdentityPublicKeyInCreationV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: IdentityPublicKeyInCreationV0 { id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . id) , key_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . key_type) , purpose : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . purpose) , security_level : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . security_level) , contract_bounds : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . contract_bounds) , read_only : ffi_ref . read_only , data : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data) , signature : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . signature) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: IdentityPublicKeyInCreationV0) -> * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { id : ferment_interfaces :: FFIConversion :: ffi_to (obj . id) , key_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . key_type) , purpose : ferment_interfaces :: FFIConversion :: ffi_to (obj . purpose) , security_level : ferment_interfaces :: FFIConversion :: ffi_to (obj . security_level) , contract_bounds : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . contract_bounds) , read_only : obj . read_only , data : ferment_interfaces :: FFIConversion :: ffi_to (obj . data) , signature : ferment_interfaces :: FFIConversion :: ffi_to (obj . signature) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; ferment_interfaces :: unbox_any (ffi_ref . key_type) ; ; ferment_interfaces :: unbox_any (ffi_ref . purpose) ; ; ferment_interfaces :: unbox_any (ffi_ref . security_level) ; ; if ! (ffi_ref . contract_bounds) . is_null () { ferment_interfaces :: unbox_any (ffi_ref . contract_bounds) ; } ; ; ferment_interfaces :: unbox_any (ffi_ref . data) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_ctor (id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType , purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , contract_bounds : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds , read_only : bool , data : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { id , key_type , purpose , security_level , contract_bounds , read_only , data , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_destroy (ffi : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_id (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_key_type (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType { (* obj) . key_type } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_purpose (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . purpose } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_security_level (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . security_level } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_contract_bounds (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds { (* obj) . contract_bounds } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_read_only (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> bool { (* obj) . read_only } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_data (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . data } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_signature (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_id (obj : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_key_type (obj : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType) { (* obj) . key_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_purpose (obj : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) { (* obj) . purpose = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_security_level (obj : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . security_level = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_contract_bounds (obj : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds) { (* obj) . contract_bounds = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_read_only (obj : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 , value : bool) { (* obj) . read_only = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_data (obj : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . data = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_signature (obj : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . signature = value ; } } # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::identity::public_key_in_creation::IdentityPublicKeyInCreation`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > for dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) -> dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation :: V0 (o_0) => dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation) -> * const dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation :: V0 (o_0) => dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation_destroy (ffi : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) { ferment_interfaces :: unbox_any (ffi) ; } pub mod methods { use crate as ferment_example_platform ; pub mod from_public_key_signed_external { use crate as ferment_example_platform ; } pub mod hash { use crate as ferment_example_platform ; } pub mod duplicated_keys_witness { use crate as ferment_example_platform ; } pub mod from_public_key_signed_with_private_key { use crate as ferment_example_platform ; } pub mod duplicated_key_ids_witness { use crate as ferment_example_platform ; } pub mod validate_identity_public_keys_structure { use crate as ferment_example_platform ; } } } pub mod common_fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } } pub mod common_fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } pub mod document { use crate as ferment_example_platform ; pub mod documents_batch_transition { use crate as ferment_example_platform ; pub mod document_transition { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::document::documents_batch_transition::document_transition::DocumentTransition`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { Create (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition) , Replace (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition) , Delete (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition) } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Create (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Create (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Replace (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Replace (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Delete (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Delete (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Create (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Create (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Replace (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Replace (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Delete (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Delete (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Create (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Replace (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Delete (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_Create_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Create (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_Replace_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Replace (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_Delete_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Delete (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) { ferment_interfaces :: unbox_any (ffi) ; } pub mod document_delete_transition { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::document::documents_batch_transition::document_transition::document_delete_transition::v0::DocumentDeleteTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { pub base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: DocumentDeleteTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: DocumentDeleteTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: DocumentDeleteTransitionV0 { base : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . base) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: DocumentDeleteTransitionV0) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { base : ferment_interfaces :: FFIConversion :: ffi_to (obj . base) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . base) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0_ctor (base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { base }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0_destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0_get_base (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0) -> * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0_set_base (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition) { (* obj) . base = value ; } } # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::document::documents_batch_transition::document_transition::document_delete_transition::DocumentDeleteTransition`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0) } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: DocumentDeleteTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: DocumentDeleteTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: DocumentDeleteTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: DocumentDeleteTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: DocumentDeleteTransition :: V0 (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition_destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod document_replace_transition { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::document::documents_batch_transition::document_transition::document_replace_transition::DocumentReplaceTransition`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: DocumentReplaceTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: DocumentReplaceTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: DocumentReplaceTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: DocumentReplaceTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: DocumentReplaceTransition :: V0 (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition_destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition) { ferment_interfaces :: unbox_any (ffi) ; } pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::document::documents_batch_transition::document_transition::document_replace_transition::v0::DocumentReplaceTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { pub base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub updated_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis , pub data : * mut std :: collections :: BTreeMap < String , ferment_example_platform :: custom :: platform_value_Value > } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: DocumentReplaceTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: DocumentReplaceTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: DocumentReplaceTransitionV0 { base : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . base) , revision : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . revision) , updated_at : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . updated_at) , data : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: DocumentReplaceTransitionV0) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { base : ferment_interfaces :: FFIConversion :: ffi_to (obj . base) , revision : ferment_interfaces :: FFIConversion :: ffi_to (obj . revision) , updated_at : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . updated_at) , data : ferment_interfaces :: FFIConversion :: ffi_to (obj . data) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . base) ; ; ferment_interfaces :: unbox_any (ffi_ref . revision) ; ; if ! (ffi_ref . updated_at) . is_null () { ferment_interfaces :: unbox_any (ffi_ref . updated_at) ; } ; ferment_interfaces :: unbox_any (ffi_ref . data) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_ctor (base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , updated_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis , data : * mut std :: collections :: BTreeMap < String , ferment_example_platform :: custom :: platform_value_Value >) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { base , revision , updated_at , data }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_get_base (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) -> * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_get_revision (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_get_updated_at (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis { (* obj) . updated_at } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_get_data (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) -> * mut std :: collections :: BTreeMap < String , ferment_example_platform :: custom :: platform_value_Value > { (* obj) . data } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_set_base (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition) { (* obj) . base = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_set_revision (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . revision = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_set_updated_at (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis) { (* obj) . updated_at = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_set_data (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 , value : * mut std :: collections :: BTreeMap < String , ferment_example_platform :: custom :: platform_value_Value >) { (* obj) . data = value ; } pub mod property_names { use crate as ferment_example_platform ; } } } pub mod document_base_transition { use crate as ferment_example_platform ; pub mod fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::document::documents_batch_transition::document_transition::document_base_transition::DocumentBaseTransition`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition :: V0 (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition_destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition) { ferment_interfaces :: unbox_any (ffi) ; } pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::document::documents_batch_transition::document_transition::document_base_transition::v0::DocumentBaseTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_type_name : * mut std :: os :: raw :: c_char , pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: DocumentBaseTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: DocumentBaseTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: DocumentBaseTransitionV0 { id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . id) , document_type_name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_type_name) , data_contract_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract_id) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: DocumentBaseTransitionV0) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { id : ferment_interfaces :: FFIConversion :: ffi_to (obj . id) , document_type_name : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_type_name) , data_contract_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract_id) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . document_type_name) ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_ctor (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type_name : * mut std :: os :: raw :: c_char , data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { id , document_type_name , data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_get_id (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_get_document_type_name (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_get_data_contract_id (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_set_id (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_set_document_type_name (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_set_data_contract_id (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } } } pub mod document_create_transition { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::document::documents_batch_transition::document_transition::document_create_transition::v0::DocumentCreateTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { pub base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , pub entropy : * mut crate :: fermented :: generics :: Arr_u8_32 , pub created_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis , pub updated_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis , pub data : * mut std :: collections :: BTreeMap < String , ferment_example_platform :: custom :: platform_value_Value > } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: DocumentCreateTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: DocumentCreateTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: DocumentCreateTransitionV0 { base : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . base) , entropy : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . entropy) , created_at : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . created_at) , updated_at : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . updated_at) , data : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: DocumentCreateTransitionV0) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { base : ferment_interfaces :: FFIConversion :: ffi_to (obj . base) , entropy : ferment_interfaces :: FFIConversion :: ffi_to (obj . entropy) , created_at : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . created_at) , updated_at : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . updated_at) , data : ferment_interfaces :: FFIConversion :: ffi_to (obj . data) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . base) ; ; ferment_interfaces :: unbox_any (ffi_ref . entropy) ; if ! (ffi_ref . created_at) . is_null () { ferment_interfaces :: unbox_any (ffi_ref . created_at) ; } ; if ! (ffi_ref . updated_at) . is_null () { ferment_interfaces :: unbox_any (ffi_ref . updated_at) ; } ; ferment_interfaces :: unbox_any (ffi_ref . data) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_ctor (base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , entropy : * mut crate :: fermented :: generics :: Arr_u8_32 , created_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis , updated_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis , data : * mut std :: collections :: BTreeMap < String , ferment_example_platform :: custom :: platform_value_Value >) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { base , entropy , created_at , updated_at , data }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_get_base (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_get_entropy (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . entropy } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_get_created_at (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis { (* obj) . created_at } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_get_updated_at (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis { (* obj) . updated_at } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_get_data (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> * mut std :: collections :: BTreeMap < String , ferment_example_platform :: custom :: platform_value_Value > { (* obj) . data } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_set_base (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition) { (* obj) . base = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_set_entropy (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 , value : * mut crate :: fermented :: generics :: Arr_u8_32) { (* obj) . entropy = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_set_created_at (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis) { (* obj) . created_at = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_set_updated_at (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis) { (* obj) . updated_at = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_set_data (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 , value : * mut std :: collections :: BTreeMap < String , ferment_example_platform :: custom :: platform_value_Value >) { (* obj) . data = value ; } pub mod test { use crate as ferment_example_platform ; } } # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::document::documents_batch_transition::document_transition::document_create_transition::DocumentCreateTransition`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: DocumentCreateTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: DocumentCreateTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: DocumentCreateTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: DocumentCreateTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: DocumentCreateTransition :: V0 (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition_destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition) { ferment_interfaces :: unbox_any (ffi) ; } } } pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::document::documents_batch_transition::v0::DocumentsBatchTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { pub owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub transitions : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition , pub signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: DocumentsBatchTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: DocumentsBatchTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: DocumentsBatchTransitionV0 { owner_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . owner_id) , transitions : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . transitions) , signature_public_key_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . signature_public_key_id) , signature : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . signature) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: DocumentsBatchTransitionV0) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { owner_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . owner_id) , transitions : ferment_interfaces :: FFIConversion :: ffi_to (obj . transitions) , signature_public_key_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . signature_public_key_id) , signature : ferment_interfaces :: FFIConversion :: ffi_to (obj . signature) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . owner_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . transitions) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature_public_key_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . signature) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_ctor (owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , transitions : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition , signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { owner_id , transitions , signature_public_key_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_get_owner_id (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_get_transitions (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { (* obj) . transitions } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_get_signature_public_key_id (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_get_signature (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_set_owner_id (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . owner_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_set_transitions (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 , value : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) { (* obj) . transitions = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_set_signature_public_key_id (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . signature_public_key_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_set_signature (obj : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . signature = value ; } } pub mod methods { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp::state_transition::state_transitions::document::documents_batch_transition::DocumentsBatchTransition`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: DocumentsBatchTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: DocumentsBatchTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: DocumentsBatchTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: DocumentsBatchTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: DocumentsBatchTransition :: V0 (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition { ferment_interfaces :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition_destroy (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition) { ferment_interfaces :: unbox_any (ffi) ; } pub mod accessors { use crate as ferment_example_platform ; } pub mod validation { use crate as ferment_example_platform ; pub mod find_duplicates_by_id { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; pub mod test { use crate as ferment_example_platform ; } } } pub mod validate_base_structure { use crate as ferment_example_platform ; } } pub mod fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } } } } pub mod errors { use crate as ferment_example_platform ; pub mod state_transition_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::errors::state_transition_error::StateTransitionError`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_state_transition_errors_state_transition_error_StateTransitionError { InvalidStateTransitionError { errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , raw_state_transition : * mut ferment_example_platform :: custom :: platform_value_Value } } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: errors :: state_transition_error :: StateTransitionError > for dpp_state_transition_errors_state_transition_error_StateTransitionError { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_errors_state_transition_error_StateTransitionError) -> dpp :: state_transition :: errors :: state_transition_error :: StateTransitionError { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_errors_state_transition_error_StateTransitionError :: InvalidStateTransitionError { errors , raw_state_transition } => dpp :: state_transition :: errors :: state_transition_error :: StateTransitionError :: InvalidStateTransitionError { errors : ferment_interfaces :: FFIConversion :: ffi_from (* errors) , raw_state_transition : ferment_interfaces :: FFIConversion :: ffi_from (* raw_state_transition) } } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: errors :: state_transition_error :: StateTransitionError) -> * const dpp_state_transition_errors_state_transition_error_StateTransitionError { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: errors :: state_transition_error :: StateTransitionError :: InvalidStateTransitionError { errors , raw_state_transition } => dpp_state_transition_errors_state_transition_error_StateTransitionError :: InvalidStateTransitionError { errors : ferment_interfaces :: FFIConversion :: ffi_to (errors) , raw_state_transition : ferment_interfaces :: FFIConversion :: ffi_to (raw_state_transition) } }) } unsafe fn destroy (ffi : * mut dpp_state_transition_errors_state_transition_error_StateTransitionError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_errors_state_transition_error_StateTransitionError { fn drop (& mut self) { unsafe { match self { dpp_state_transition_errors_state_transition_error_StateTransitionError :: InvalidStateTransitionError { errors , raw_state_transition } => { ferment_interfaces :: unbox_any (* errors) ; ; ferment_interfaces :: unbox_any (* raw_state_transition) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_state_transition_error_StateTransitionError_InvalidStateTransitionError_ctor (errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , raw_state_transition : * mut ferment_example_platform :: custom :: platform_value_Value) -> * mut dpp_state_transition_errors_state_transition_error_StateTransitionError { ferment_interfaces :: boxed (dpp_state_transition_errors_state_transition_error_StateTransitionError :: InvalidStateTransitionError { errors , raw_state_transition }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_state_transition_error_StateTransitionError_destroy (ffi : * mut dpp_state_transition_errors_state_transition_error_StateTransitionError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod invalid_identity_public_key_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::errors::invalid_identity_public_key_type_error::InvalidIdentityPublicKeyTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { pub public_key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError > for dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) -> dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError { let ffi_ref = & * ffi ; dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError { public_key_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_key_type) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError) -> * const dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { ferment_interfaces :: boxed (dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { public_key_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_key_type) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_type) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_ctor (public_key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType) -> * mut dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { ferment_interfaces :: boxed (dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { public_key_type }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_destroy (ffi : * mut dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_get_public_key_type (obj : * const dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType { (* obj) . public_key_type } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_set_public_key_type (obj : * mut dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType) { (* obj) . public_key_type = value ; } } pub mod state_transition_is_not_signed_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::errors::state_transition_is_not_signed_error::StateTransitionIsNotSignedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { pub state_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: dpp_state_transition_StateTransition } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: StateTransitionIsNotSignedError > for dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError) -> dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: StateTransitionIsNotSignedError { let ffi_ref = & * ffi ; dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: StateTransitionIsNotSignedError { state_transition : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . state_transition) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: StateTransitionIsNotSignedError) -> * const dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { ferment_interfaces :: boxed (dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { state_transition : ferment_interfaces :: FFIConversion :: ffi_to (obj . state_transition) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . state_transition) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError_ctor (state_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: dpp_state_transition_StateTransition) -> * mut dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { ferment_interfaces :: boxed (dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { state_transition }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError_destroy (ffi : * mut dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError_get_state_transition (obj : * const dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError) -> * mut crate :: fermented :: types :: dpp :: state_transition :: dpp_state_transition_StateTransition { (* obj) . state_transition } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError_set_state_transition (obj : * mut dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError , value : * mut crate :: fermented :: types :: dpp :: state_transition :: dpp_state_transition_StateTransition) { (* obj) . state_transition = value ; } } pub mod wrong_public_key_purpose_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::errors::wrong_public_key_purpose_error::WrongPublicKeyPurposeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { pub public_key_purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , pub key_purpose_requirement : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: errors :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError > for dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> dpp :: state_transition :: errors :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError { let ffi_ref = & * ffi ; dpp :: state_transition :: errors :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError { public_key_purpose : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_key_purpose) , key_purpose_requirement : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . key_purpose_requirement) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: errors :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError) -> * const dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { ferment_interfaces :: boxed (dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { public_key_purpose : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_key_purpose) , key_purpose_requirement : ferment_interfaces :: FFIConversion :: ffi_to (obj . key_purpose_requirement) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_purpose) ; ; ferment_interfaces :: unbox_any (ffi_ref . key_purpose_requirement) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_ctor (public_key_purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , key_purpose_requirement : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) -> * mut dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { ferment_interfaces :: boxed (dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { public_key_purpose , key_purpose_requirement }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_destroy (ffi : * mut dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_get_public_key_purpose (obj : * const dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . public_key_purpose } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_get_key_purpose_requirement (obj : * const dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . key_purpose_requirement } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_set_public_key_purpose (obj : * mut dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) { (* obj) . public_key_purpose = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_set_key_purpose_requirement (obj : * mut dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) { (* obj) . key_purpose_requirement = value ; } } pub mod invalid_signature_public_key_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::errors::invalid_signature_public_key_error::InvalidSignaturePublicKeyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { pub public_key : * mut crate :: fermented :: generics :: Vec_u8 } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: errors :: invalid_signature_public_key_error :: InvalidSignaturePublicKeyError > for dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError) -> dpp :: state_transition :: errors :: invalid_signature_public_key_error :: InvalidSignaturePublicKeyError { let ffi_ref = & * ffi ; dpp :: state_transition :: errors :: invalid_signature_public_key_error :: InvalidSignaturePublicKeyError { public_key : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_key) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: errors :: invalid_signature_public_key_error :: InvalidSignaturePublicKeyError) -> * const dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { ferment_interfaces :: boxed (dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { public_key : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_key) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError_ctor (public_key : * mut crate :: fermented :: generics :: Vec_u8) -> * mut dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { ferment_interfaces :: boxed (dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { public_key }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError_destroy (ffi : * mut dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError_get_public_key (obj : * const dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . public_key } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError_set_public_key (obj : * mut dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . public_key = value ; } } pub mod public_key_mismatch_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::errors::public_key_mismatch_error::PublicKeyMismatchError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { pub public_key : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: errors :: public_key_mismatch_error :: PublicKeyMismatchError > for dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError) -> dpp :: state_transition :: errors :: public_key_mismatch_error :: PublicKeyMismatchError { let ffi_ref = & * ffi ; dpp :: state_transition :: errors :: public_key_mismatch_error :: PublicKeyMismatchError { public_key : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_key) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: errors :: public_key_mismatch_error :: PublicKeyMismatchError) -> * const dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { ferment_interfaces :: boxed (dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { public_key : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_key) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError_ctor (public_key : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey) -> * mut dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { ferment_interfaces :: boxed (dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { public_key }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError_destroy (ffi : * mut dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError_get_public_key (obj : * const dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey { (* obj) . public_key } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError_set_public_key (obj : * mut dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey) { (* obj) . public_key = value ; } } pub mod public_key_security_level_not_met_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::state_transition::errors::public_key_security_level_not_met_error::PublicKeySecurityLevelNotMetError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { pub public_key_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub required_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError > for dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError { let ffi_ref = & * ffi ; dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError { public_key_security_level : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_key_security_level) , required_security_level : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . required_security_level) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError) -> * const dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { ferment_interfaces :: boxed (dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { public_key_security_level : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_key_security_level) , required_security_level : ferment_interfaces :: FFIConversion :: ffi_to (obj . required_security_level) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_security_level) ; ; ferment_interfaces :: unbox_any (ffi_ref . required_security_level) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_ctor (public_key_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , required_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) -> * mut dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { ferment_interfaces :: boxed (dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { public_key_security_level , required_security_level }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_destroy (ffi : * mut dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_get_public_key_security_level (obj : * const dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . public_key_security_level } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_get_required_security_level (obj : * const dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . required_security_level } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_set_public_key_security_level (obj : * mut dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . public_key_security_level = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_set_required_security_level (obj : * mut dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . required_security_level = value ; } } } pub mod abstract_state_transition { use crate as ferment_example_platform ; pub mod state_transition_helpers { use crate as ferment_example_platform ; } } pub mod serialization { use crate as ferment_example_platform ; pub mod tests { use crate as ferment_example_platform ; } } # [doc = "FFI-representation of the [`dpp::state_transition::StateTransition`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_state_transition_StateTransition { DataContractCreate (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition) , DataContractUpdate (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition) , DocumentsBatch (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition) , IdentityCreate (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition) , IdentityTopUp (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition) , IdentityCreditWithdrawal (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition) , IdentityUpdate (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition) , IdentityCreditTransfer (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition) } impl ferment_interfaces :: FFIConversion < dpp :: state_transition :: StateTransition > for dpp_state_transition_StateTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_StateTransition) -> dpp :: state_transition :: StateTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_StateTransition :: DataContractCreate (o_0) => dpp :: state_transition :: StateTransition :: DataContractCreate (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: DataContractUpdate (o_0) => dpp :: state_transition :: StateTransition :: DataContractUpdate (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: DocumentsBatch (o_0) => dpp :: state_transition :: StateTransition :: DocumentsBatch (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: IdentityCreate (o_0) => dpp :: state_transition :: StateTransition :: IdentityCreate (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: IdentityTopUp (o_0) => dpp :: state_transition :: StateTransition :: IdentityTopUp (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: IdentityCreditWithdrawal (o_0) => dpp :: state_transition :: StateTransition :: IdentityCreditWithdrawal (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: IdentityUpdate (o_0) => dpp :: state_transition :: StateTransition :: IdentityUpdate (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: IdentityCreditTransfer (o_0) => dpp :: state_transition :: StateTransition :: IdentityCreditTransfer (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: state_transition :: StateTransition) -> * const dpp_state_transition_StateTransition { ferment_interfaces :: boxed (match obj { dpp :: state_transition :: StateTransition :: DataContractCreate (o_0) => dpp_state_transition_StateTransition :: DataContractCreate (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: DataContractUpdate (o_0) => dpp_state_transition_StateTransition :: DataContractUpdate (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: DocumentsBatch (o_0) => dpp_state_transition_StateTransition :: DocumentsBatch (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: IdentityCreate (o_0) => dpp_state_transition_StateTransition :: IdentityCreate (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: IdentityTopUp (o_0) => dpp_state_transition_StateTransition :: IdentityTopUp (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: IdentityCreditWithdrawal (o_0) => dpp_state_transition_StateTransition :: IdentityCreditWithdrawal (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: IdentityUpdate (o_0) => dpp_state_transition_StateTransition :: IdentityUpdate (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: IdentityCreditTransfer (o_0) => dpp_state_transition_StateTransition :: IdentityCreditTransfer (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_state_transition_StateTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_state_transition_StateTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_StateTransition :: DataContractCreate (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_state_transition_StateTransition :: DataContractUpdate (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_state_transition_StateTransition :: DocumentsBatch (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_state_transition_StateTransition :: IdentityCreate (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_state_transition_StateTransition :: IdentityTopUp (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_state_transition_StateTransition :: IdentityCreditWithdrawal (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_state_transition_StateTransition :: IdentityUpdate (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_state_transition_StateTransition :: IdentityCreditTransfer (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_DataContractCreate_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition) -> * mut dpp_state_transition_StateTransition { ferment_interfaces :: boxed (dpp_state_transition_StateTransition :: DataContractCreate (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_DataContractUpdate_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition) -> * mut dpp_state_transition_StateTransition { ferment_interfaces :: boxed (dpp_state_transition_StateTransition :: DataContractUpdate (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_DocumentsBatch_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition) -> * mut dpp_state_transition_StateTransition { ferment_interfaces :: boxed (dpp_state_transition_StateTransition :: DocumentsBatch (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_IdentityCreate_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition) -> * mut dpp_state_transition_StateTransition { ferment_interfaces :: boxed (dpp_state_transition_StateTransition :: IdentityCreate (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_IdentityTopUp_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition) -> * mut dpp_state_transition_StateTransition { ferment_interfaces :: boxed (dpp_state_transition_StateTransition :: IdentityTopUp (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_IdentityCreditWithdrawal_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition) -> * mut dpp_state_transition_StateTransition { ferment_interfaces :: boxed (dpp_state_transition_StateTransition :: IdentityCreditWithdrawal (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_IdentityUpdate_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition) -> * mut dpp_state_transition_StateTransition { ferment_interfaces :: boxed (dpp_state_transition_StateTransition :: IdentityUpdate (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_IdentityCreditTransfer_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition) -> * mut dpp_state_transition_StateTransition { ferment_interfaces :: boxed (dpp_state_transition_StateTransition :: IdentityCreditTransfer (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_destroy (ffi : * mut dpp_state_transition_StateTransition) { ferment_interfaces :: unbox_any (ffi) ; } pub mod traits { use crate as ferment_example_platform ; } } pub mod identity { use crate as ferment_example_platform ; pub mod credits_converter { use crate as ferment_example_platform ; pub mod test { use crate as ferment_example_platform ; } } pub mod errors { use crate as ferment_example_platform ; pub mod asset_lock_transaction_is_not_found_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::identity::errors::asset_lock_transaction_is_not_found_error::AssetLockTransactionIsNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { pub transaction_id : * mut dashcore :: Txid } impl ferment_interfaces :: FFIConversion < dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: AssetLockTransactionIsNotFoundError > for dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError) -> dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: AssetLockTransactionIsNotFoundError { let ffi_ref = & * ffi ; dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: AssetLockTransactionIsNotFoundError { transaction_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . transaction_id) } } unsafe fn ffi_to_const (obj : dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: AssetLockTransactionIsNotFoundError) -> * const dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { ferment_interfaces :: boxed (dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { transaction_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . transaction_id) }) } unsafe fn destroy (ffi : * mut dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . transaction_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError_ctor (transaction_id : * mut dashcore :: Txid) -> * mut dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { ferment_interfaces :: boxed (dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { transaction_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError_destroy (ffi : * mut dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError_get_transaction_id (obj : * const dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError) -> * mut dashcore :: Txid { (* obj) . transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError_set_transaction_id (obj : * mut dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError , value : * mut dashcore :: Txid) { (* obj) . transaction_id = value ; } } pub mod asset_lock_output_not_found_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::identity::errors::asset_lock_output_not_found_error::AssetLockOutputNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { } impl ferment_interfaces :: FFIConversion < dpp :: identity :: errors :: asset_lock_output_not_found_error :: AssetLockOutputNotFoundError > for dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError) -> dpp :: identity :: errors :: asset_lock_output_not_found_error :: AssetLockOutputNotFoundError { let ffi_ref = & * ffi ; dpp :: identity :: errors :: asset_lock_output_not_found_error :: AssetLockOutputNotFoundError { } } unsafe fn ffi_to_const (obj : dpp :: identity :: errors :: asset_lock_output_not_found_error :: AssetLockOutputNotFoundError) -> * const dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { ferment_interfaces :: boxed (dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { }) } unsafe fn destroy (ffi : * mut dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError_ctor () -> * mut dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { ferment_interfaces :: boxed (dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError_destroy (ffi : * mut dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod unknown_asset_lock_proof_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::identity::errors::unknown_asset_lock_proof_type_error::UnknownAssetLockProofTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { pub asset_lock_type : u8 } impl ferment_interfaces :: FFIConversion < dpp :: identity :: errors :: unknown_asset_lock_proof_type_error :: UnknownAssetLockProofTypeError > for dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { unsafe fn ffi_from_const (ffi : * const dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError) -> dpp :: identity :: errors :: unknown_asset_lock_proof_type_error :: UnknownAssetLockProofTypeError { let ffi_ref = & * ffi ; dpp :: identity :: errors :: unknown_asset_lock_proof_type_error :: UnknownAssetLockProofTypeError { asset_lock_type : (ffi_ref . asset_lock_type > 0) . then (|| ffi_ref . asset_lock_type) } } unsafe fn ffi_to_const (obj : dpp :: identity :: errors :: unknown_asset_lock_proof_type_error :: UnknownAssetLockProofTypeError) -> * const dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { ferment_interfaces :: boxed (dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { asset_lock_type : obj . asset_lock_type . unwrap_or (0) }) } unsafe fn destroy (ffi : * mut dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError_ctor (asset_lock_type : u8) -> * mut dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { ferment_interfaces :: boxed (dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { asset_lock_type }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError_destroy (ffi : * mut dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError_get_asset_lock_type (obj : * const dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError) -> u8 { (* obj) . asset_lock_type } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError_set_asset_lock_type (obj : * mut dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError , value : u8) { (* obj) . asset_lock_type = value ; } } } pub mod identity { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::identity::identity::PartialIdentity`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_identity_PartialIdentity { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub loaded_public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey , pub balance : u64 , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub not_found_public_keys : * mut crate :: fermented :: generics :: std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversion < dpp :: identity :: identity :: PartialIdentity > for dpp_identity_identity_PartialIdentity { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_PartialIdentity) -> dpp :: identity :: identity :: PartialIdentity { let ffi_ref = & * ffi ; dpp :: identity :: identity :: PartialIdentity { id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . id) , loaded_public_keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . loaded_public_keys) , balance : (ffi_ref . balance > 0) . then (|| ffi_ref . balance) , revision : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . revision) , not_found_public_keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . not_found_public_keys) } } unsafe fn ffi_to_const (obj : dpp :: identity :: identity :: PartialIdentity) -> * const dpp_identity_identity_PartialIdentity { ferment_interfaces :: boxed (dpp_identity_identity_PartialIdentity { id : ferment_interfaces :: FFIConversion :: ffi_to (obj . id) , loaded_public_keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . loaded_public_keys) , balance : obj . balance . unwrap_or (0) , revision : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . revision) , not_found_public_keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . not_found_public_keys) }) } unsafe fn destroy (ffi : * mut dpp_identity_identity_PartialIdentity) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_identity_PartialIdentity { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; ferment_interfaces :: unbox_any (ffi_ref . loaded_public_keys) ; ; ; if ! (ffi_ref . revision) . is_null () { ferment_interfaces :: unbox_any (ffi_ref . revision) ; } ; ferment_interfaces :: unbox_any (ffi_ref . not_found_public_keys) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_ctor (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , loaded_public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey , balance : u64 , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , not_found_public_keys : * mut crate :: fermented :: generics :: std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID) -> * mut dpp_identity_identity_PartialIdentity { ferment_interfaces :: boxed (dpp_identity_identity_PartialIdentity { id , loaded_public_keys , balance , revision , not_found_public_keys }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_destroy (ffi : * mut dpp_identity_identity_PartialIdentity) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_get_id (obj : * const dpp_identity_identity_PartialIdentity) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_get_loaded_public_keys (obj : * const dpp_identity_identity_PartialIdentity) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { (* obj) . loaded_public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_get_balance (obj : * const dpp_identity_identity_PartialIdentity) -> u64 { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_get_revision (obj : * const dpp_identity_identity_PartialIdentity) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_get_not_found_public_keys (obj : * const dpp_identity_identity_PartialIdentity) -> * mut crate :: fermented :: generics :: std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { (* obj) . not_found_public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_set_id (obj : * mut dpp_identity_identity_PartialIdentity , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_set_loaded_public_keys (obj : * mut dpp_identity_identity_PartialIdentity , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey) { (* obj) . loaded_public_keys = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_set_balance (obj : * mut dpp_identity_identity_PartialIdentity , value : u64) { (* obj) . balance = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_set_revision (obj : * mut dpp_identity_identity_PartialIdentity , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . revision = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_set_not_found_public_keys (obj : * mut dpp_identity_identity_PartialIdentity , value : * mut crate :: fermented :: generics :: std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID) { (* obj) . not_found_public_keys = value ; } # [doc = "FFI-representation of the [`dpp::identity::identity::Identity`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_identity_identity_Identity { V0 (* mut crate :: fermented :: types :: dpp :: identity :: v0 :: dpp_identity_v0_IdentityV0) } impl ferment_interfaces :: FFIConversion < dpp :: identity :: identity :: Identity > for dpp_identity_identity_Identity { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_Identity) -> dpp :: identity :: identity :: Identity { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_Identity :: V0 (o_0) => dpp :: identity :: identity :: Identity :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: identity :: identity :: Identity) -> * const dpp_identity_identity_Identity { ferment_interfaces :: boxed (match obj { dpp :: identity :: identity :: Identity :: V0 (o_0) => dpp_identity_identity_Identity :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_identity_identity_Identity) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_identity_identity_Identity { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_Identity :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_Identity_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: identity :: v0 :: dpp_identity_v0_IdentityV0) -> * mut dpp_identity_identity_Identity { ferment_interfaces :: boxed (dpp_identity_identity_Identity :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_Identity_destroy (ffi : * mut dpp_identity_identity_Identity) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod methods { use crate as ferment_example_platform ; pub mod create_basic_identity { use crate as ferment_example_platform ; } } pub mod conversion { use crate as ferment_example_platform ; pub mod json { use crate as ferment_example_platform ; } pub mod platform_value { use crate as ferment_example_platform ; } pub mod cbor { use crate as ferment_example_platform ; } } pub mod v0 { use crate as ferment_example_platform ; pub mod public_key_serialization { use crate as ferment_example_platform ; } pub mod conversion { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp::identity::v0::IdentityV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_v0_IdentityV0 { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey , pub balance : u64 , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision } impl ferment_interfaces :: FFIConversion < dpp :: identity :: v0 :: IdentityV0 > for dpp_identity_v0_IdentityV0 { unsafe fn ffi_from_const (ffi : * const dpp_identity_v0_IdentityV0) -> dpp :: identity :: v0 :: IdentityV0 { let ffi_ref = & * ffi ; dpp :: identity :: v0 :: IdentityV0 { id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . id) , public_keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_keys) , balance : ffi_ref . balance , revision : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . revision) } } unsafe fn ffi_to_const (obj : dpp :: identity :: v0 :: IdentityV0) -> * const dpp_identity_v0_IdentityV0 { ferment_interfaces :: boxed (dpp_identity_v0_IdentityV0 { id : ferment_interfaces :: FFIConversion :: ffi_to (obj . id) , public_keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_keys) , balance : obj . balance , revision : ferment_interfaces :: FFIConversion :: ffi_to (obj . revision) }) } unsafe fn destroy (ffi : * mut dpp_identity_v0_IdentityV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_v0_IdentityV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; ferment_interfaces :: unbox_any (ffi_ref . public_keys) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . revision) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_ctor (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey , balance : u64 , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) -> * mut dpp_identity_v0_IdentityV0 { ferment_interfaces :: boxed (dpp_identity_v0_IdentityV0 { id , public_keys , balance , revision }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_destroy (ffi : * mut dpp_identity_v0_IdentityV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_get_id (obj : * const dpp_identity_v0_IdentityV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_get_public_keys (obj : * const dpp_identity_v0_IdentityV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { (* obj) . public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_get_balance (obj : * const dpp_identity_v0_IdentityV0) -> u64 { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_get_revision (obj : * const dpp_identity_v0_IdentityV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_set_id (obj : * mut dpp_identity_v0_IdentityV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_set_public_keys (obj : * mut dpp_identity_v0_IdentityV0 , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey) { (* obj) . public_keys = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_set_balance (obj : * mut dpp_identity_v0_IdentityV0 , value : u64) { (* obj) . balance = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_set_revision (obj : * mut dpp_identity_v0_IdentityV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . revision = value ; } } pub mod state_transition { use crate as ferment_example_platform ; pub mod asset_lock_proof { use crate as ferment_example_platform ; pub mod validate_asset_lock_transaction_structure { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp::identity::state_transition::asset_lock_proof::AssetLockProof`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_identity_state_transition_asset_lock_proof_AssetLockProof { Instant (* mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) , Chain (* mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) } impl ferment_interfaces :: FFIConversion < dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof > for dpp_identity_state_transition_asset_lock_proof_AssetLockProof { unsafe fn ffi_from_const (ffi : * const dpp_identity_state_transition_asset_lock_proof_AssetLockProof) -> dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Instant (o_0) => dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof :: Instant (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Chain (o_0) => dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof :: Chain (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof) -> * const dpp_identity_state_transition_asset_lock_proof_AssetLockProof { ferment_interfaces :: boxed (match obj { dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof :: Instant (o_0) => dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Instant (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof :: Chain (o_0) => dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Chain (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_identity_state_transition_asset_lock_proof_AssetLockProof) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_identity_state_transition_asset_lock_proof_AssetLockProof { fn drop (& mut self) { unsafe { match self { dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Instant (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Chain (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_AssetLockProof_Instant_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) -> * mut dpp_identity_state_transition_asset_lock_proof_AssetLockProof { ferment_interfaces :: boxed (dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Instant (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_AssetLockProof_Chain_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) -> * mut dpp_identity_state_transition_asset_lock_proof_AssetLockProof { ferment_interfaces :: boxed (dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Chain (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_AssetLockProof_destroy (ffi : * mut dpp_identity_state_transition_asset_lock_proof_AssetLockProof) { ferment_interfaces :: unbox_any (ffi) ; } pub mod chain { use crate as ferment_example_platform ; pub mod chain_asset_lock_proof { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::identity::state_transition::asset_lock_proof::chain::chain_asset_lock_proof::ChainAssetLockProof`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { pub core_chain_locked_height : u32 , pub out_point : * mut dashcore :: OutPoint } impl ferment_interfaces :: FFIConversion < dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: ChainAssetLockProof > for dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { unsafe fn ffi_from_const (ffi : * const dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) -> dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: ChainAssetLockProof { let ffi_ref = & * ffi ; dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: ChainAssetLockProof { core_chain_locked_height : ffi_ref . core_chain_locked_height , out_point : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . out_point) } } unsafe fn ffi_to_const (obj : dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: ChainAssetLockProof) -> * const dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { ferment_interfaces :: boxed (dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { core_chain_locked_height : obj . core_chain_locked_height , out_point : ferment_interfaces :: FFIConversion :: ffi_to (obj . out_point) }) } unsafe fn destroy (ffi : * mut dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment_interfaces :: unbox_any (ffi_ref . out_point) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof_ctor (core_chain_locked_height : u32 , out_point : * mut dashcore :: OutPoint) -> * mut dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { ferment_interfaces :: boxed (dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { core_chain_locked_height , out_point }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof_destroy (ffi : * mut dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof_get_core_chain_locked_height (obj : * const dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) -> u32 { (* obj) . core_chain_locked_height } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof_get_out_point (obj : * const dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) -> * mut dashcore :: OutPoint { (* obj) . out_point } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof_set_core_chain_locked_height (obj : * mut dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof , value : u32) { (* obj) . core_chain_locked_height = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof_set_out_point (obj : * mut dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof , value : * mut dashcore :: OutPoint) { (* obj) . out_point = value ; } } } pub mod instant { use crate as ferment_example_platform ; pub mod methods { use crate as ferment_example_platform ; pub mod validate_structure { use crate as ferment_example_platform ; } } pub mod instant_asset_lock_proof { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::identity::state_transition::asset_lock_proof::instant::instant_asset_lock_proof::InstantAssetLockProof`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { pub instant_lock : * mut dashcore :: InstantLock , pub transaction : * mut dashcore :: Transaction , pub output_index : u32 } impl ferment_interfaces :: FFIConversion < dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: InstantAssetLockProof > for dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { unsafe fn ffi_from_const (ffi : * const dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) -> dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: InstantAssetLockProof { let ffi_ref = & * ffi ; dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: InstantAssetLockProof { instant_lock : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . instant_lock) , transaction : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . transaction) , output_index : ffi_ref . output_index } } unsafe fn ffi_to_const (obj : dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: InstantAssetLockProof) -> * const dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { ferment_interfaces :: boxed (dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { instant_lock : ferment_interfaces :: FFIConversion :: ffi_to (obj . instant_lock) , transaction : ferment_interfaces :: FFIConversion :: ffi_to (obj . transaction) , output_index : obj . output_index }) } unsafe fn destroy (ffi : * mut dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . instant_lock) ; ; ferment_interfaces :: unbox_any (ffi_ref . transaction) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_ctor (instant_lock : * mut dashcore :: InstantLock , transaction : * mut dashcore :: Transaction , output_index : u32) -> * mut dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { ferment_interfaces :: boxed (dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { instant_lock , transaction , output_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_destroy (ffi : * mut dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_get_instant_lock (obj : * const dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) -> * mut dashcore :: InstantLock { (* obj) . instant_lock } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_get_transaction (obj : * const dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) -> * mut dashcore :: Transaction { (* obj) . transaction } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_get_output_index (obj : * const dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) -> u32 { (* obj) . output_index } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_set_instant_lock (obj : * mut dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof , value : * mut dashcore :: InstantLock) { (* obj) . instant_lock = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_set_transaction (obj : * mut dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof , value : * mut dashcore :: Transaction) { (* obj) . transaction = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_set_output_index (obj : * mut dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof , value : u32) { (* obj) . output_index = value ; } } } } } pub mod fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } pub mod identity_public_key { use crate as ferment_example_platform ; pub mod contract_bounds { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::identity::identity_public_key::contract_bounds::ContractBounds`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_identity_identity_public_key_contract_bounds_ContractBounds { SingleContract { id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } , SingleContractDocumentType { id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type_name : * mut std :: os :: raw :: c_char } } impl ferment_interfaces :: FFIConversion < dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds > for dpp_identity_identity_public_key_contract_bounds_ContractBounds { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_contract_bounds_ContractBounds) -> dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContract { id } => dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds :: SingleContract { id : ferment_interfaces :: FFIConversion :: ffi_from (* id) } , dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContractDocumentType { id , document_type_name } => dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds :: SingleContractDocumentType { id : ferment_interfaces :: FFIConversion :: ffi_from (* id) , document_type_name : ferment_interfaces :: FFIConversion :: ffi_from (* document_type_name) } } } unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds) -> * const dpp_identity_identity_public_key_contract_bounds_ContractBounds { ferment_interfaces :: boxed (match obj { dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds :: SingleContract { id } => dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContract { id : ferment_interfaces :: FFIConversion :: ffi_to (id) } , dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds :: SingleContractDocumentType { id , document_type_name } => dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContractDocumentType { id : ferment_interfaces :: FFIConversion :: ffi_to (id) , document_type_name : ferment_interfaces :: FFIConversion :: ffi_to (document_type_name) } }) } unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_contract_bounds_ContractBounds) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_identity_identity_public_key_contract_bounds_ContractBounds { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContract { id } => { ferment_interfaces :: unbox_any (* id) ; } , dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContractDocumentType { id , document_type_name } => { ferment_interfaces :: unbox_any (* id) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* document_type_name) } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_contract_bounds_ContractBounds_SingleContract_ctor (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_identity_identity_public_key_contract_bounds_ContractBounds { ferment_interfaces :: boxed (dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContract { id }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_contract_bounds_ContractBounds_SingleContractDocumentType_ctor (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type_name : * mut std :: os :: raw :: c_char) -> * mut dpp_identity_identity_public_key_contract_bounds_ContractBounds { ferment_interfaces :: boxed (dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContractDocumentType { id , document_type_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_contract_bounds_ContractBounds_destroy (ffi : * mut dpp_identity_identity_public_key_contract_bounds_ContractBounds) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod purpose { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::identity::identity_public_key::purpose::Purpose`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_identity_identity_public_key_purpose_Purpose { AUTHENTICATION = 0 , ENCRYPTION = 1 , DECRYPTION = 2 , WITHDRAW = 3 , SYSTEM = 4 , VOTING = 5 } impl ferment_interfaces :: FFIConversion < dpp :: identity :: identity_public_key :: purpose :: Purpose > for dpp_identity_identity_public_key_purpose_Purpose { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_purpose_Purpose) -> dpp :: identity :: identity_public_key :: purpose :: Purpose { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_public_key_purpose_Purpose :: AUTHENTICATION => dpp :: identity :: identity_public_key :: purpose :: Purpose :: AUTHENTICATION , dpp_identity_identity_public_key_purpose_Purpose :: ENCRYPTION => dpp :: identity :: identity_public_key :: purpose :: Purpose :: ENCRYPTION , dpp_identity_identity_public_key_purpose_Purpose :: DECRYPTION => dpp :: identity :: identity_public_key :: purpose :: Purpose :: DECRYPTION , dpp_identity_identity_public_key_purpose_Purpose :: WITHDRAW => dpp :: identity :: identity_public_key :: purpose :: Purpose :: WITHDRAW , dpp_identity_identity_public_key_purpose_Purpose :: SYSTEM => dpp :: identity :: identity_public_key :: purpose :: Purpose :: SYSTEM , dpp_identity_identity_public_key_purpose_Purpose :: VOTING => dpp :: identity :: identity_public_key :: purpose :: Purpose :: VOTING } } unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: purpose :: Purpose) -> * const dpp_identity_identity_public_key_purpose_Purpose { ferment_interfaces :: boxed (match obj { dpp :: identity :: identity_public_key :: purpose :: Purpose :: AUTHENTICATION => dpp_identity_identity_public_key_purpose_Purpose :: AUTHENTICATION , dpp :: identity :: identity_public_key :: purpose :: Purpose :: ENCRYPTION => dpp_identity_identity_public_key_purpose_Purpose :: ENCRYPTION , dpp :: identity :: identity_public_key :: purpose :: Purpose :: DECRYPTION => dpp_identity_identity_public_key_purpose_Purpose :: DECRYPTION , dpp :: identity :: identity_public_key :: purpose :: Purpose :: WITHDRAW => dpp_identity_identity_public_key_purpose_Purpose :: WITHDRAW , dpp :: identity :: identity_public_key :: purpose :: Purpose :: SYSTEM => dpp_identity_identity_public_key_purpose_Purpose :: SYSTEM , dpp :: identity :: identity_public_key :: purpose :: Purpose :: VOTING => dpp_identity_identity_public_key_purpose_Purpose :: VOTING }) } unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_purpose_Purpose) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_identity_identity_public_key_purpose_Purpose { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_public_key_purpose_Purpose :: AUTHENTICATION => { } , dpp_identity_identity_public_key_purpose_Purpose :: ENCRYPTION => { } , dpp_identity_identity_public_key_purpose_Purpose :: DECRYPTION => { } , dpp_identity_identity_public_key_purpose_Purpose :: WITHDRAW => { } , dpp_identity_identity_public_key_purpose_Purpose :: SYSTEM => { } , dpp_identity_identity_public_key_purpose_Purpose :: VOTING => { } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_AUTHENTICATION_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment_interfaces :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: AUTHENTICATION) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_ENCRYPTION_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment_interfaces :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: ENCRYPTION) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_DECRYPTION_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment_interfaces :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: DECRYPTION) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_WITHDRAW_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment_interfaces :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: WITHDRAW) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_SYSTEM_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment_interfaces :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: SYSTEM) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_VOTING_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment_interfaces :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: VOTING) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_destroy (ffi : * mut dpp_identity_identity_public_key_purpose_Purpose) { ferment_interfaces :: unbox_any (ffi) ; } } # [doc = "FFI-representation of the [`dpp::identity::identity_public_key::KeyID`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_identity_public_key_KeyID (u32) ; impl ferment_interfaces :: FFIConversion < dpp :: identity :: identity_public_key :: KeyID > for dpp_identity_identity_public_key_KeyID { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_KeyID) -> dpp :: identity :: identity_public_key :: KeyID { let ffi_ref = & * ffi ; ffi_ref . 0 } unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: KeyID) -> * const dpp_identity_identity_public_key_KeyID { ferment_interfaces :: boxed (dpp_identity_identity_public_key_KeyID (obj)) } unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_KeyID) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_identity_public_key_KeyID { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyID_ctor (o_0 : u32) -> * mut dpp_identity_identity_public_key_KeyID { ferment_interfaces :: boxed (dpp_identity_identity_public_key_KeyID (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyID_destroy (ffi : * mut dpp_identity_identity_public_key_KeyID) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyID_get_0 (obj : * const dpp_identity_identity_public_key_KeyID) -> u32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyID_set_0 (obj : * mut dpp_identity_identity_public_key_KeyID , value : u32) { (* obj) . 0 = value ; } pub mod accessors { use crate as ferment_example_platform ; } pub mod tests { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp::identity::identity_public_key::IdentityPublicKey`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_identity_identity_public_key_IdentityPublicKey { V0 (* mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: v0 :: dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) } impl ferment_interfaces :: FFIConversion < dpp :: identity :: identity_public_key :: IdentityPublicKey > for dpp_identity_identity_public_key_IdentityPublicKey { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_IdentityPublicKey) -> dpp :: identity :: identity_public_key :: IdentityPublicKey { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_public_key_IdentityPublicKey :: V0 (o_0) => dpp :: identity :: identity_public_key :: IdentityPublicKey :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: IdentityPublicKey) -> * const dpp_identity_identity_public_key_IdentityPublicKey { ferment_interfaces :: boxed (match obj { dpp :: identity :: identity_public_key :: IdentityPublicKey :: V0 (o_0) => dpp_identity_identity_public_key_IdentityPublicKey :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_IdentityPublicKey) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_identity_identity_public_key_IdentityPublicKey { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_public_key_IdentityPublicKey :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_IdentityPublicKey_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: v0 :: dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut dpp_identity_identity_public_key_IdentityPublicKey { ferment_interfaces :: boxed (dpp_identity_identity_public_key_IdentityPublicKey :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_IdentityPublicKey_destroy (ffi : * mut dpp_identity_identity_public_key_IdentityPublicKey) { ferment_interfaces :: unbox_any (ffi) ; } pub mod key_type { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::identity::identity_public_key::key_type::KeyType`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_identity_identity_public_key_key_type_KeyType { ECDSA_SECP256K1 = 0 , BLS12_381 = 1 , ECDSA_HASH160 = 2 , BIP13_SCRIPT_HASH = 3 , EDDSA_25519_HASH160 = 4 } impl ferment_interfaces :: FFIConversion < dpp :: identity :: identity_public_key :: key_type :: KeyType > for dpp_identity_identity_public_key_key_type_KeyType { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_key_type_KeyType) -> dpp :: identity :: identity_public_key :: key_type :: KeyType { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_SECP256K1 => dpp :: identity :: identity_public_key :: key_type :: KeyType :: ECDSA_SECP256K1 , dpp_identity_identity_public_key_key_type_KeyType :: BLS12_381 => dpp :: identity :: identity_public_key :: key_type :: KeyType :: BLS12_381 , dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_HASH160 => dpp :: identity :: identity_public_key :: key_type :: KeyType :: ECDSA_HASH160 , dpp_identity_identity_public_key_key_type_KeyType :: BIP13_SCRIPT_HASH => dpp :: identity :: identity_public_key :: key_type :: KeyType :: BIP13_SCRIPT_HASH , dpp_identity_identity_public_key_key_type_KeyType :: EDDSA_25519_HASH160 => dpp :: identity :: identity_public_key :: key_type :: KeyType :: EDDSA_25519_HASH160 } } unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: key_type :: KeyType) -> * const dpp_identity_identity_public_key_key_type_KeyType { ferment_interfaces :: boxed (match obj { dpp :: identity :: identity_public_key :: key_type :: KeyType :: ECDSA_SECP256K1 => dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_SECP256K1 , dpp :: identity :: identity_public_key :: key_type :: KeyType :: BLS12_381 => dpp_identity_identity_public_key_key_type_KeyType :: BLS12_381 , dpp :: identity :: identity_public_key :: key_type :: KeyType :: ECDSA_HASH160 => dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_HASH160 , dpp :: identity :: identity_public_key :: key_type :: KeyType :: BIP13_SCRIPT_HASH => dpp_identity_identity_public_key_key_type_KeyType :: BIP13_SCRIPT_HASH , dpp :: identity :: identity_public_key :: key_type :: KeyType :: EDDSA_25519_HASH160 => dpp_identity_identity_public_key_key_type_KeyType :: EDDSA_25519_HASH160 }) } unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_key_type_KeyType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_identity_identity_public_key_key_type_KeyType { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_SECP256K1 => { } , dpp_identity_identity_public_key_key_type_KeyType :: BLS12_381 => { } , dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_HASH160 => { } , dpp_identity_identity_public_key_key_type_KeyType :: BIP13_SCRIPT_HASH => { } , dpp_identity_identity_public_key_key_type_KeyType :: EDDSA_25519_HASH160 => { } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_ECDSA_SECP256K1_ctor () -> * mut dpp_identity_identity_public_key_key_type_KeyType { ferment_interfaces :: boxed (dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_SECP256K1) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_BLS12_381_ctor () -> * mut dpp_identity_identity_public_key_key_type_KeyType { ferment_interfaces :: boxed (dpp_identity_identity_public_key_key_type_KeyType :: BLS12_381) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_ECDSA_HASH160_ctor () -> * mut dpp_identity_identity_public_key_key_type_KeyType { ferment_interfaces :: boxed (dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_HASH160) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_BIP13_SCRIPT_HASH_ctor () -> * mut dpp_identity_identity_public_key_key_type_KeyType { ferment_interfaces :: boxed (dpp_identity_identity_public_key_key_type_KeyType :: BIP13_SCRIPT_HASH) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_EDDSA_25519_HASH160_ctor () -> * mut dpp_identity_identity_public_key_key_type_KeyType { ferment_interfaces :: boxed (dpp_identity_identity_public_key_key_type_KeyType :: EDDSA_25519_HASH160) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_destroy (ffi : * mut dpp_identity_identity_public_key_key_type_KeyType) { ferment_interfaces :: unbox_any (ffi) ; } } # [doc = "FFI-representation of the [`dpp::identity::identity_public_key::KeyCount`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_identity_public_key_KeyCount (* mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) ; impl ferment_interfaces :: FFIConversion < dpp :: identity :: identity_public_key :: KeyCount > for dpp_identity_identity_public_key_KeyCount { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_KeyCount) -> dpp :: identity :: identity_public_key :: KeyCount { let ffi_ref = & * ffi ; ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0) } unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: KeyCount) -> * const dpp_identity_identity_public_key_KeyCount { ferment_interfaces :: boxed (dpp_identity_identity_public_key_KeyCount (ferment_interfaces :: FFIConversion :: ffi_to (obj))) } unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_KeyCount) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_identity_public_key_KeyCount { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyCount_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_identity_identity_public_key_KeyCount { ferment_interfaces :: boxed (dpp_identity_identity_public_key_KeyCount (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyCount_destroy (ffi : * mut dpp_identity_identity_public_key_KeyCount) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyCount_get_0 (obj : * const dpp_identity_identity_public_key_KeyCount) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyCount_set_0 (obj : * mut dpp_identity_identity_public_key_KeyCount , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . 0 = value ; } pub mod security_level { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::identity::identity_public_key::security_level::SecurityLevel`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_identity_identity_public_key_security_level_SecurityLevel { MASTER = 0 , CRITICAL = 1 , HIGH = 2 , MEDIUM = 3 } impl ferment_interfaces :: FFIConversion < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel > for dpp_identity_identity_public_key_security_level_SecurityLevel { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_security_level_SecurityLevel) -> dpp :: identity :: identity_public_key :: security_level :: SecurityLevel { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_public_key_security_level_SecurityLevel :: MASTER => dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: MASTER , dpp_identity_identity_public_key_security_level_SecurityLevel :: CRITICAL => dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: CRITICAL , dpp_identity_identity_public_key_security_level_SecurityLevel :: HIGH => dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: HIGH , dpp_identity_identity_public_key_security_level_SecurityLevel :: MEDIUM => dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: MEDIUM } } unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: security_level :: SecurityLevel) -> * const dpp_identity_identity_public_key_security_level_SecurityLevel { ferment_interfaces :: boxed (match obj { dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: MASTER => dpp_identity_identity_public_key_security_level_SecurityLevel :: MASTER , dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: CRITICAL => dpp_identity_identity_public_key_security_level_SecurityLevel :: CRITICAL , dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: HIGH => dpp_identity_identity_public_key_security_level_SecurityLevel :: HIGH , dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: MEDIUM => dpp_identity_identity_public_key_security_level_SecurityLevel :: MEDIUM }) } unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_security_level_SecurityLevel) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_identity_identity_public_key_security_level_SecurityLevel { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_public_key_security_level_SecurityLevel :: MASTER => { } , dpp_identity_identity_public_key_security_level_SecurityLevel :: CRITICAL => { } , dpp_identity_identity_public_key_security_level_SecurityLevel :: HIGH => { } , dpp_identity_identity_public_key_security_level_SecurityLevel :: MEDIUM => { } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_security_level_SecurityLevel_MASTER_ctor () -> * mut dpp_identity_identity_public_key_security_level_SecurityLevel { ferment_interfaces :: boxed (dpp_identity_identity_public_key_security_level_SecurityLevel :: MASTER) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_security_level_SecurityLevel_CRITICAL_ctor () -> * mut dpp_identity_identity_public_key_security_level_SecurityLevel { ferment_interfaces :: boxed (dpp_identity_identity_public_key_security_level_SecurityLevel :: CRITICAL) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_security_level_SecurityLevel_HIGH_ctor () -> * mut dpp_identity_identity_public_key_security_level_SecurityLevel { ferment_interfaces :: boxed (dpp_identity_identity_public_key_security_level_SecurityLevel :: HIGH) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_security_level_SecurityLevel_MEDIUM_ctor () -> * mut dpp_identity_identity_public_key_security_level_SecurityLevel { ferment_interfaces :: boxed (dpp_identity_identity_public_key_security_level_SecurityLevel :: MEDIUM) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_security_level_SecurityLevel_destroy (ffi : * mut dpp_identity_identity_public_key_security_level_SecurityLevel) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod v0 { use crate as ferment_example_platform ; pub mod conversion { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp::identity::identity_public_key::v0::IdentityPublicKeyV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { pub id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , pub security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub contract_bounds : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds , pub key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType , pub read_only : bool , pub data : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , pub disabled_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis } impl ferment_interfaces :: FFIConversion < dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0 > for dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0 { let ffi_ref = & * ffi ; dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0 { id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . id) , purpose : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . purpose) , security_level : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . security_level) , contract_bounds : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . contract_bounds) , key_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . key_type) , read_only : ffi_ref . read_only , data : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data) , disabled_at : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . disabled_at) } } unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0) -> * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { ferment_interfaces :: boxed (dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { id : ferment_interfaces :: FFIConversion :: ffi_to (obj . id) , purpose : ferment_interfaces :: FFIConversion :: ffi_to (obj . purpose) , security_level : ferment_interfaces :: FFIConversion :: ffi_to (obj . security_level) , contract_bounds : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . contract_bounds) , key_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . key_type) , read_only : obj . read_only , data : ferment_interfaces :: FFIConversion :: ffi_to (obj . data) , disabled_at : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . disabled_at) }) } unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; ferment_interfaces :: unbox_any (ffi_ref . purpose) ; ; ferment_interfaces :: unbox_any (ffi_ref . security_level) ; ; if ! (ffi_ref . contract_bounds) . is_null () { ferment_interfaces :: unbox_any (ffi_ref . contract_bounds) ; } ; ferment_interfaces :: unbox_any (ffi_ref . key_type) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . data) ; ; if ! (ffi_ref . disabled_at) . is_null () { ferment_interfaces :: unbox_any (ffi_ref . disabled_at) ; } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_ctor (id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , contract_bounds : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds , key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType , read_only : bool , data : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , disabled_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis) -> * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { ferment_interfaces :: boxed (dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { id , purpose , security_level , contract_bounds , key_type , read_only , data , disabled_at }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_destroy (ffi : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_id (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_purpose (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . purpose } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_security_level (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . security_level } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_contract_bounds (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds { (* obj) . contract_bounds } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_key_type (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType { (* obj) . key_type } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_read_only (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> bool { (* obj) . read_only } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_data (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . data } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_disabled_at (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis { (* obj) . disabled_at } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_id (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_purpose (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) { (* obj) . purpose = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_security_level (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . security_level = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_contract_bounds (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds) { (* obj) . contract_bounds = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_key_type (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType) { (* obj) . key_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_read_only (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : bool) { (* obj) . read_only = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_data (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . data = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_disabled_at (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis) { (* obj) . disabled_at = value ; } } # [doc = "FFI-representation of the [`dpp::identity::identity_public_key::TimestampMillis`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_identity_public_key_TimestampMillis (u64) ; impl ferment_interfaces :: FFIConversion < dpp :: identity :: identity_public_key :: TimestampMillis > for dpp_identity_identity_public_key_TimestampMillis { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_TimestampMillis) -> dpp :: identity :: identity_public_key :: TimestampMillis { let ffi_ref = & * ffi ; ffi_ref . 0 } unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: TimestampMillis) -> * const dpp_identity_identity_public_key_TimestampMillis { ferment_interfaces :: boxed (dpp_identity_identity_public_key_TimestampMillis (obj)) } unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_TimestampMillis) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_identity_public_key_TimestampMillis { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_TimestampMillis_ctor (o_0 : u64) -> * mut dpp_identity_identity_public_key_TimestampMillis { ferment_interfaces :: boxed (dpp_identity_identity_public_key_TimestampMillis (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_TimestampMillis_destroy (ffi : * mut dpp_identity_identity_public_key_TimestampMillis) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_TimestampMillis_get_0 (obj : * const dpp_identity_identity_public_key_TimestampMillis) -> u64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_TimestampMillis_set_0 (obj : * mut dpp_identity_identity_public_key_TimestampMillis , value : u64) { (* obj) . 0 = value ; } pub mod methods { use crate as ferment_example_platform ; pub mod hash { use crate as ferment_example_platform ; } } pub mod conversion { use crate as ferment_example_platform ; pub mod json { use crate as ferment_example_platform ; } pub mod platform_value { use crate as ferment_example_platform ; } } } pub mod accessors { use crate as ferment_example_platform ; } } pub mod data_contract { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; pub mod conversion { use crate as ferment_example_platform ; } pub mod serialization { use crate as ferment_example_platform ; pub mod bincode { use crate as ferment_example_platform ; pub mod tests { use crate as ferment_example_platform ; } } } pub mod data_contract { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::data_contract::v0::data_contract::DataContractV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_v0_data_contract_DataContractV0 { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub version : u32 , pub owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_types : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType , pub metadata : * mut crate :: fermented :: types :: dpp :: metadata :: dpp_metadata_Metadata , pub config : * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig , pub schema_defs : * mut std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , ferment_example_platform :: custom :: platform_value_Value > } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: v0 :: data_contract :: DataContractV0 > for dpp_data_contract_v0_data_contract_DataContractV0 { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_v0_data_contract_DataContractV0) -> dpp :: data_contract :: v0 :: data_contract :: DataContractV0 { let ffi_ref = & * ffi ; dpp :: data_contract :: v0 :: data_contract :: DataContractV0 { id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . id) , version : ffi_ref . version , owner_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . owner_id) , document_types : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_types) , metadata : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . metadata) , config : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . config) , schema_defs : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . schema_defs) } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: v0 :: data_contract :: DataContractV0) -> * const dpp_data_contract_v0_data_contract_DataContractV0 { ferment_interfaces :: boxed (dpp_data_contract_v0_data_contract_DataContractV0 { id : ferment_interfaces :: FFIConversion :: ffi_to (obj . id) , version : obj . version , owner_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . owner_id) , document_types : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_types) , metadata : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . metadata) , config : ferment_interfaces :: FFIConversion :: ffi_to (obj . config) , schema_defs : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . schema_defs) }) } unsafe fn destroy (ffi : * mut dpp_data_contract_v0_data_contract_DataContractV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_v0_data_contract_DataContractV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . owner_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_types) ; ; if ! (ffi_ref . metadata) . is_null () { ferment_interfaces :: unbox_any (ffi_ref . metadata) ; } ; ferment_interfaces :: unbox_any (ffi_ref . config) ; ; if ! (ffi_ref . schema_defs) . is_null () { ferment_interfaces :: unbox_any (ffi_ref . schema_defs) ; } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_ctor (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , version : u32 , owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_types : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType , metadata : * mut crate :: fermented :: types :: dpp :: metadata :: dpp_metadata_Metadata , config : * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig , schema_defs : * mut std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , ferment_example_platform :: custom :: platform_value_Value >) -> * mut dpp_data_contract_v0_data_contract_DataContractV0 { ferment_interfaces :: boxed (dpp_data_contract_v0_data_contract_DataContractV0 { id , version , owner_id , document_types , metadata , config , schema_defs }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_destroy (ffi : * mut dpp_data_contract_v0_data_contract_DataContractV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_get_id (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_get_version (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> u32 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_get_owner_id (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_get_document_types (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { (* obj) . document_types } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_get_metadata (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: types :: dpp :: metadata :: dpp_metadata_Metadata { (* obj) . metadata } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_get_config (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig { (* obj) . config } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_get_schema_defs (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , ferment_example_platform :: custom :: platform_value_Value > { (* obj) . schema_defs } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_set_id (obj : * mut dpp_data_contract_v0_data_contract_DataContractV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_set_version (obj : * mut dpp_data_contract_v0_data_contract_DataContractV0 , value : u32) { (* obj) . version = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_set_owner_id (obj : * mut dpp_data_contract_v0_data_contract_DataContractV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . owner_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_set_document_types (obj : * mut dpp_data_contract_v0_data_contract_DataContractV0 , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType) { (* obj) . document_types = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_set_metadata (obj : * mut dpp_data_contract_v0_data_contract_DataContractV0 , value : * mut crate :: fermented :: types :: dpp :: metadata :: dpp_metadata_Metadata) { (* obj) . metadata = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_set_config (obj : * mut dpp_data_contract_v0_data_contract_DataContractV0 , value : * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig) { (* obj) . config = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_set_schema_defs (obj : * mut dpp_data_contract_v0_data_contract_DataContractV0 , value : * mut std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , ferment_example_platform :: custom :: platform_value_Value >) { (* obj) . schema_defs = value ; } pub mod test { use crate as ferment_example_platform ; } } pub mod methods { use crate as ferment_example_platform ; pub mod schema { use crate as ferment_example_platform ; pub mod test { use crate as ferment_example_platform ; } } } } pub mod errors { use crate as ferment_example_platform ; pub mod identity_not_present_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::data_contract::errors::identity_not_present_error::IdentityNotPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: errors :: identity_not_present_error :: IdentityNotPresentError > for dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError) -> dpp :: data_contract :: errors :: identity_not_present_error :: IdentityNotPresentError { let ffi_ref = & * ffi ; dpp :: data_contract :: errors :: identity_not_present_error :: IdentityNotPresentError { id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . id) } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: errors :: identity_not_present_error :: IdentityNotPresentError) -> * const dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { ferment_interfaces :: boxed (dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { id : ferment_interfaces :: FFIConversion :: ffi_to (obj . id) }) } unsafe fn destroy (ffi : * mut dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError_ctor (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { ferment_interfaces :: boxed (dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { id }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError_destroy (ffi : * mut dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError_get_id (obj : * const dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError_set_id (obj : * mut dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . id = value ; } } pub mod structure { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::data_contract::errors::structure::StructureError`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_data_contract_errors_structure_StructureError { InvalidProtocolVersion (* mut std :: os :: raw :: c_char) , InvalidCBOR (* mut std :: os :: raw :: c_char) , KeyWrongType (* mut std :: os :: raw :: c_char) , KeyWrongBounds (* mut std :: os :: raw :: c_char) , ValueWrongType (* mut std :: os :: raw :: c_char) , KeyValueMustExist (* mut std :: os :: raw :: c_char) } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: errors :: structure :: StructureError > for dpp_data_contract_errors_structure_StructureError { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_errors_structure_StructureError) -> dpp :: data_contract :: errors :: structure :: StructureError { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_errors_structure_StructureError :: InvalidProtocolVersion (o_0) => dpp :: data_contract :: errors :: structure :: StructureError :: InvalidProtocolVersion (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_errors_structure_StructureError :: InvalidCBOR (o_0) => dpp :: data_contract :: errors :: structure :: StructureError :: InvalidCBOR (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_errors_structure_StructureError :: KeyWrongType (o_0) => dpp :: data_contract :: errors :: structure :: StructureError :: KeyWrongType (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_errors_structure_StructureError :: KeyWrongBounds (o_0) => dpp :: data_contract :: errors :: structure :: StructureError :: KeyWrongBounds (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_errors_structure_StructureError :: ValueWrongType (o_0) => dpp :: data_contract :: errors :: structure :: StructureError :: ValueWrongType (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_errors_structure_StructureError :: KeyValueMustExist (o_0) => dpp :: data_contract :: errors :: structure :: StructureError :: KeyValueMustExist (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: errors :: structure :: StructureError) -> * const dpp_data_contract_errors_structure_StructureError { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: errors :: structure :: StructureError :: InvalidProtocolVersion (o_0) => dpp_data_contract_errors_structure_StructureError :: InvalidProtocolVersion (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: errors :: structure :: StructureError :: InvalidCBOR (o_0) => dpp_data_contract_errors_structure_StructureError :: InvalidCBOR (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: errors :: structure :: StructureError :: KeyWrongType (o_0) => dpp_data_contract_errors_structure_StructureError :: KeyWrongType (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: errors :: structure :: StructureError :: KeyWrongBounds (o_0) => dpp_data_contract_errors_structure_StructureError :: KeyWrongBounds (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: errors :: structure :: StructureError :: ValueWrongType (o_0) => dpp_data_contract_errors_structure_StructureError :: ValueWrongType (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: errors :: structure :: StructureError :: KeyValueMustExist (o_0) => dpp_data_contract_errors_structure_StructureError :: KeyValueMustExist (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_data_contract_errors_structure_StructureError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_errors_structure_StructureError { fn drop (& mut self) { unsafe { match self { dpp_data_contract_errors_structure_StructureError :: InvalidProtocolVersion (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } , dpp_data_contract_errors_structure_StructureError :: InvalidCBOR (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } , dpp_data_contract_errors_structure_StructureError :: KeyWrongType (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } , dpp_data_contract_errors_structure_StructureError :: KeyWrongBounds (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } , dpp_data_contract_errors_structure_StructureError :: ValueWrongType (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } , dpp_data_contract_errors_structure_StructureError :: KeyValueMustExist (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_structure_StructureError_InvalidProtocolVersion_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_structure_StructureError { ferment_interfaces :: boxed (dpp_data_contract_errors_structure_StructureError :: InvalidProtocolVersion (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_structure_StructureError_InvalidCBOR_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_structure_StructureError { ferment_interfaces :: boxed (dpp_data_contract_errors_structure_StructureError :: InvalidCBOR (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_structure_StructureError_KeyWrongType_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_structure_StructureError { ferment_interfaces :: boxed (dpp_data_contract_errors_structure_StructureError :: KeyWrongType (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_structure_StructureError_KeyWrongBounds_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_structure_StructureError { ferment_interfaces :: boxed (dpp_data_contract_errors_structure_StructureError :: KeyWrongBounds (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_structure_StructureError_ValueWrongType_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_structure_StructureError { ferment_interfaces :: boxed (dpp_data_contract_errors_structure_StructureError :: ValueWrongType (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_structure_StructureError_KeyValueMustExist_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_structure_StructureError { ferment_interfaces :: boxed (dpp_data_contract_errors_structure_StructureError :: KeyValueMustExist (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_structure_StructureError_destroy (ffi : * mut dpp_data_contract_errors_structure_StructureError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod json_schema_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::data_contract::errors::json_schema_error::JsonSchemaError`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_data_contract_errors_json_schema_error_JsonSchemaError { CreateSchemaError (* mut std :: os :: raw :: c_char) } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError > for dpp_data_contract_errors_json_schema_error_JsonSchemaError { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_errors_json_schema_error_JsonSchemaError) -> dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_errors_json_schema_error_JsonSchemaError :: CreateSchemaError (o_0) => dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError :: CreateSchemaError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError) -> * const dpp_data_contract_errors_json_schema_error_JsonSchemaError { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError :: CreateSchemaError (o_0) => dpp_data_contract_errors_json_schema_error_JsonSchemaError :: CreateSchemaError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_data_contract_errors_json_schema_error_JsonSchemaError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_errors_json_schema_error_JsonSchemaError { fn drop (& mut self) { unsafe { match self { dpp_data_contract_errors_json_schema_error_JsonSchemaError :: CreateSchemaError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_json_schema_error_JsonSchemaError_CreateSchemaError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_json_schema_error_JsonSchemaError { ferment_interfaces :: boxed (dpp_data_contract_errors_json_schema_error_JsonSchemaError :: CreateSchemaError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_json_schema_error_JsonSchemaError_destroy (ffi : * mut dpp_data_contract_errors_json_schema_error_JsonSchemaError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod invalid_document_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::data_contract::errors::invalid_document_type_error::InvalidDocumentTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { pub doc_type : * mut std :: os :: raw :: c_char , pub data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: errors :: invalid_document_type_error :: InvalidDocumentTypeError > for dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) -> dpp :: data_contract :: errors :: invalid_document_type_error :: InvalidDocumentTypeError { let ffi_ref = & * ffi ; dpp :: data_contract :: errors :: invalid_document_type_error :: InvalidDocumentTypeError { doc_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . doc_type) , data_contract : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract) } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: errors :: invalid_document_type_error :: InvalidDocumentTypeError) -> * const dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { ferment_interfaces :: boxed (dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { doc_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . doc_type) , data_contract : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract) }) } unsafe fn destroy (ffi : * mut dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . doc_type) ; ferment_interfaces :: unbox_any (ffi_ref . data_contract) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError_ctor (doc_type : * mut std :: os :: raw :: c_char , data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) -> * mut dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { ferment_interfaces :: boxed (dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { doc_type , data_contract }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError_destroy (ffi : * mut dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError_get_doc_type (obj : * const dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . doc_type } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError_get_data_contract (obj : * const dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) -> * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract { (* obj) . data_contract } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError_set_doc_type (obj : * mut dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError , value : * mut std :: os :: raw :: c_char) { (* obj) . doc_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError_set_data_contract (obj : * mut dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError , value : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) { (* obj) . data_contract = value ; } } pub mod invalid_data_contract_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::data_contract::errors::invalid_data_contract_error::InvalidDataContractError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError { pub errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , pub raw_data_contract : * mut ferment_example_platform :: custom :: platform_value_Value } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: errors :: invalid_data_contract_error :: InvalidDataContractError > for dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError) -> dpp :: data_contract :: errors :: invalid_data_contract_error :: InvalidDataContractError { let ffi_ref = & * ffi ; dpp :: data_contract :: errors :: invalid_data_contract_error :: InvalidDataContractError { errors : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . errors) , raw_data_contract : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . raw_data_contract) } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: errors :: invalid_data_contract_error :: InvalidDataContractError) -> * const dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError { errors : ferment_interfaces :: FFIConversion :: ffi_to (obj . errors) , raw_data_contract : ferment_interfaces :: FFIConversion :: ffi_to (obj . raw_data_contract) }) } unsafe fn destroy (ffi : * mut dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . errors) ; ; ferment_interfaces :: unbox_any (ffi_ref . raw_data_contract) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError_ctor (errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , raw_data_contract : * mut ferment_example_platform :: custom :: platform_value_Value) -> * mut dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError { errors , raw_data_contract }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError_destroy (ffi : * mut dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError_get_errors (obj : * const dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError) -> * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError { (* obj) . errors } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError_get_raw_data_contract (obj : * const dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError) -> * mut ferment_example_platform :: custom :: platform_value_Value { (* obj) . raw_data_contract } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError_set_errors (obj : * mut dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError , value : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError) { (* obj) . errors = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError_set_raw_data_contract (obj : * mut dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError , value : * mut ferment_example_platform :: custom :: platform_value_Value) { (* obj) . raw_data_contract = value ; } } pub mod data_contract_not_present_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::data_contract::errors::data_contract_not_present_error::DataContractNotPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: errors :: data_contract_not_present_error :: DataContractNotPresentError > for dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError) -> dpp :: data_contract :: errors :: data_contract_not_present_error :: DataContractNotPresentError { let ffi_ref = & * ffi ; dpp :: data_contract :: errors :: data_contract_not_present_error :: DataContractNotPresentError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract_id) } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: errors :: data_contract_not_present_error :: DataContractNotPresentError) -> * const dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { ferment_interfaces :: boxed (dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract_id) }) } unsafe fn destroy (ffi : * mut dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError_ctor (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { ferment_interfaces :: boxed (dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError_destroy (ffi : * mut dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError_get_data_contract_id (obj : * const dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError_set_data_contract_id (obj : * mut dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } } pub mod contract { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::data_contract::errors::contract::DataContractError`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_data_contract_errors_contract_DataContractError { DataContractAlreadyExistsError , InvalidDataContractError { errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , raw_data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract } , InvalidDocumentTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) , MissingRequiredKey (* mut std :: os :: raw :: c_char) , FieldRequirementUnmet (* mut std :: os :: raw :: c_char) , KeyWrongType (* mut std :: os :: raw :: c_char) , ValueWrongType (* mut std :: os :: raw :: c_char) , ValueDecodingError (* mut std :: os :: raw :: c_char) , EncodingDataStructureNotSupported (* mut std :: os :: raw :: c_char) , InvalidContractStructure (* mut std :: os :: raw :: c_char) , DocumentTypeNotFound (* mut std :: os :: raw :: c_char) , DocumentTypeFieldNotFound (* mut std :: os :: raw :: c_char) , ReferenceDefinitionNotFound (* mut std :: os :: raw :: c_char) , DocumentOwnerIdMissing (* mut std :: os :: raw :: c_char) , DocumentIdMissing (* mut std :: os :: raw :: c_char) , Unsupported (* mut std :: os :: raw :: c_char) , CorruptedSerialization (* mut std :: os :: raw :: c_char) , CorruptedCodeExecution (* mut std :: os :: raw :: c_char) , JsonSchema (* mut crate :: fermented :: types :: dpp :: data_contract :: errors :: json_schema_error :: dpp_data_contract_errors_json_schema_error_JsonSchemaError) } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: errors :: contract :: DataContractError > for dpp_data_contract_errors_contract_DataContractError { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_errors_contract_DataContractError) -> dpp :: data_contract :: errors :: contract :: DataContractError { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_errors_contract_DataContractError :: DataContractAlreadyExistsError => dpp :: data_contract :: errors :: contract :: DataContractError :: DataContractAlreadyExistsError , dpp_data_contract_errors_contract_DataContractError :: InvalidDataContractError { errors , raw_data_contract } => dpp :: data_contract :: errors :: contract :: DataContractError :: InvalidDataContractError { errors : ferment_interfaces :: FFIConversion :: ffi_from (* errors) , raw_data_contract : ferment_interfaces :: FFIConversion :: ffi_from (* raw_data_contract) } , dpp_data_contract_errors_contract_DataContractError :: InvalidDocumentTypeError (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: InvalidDocumentTypeError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: MissingRequiredKey (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: MissingRequiredKey (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: FieldRequirementUnmet (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: FieldRequirementUnmet (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: KeyWrongType (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: KeyWrongType (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: ValueWrongType (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: ValueWrongType (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: ValueDecodingError (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: ValueDecodingError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: EncodingDataStructureNotSupported (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: EncodingDataStructureNotSupported (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: InvalidContractStructure (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: InvalidContractStructure (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: DocumentTypeNotFound (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentTypeNotFound (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: DocumentTypeFieldNotFound (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentTypeFieldNotFound (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: ReferenceDefinitionNotFound (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: ReferenceDefinitionNotFound (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: DocumentOwnerIdMissing (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentOwnerIdMissing (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: DocumentIdMissing (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentIdMissing (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: Unsupported (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: Unsupported (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: CorruptedSerialization (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: CorruptedSerialization (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: CorruptedCodeExecution (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: CorruptedCodeExecution (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: JsonSchema (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: JsonSchema (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: errors :: contract :: DataContractError) -> * const dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: errors :: contract :: DataContractError :: DataContractAlreadyExistsError => dpp_data_contract_errors_contract_DataContractError :: DataContractAlreadyExistsError , dpp :: data_contract :: errors :: contract :: DataContractError :: InvalidDataContractError { errors , raw_data_contract } => dpp_data_contract_errors_contract_DataContractError :: InvalidDataContractError { errors : ferment_interfaces :: FFIConversion :: ffi_to (errors) , raw_data_contract : ferment_interfaces :: FFIConversion :: ffi_to (raw_data_contract) } , dpp :: data_contract :: errors :: contract :: DataContractError :: InvalidDocumentTypeError (o_0) => dpp_data_contract_errors_contract_DataContractError :: InvalidDocumentTypeError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: MissingRequiredKey (o_0) => dpp_data_contract_errors_contract_DataContractError :: MissingRequiredKey (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: FieldRequirementUnmet (o_0) => dpp_data_contract_errors_contract_DataContractError :: FieldRequirementUnmet (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: KeyWrongType (o_0) => dpp_data_contract_errors_contract_DataContractError :: KeyWrongType (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: ValueWrongType (o_0) => dpp_data_contract_errors_contract_DataContractError :: ValueWrongType (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: ValueDecodingError (o_0) => dpp_data_contract_errors_contract_DataContractError :: ValueDecodingError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: EncodingDataStructureNotSupported (o_0) => dpp_data_contract_errors_contract_DataContractError :: EncodingDataStructureNotSupported (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: InvalidContractStructure (o_0) => dpp_data_contract_errors_contract_DataContractError :: InvalidContractStructure (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentTypeNotFound (o_0) => dpp_data_contract_errors_contract_DataContractError :: DocumentTypeNotFound (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentTypeFieldNotFound (o_0) => dpp_data_contract_errors_contract_DataContractError :: DocumentTypeFieldNotFound (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: ReferenceDefinitionNotFound (o_0) => dpp_data_contract_errors_contract_DataContractError :: ReferenceDefinitionNotFound (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentOwnerIdMissing (o_0) => dpp_data_contract_errors_contract_DataContractError :: DocumentOwnerIdMissing (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentIdMissing (o_0) => dpp_data_contract_errors_contract_DataContractError :: DocumentIdMissing (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: Unsupported (o_0) => dpp_data_contract_errors_contract_DataContractError :: Unsupported (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: CorruptedSerialization (o_0) => dpp_data_contract_errors_contract_DataContractError :: CorruptedSerialization (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: CorruptedCodeExecution (o_0) => dpp_data_contract_errors_contract_DataContractError :: CorruptedCodeExecution (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: JsonSchema (o_0) => dpp_data_contract_errors_contract_DataContractError :: JsonSchema (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_data_contract_errors_contract_DataContractError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_errors_contract_DataContractError { fn drop (& mut self) { unsafe { match self { dpp_data_contract_errors_contract_DataContractError :: DataContractAlreadyExistsError => { } , dpp_data_contract_errors_contract_DataContractError :: InvalidDataContractError { errors , raw_data_contract } => { ferment_interfaces :: unbox_any (* errors) ; ; ferment_interfaces :: unbox_any (* raw_data_contract) ; } , dpp_data_contract_errors_contract_DataContractError :: InvalidDocumentTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: MissingRequiredKey (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_data_contract_errors_contract_DataContractError :: FieldRequirementUnmet (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } , dpp_data_contract_errors_contract_DataContractError :: KeyWrongType (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } , dpp_data_contract_errors_contract_DataContractError :: ValueWrongType (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } , dpp_data_contract_errors_contract_DataContractError :: ValueDecodingError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } , dpp_data_contract_errors_contract_DataContractError :: EncodingDataStructureNotSupported (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } , dpp_data_contract_errors_contract_DataContractError :: InvalidContractStructure (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_data_contract_errors_contract_DataContractError :: DocumentTypeNotFound (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } , dpp_data_contract_errors_contract_DataContractError :: DocumentTypeFieldNotFound (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_data_contract_errors_contract_DataContractError :: ReferenceDefinitionNotFound (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } , dpp_data_contract_errors_contract_DataContractError :: DocumentOwnerIdMissing (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } , dpp_data_contract_errors_contract_DataContractError :: DocumentIdMissing (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } , dpp_data_contract_errors_contract_DataContractError :: Unsupported (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } , dpp_data_contract_errors_contract_DataContractError :: CorruptedSerialization (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } , dpp_data_contract_errors_contract_DataContractError :: CorruptedCodeExecution (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } , dpp_data_contract_errors_contract_DataContractError :: JsonSchema (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_DataContractAlreadyExistsError_ctor () -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: DataContractAlreadyExistsError) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_InvalidDataContractError_ctor (errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , raw_data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: InvalidDataContractError { errors , raw_data_contract }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_InvalidDocumentTypeError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: InvalidDocumentTypeError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_MissingRequiredKey_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: MissingRequiredKey (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_FieldRequirementUnmet_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: FieldRequirementUnmet (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_KeyWrongType_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: KeyWrongType (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_ValueWrongType_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: ValueWrongType (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_ValueDecodingError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: ValueDecodingError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_EncodingDataStructureNotSupported_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: EncodingDataStructureNotSupported (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_InvalidContractStructure_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: InvalidContractStructure (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_DocumentTypeNotFound_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: DocumentTypeNotFound (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_DocumentTypeFieldNotFound_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: DocumentTypeFieldNotFound (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_ReferenceDefinitionNotFound_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: ReferenceDefinitionNotFound (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_DocumentOwnerIdMissing_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: DocumentOwnerIdMissing (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_DocumentIdMissing_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: DocumentIdMissing (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_Unsupported_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: Unsupported (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_CorruptedSerialization_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: CorruptedSerialization (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_CorruptedCodeExecution_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: CorruptedCodeExecution (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_JsonSchema_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: errors :: json_schema_error :: dpp_data_contract_errors_json_schema_error_JsonSchemaError) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment_interfaces :: boxed (dpp_data_contract_errors_contract_DataContractError :: JsonSchema (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_destroy (ffi : * mut dpp_data_contract_errors_contract_DataContractError) { ferment_interfaces :: unbox_any (ffi) ; } } } pub mod serialized_version { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::data_contract::serialized_version::v0::DataContractInSerializationFormatV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub config : * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig , pub version : u32 , pub owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub schema_defs : * mut std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , ferment_example_platform :: custom :: platform_value_Value > , pub document_schemas : * mut std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , ferment_example_platform :: custom :: platform_value_Value > } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: serialized_version :: v0 :: DataContractInSerializationFormatV0 > for dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> dpp :: data_contract :: serialized_version :: v0 :: DataContractInSerializationFormatV0 { let ffi_ref = & * ffi ; dpp :: data_contract :: serialized_version :: v0 :: DataContractInSerializationFormatV0 { id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . id) , config : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . config) , version : ffi_ref . version , owner_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . owner_id) , schema_defs : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . schema_defs) , document_schemas : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_schemas) } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: serialized_version :: v0 :: DataContractInSerializationFormatV0) -> * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { ferment_interfaces :: boxed (dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { id : ferment_interfaces :: FFIConversion :: ffi_to (obj . id) , config : ferment_interfaces :: FFIConversion :: ffi_to (obj . config) , version : obj . version , owner_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . owner_id) , schema_defs : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . schema_defs) , document_schemas : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_schemas) }) } unsafe fn destroy (ffi : * mut dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; ferment_interfaces :: unbox_any (ffi_ref . config) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . owner_id) ; ; if ! (ffi_ref . schema_defs) . is_null () { ferment_interfaces :: unbox_any (ffi_ref . schema_defs) ; } ; ferment_interfaces :: unbox_any (ffi_ref . document_schemas) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_ctor (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , config : * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig , version : u32 , owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , schema_defs : * mut std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , ferment_example_platform :: custom :: platform_value_Value > , document_schemas : * mut std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , ferment_example_platform :: custom :: platform_value_Value >) -> * mut dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { ferment_interfaces :: boxed (dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { id , config , version , owner_id , schema_defs , document_schemas }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_destroy (ffi : * mut dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_get_id (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_get_config (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig { (* obj) . config } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_get_version (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> u32 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_get_owner_id (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_get_schema_defs (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , ferment_example_platform :: custom :: platform_value_Value > { (* obj) . schema_defs } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_get_document_schemas (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , ferment_example_platform :: custom :: platform_value_Value > { (* obj) . document_schemas } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_set_id (obj : * mut dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_set_config (obj : * mut dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 , value : * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig) { (* obj) . config = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_set_version (obj : * mut dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 , value : u32) { (* obj) . version = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_set_owner_id (obj : * mut dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . owner_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_set_schema_defs (obj : * mut dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 , value : * mut std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , ferment_example_platform :: custom :: platform_value_Value >) { (* obj) . schema_defs = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_set_document_schemas (obj : * mut dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 , value : * mut std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , ferment_example_platform :: custom :: platform_value_Value >) { (* obj) . document_schemas = value ; } pub mod property_names { use crate as ferment_example_platform ; } } # [doc = "FFI-representation of the [`dpp::data_contract::serialized_version::DataContractInSerializationFormat`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_data_contract_serialized_version_DataContractInSerializationFormat { V0 (* mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: v0 :: dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat > for dpp_data_contract_serialized_version_DataContractInSerializationFormat { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_serialized_version_DataContractInSerializationFormat) -> dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_serialized_version_DataContractInSerializationFormat :: V0 (o_0) => dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat) -> * const dpp_data_contract_serialized_version_DataContractInSerializationFormat { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat :: V0 (o_0) => dpp_data_contract_serialized_version_DataContractInSerializationFormat :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_data_contract_serialized_version_DataContractInSerializationFormat) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_serialized_version_DataContractInSerializationFormat { fn drop (& mut self) { unsafe { match self { dpp_data_contract_serialized_version_DataContractInSerializationFormat :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_DataContractInSerializationFormat_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: v0 :: dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut dpp_data_contract_serialized_version_DataContractInSerializationFormat { ferment_interfaces :: boxed (dpp_data_contract_serialized_version_DataContractInSerializationFormat :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_DataContractInSerializationFormat_destroy (ffi : * mut dpp_data_contract_serialized_version_DataContractInSerializationFormat) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod config { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::data_contract::config::v0::DataContractConfigV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_config_v0_DataContractConfigV0 { pub can_be_deleted : bool , pub readonly : bool , pub keeps_history : bool , pub documents_keep_history_contract_default : bool , pub documents_mutable_contract_default : bool , pub requires_identity_encryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements , pub requires_identity_decryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: config :: v0 :: DataContractConfigV0 > for dpp_data_contract_config_v0_DataContractConfigV0 { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_config_v0_DataContractConfigV0) -> dpp :: data_contract :: config :: v0 :: DataContractConfigV0 { let ffi_ref = & * ffi ; dpp :: data_contract :: config :: v0 :: DataContractConfigV0 { can_be_deleted : ffi_ref . can_be_deleted , readonly : ffi_ref . readonly , keeps_history : ffi_ref . keeps_history , documents_keep_history_contract_default : ffi_ref . documents_keep_history_contract_default , documents_mutable_contract_default : ffi_ref . documents_mutable_contract_default , requires_identity_encryption_bounded_key : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . requires_identity_encryption_bounded_key) , requires_identity_decryption_bounded_key : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . requires_identity_decryption_bounded_key) } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: config :: v0 :: DataContractConfigV0) -> * const dpp_data_contract_config_v0_DataContractConfigV0 { ferment_interfaces :: boxed (dpp_data_contract_config_v0_DataContractConfigV0 { can_be_deleted : obj . can_be_deleted , readonly : obj . readonly , keeps_history : obj . keeps_history , documents_keep_history_contract_default : obj . documents_keep_history_contract_default , documents_mutable_contract_default : obj . documents_mutable_contract_default , requires_identity_encryption_bounded_key : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . requires_identity_encryption_bounded_key) , requires_identity_decryption_bounded_key : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . requires_identity_decryption_bounded_key) }) } unsafe fn destroy (ffi : * mut dpp_data_contract_config_v0_DataContractConfigV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_config_v0_DataContractConfigV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ; ; if ! (ffi_ref . requires_identity_encryption_bounded_key) . is_null () { ferment_interfaces :: unbox_any (ffi_ref . requires_identity_encryption_bounded_key) ; } ; if ! (ffi_ref . requires_identity_decryption_bounded_key) . is_null () { ferment_interfaces :: unbox_any (ffi_ref . requires_identity_decryption_bounded_key) ; } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_ctor (can_be_deleted : bool , readonly : bool , keeps_history : bool , documents_keep_history_contract_default : bool , documents_mutable_contract_default : bool , requires_identity_encryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements , requires_identity_decryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements) -> * mut dpp_data_contract_config_v0_DataContractConfigV0 { ferment_interfaces :: boxed (dpp_data_contract_config_v0_DataContractConfigV0 { can_be_deleted , readonly , keeps_history , documents_keep_history_contract_default , documents_mutable_contract_default , requires_identity_encryption_bounded_key , requires_identity_decryption_bounded_key }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_destroy (ffi : * mut dpp_data_contract_config_v0_DataContractConfigV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_can_be_deleted (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . can_be_deleted } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_readonly (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . readonly } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_keeps_history (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . keeps_history } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_documents_keep_history_contract_default (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . documents_keep_history_contract_default } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_documents_mutable_contract_default (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . documents_mutable_contract_default } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_requires_identity_encryption_bounded_key (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { (* obj) . requires_identity_encryption_bounded_key } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_requires_identity_decryption_bounded_key (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { (* obj) . requires_identity_decryption_bounded_key } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_can_be_deleted (obj : * mut dpp_data_contract_config_v0_DataContractConfigV0 , value : bool) { (* obj) . can_be_deleted = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_readonly (obj : * mut dpp_data_contract_config_v0_DataContractConfigV0 , value : bool) { (* obj) . readonly = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_keeps_history (obj : * mut dpp_data_contract_config_v0_DataContractConfigV0 , value : bool) { (* obj) . keeps_history = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_documents_keep_history_contract_default (obj : * mut dpp_data_contract_config_v0_DataContractConfigV0 , value : bool) { (* obj) . documents_keep_history_contract_default = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_documents_mutable_contract_default (obj : * mut dpp_data_contract_config_v0_DataContractConfigV0 , value : bool) { (* obj) . documents_mutable_contract_default = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_requires_identity_encryption_bounded_key (obj : * mut dpp_data_contract_config_v0_DataContractConfigV0 , value : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements) { (* obj) . requires_identity_encryption_bounded_key = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_requires_identity_decryption_bounded_key (obj : * mut dpp_data_contract_config_v0_DataContractConfigV0 , value : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements) { (* obj) . requires_identity_decryption_bounded_key = value ; } } pub mod methods { use crate as ferment_example_platform ; pub mod validate_config_update { use crate as ferment_example_platform ; } } pub mod fields { use crate as ferment_example_platform ; pub mod property { use crate as ferment_example_platform ; } } # [doc = "FFI-representation of the [`dpp::data_contract::config::DataContractConfig`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_data_contract_config_DataContractConfig { V0 (* mut crate :: fermented :: types :: dpp :: data_contract :: config :: v0 :: dpp_data_contract_config_v0_DataContractConfigV0) } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: config :: DataContractConfig > for dpp_data_contract_config_DataContractConfig { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_config_DataContractConfig) -> dpp :: data_contract :: config :: DataContractConfig { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_config_DataContractConfig :: V0 (o_0) => dpp :: data_contract :: config :: DataContractConfig :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: config :: DataContractConfig) -> * const dpp_data_contract_config_DataContractConfig { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: config :: DataContractConfig :: V0 (o_0) => dpp_data_contract_config_DataContractConfig :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_data_contract_config_DataContractConfig) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_config_DataContractConfig { fn drop (& mut self) { unsafe { match self { dpp_data_contract_config_DataContractConfig :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_DataContractConfig_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: config :: v0 :: dpp_data_contract_config_v0_DataContractConfigV0) -> * mut dpp_data_contract_config_DataContractConfig { ferment_interfaces :: boxed (dpp_data_contract_config_DataContractConfig :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_DataContractConfig_destroy (ffi : * mut dpp_data_contract_config_DataContractConfig) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod factory { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; pub mod tests { use crate as ferment_example_platform ; } } } # [doc = "FFI-representation of the [`dpp::data_contract::JsonSchema`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_JsonSchema (* mut serde_json :: JsonValue) ; impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: JsonSchema > for dpp_data_contract_JsonSchema { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_JsonSchema) -> dpp :: data_contract :: JsonSchema { let ffi_ref = & * ffi ; ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0) } unsafe fn ffi_to_const (obj : dpp :: data_contract :: JsonSchema) -> * const dpp_data_contract_JsonSchema { ferment_interfaces :: boxed (dpp_data_contract_JsonSchema (ferment_interfaces :: FFIConversion :: ffi_to (obj))) } unsafe fn destroy (ffi : * mut dpp_data_contract_JsonSchema) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_JsonSchema { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_JsonSchema_ctor (o_0 : * mut serde_json :: JsonValue) -> * mut dpp_data_contract_JsonSchema { ferment_interfaces :: boxed (dpp_data_contract_JsonSchema (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_JsonSchema_destroy (ffi : * mut dpp_data_contract_JsonSchema) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_JsonSchema_get_0 (obj : * const dpp_data_contract_JsonSchema) -> * mut serde_json :: JsonValue { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_JsonSchema_set_0 (obj : * mut dpp_data_contract_JsonSchema , value : * mut serde_json :: JsonValue) { (* obj) . 0 = value ; } pub mod methods { use crate as ferment_example_platform ; pub mod schema { use crate as ferment_example_platform ; } pub mod validation { use crate as ferment_example_platform ; } } # [doc = "FFI-representation of the [`dpp::data_contract::DataContract`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_data_contract_DataContract { V0 (* mut crate :: fermented :: types :: dpp :: data_contract :: v0 :: data_contract :: dpp_data_contract_v0_data_contract_DataContractV0) } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: DataContract > for dpp_data_contract_DataContract { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_DataContract) -> dpp :: data_contract :: DataContract { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_DataContract :: V0 (o_0) => dpp :: data_contract :: DataContract :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: DataContract) -> * const dpp_data_contract_DataContract { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: DataContract :: V0 (o_0) => dpp_data_contract_DataContract :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_data_contract_DataContract) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_DataContract { fn drop (& mut self) { unsafe { match self { dpp_data_contract_DataContract :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DataContract_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: v0 :: data_contract :: dpp_data_contract_v0_data_contract_DataContractV0) -> * mut dpp_data_contract_DataContract { ferment_interfaces :: boxed (dpp_data_contract_DataContract :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DataContract_destroy (ffi : * mut dpp_data_contract_DataContract) { ferment_interfaces :: unbox_any (ffi) ; } pub mod storage_requirements { use crate as ferment_example_platform ; pub mod keys_for_document_type { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::data_contract::storage_requirements::keys_for_document_type::StorageKeyRequirements`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { Unique = 0 , Multiple = 1 , MultipleReferenceToLatest = 2 } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements > for dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements) -> dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Unique => dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements :: Unique , dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Multiple => dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements :: Multiple , dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: MultipleReferenceToLatest => dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements :: MultipleReferenceToLatest } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements) -> * const dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements :: Unique => dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Unique , dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements :: Multiple => dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Multiple , dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements :: MultipleReferenceToLatest => dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: MultipleReferenceToLatest }) } unsafe fn destroy (ffi : * mut dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { fn drop (& mut self) { unsafe { match self { dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Unique => { } , dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Multiple => { } , dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: MultipleReferenceToLatest => { } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements_Unique_ctor () -> * mut dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { ferment_interfaces :: boxed (dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Unique) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements_Multiple_ctor () -> * mut dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { ferment_interfaces :: boxed (dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Multiple) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements_MultipleReferenceToLatest_ctor () -> * mut dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { ferment_interfaces :: boxed (dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: MultipleReferenceToLatest) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements_destroy (ffi : * mut dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements) { ferment_interfaces :: unbox_any (ffi) ; } } } pub mod tests { use crate as ferment_example_platform ; } pub mod document_type { use crate as ferment_example_platform ; pub mod accessors { use crate as ferment_example_platform ; } pub mod methods { use crate as ferment_example_platform ; pub mod serialize_value_for_key { use crate as ferment_example_platform ; } pub mod estimated_size { use crate as ferment_example_platform ; } pub mod index_for_types { use crate as ferment_example_platform ; } pub mod max_size { use crate as ferment_example_platform ; } pub mod create_document_with_prevalidated_properties { use crate as ferment_example_platform ; } pub mod create_document_from_data { use crate as ferment_example_platform ; } } # [doc = "FFI-representation of the [`dpp::data_contract::document_type::DocumentType`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_data_contract_document_type_DocumentType { V0 (* mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: v0 :: dpp_data_contract_document_type_v0_DocumentTypeV0) } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: document_type :: DocumentType > for dpp_data_contract_document_type_DocumentType { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_DocumentType) -> dpp :: data_contract :: document_type :: DocumentType { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_document_type_DocumentType :: V0 (o_0) => dpp :: data_contract :: document_type :: DocumentType :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: DocumentType) -> * const dpp_data_contract_document_type_DocumentType { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: document_type :: DocumentType :: V0 (o_0) => dpp_data_contract_document_type_DocumentType :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_DocumentType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_document_type_DocumentType { fn drop (& mut self) { unsafe { match self { dpp_data_contract_document_type_DocumentType :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_DocumentType_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: v0 :: dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut dpp_data_contract_document_type_DocumentType { ferment_interfaces :: boxed (dpp_data_contract_document_type_DocumentType :: V0 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_DocumentType_destroy (ffi : * mut dpp_data_contract_document_type_DocumentType) { ferment_interfaces :: unbox_any (ffi) ; } pub mod schema { use crate as ferment_example_platform ; pub mod find_identifier_and_binary_paths { use crate as ferment_example_platform ; } pub mod validate_max_depth { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; pub mod test { use crate as ferment_example_platform ; } } } pub mod recursive_schema_validator { use crate as ferment_example_platform ; pub mod test { use crate as ferment_example_platform ; } pub mod traversal_validator { use crate as ferment_example_platform ; } pub mod byte_array_has_no_items_as_parent_validator { use crate as ferment_example_platform ; } pub mod pattern_is_valid_regex_validator { use crate as ferment_example_platform ; } } pub mod validate_schema_compatibility { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; pub mod test { use crate as ferment_example_platform ; } pub mod property_names { use crate as ferment_example_platform ; } } } pub mod enrich_with_base_schema { use crate as ferment_example_platform ; } } pub mod class_methods { use crate as ferment_example_platform ; pub mod try_from_schema { use crate as ferment_example_platform ; } pub mod create_document_types_from_document_schemas { use crate as ferment_example_platform ; } } pub mod v0 { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::data_contract::document_type::v0::DocumentTypeV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_v0_DocumentTypeV0 { pub name : * mut std :: os :: raw :: c_char , pub schema : * mut ferment_example_platform :: custom :: platform_value_Value , pub indices : * mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_index_Index , pub index_structure : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevel , pub flattened_properties : * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty , pub properties : * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty , pub identifier_paths : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , pub binary_paths : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , pub required_fields : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , pub documents_keep_history : bool , pub documents_mutable : bool , pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub requires_identity_encryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements , pub requires_identity_decryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements , pub security_level_requirement : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub json_schema_validator : * mut validator :: StatelessJsonSchemaLazyValidator } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: document_type :: v0 :: DocumentTypeV0 > for dpp_data_contract_document_type_v0_DocumentTypeV0 { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> dpp :: data_contract :: document_type :: v0 :: DocumentTypeV0 { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: v0 :: DocumentTypeV0 { name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . name) , schema : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . schema) , indices : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . indices) , index_structure : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . index_structure) , flattened_properties : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . flattened_properties) , properties : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . properties) , identifier_paths : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identifier_paths) , binary_paths : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . binary_paths) , required_fields : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . required_fields) , documents_keep_history : ffi_ref . documents_keep_history , documents_mutable : ffi_ref . documents_mutable , data_contract_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract_id) , requires_identity_encryption_bounded_key : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . requires_identity_encryption_bounded_key) , requires_identity_decryption_bounded_key : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . requires_identity_decryption_bounded_key) , security_level_requirement : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . security_level_requirement) , json_schema_validator : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . json_schema_validator) } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: v0 :: DocumentTypeV0) -> * const dpp_data_contract_document_type_v0_DocumentTypeV0 { ferment_interfaces :: boxed (dpp_data_contract_document_type_v0_DocumentTypeV0 { name : ferment_interfaces :: FFIConversion :: ffi_to (obj . name) , schema : ferment_interfaces :: FFIConversion :: ffi_to (obj . schema) , indices : ferment_interfaces :: FFIConversion :: ffi_to (obj . indices) , index_structure : ferment_interfaces :: FFIConversion :: ffi_to (obj . index_structure) , flattened_properties : ferment_interfaces :: FFIConversion :: ffi_to (obj . flattened_properties) , properties : ferment_interfaces :: FFIConversion :: ffi_to (obj . properties) , identifier_paths : ferment_interfaces :: FFIConversion :: ffi_to (obj . identifier_paths) , binary_paths : ferment_interfaces :: FFIConversion :: ffi_to (obj . binary_paths) , required_fields : ferment_interfaces :: FFIConversion :: ffi_to (obj . required_fields) , documents_keep_history : obj . documents_keep_history , documents_mutable : obj . documents_mutable , data_contract_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract_id) , requires_identity_encryption_bounded_key : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . requires_identity_encryption_bounded_key) , requires_identity_decryption_bounded_key : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . requires_identity_decryption_bounded_key) , security_level_requirement : ferment_interfaces :: FFIConversion :: ffi_to (obj . security_level_requirement) , json_schema_validator : ferment_interfaces :: FFIConversion :: ffi_to (obj . json_schema_validator) }) } unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_v0_DocumentTypeV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_document_type_v0_DocumentTypeV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . name) ; ferment_interfaces :: unbox_any (ffi_ref . schema) ; ; ferment_interfaces :: unbox_any (ffi_ref . indices) ; ; ferment_interfaces :: unbox_any (ffi_ref . index_structure) ; ; ferment_interfaces :: unbox_any (ffi_ref . flattened_properties) ; ; ferment_interfaces :: unbox_any (ffi_ref . properties) ; ; ferment_interfaces :: unbox_any (ffi_ref . identifier_paths) ; ; ferment_interfaces :: unbox_any (ffi_ref . binary_paths) ; ; ferment_interfaces :: unbox_any (ffi_ref . required_fields) ; ; ; ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; if ! (ffi_ref . requires_identity_encryption_bounded_key) . is_null () { ferment_interfaces :: unbox_any (ffi_ref . requires_identity_encryption_bounded_key) ; } ; if ! (ffi_ref . requires_identity_decryption_bounded_key) . is_null () { ferment_interfaces :: unbox_any (ffi_ref . requires_identity_decryption_bounded_key) ; } ; ferment_interfaces :: unbox_any (ffi_ref . security_level_requirement) ; ; ferment_interfaces :: unbox_any (ffi_ref . json_schema_validator) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_ctor (name : * mut std :: os :: raw :: c_char , schema : * mut ferment_example_platform :: custom :: platform_value_Value , indices : * mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_index_Index , index_structure : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevel , flattened_properties : * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty , properties : * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty , identifier_paths : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , binary_paths : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , required_fields : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , documents_keep_history : bool , documents_mutable : bool , data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , requires_identity_encryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements , requires_identity_decryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements , security_level_requirement : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , json_schema_validator : * mut validator :: StatelessJsonSchemaLazyValidator) -> * mut dpp_data_contract_document_type_v0_DocumentTypeV0 { ferment_interfaces :: boxed (dpp_data_contract_document_type_v0_DocumentTypeV0 { name , schema , indices , index_structure , flattened_properties , properties , identifier_paths , binary_paths , required_fields , documents_keep_history , documents_mutable , data_contract_id , requires_identity_encryption_bounded_key , requires_identity_decryption_bounded_key , security_level_requirement , json_schema_validator }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_destroy (ffi : * mut dpp_data_contract_document_type_v0_DocumentTypeV0) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_name (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut std :: os :: raw :: c_char { (* obj) . name } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_schema (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut ferment_example_platform :: custom :: platform_value_Value { (* obj) . schema } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_indices (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_index_Index { (* obj) . indices } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_index_structure (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevel { (* obj) . index_structure } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_flattened_properties (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { (* obj) . flattened_properties } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_properties (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { (* obj) . properties } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_identifier_paths (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: std_collections_BTreeSet_String { (* obj) . identifier_paths } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_binary_paths (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: std_collections_BTreeSet_String { (* obj) . binary_paths } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_required_fields (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: std_collections_BTreeSet_String { (* obj) . required_fields } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_documents_keep_history (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> bool { (* obj) . documents_keep_history } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_documents_mutable (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> bool { (* obj) . documents_mutable } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_data_contract_id (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_requires_identity_encryption_bounded_key (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { (* obj) . requires_identity_encryption_bounded_key } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_requires_identity_decryption_bounded_key (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { (* obj) . requires_identity_decryption_bounded_key } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_security_level_requirement (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . security_level_requirement } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_json_schema_validator (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut validator :: StatelessJsonSchemaLazyValidator { (* obj) . json_schema_validator } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_name (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut std :: os :: raw :: c_char) { (* obj) . name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_schema (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut ferment_example_platform :: custom :: platform_value_Value) { (* obj) . schema = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_indices (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_index_Index) { (* obj) . indices = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_index_structure (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevel) { (* obj) . index_structure = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_flattened_properties (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty) { (* obj) . flattened_properties = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_properties (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty) { (* obj) . properties = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_identifier_paths (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String) { (* obj) . identifier_paths = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_binary_paths (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String) { (* obj) . binary_paths = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_required_fields (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String) { (* obj) . required_fields = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_documents_keep_history (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : bool) { (* obj) . documents_keep_history = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_documents_mutable (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : bool) { (* obj) . documents_mutable = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_data_contract_id (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_requires_identity_encryption_bounded_key (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements) { (* obj) . requires_identity_encryption_bounded_key = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_requires_identity_decryption_bounded_key (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements) { (* obj) . requires_identity_decryption_bounded_key = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_security_level_requirement (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . security_level_requirement = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_json_schema_validator (obj : * mut dpp_data_contract_document_type_v0_DocumentTypeV0 , value : * mut validator :: StatelessJsonSchemaLazyValidator) { (* obj) . json_schema_validator = value ; } } pub mod property_names { use crate as ferment_example_platform ; } pub mod index { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::data_contract::document_type::index::Index`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_index_Index { pub name : * mut std :: os :: raw :: c_char , pub properties : * mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_index_IndexProperty , pub unique : bool } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: document_type :: index :: Index > for dpp_data_contract_document_type_index_Index { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_Index) -> dpp :: data_contract :: document_type :: index :: Index { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: index :: Index { name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . name) , properties : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . properties) , unique : ffi_ref . unique } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index :: Index) -> * const dpp_data_contract_document_type_index_Index { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_Index { name : ferment_interfaces :: FFIConversion :: ffi_to (obj . name) , properties : ferment_interfaces :: FFIConversion :: ffi_to (obj . properties) , unique : obj . unique }) } unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_index_Index) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_document_type_index_Index { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . name) ; ferment_interfaces :: unbox_any (ffi_ref . properties) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_ctor (name : * mut std :: os :: raw :: c_char , properties : * mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_index_IndexProperty , unique : bool) -> * mut dpp_data_contract_document_type_index_Index { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_Index { name , properties , unique }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_destroy (ffi : * mut dpp_data_contract_document_type_index_Index) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_get_name (obj : * const dpp_data_contract_document_type_index_Index) -> * mut std :: os :: raw :: c_char { (* obj) . name } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_get_properties (obj : * const dpp_data_contract_document_type_index_Index) -> * mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_index_IndexProperty { (* obj) . properties } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_get_unique (obj : * const dpp_data_contract_document_type_index_Index) -> bool { (* obj) . unique } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_set_name (obj : * mut dpp_data_contract_document_type_index_Index , value : * mut std :: os :: raw :: c_char) { (* obj) . name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_set_properties (obj : * mut dpp_data_contract_document_type_index_Index , value : * mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_index_IndexProperty) { (* obj) . properties = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_set_unique (obj : * mut dpp_data_contract_document_type_index_Index , value : bool) { (* obj) . unique = value ; } # [doc = "FFI-representation of the [`dpp::data_contract::document_type::index::IndexProperty`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_index_IndexProperty { pub name : * mut std :: os :: raw :: c_char , pub ascending : bool } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: document_type :: index :: IndexProperty > for dpp_data_contract_document_type_index_IndexProperty { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_IndexProperty) -> dpp :: data_contract :: document_type :: index :: IndexProperty { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: index :: IndexProperty { name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . name) , ascending : ffi_ref . ascending } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index :: IndexProperty) -> * const dpp_data_contract_document_type_index_IndexProperty { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_IndexProperty { name : ferment_interfaces :: FFIConversion :: ffi_to (obj . name) , ascending : obj . ascending }) } unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_index_IndexProperty) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_document_type_index_IndexProperty { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . name) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_IndexProperty_ctor (name : * mut std :: os :: raw :: c_char , ascending : bool) -> * mut dpp_data_contract_document_type_index_IndexProperty { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_IndexProperty { name , ascending }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_IndexProperty_destroy (ffi : * mut dpp_data_contract_document_type_index_IndexProperty) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_IndexProperty_get_name (obj : * const dpp_data_contract_document_type_index_IndexProperty) -> * mut std :: os :: raw :: c_char { (* obj) . name } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_IndexProperty_get_ascending (obj : * const dpp_data_contract_document_type_index_IndexProperty) -> bool { (* obj) . ascending } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_IndexProperty_set_name (obj : * mut dpp_data_contract_document_type_index_IndexProperty , value : * mut std :: os :: raw :: c_char) { (* obj) . name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_IndexProperty_set_ascending (obj : * mut dpp_data_contract_document_type_index_IndexProperty , value : bool) { (* obj) . ascending = value ; } # [doc = "FFI-representation of the [`dpp::data_contract::document_type::index::OrderBy`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_data_contract_document_type_index_OrderBy { Asc , Desc } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: document_type :: index :: OrderBy > for dpp_data_contract_document_type_index_OrderBy { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_OrderBy) -> dpp :: data_contract :: document_type :: index :: OrderBy { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_document_type_index_OrderBy :: Asc => dpp :: data_contract :: document_type :: index :: OrderBy :: Asc , dpp_data_contract_document_type_index_OrderBy :: Desc => dpp :: data_contract :: document_type :: index :: OrderBy :: Desc } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index :: OrderBy) -> * const dpp_data_contract_document_type_index_OrderBy { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: document_type :: index :: OrderBy :: Asc => dpp_data_contract_document_type_index_OrderBy :: Asc , dpp :: data_contract :: document_type :: index :: OrderBy :: Desc => dpp_data_contract_document_type_index_OrderBy :: Desc }) } unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_index_OrderBy) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_document_type_index_OrderBy { fn drop (& mut self) { unsafe { match self { dpp_data_contract_document_type_index_OrderBy :: Asc => { } , dpp_data_contract_document_type_index_OrderBy :: Desc => { } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_OrderBy_Asc_ctor () -> * mut dpp_data_contract_document_type_index_OrderBy { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_OrderBy :: Asc) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_OrderBy_Desc_ctor () -> * mut dpp_data_contract_document_type_index_OrderBy { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_OrderBy :: Desc) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_OrderBy_destroy (ffi : * mut dpp_data_contract_document_type_index_OrderBy) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod index_level { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::data_contract::document_type::index_level::IndexLevel`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_index_level_IndexLevel { pub sub_index_levels : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel , pub has_index_with_uniqueness : bool , pub level_identifier : u64 } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: document_type :: index_level :: IndexLevel > for dpp_data_contract_document_type_index_level_IndexLevel { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_level_IndexLevel) -> dpp :: data_contract :: document_type :: index_level :: IndexLevel { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: index_level :: IndexLevel { sub_index_levels : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . sub_index_levels) , has_index_with_uniqueness : (ffi_ref . has_index_with_uniqueness) . then (|| ffi_ref . has_index_with_uniqueness) , level_identifier : ffi_ref . level_identifier } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index_level :: IndexLevel) -> * const dpp_data_contract_document_type_index_level_IndexLevel { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_level_IndexLevel { sub_index_levels : ferment_interfaces :: FFIConversion :: ffi_to (obj . sub_index_levels) , has_index_with_uniqueness : obj . has_index_with_uniqueness . unwrap_or (false) , level_identifier : obj . level_identifier }) } unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_index_level_IndexLevel) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_document_type_index_level_IndexLevel { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . sub_index_levels) ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_ctor (sub_index_levels : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel , has_index_with_uniqueness : bool , level_identifier : u64) -> * mut dpp_data_contract_document_type_index_level_IndexLevel { ferment_interfaces :: boxed (dpp_data_contract_document_type_index_level_IndexLevel { sub_index_levels , has_index_with_uniqueness , level_identifier }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_destroy (ffi : * mut dpp_data_contract_document_type_index_level_IndexLevel) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_get_sub_index_levels (obj : * const dpp_data_contract_document_type_index_level_IndexLevel) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { (* obj) . sub_index_levels } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_get_has_index_with_uniqueness (obj : * const dpp_data_contract_document_type_index_level_IndexLevel) -> bool { (* obj) . has_index_with_uniqueness } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_get_level_identifier (obj : * const dpp_data_contract_document_type_index_level_IndexLevel) -> u64 { (* obj) . level_identifier } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_set_sub_index_levels (obj : * mut dpp_data_contract_document_type_index_level_IndexLevel , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel) { (* obj) . sub_index_levels = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_set_has_index_with_uniqueness (obj : * mut dpp_data_contract_document_type_index_level_IndexLevel , value : bool) { (* obj) . has_index_with_uniqueness = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_set_level_identifier (obj : * mut dpp_data_contract_document_type_index_level_IndexLevel , value : u64) { (* obj) . level_identifier = value ; } } pub mod property { use crate as ferment_example_platform ; pub mod array { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::data_contract::document_type::property::array::ArrayItemType`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_data_contract_document_type_property_array_ArrayItemType { Integer , Number , String (usize , usize) , ByteArray (usize , usize) , Identifier , Boolean , Date } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType > for dpp_data_contract_document_type_property_array_ArrayItemType { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_property_array_ArrayItemType) -> dpp :: data_contract :: document_type :: property :: array :: ArrayItemType { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_document_type_property_array_ArrayItemType :: Integer => dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Integer , dpp_data_contract_document_type_property_array_ArrayItemType :: Number => dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Number , dpp_data_contract_document_type_property_array_ArrayItemType :: String (o_0 , o_1) => dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: String ((* o_0 > 0) . then (|| * o_0) , (* o_1 > 0) . then (|| * o_1)) , dpp_data_contract_document_type_property_array_ArrayItemType :: ByteArray (o_0 , o_1) => dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: ByteArray ((* o_0 > 0) . then (|| * o_0) , (* o_1 > 0) . then (|| * o_1)) , dpp_data_contract_document_type_property_array_ArrayItemType :: Identifier => dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Identifier , dpp_data_contract_document_type_property_array_ArrayItemType :: Boolean => dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Boolean , dpp_data_contract_document_type_property_array_ArrayItemType :: Date => dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Date } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: property :: array :: ArrayItemType) -> * const dpp_data_contract_document_type_property_array_ArrayItemType { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Integer => dpp_data_contract_document_type_property_array_ArrayItemType :: Integer , dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Number => dpp_data_contract_document_type_property_array_ArrayItemType :: Number , dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: String (o_0 , o_1) => dpp_data_contract_document_type_property_array_ArrayItemType :: String (o_0 . unwrap_or (0) , o_1 . unwrap_or (0)) , dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: ByteArray (o_0 , o_1) => dpp_data_contract_document_type_property_array_ArrayItemType :: ByteArray (o_0 . unwrap_or (0) , o_1 . unwrap_or (0)) , dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Identifier => dpp_data_contract_document_type_property_array_ArrayItemType :: Identifier , dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Boolean => dpp_data_contract_document_type_property_array_ArrayItemType :: Boolean , dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Date => dpp_data_contract_document_type_property_array_ArrayItemType :: Date }) } unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_property_array_ArrayItemType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_document_type_property_array_ArrayItemType { fn drop (& mut self) { unsafe { match self { dpp_data_contract_document_type_property_array_ArrayItemType :: Integer => { } , dpp_data_contract_document_type_property_array_ArrayItemType :: Number => { } , dpp_data_contract_document_type_property_array_ArrayItemType :: String (o_0 , o_1) => { ; } , dpp_data_contract_document_type_property_array_ArrayItemType :: ByteArray (o_0 , o_1) => { ; } , dpp_data_contract_document_type_property_array_ArrayItemType :: Identifier => { } , dpp_data_contract_document_type_property_array_ArrayItemType :: Boolean => { } , dpp_data_contract_document_type_property_array_ArrayItemType :: Date => { } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_Integer_ctor () -> * mut dpp_data_contract_document_type_property_array_ArrayItemType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_array_ArrayItemType :: Integer) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_Number_ctor () -> * mut dpp_data_contract_document_type_property_array_ArrayItemType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_array_ArrayItemType :: Number) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_String_ctor (o_0 : usize , o_1 : usize) -> * mut dpp_data_contract_document_type_property_array_ArrayItemType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_array_ArrayItemType :: String (o_0 , o_1)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_ByteArray_ctor (o_0 : usize , o_1 : usize) -> * mut dpp_data_contract_document_type_property_array_ArrayItemType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_array_ArrayItemType :: ByteArray (o_0 , o_1)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_Identifier_ctor () -> * mut dpp_data_contract_document_type_property_array_ArrayItemType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_array_ArrayItemType :: Identifier) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_Boolean_ctor () -> * mut dpp_data_contract_document_type_property_array_ArrayItemType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_array_ArrayItemType :: Boolean) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_Date_ctor () -> * mut dpp_data_contract_document_type_property_array_ArrayItemType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_array_ArrayItemType :: Date) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_destroy (ffi : * mut dpp_data_contract_document_type_property_array_ArrayItemType) { ferment_interfaces :: unbox_any (ffi) ; } } # [doc = "FFI-representation of the [`dpp::data_contract::document_type::property::DocumentProperty`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_property_DocumentProperty { pub property_type : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_DocumentPropertyType , pub required : bool } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: document_type :: property :: DocumentProperty > for dpp_data_contract_document_type_property_DocumentProperty { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_property_DocumentProperty) -> dpp :: data_contract :: document_type :: property :: DocumentProperty { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: property :: DocumentProperty { property_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . property_type) , required : ffi_ref . required } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: property :: DocumentProperty) -> * const dpp_data_contract_document_type_property_DocumentProperty { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentProperty { property_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . property_type) , required : obj . required }) } unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_property_DocumentProperty) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_document_type_property_DocumentProperty { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . property_type) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_ctor (property_type : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_DocumentPropertyType , required : bool) -> * mut dpp_data_contract_document_type_property_DocumentProperty { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentProperty { property_type , required }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_destroy (ffi : * mut dpp_data_contract_document_type_property_DocumentProperty) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_get_property_type (obj : * const dpp_data_contract_document_type_property_DocumentProperty) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_DocumentPropertyType { (* obj) . property_type } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_get_required (obj : * const dpp_data_contract_document_type_property_DocumentProperty) -> bool { (* obj) . required } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_set_property_type (obj : * mut dpp_data_contract_document_type_property_DocumentProperty , value : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_DocumentPropertyType) { (* obj) . property_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_set_required (obj : * mut dpp_data_contract_document_type_property_DocumentProperty , value : bool) { (* obj) . required = value ; } # [doc = "FFI-representation of the [`dpp::data_contract::document_type::property::DocumentPropertyType`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_data_contract_document_type_property_DocumentPropertyType { Integer , Number , String (u16 , u16) , ByteArray (u16 , u16) , Identifier , Boolean , Date , Object (* mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty) , Array (* mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: array :: dpp_data_contract_document_type_property_array_ArrayItemType) , VariableTypeArray (* mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_property_array_ArrayItemType) } impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: document_type :: property :: DocumentPropertyType > for dpp_data_contract_document_type_property_DocumentPropertyType { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_property_DocumentPropertyType) -> dpp :: data_contract :: document_type :: property :: DocumentPropertyType { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_document_type_property_DocumentPropertyType :: Integer => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Integer , dpp_data_contract_document_type_property_DocumentPropertyType :: Number => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Number , dpp_data_contract_document_type_property_DocumentPropertyType :: String (o_0 , o_1) => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: String ((* o_0 > 0) . then (|| * o_0) , (* o_1 > 0) . then (|| * o_1)) , dpp_data_contract_document_type_property_DocumentPropertyType :: ByteArray (o_0 , o_1) => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: ByteArray ((* o_0 > 0) . then (|| * o_0) , (* o_1 > 0) . then (|| * o_1)) , dpp_data_contract_document_type_property_DocumentPropertyType :: Identifier => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Identifier , dpp_data_contract_document_type_property_DocumentPropertyType :: Boolean => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Boolean , dpp_data_contract_document_type_property_DocumentPropertyType :: Date => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Date , dpp_data_contract_document_type_property_DocumentPropertyType :: Object (o_0) => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Object (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_document_type_property_DocumentPropertyType :: Array (o_0) => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Array (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_data_contract_document_type_property_DocumentPropertyType :: VariableTypeArray (o_0) => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: VariableTypeArray (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: property :: DocumentPropertyType) -> * const dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (match obj { dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Integer => dpp_data_contract_document_type_property_DocumentPropertyType :: Integer , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Number => dpp_data_contract_document_type_property_DocumentPropertyType :: Number , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: String (o_0 , o_1) => dpp_data_contract_document_type_property_DocumentPropertyType :: String (o_0 . unwrap_or (0) , o_1 . unwrap_or (0)) , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: ByteArray (o_0 , o_1) => dpp_data_contract_document_type_property_DocumentPropertyType :: ByteArray (o_0 . unwrap_or (0) , o_1 . unwrap_or (0)) , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Identifier => dpp_data_contract_document_type_property_DocumentPropertyType :: Identifier , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Boolean => dpp_data_contract_document_type_property_DocumentPropertyType :: Boolean , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Date => dpp_data_contract_document_type_property_DocumentPropertyType :: Date , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Object (o_0) => dpp_data_contract_document_type_property_DocumentPropertyType :: Object (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Array (o_0) => dpp_data_contract_document_type_property_DocumentPropertyType :: Array (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: VariableTypeArray (o_0) => dpp_data_contract_document_type_property_DocumentPropertyType :: VariableTypeArray (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_data_contract_document_type_property_DocumentPropertyType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_data_contract_document_type_property_DocumentPropertyType { fn drop (& mut self) { unsafe { match self { dpp_data_contract_document_type_property_DocumentPropertyType :: Integer => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: Number => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: String (o_0 , o_1) => { ; } , dpp_data_contract_document_type_property_DocumentPropertyType :: ByteArray (o_0 , o_1) => { ; } , dpp_data_contract_document_type_property_DocumentPropertyType :: Identifier => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: Boolean => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: Date => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: Object (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_data_contract_document_type_property_DocumentPropertyType :: Array (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_data_contract_document_type_property_DocumentPropertyType :: VariableTypeArray (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_Integer_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: Integer) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_Number_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: Number) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_String_ctor (o_0 : u16 , o_1 : u16) -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: String (o_0 , o_1)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_ByteArray_ctor (o_0 : u16 , o_1 : u16) -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: ByteArray (o_0 , o_1)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_Identifier_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: Identifier) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_Boolean_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: Boolean) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_Date_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: Date) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_Object_ctor (o_0 : * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty) -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: Object (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_Array_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: array :: dpp_data_contract_document_type_property_array_ArrayItemType) -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: Array (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_VariableTypeArray_ctor (o_0 : * mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_property_array_ArrayItemType) -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment_interfaces :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: VariableTypeArray (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_destroy (ffi : * mut dpp_data_contract_document_type_property_DocumentPropertyType) { ferment_interfaces :: unbox_any (ffi) ; } } } # [doc = "FFI-representation of the [`dpp::data_contract::PropertyPath`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_PropertyPath (* mut std :: os :: raw :: c_char) ; impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: PropertyPath > for dpp_data_contract_PropertyPath { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_PropertyPath) -> dpp :: data_contract :: PropertyPath { let ffi_ref = & * ffi ; ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0) } unsafe fn ffi_to_const (obj : dpp :: data_contract :: PropertyPath) -> * const dpp_data_contract_PropertyPath { ferment_interfaces :: boxed (dpp_data_contract_PropertyPath (ferment_interfaces :: FFIConversion :: ffi_to (obj))) } unsafe fn destroy (ffi : * mut dpp_data_contract_PropertyPath) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_PropertyPath { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_PropertyPath_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_PropertyPath { ferment_interfaces :: boxed (dpp_data_contract_PropertyPath (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_PropertyPath_destroy (ffi : * mut dpp_data_contract_PropertyPath) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_PropertyPath_get_0 (obj : * const dpp_data_contract_PropertyPath) -> * mut std :: os :: raw :: c_char { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_PropertyPath_set_0 (obj : * mut dpp_data_contract_PropertyPath , value : * mut std :: os :: raw :: c_char) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`dpp::data_contract::DocumentName`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_DocumentName (* mut std :: os :: raw :: c_char) ; impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: DocumentName > for dpp_data_contract_DocumentName { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_DocumentName) -> dpp :: data_contract :: DocumentName { let ffi_ref = & * ffi ; ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0) } unsafe fn ffi_to_const (obj : dpp :: data_contract :: DocumentName) -> * const dpp_data_contract_DocumentName { ferment_interfaces :: boxed (dpp_data_contract_DocumentName (ferment_interfaces :: FFIConversion :: ffi_to (obj))) } unsafe fn destroy (ffi : * mut dpp_data_contract_DocumentName) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_DocumentName { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DocumentName_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_DocumentName { ferment_interfaces :: boxed (dpp_data_contract_DocumentName (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DocumentName_destroy (ffi : * mut dpp_data_contract_DocumentName) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DocumentName_get_0 (obj : * const dpp_data_contract_DocumentName) -> * mut std :: os :: raw :: c_char { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DocumentName_set_0 (obj : * mut dpp_data_contract_DocumentName , value : * mut std :: os :: raw :: c_char) { (* obj) . 0 = value ; } pub mod extra { use crate as ferment_example_platform ; pub mod drive_api_tests { use crate as ferment_example_platform ; pub mod test { use crate as ferment_example_platform ; } } } pub mod accessors { use crate as ferment_example_platform ; } pub mod conversion { use crate as ferment_example_platform ; pub mod json { use crate as ferment_example_platform ; } pub mod cbor { use crate as ferment_example_platform ; } pub mod value { use crate as ferment_example_platform ; } } pub mod created_data_contract { use crate as ferment_example_platform ; pub mod fields { use crate as ferment_example_platform ; pub mod property_names { use crate as ferment_example_platform ; } } } # [doc = "FFI-representation of the [`dpp::data_contract::DefinitionName`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_DefinitionName (* mut std :: os :: raw :: c_char) ; impl ferment_interfaces :: FFIConversion < dpp :: data_contract :: DefinitionName > for dpp_data_contract_DefinitionName { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_DefinitionName) -> dpp :: data_contract :: DefinitionName { let ffi_ref = & * ffi ; ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0) } unsafe fn ffi_to_const (obj : dpp :: data_contract :: DefinitionName) -> * const dpp_data_contract_DefinitionName { ferment_interfaces :: boxed (dpp_data_contract_DefinitionName (ferment_interfaces :: FFIConversion :: ffi_to (obj))) } unsafe fn destroy (ffi : * mut dpp_data_contract_DefinitionName) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_data_contract_DefinitionName { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DefinitionName_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_DefinitionName { ferment_interfaces :: boxed (dpp_data_contract_DefinitionName (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DefinitionName_destroy (ffi : * mut dpp_data_contract_DefinitionName) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DefinitionName_get_0 (obj : * const dpp_data_contract_DefinitionName) -> * mut std :: os :: raw :: c_char { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DefinitionName_set_0 (obj : * mut dpp_data_contract_DefinitionName , value : * mut std :: os :: raw :: c_char) { (* obj) . 0 = value ; } } pub mod block { use crate as ferment_example_platform ; pub mod extended_block_info { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; pub mod signature_serializer { use crate as ferment_example_platform ; } } pub mod tests { use crate as ferment_example_platform ; } } pub mod extended_epoch_info { use crate as ferment_example_platform ; } } pub mod tests { use crate as ferment_example_platform ; pub mod fixtures { use crate as ferment_example_platform ; } pub mod utils { use crate as ferment_example_platform ; } } pub mod prelude { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::prelude::Revision`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_prelude_Revision (u64) ; impl ferment_interfaces :: FFIConversion < dpp :: prelude :: Revision > for dpp_prelude_Revision { unsafe fn ffi_from_const (ffi : * const dpp_prelude_Revision) -> dpp :: prelude :: Revision { let ffi_ref = & * ffi ; ffi_ref . 0 } unsafe fn ffi_to_const (obj : dpp :: prelude :: Revision) -> * const dpp_prelude_Revision { ferment_interfaces :: boxed (dpp_prelude_Revision (obj)) } unsafe fn destroy (ffi : * mut dpp_prelude_Revision) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_prelude_Revision { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_Revision_ctor (o_0 : u64) -> * mut dpp_prelude_Revision { ferment_interfaces :: boxed (dpp_prelude_Revision (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_Revision_destroy (ffi : * mut dpp_prelude_Revision) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_Revision_get_0 (obj : * const dpp_prelude_Revision) -> u64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_Revision_set_0 (obj : * mut dpp_prelude_Revision , value : u64) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`dpp::prelude::TimestampMillis`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_prelude_TimestampMillis (u64) ; impl ferment_interfaces :: FFIConversion < dpp :: prelude :: TimestampMillis > for dpp_prelude_TimestampMillis { unsafe fn ffi_from_const (ffi : * const dpp_prelude_TimestampMillis) -> dpp :: prelude :: TimestampMillis { let ffi_ref = & * ffi ; ffi_ref . 0 } unsafe fn ffi_to_const (obj : dpp :: prelude :: TimestampMillis) -> * const dpp_prelude_TimestampMillis { ferment_interfaces :: boxed (dpp_prelude_TimestampMillis (obj)) } unsafe fn destroy (ffi : * mut dpp_prelude_TimestampMillis) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_prelude_TimestampMillis { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_TimestampMillis_ctor (o_0 : u64) -> * mut dpp_prelude_TimestampMillis { ferment_interfaces :: boxed (dpp_prelude_TimestampMillis (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_TimestampMillis_destroy (ffi : * mut dpp_prelude_TimestampMillis) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_TimestampMillis_get_0 (obj : * const dpp_prelude_TimestampMillis) -> u64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_TimestampMillis_set_0 (obj : * mut dpp_prelude_TimestampMillis , value : u64) { (* obj) . 0 = value ; } } pub mod util { use crate as ferment_example_platform ; pub mod json_path { use crate as ferment_example_platform ; pub mod test { use crate as ferment_example_platform ; } } pub mod deserializer { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::util::deserializer::ProtocolVersion`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_util_deserializer_ProtocolVersion (u32) ; impl ferment_interfaces :: FFIConversion < dpp :: util :: deserializer :: ProtocolVersion > for dpp_util_deserializer_ProtocolVersion { unsafe fn ffi_from_const (ffi : * const dpp_util_deserializer_ProtocolVersion) -> dpp :: util :: deserializer :: ProtocolVersion { let ffi_ref = & * ffi ; ffi_ref . 0 } unsafe fn ffi_to_const (obj : dpp :: util :: deserializer :: ProtocolVersion) -> * const dpp_util_deserializer_ProtocolVersion { ferment_interfaces :: boxed (dpp_util_deserializer_ProtocolVersion (obj)) } unsafe fn destroy (ffi : * mut dpp_util_deserializer_ProtocolVersion) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_util_deserializer_ProtocolVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_util_deserializer_ProtocolVersion_ctor (o_0 : u32) -> * mut dpp_util_deserializer_ProtocolVersion { ferment_interfaces :: boxed (dpp_util_deserializer_ProtocolVersion (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_util_deserializer_ProtocolVersion_destroy (ffi : * mut dpp_util_deserializer_ProtocolVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_util_deserializer_ProtocolVersion_get_0 (obj : * const dpp_util_deserializer_ProtocolVersion) -> u32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_util_deserializer_ProtocolVersion_set_0 (obj : * mut dpp_util_deserializer_ProtocolVersion , value : u32) { (* obj) . 0 = value ; } pub mod serde_entropy { use crate as ferment_example_platform ; } } pub mod cbor_value { use crate as ferment_example_platform ; pub mod convert { use crate as ferment_example_platform ; pub mod tests { use crate as ferment_example_platform ; } } pub mod canonical { use crate as ferment_example_platform ; pub mod test { use crate as ferment_example_platform ; } } } pub mod json_schema { use crate as ferment_example_platform ; pub mod test { use crate as ferment_example_platform ; } } pub mod json_value { use crate as ferment_example_platform ; pub mod remove_path { use crate as ferment_example_platform ; pub mod test { use crate as ferment_example_platform ; } } pub mod insert_with_path { use crate as ferment_example_platform ; pub mod test_set { use crate as ferment_example_platform ; } } pub mod test { use crate as ferment_example_platform ; } } pub mod strings { use crate as ferment_example_platform ; pub mod tests { use crate as ferment_example_platform ; pub mod convert_to_homograph_safe_chars { use crate as ferment_example_platform ; } } } } pub mod schema { use crate as ferment_example_platform ; pub mod identity { use crate as ferment_example_platform ; pub mod v0 { use crate as ferment_example_platform ; } } } pub mod fee { use crate as ferment_example_platform ; pub mod fee_result { use crate as ferment_example_platform ; pub mod refunds { use crate as ferment_example_platform ; pub mod tests { use crate as ferment_example_platform ; pub mod from_storage_removal { use crate as ferment_example_platform ; } } } } pub mod epoch { use crate as ferment_example_platform ; pub mod distribution { use crate as ferment_example_platform ; pub mod tests { use crate as ferment_example_platform ; pub mod subtract_refunds_from_epoch_credits_collection { use crate as ferment_example_platform ; } pub mod original_removed_credits_multiplier_from { use crate as ferment_example_platform ; } pub mod fee_distribution_table { use crate as ferment_example_platform ; } pub mod calculate_storage_fee_refund_amount_and_leftovers { use crate as ferment_example_platform ; } pub mod distribute_storage_fee_to_epochs_collection { use crate as ferment_example_platform ; } pub mod distribution_storage_fee_to_epochs_map { use crate as ferment_example_platform ; } } } } pub mod default_costs { use crate as ferment_example_platform ; } } pub mod errors { use crate as ferment_example_platform ; pub mod consensus { use crate as ferment_example_platform ; pub mod state { use crate as ferment_example_platform ; pub mod data_trigger { use crate as ferment_example_platform ; pub mod data_trigger_invalid_result_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::data_trigger::data_trigger_invalid_result_error::DataTriggerInvalidResultError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: DataTriggerInvalidResultError > for dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) -> dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: DataTriggerInvalidResultError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: DataTriggerInvalidResultError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract_id) , document_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: DataTriggerInvalidResultError) -> * const dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract_id) , document_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError_ctor (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { data_contract_id , document_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError_destroy (ffi : * mut dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError_get_data_contract_id (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError_get_document_id (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError_set_data_contract_id (obj : * mut dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError_set_document_id (obj : * mut dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } } # [doc = "FFI-representation of the [`dpp::errors::consensus::state::data_trigger::DataTriggerError`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_errors_consensus_state_data_trigger_DataTriggerError { DataTriggerConditionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) , DataTriggerExecutionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) , DataTriggerInvalidResultError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError > for dpp_errors_consensus_state_data_trigger_DataTriggerError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_trigger_DataTriggerError) -> dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerConditionError (o_0) => dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError :: DataTriggerConditionError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerExecutionError (o_0) => dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError :: DataTriggerExecutionError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerInvalidResultError (o_0) => dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError :: DataTriggerInvalidResultError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError) -> * const dpp_errors_consensus_state_data_trigger_DataTriggerError { ferment_interfaces :: boxed (match obj { dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError :: DataTriggerConditionError (o_0) => dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerConditionError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError :: DataTriggerExecutionError (o_0) => dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerExecutionError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError :: DataTriggerInvalidResultError (o_0) => dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerInvalidResultError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_data_trigger_DataTriggerError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_errors_consensus_state_data_trigger_DataTriggerError { fn drop (& mut self) { unsafe { match self { dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerConditionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerExecutionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerInvalidResultError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_DataTriggerError_DataTriggerConditionError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) -> * mut dpp_errors_consensus_state_data_trigger_DataTriggerError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerConditionError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_DataTriggerError_DataTriggerExecutionError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) -> * mut dpp_errors_consensus_state_data_trigger_DataTriggerError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerExecutionError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_DataTriggerError_DataTriggerInvalidResultError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) -> * mut dpp_errors_consensus_state_data_trigger_DataTriggerError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerInvalidResultError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_DataTriggerError_destroy (ffi : * mut dpp_errors_consensus_state_data_trigger_DataTriggerError) { ferment_interfaces :: unbox_any (ffi) ; } pub mod data_trigger_execution_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::data_trigger::data_trigger_execution_error::DataTriggerExecutionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: DataTriggerExecutionError > for dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) -> dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: DataTriggerExecutionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: DataTriggerExecutionError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract_id) , document_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_id) , message : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . message) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: DataTriggerExecutionError) -> * const dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract_id) , document_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_id) , message : ferment_interfaces :: FFIConversion :: ffi_to (obj . message) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_ctor (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { data_contract_id , document_id , message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_destroy (ffi : * mut dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_get_data_contract_id (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_get_document_id (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_get_message (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_set_data_contract_id (obj : * mut dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_set_document_id (obj : * mut dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_set_message (obj : * mut dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod data_trigger_condition_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::data_trigger::data_trigger_condition_error::DataTriggerConditionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: DataTriggerConditionError > for dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) -> dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: DataTriggerConditionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: DataTriggerConditionError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract_id) , document_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_id) , message : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . message) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: DataTriggerConditionError) -> * const dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract_id) , document_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_id) , message : ferment_interfaces :: FFIConversion :: ffi_to (obj . message) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_ctor (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { data_contract_id , document_id , message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_destroy (ffi : * mut dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_get_data_contract_id (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_get_document_id (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_get_message (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_set_data_contract_id (obj : * mut dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_set_document_id (obj : * mut dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_set_message (obj : * mut dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } } pub mod identity { use crate as ferment_example_platform ; pub mod invalid_identity_revision_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::identity::invalid_identity_revision_error::InvalidIdentityRevisionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub current_revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: InvalidIdentityRevisionError > for dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) -> dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: InvalidIdentityRevisionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: InvalidIdentityRevisionError { identity_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_id) , current_revision : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . current_revision) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: InvalidIdentityRevisionError) -> * const dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { identity_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_id) , current_revision : ferment_interfaces :: FFIConversion :: ffi_to (obj . current_revision) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . current_revision) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError_ctor (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , current_revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) -> * mut dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { identity_id , current_revision }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError_destroy (ffi : * mut dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError_get_identity_id (obj : * const dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError_get_current_revision (obj : * const dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . current_revision } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError_set_identity_id (obj : * mut dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError_set_current_revision (obj : * mut dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . current_revision = value ; } } pub mod identity_public_key_disabled_at_window_violation_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::identity::identity_public_key_disabled_at_window_violation_error::IdentityPublicKeyDisabledAtWindowViolationError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError { pub disabled_at : u64 , pub time_window_start : u64 , pub time_window_end : u64 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: identity :: identity_public_key_disabled_at_window_violation_error :: IdentityPublicKeyDisabledAtWindowViolationError > for dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError) -> dpp :: errors :: consensus :: state :: identity :: identity_public_key_disabled_at_window_violation_error :: IdentityPublicKeyDisabledAtWindowViolationError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: identity_public_key_disabled_at_window_violation_error :: IdentityPublicKeyDisabledAtWindowViolationError { disabled_at : ffi_ref . disabled_at , time_window_start : ffi_ref . time_window_start , time_window_end : ffi_ref . time_window_end } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: identity_public_key_disabled_at_window_violation_error :: IdentityPublicKeyDisabledAtWindowViolationError) -> * const dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError { disabled_at : obj . disabled_at , time_window_start : obj . time_window_start , time_window_end : obj . time_window_end }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError_ctor (disabled_at : u64 , time_window_start : u64 , time_window_end : u64) -> * mut dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError { disabled_at , time_window_start , time_window_end }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError_destroy (ffi : * mut dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError_get_disabled_at (obj : * const dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError) -> u64 { (* obj) . disabled_at } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError_get_time_window_start (obj : * const dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError) -> u64 { (* obj) . time_window_start } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError_get_time_window_end (obj : * const dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError) -> u64 { (* obj) . time_window_end } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError_set_disabled_at (obj : * mut dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError , value : u64) { (* obj) . disabled_at = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError_set_time_window_start (obj : * mut dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError , value : u64) { (* obj) . time_window_start = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError_set_time_window_end (obj : * mut dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError , value : u64) { (* obj) . time_window_end = value ; } } pub mod identity_public_key_is_disabled_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::identity::identity_public_key_is_disabled_error::IdentityPublicKeyIsDisabledError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { pub public_key_index : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: IdentityPublicKeyIsDisabledError > for dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError) -> dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: IdentityPublicKeyIsDisabledError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: IdentityPublicKeyIsDisabledError { public_key_index : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_key_index) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: IdentityPublicKeyIsDisabledError) -> * const dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { public_key_index : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_key_index) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_index) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError_ctor (public_key_index : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { public_key_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError_destroy (ffi : * mut dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError_get_public_key_index (obj : * const dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError_set_public_key_index (obj : * mut dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . public_key_index = value ; } } pub mod duplicated_identity_public_key_id_state_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::identity::duplicated_identity_public_key_id_state_error::DuplicatedIdentityPublicKeyIdStateError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { pub duplicated_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: DuplicatedIdentityPublicKeyIdStateError > for dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError) -> dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: DuplicatedIdentityPublicKeyIdStateError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: DuplicatedIdentityPublicKeyIdStateError { duplicated_ids : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . duplicated_ids) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: DuplicatedIdentityPublicKeyIdStateError) -> * const dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { duplicated_ids : ferment_interfaces :: FFIConversion :: ffi_to (obj . duplicated_ids) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . duplicated_ids) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError_ctor (duplicated_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { duplicated_ids }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError_destroy (ffi : * mut dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError_get_duplicated_ids (obj : * const dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . duplicated_ids } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError_set_duplicated_ids (obj : * mut dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError , value : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) { (* obj) . duplicated_ids = value ; } } pub mod duplicated_identity_public_key_state_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::identity::duplicated_identity_public_key_state_error::DuplicatedIdentityPublicKeyStateError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { pub duplicated_public_key_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: DuplicatedIdentityPublicKeyStateError > for dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError) -> dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: DuplicatedIdentityPublicKeyStateError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: DuplicatedIdentityPublicKeyStateError { duplicated_public_key_ids : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . duplicated_public_key_ids) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: DuplicatedIdentityPublicKeyStateError) -> * const dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { duplicated_public_key_ids : ferment_interfaces :: FFIConversion :: ffi_to (obj . duplicated_public_key_ids) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . duplicated_public_key_ids) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError_ctor (duplicated_public_key_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { duplicated_public_key_ids }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError_destroy (ffi : * mut dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError_get_duplicated_public_key_ids (obj : * const dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . duplicated_public_key_ids } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError_set_duplicated_public_key_ids (obj : * mut dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError , value : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) { (* obj) . duplicated_public_key_ids = value ; } } pub mod identity_public_key_is_read_only_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::identity::identity_public_key_is_read_only_error::IdentityPublicKeyIsReadOnlyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { pub public_key_index : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: IdentityPublicKeyIsReadOnlyError > for dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError) -> dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: IdentityPublicKeyIsReadOnlyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: IdentityPublicKeyIsReadOnlyError { public_key_index : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_key_index) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: IdentityPublicKeyIsReadOnlyError) -> * const dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { public_key_index : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_key_index) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_index) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError_ctor (public_key_index : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { public_key_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError_destroy (ffi : * mut dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError_get_public_key_index (obj : * const dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError_set_public_key_index (obj : * mut dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . public_key_index = value ; } } pub mod missing_identity_public_key_ids_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::identity::missing_identity_public_key_ids_error::MissingIdentityPublicKeyIdsError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { pub ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: MissingIdentityPublicKeyIdsError > for dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError) -> dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: MissingIdentityPublicKeyIdsError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: MissingIdentityPublicKeyIdsError { ids : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . ids) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: MissingIdentityPublicKeyIdsError) -> * const dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { ids : ferment_interfaces :: FFIConversion :: ffi_to (obj . ids) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . ids) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError_ctor (ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { ids }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError_destroy (ffi : * mut dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError_get_ids (obj : * const dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . ids } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError_set_ids (obj : * mut dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError , value : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) { (* obj) . ids = value ; } } pub mod identity_already_exists_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::identity::identity_already_exists_error::IdentityAlreadyExistsError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: IdentityAlreadyExistsError > for dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError) -> dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: IdentityAlreadyExistsError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: IdentityAlreadyExistsError { identity_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: IdentityAlreadyExistsError) -> * const dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { identity_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError_ctor (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { identity_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError_destroy (ffi : * mut dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError_get_identity_id (obj : * const dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError_set_identity_id (obj : * mut dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } } pub mod identity_public_key_already_exists_for_unique_contract_bounds_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::identity::identity_public_key_already_exists_for_unique_contract_bounds_error::IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , pub new_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub old_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError > for dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { identity_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_id) , contract_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . contract_id) , purpose : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . purpose) , new_key_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . new_key_id) , old_key_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . old_key_id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { identity_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_id) , contract_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . contract_id) , purpose : ferment_interfaces :: FFIConversion :: ffi_to (obj . purpose) , new_key_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . new_key_id) , old_key_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . old_key_id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . contract_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . purpose) ; ; ferment_interfaces :: unbox_any (ffi_ref . new_key_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . old_key_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_ctor (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , new_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , old_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { identity_id , contract_id , purpose , new_key_id , old_key_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_destroy (ffi : * mut dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_get_identity_id (obj : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_get_contract_id (obj : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_get_purpose (obj : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . purpose } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_get_new_key_id (obj : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . new_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_get_old_key_id (obj : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . old_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_set_identity_id (obj : * mut dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_set_contract_id (obj : * mut dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_set_purpose (obj : * mut dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) { (* obj) . purpose = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_set_new_key_id (obj : * mut dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . new_key_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_set_old_key_id (obj : * mut dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . old_key_id = value ; } } pub mod identity_insufficient_balance_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::identity::identity_insufficient_balance_error::IdentityInsufficientBalanceError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub balance : u64 , pub required_balance : u64 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: IdentityInsufficientBalanceError > for dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) -> dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: IdentityInsufficientBalanceError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: IdentityInsufficientBalanceError { identity_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_id) , balance : ffi_ref . balance , required_balance : ffi_ref . required_balance } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: IdentityInsufficientBalanceError) -> * const dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { identity_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_id) , balance : obj . balance , required_balance : obj . required_balance }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_ctor (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , balance : u64 , required_balance : u64) -> * mut dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { identity_id , balance , required_balance }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_destroy (ffi : * mut dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_get_identity_id (obj : * const dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_get_balance (obj : * const dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) -> u64 { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_get_required_balance (obj : * const dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) -> u64 { (* obj) . required_balance } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_set_identity_id (obj : * mut dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_set_balance (obj : * mut dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError , value : u64) { (* obj) . balance = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_set_required_balance (obj : * mut dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError , value : u64) { (* obj) . required_balance = value ; } } pub mod invalid_identity_public_key_id_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::identity::invalid_identity_public_key_id_error::InvalidIdentityPublicKeyIdError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { pub id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: InvalidIdentityPublicKeyIdError > for dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError) -> dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: InvalidIdentityPublicKeyIdError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: InvalidIdentityPublicKeyIdError { id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: InvalidIdentityPublicKeyIdError) -> * const dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { id : ferment_interfaces :: FFIConversion :: ffi_to (obj . id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError_ctor (id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError_destroy (ffi : * mut dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError_get_id (obj : * const dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError_set_id (obj : * mut dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . id = value ; } } pub mod invalid_asset_lock_proof_value { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::identity::invalid_asset_lock_proof_value::InvalidAssetLockProofValueError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError { pub value : u64 , pub min_value : u64 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: identity :: invalid_asset_lock_proof_value :: InvalidAssetLockProofValueError > for dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError) -> dpp :: errors :: consensus :: state :: identity :: invalid_asset_lock_proof_value :: InvalidAssetLockProofValueError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: invalid_asset_lock_proof_value :: InvalidAssetLockProofValueError { value : ffi_ref . value , min_value : ffi_ref . min_value } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: invalid_asset_lock_proof_value :: InvalidAssetLockProofValueError) -> * const dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError { value : obj . value , min_value : obj . min_value }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError_ctor (value : u64 , min_value : u64) -> * mut dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError { value , min_value }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError_destroy (ffi : * mut dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError_get_value (obj : * const dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError) -> u64 { (* obj) . value } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError_get_min_value (obj : * const dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError) -> u64 { (* obj) . min_value } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError_set_value (obj : * mut dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError , value : u64) { (* obj) . value = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError_set_min_value (obj : * mut dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError , value : u64) { (* obj) . min_value = value ; } } pub mod max_identity_public_key_limit_reached_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::identity::max_identity_public_key_limit_reached_error::MaxIdentityPublicKeyLimitReachedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { pub max_items : usize } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: MaxIdentityPublicKeyLimitReachedError > for dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError) -> dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: MaxIdentityPublicKeyLimitReachedError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: MaxIdentityPublicKeyLimitReachedError { max_items : ffi_ref . max_items } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: MaxIdentityPublicKeyLimitReachedError) -> * const dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { max_items : obj . max_items }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError_ctor (max_items : usize) -> * mut dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { ferment_interfaces :: boxed (dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { max_items }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError_destroy (ffi : * mut dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError_get_max_items (obj : * const dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError) -> usize { (* obj) . max_items } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError_set_max_items (obj : * mut dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError , value : usize) { (* obj) . max_items = value ; } } } pub mod document { use crate as ferment_example_platform ; pub mod document_owner_id_mismatch_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::document::document_owner_id_mismatch_error::DocumentOwnerIdMismatchError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub existing_document_owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: DocumentOwnerIdMismatchError > for dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) -> dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: DocumentOwnerIdMismatchError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: DocumentOwnerIdMismatchError { document_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_id) , document_owner_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_owner_id) , existing_document_owner_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . existing_document_owner_id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: DocumentOwnerIdMismatchError) -> * const dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { document_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_id) , document_owner_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_owner_id) , existing_document_owner_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . existing_document_owner_id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . document_owner_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . existing_document_owner_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_ctor (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , existing_document_owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { document_id , document_owner_id , existing_document_owner_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_destroy (ffi : * mut dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_get_document_id (obj : * const dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_get_document_owner_id (obj : * const dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_get_existing_document_owner_id (obj : * const dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . existing_document_owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_set_document_id (obj : * mut dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_set_document_owner_id (obj : * mut dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_owner_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_set_existing_document_owner_id (obj : * mut dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . existing_document_owner_id = value ; } } pub mod document_timestamp_window_violation_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::document::document_timestamp_window_violation_error::DocumentTimestampWindowViolationError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { pub timestamp_name : * mut std :: os :: raw :: c_char , pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub timestamp : i64 , pub time_window_start : i64 , pub time_window_end : i64 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: DocumentTimestampWindowViolationError > for dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: DocumentTimestampWindowViolationError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: DocumentTimestampWindowViolationError { timestamp_name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . timestamp_name) , document_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_id) , timestamp : ffi_ref . timestamp , time_window_start : ffi_ref . time_window_start , time_window_end : ffi_ref . time_window_end } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: DocumentTimestampWindowViolationError) -> * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { timestamp_name : ferment_interfaces :: FFIConversion :: ffi_to (obj . timestamp_name) , document_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_id) , timestamp : obj . timestamp , time_window_start : obj . time_window_start , time_window_end : obj . time_window_end }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . timestamp_name) ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_ctor (timestamp_name : * mut std :: os :: raw :: c_char , document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , timestamp : i64 , time_window_start : i64 , time_window_end : i64) -> * mut dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { timestamp_name , document_id , timestamp , time_window_start , time_window_end }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_destroy (ffi : * mut dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_get_timestamp_name (obj : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> * mut std :: os :: raw :: c_char { (* obj) . timestamp_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_get_document_id (obj : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_get_timestamp (obj : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> i64 { (* obj) . timestamp } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_get_time_window_start (obj : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> i64 { (* obj) . time_window_start } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_get_time_window_end (obj : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> i64 { (* obj) . time_window_end } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_set_timestamp_name (obj : * mut dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError , value : * mut std :: os :: raw :: c_char) { (* obj) . timestamp_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_set_document_id (obj : * mut dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_set_timestamp (obj : * mut dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError , value : i64) { (* obj) . timestamp = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_set_time_window_start (obj : * mut dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError , value : i64) { (* obj) . time_window_start = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_set_time_window_end (obj : * mut dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError , value : i64) { (* obj) . time_window_end = value ; } } pub mod document_not_found_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::document::document_not_found_error::DocumentNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: document :: document_not_found_error :: DocumentNotFoundError > for dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError) -> dpp :: errors :: consensus :: state :: document :: document_not_found_error :: DocumentNotFoundError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_not_found_error :: DocumentNotFoundError { document_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_not_found_error :: DocumentNotFoundError) -> * const dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { document_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError_ctor (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { document_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError_destroy (ffi : * mut dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError_get_document_id (obj : * const dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError_set_document_id (obj : * mut dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } } pub mod document_timestamps_are_equal_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::document::document_timestamps_are_equal_error::DocumentTimestampsAreEqualError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: DocumentTimestampsAreEqualError > for dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError) -> dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: DocumentTimestampsAreEqualError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: DocumentTimestampsAreEqualError { document_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: DocumentTimestampsAreEqualError) -> * const dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { document_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError_ctor (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { document_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError_destroy (ffi : * mut dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError_get_document_id (obj : * const dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError_set_document_id (obj : * mut dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } } pub mod invalid_document_revision_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::document::invalid_document_revision_error::InvalidDocumentRevisionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub previous_revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub desired_revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: InvalidDocumentRevisionError > for dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) -> dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: InvalidDocumentRevisionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: InvalidDocumentRevisionError { document_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_id) , previous_revision : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . previous_revision) , desired_revision : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . desired_revision) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: InvalidDocumentRevisionError) -> * const dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { document_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_id) , previous_revision : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . previous_revision) , desired_revision : ferment_interfaces :: FFIConversion :: ffi_to (obj . desired_revision) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; if ! (ffi_ref . previous_revision) . is_null () { ferment_interfaces :: unbox_any (ffi_ref . previous_revision) ; } ; ferment_interfaces :: unbox_any (ffi_ref . desired_revision) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_ctor (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , previous_revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , desired_revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) -> * mut dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { document_id , previous_revision , desired_revision }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_destroy (ffi : * mut dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_get_document_id (obj : * const dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_get_previous_revision (obj : * const dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . previous_revision } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_get_desired_revision (obj : * const dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . desired_revision } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_set_document_id (obj : * mut dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_set_previous_revision (obj : * mut dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . previous_revision = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_set_desired_revision (obj : * mut dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . desired_revision = value ; } } pub mod duplicate_unique_index_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::document::duplicate_unique_index_error::DuplicateUniqueIndexError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub duplicating_properties : * mut crate :: fermented :: generics :: Vec_String } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: DuplicateUniqueIndexError > for dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) -> dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: DuplicateUniqueIndexError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: DuplicateUniqueIndexError { document_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_id) , duplicating_properties : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . duplicating_properties) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: DuplicateUniqueIndexError) -> * const dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { document_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_id) , duplicating_properties : ferment_interfaces :: FFIConversion :: ffi_to (obj . duplicating_properties) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . duplicating_properties) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError_ctor (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , duplicating_properties : * mut crate :: fermented :: generics :: Vec_String) -> * mut dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { document_id , duplicating_properties }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError_destroy (ffi : * mut dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError_get_document_id (obj : * const dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError_get_duplicating_properties (obj : * const dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) -> * mut crate :: fermented :: generics :: Vec_String { (* obj) . duplicating_properties } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError_set_document_id (obj : * mut dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError_set_duplicating_properties (obj : * mut dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError , value : * mut crate :: fermented :: generics :: Vec_String) { (* obj) . duplicating_properties = value ; } } pub mod document_timestamps_mismatch_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::document::document_timestamps_mismatch_error::DocumentTimestampsMismatchError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: DocumentTimestampsMismatchError > for dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError) -> dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: DocumentTimestampsMismatchError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: DocumentTimestampsMismatchError { document_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: DocumentTimestampsMismatchError) -> * const dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { document_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError_ctor (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { document_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError_destroy (ffi : * mut dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError_get_document_id (obj : * const dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError_set_document_id (obj : * mut dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } } pub mod document_already_present_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::document::document_already_present_error::DocumentAlreadyPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: document :: document_already_present_error :: DocumentAlreadyPresentError > for dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError) -> dpp :: errors :: consensus :: state :: document :: document_already_present_error :: DocumentAlreadyPresentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_already_present_error :: DocumentAlreadyPresentError { document_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_already_present_error :: DocumentAlreadyPresentError) -> * const dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { document_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . document_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError_ctor (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { document_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError_destroy (ffi : * mut dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError_get_document_id (obj : * const dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError_set_document_id (obj : * mut dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . document_id = value ; } } } pub mod state_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::state_error::StateError`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_errors_consensus_state_state_error_StateError { DataContractAlreadyPresentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError) , DataTriggerError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: dpp_errors_consensus_state_data_trigger_DataTriggerError) , DocumentAlreadyPresentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_already_present_error :: dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError) , DocumentNotFoundError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_not_found_error :: dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError) , DocumentOwnerIdMismatchError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) , DocumentTimestampsMismatchError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError) , DocumentTimestampWindowViolationError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) , DuplicateUniqueIndexError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) , InvalidDocumentRevisionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) , IdentityAlreadyExistsError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError) , IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) , IdentityPublicKeyDisabledAtWindowViolationError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_disabled_at_window_violation_error :: dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError) , IdentityPublicKeyIsReadOnlyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError) , InvalidAssetLockProofValueError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_asset_lock_proof_value :: dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError) , MissingIdentityPublicKeyIdsError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError) , InvalidIdentityPublicKeyIdError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError) , InvalidIdentityRevisionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) , MaxIdentityPublicKeyLimitReachedError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError) , DuplicatedIdentityPublicKeyStateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError) , DuplicatedIdentityPublicKeyIdStateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError) , IdentityPublicKeyIsDisabledError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError) , IdentityInsufficientBalanceError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) , DocumentTimestampsAreEqualError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError) , DataContractIsReadonlyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError) , DataContractConfigUpdateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: state_error :: StateError > for dpp_errors_consensus_state_state_error_StateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_state_error_StateError) -> dpp :: errors :: consensus :: state :: state_error :: StateError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_consensus_state_state_error_StateError :: DataContractAlreadyPresentError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractAlreadyPresentError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DataTriggerError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DataTriggerError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentAlreadyPresentError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentAlreadyPresentError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentNotFoundError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentNotFoundError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentOwnerIdMismatchError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentOwnerIdMismatchError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsMismatchError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTimestampsMismatchError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampWindowViolationError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTimestampWindowViolationError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DuplicateUniqueIndexError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DuplicateUniqueIndexError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: InvalidDocumentRevisionError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidDocumentRevisionError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: IdentityAlreadyExistsError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityAlreadyExistsError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyDisabledAtWindowViolationError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityPublicKeyDisabledAtWindowViolationError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsReadOnlyError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityPublicKeyIsReadOnlyError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: InvalidAssetLockProofValueError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidAssetLockProofValueError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: MissingIdentityPublicKeyIdsError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: MissingIdentityPublicKeyIdsError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityPublicKeyIdError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidIdentityPublicKeyIdError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityRevisionError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidIdentityRevisionError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: MaxIdentityPublicKeyLimitReachedError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: MaxIdentityPublicKeyLimitReachedError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyStateError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DuplicatedIdentityPublicKeyStateError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyIdStateError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DuplicatedIdentityPublicKeyIdStateError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsDisabledError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityPublicKeyIsDisabledError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: IdentityInsufficientBalanceError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityInsufficientBalanceError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsAreEqualError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTimestampsAreEqualError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DataContractIsReadonlyError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractIsReadonlyError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DataContractConfigUpdateError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractConfigUpdateError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: state_error :: StateError) -> * const dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (match obj { dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractAlreadyPresentError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DataContractAlreadyPresentError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DataTriggerError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DataTriggerError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentAlreadyPresentError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentAlreadyPresentError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentNotFoundError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentNotFoundError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentOwnerIdMismatchError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentOwnerIdMismatchError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTimestampsMismatchError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsMismatchError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTimestampWindowViolationError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampWindowViolationError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DuplicateUniqueIndexError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DuplicateUniqueIndexError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidDocumentRevisionError (o_0) => dpp_errors_consensus_state_state_error_StateError :: InvalidDocumentRevisionError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityAlreadyExistsError (o_0) => dpp_errors_consensus_state_state_error_StateError :: IdentityAlreadyExistsError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError (o_0) => dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityPublicKeyDisabledAtWindowViolationError (o_0) => dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyDisabledAtWindowViolationError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityPublicKeyIsReadOnlyError (o_0) => dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsReadOnlyError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidAssetLockProofValueError (o_0) => dpp_errors_consensus_state_state_error_StateError :: InvalidAssetLockProofValueError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: MissingIdentityPublicKeyIdsError (o_0) => dpp_errors_consensus_state_state_error_StateError :: MissingIdentityPublicKeyIdsError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidIdentityPublicKeyIdError (o_0) => dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityPublicKeyIdError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidIdentityRevisionError (o_0) => dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityRevisionError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: MaxIdentityPublicKeyLimitReachedError (o_0) => dpp_errors_consensus_state_state_error_StateError :: MaxIdentityPublicKeyLimitReachedError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DuplicatedIdentityPublicKeyStateError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyStateError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DuplicatedIdentityPublicKeyIdStateError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyIdStateError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityPublicKeyIsDisabledError (o_0) => dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsDisabledError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityInsufficientBalanceError (o_0) => dpp_errors_consensus_state_state_error_StateError :: IdentityInsufficientBalanceError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTimestampsAreEqualError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsAreEqualError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractIsReadonlyError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DataContractIsReadonlyError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractConfigUpdateError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DataContractConfigUpdateError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_state_error_StateError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_errors_consensus_state_state_error_StateError { fn drop (& mut self) { unsafe { match self { dpp_errors_consensus_state_state_error_StateError :: DataContractAlreadyPresentError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DataTriggerError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentAlreadyPresentError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentNotFoundError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentOwnerIdMismatchError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsMismatchError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampWindowViolationError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DuplicateUniqueIndexError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: InvalidDocumentRevisionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: IdentityAlreadyExistsError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyDisabledAtWindowViolationError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsReadOnlyError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: InvalidAssetLockProofValueError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: MissingIdentityPublicKeyIdsError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityPublicKeyIdError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityRevisionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: MaxIdentityPublicKeyLimitReachedError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyStateError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyIdStateError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsDisabledError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: IdentityInsufficientBalanceError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsAreEqualError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DataContractIsReadonlyError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DataContractConfigUpdateError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DataContractAlreadyPresentError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DataContractAlreadyPresentError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DataTriggerError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: dpp_errors_consensus_state_data_trigger_DataTriggerError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DataTriggerError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentAlreadyPresentError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_already_present_error :: dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentAlreadyPresentError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentNotFoundError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_not_found_error :: dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentNotFoundError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentOwnerIdMismatchError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentOwnerIdMismatchError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentTimestampsMismatchError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsMismatchError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentTimestampWindowViolationError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampWindowViolationError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DuplicateUniqueIndexError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DuplicateUniqueIndexError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_InvalidDocumentRevisionError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: InvalidDocumentRevisionError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_IdentityAlreadyExistsError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: IdentityAlreadyExistsError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_IdentityPublicKeyDisabledAtWindowViolationError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_disabled_at_window_violation_error :: dpp_errors_consensus_state_identity_identity_public_key_disabled_at_window_violation_error_IdentityPublicKeyDisabledAtWindowViolationError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyDisabledAtWindowViolationError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_IdentityPublicKeyIsReadOnlyError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsReadOnlyError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_InvalidAssetLockProofValueError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_asset_lock_proof_value :: dpp_errors_consensus_state_identity_invalid_asset_lock_proof_value_InvalidAssetLockProofValueError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: InvalidAssetLockProofValueError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_MissingIdentityPublicKeyIdsError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: MissingIdentityPublicKeyIdsError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_InvalidIdentityPublicKeyIdError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityPublicKeyIdError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_InvalidIdentityRevisionError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityRevisionError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_MaxIdentityPublicKeyLimitReachedError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: MaxIdentityPublicKeyLimitReachedError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DuplicatedIdentityPublicKeyStateError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyStateError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DuplicatedIdentityPublicKeyIdStateError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyIdStateError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_IdentityPublicKeyIsDisabledError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsDisabledError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_IdentityInsufficientBalanceError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: IdentityInsufficientBalanceError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentTimestampsAreEqualError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsAreEqualError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DataContractIsReadonlyError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DataContractIsReadonlyError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DataContractConfigUpdateError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_state_error_StateError :: DataContractConfigUpdateError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_destroy (ffi : * mut dpp_errors_consensus_state_state_error_StateError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod data_contract { use crate as ferment_example_platform ; pub mod data_contract_is_readonly_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::data_contract::data_contract_is_readonly_error::DataContractIsReadonlyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: DataContractIsReadonlyError > for dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError) -> dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: DataContractIsReadonlyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: DataContractIsReadonlyError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract_id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: DataContractIsReadonlyError) -> * const dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract_id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError_ctor (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError_destroy (ffi : * mut dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError_get_data_contract_id (obj : * const dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError_set_data_contract_id (obj : * mut dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } } pub mod data_contract_config_update_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::data_contract::data_contract_config_update_error::DataContractConfigUpdateError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub additional_message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: DataContractConfigUpdateError > for dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) -> dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: DataContractConfigUpdateError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: DataContractConfigUpdateError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract_id) , additional_message : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . additional_message) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: DataContractConfigUpdateError) -> * const dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract_id) , additional_message : ferment_interfaces :: FFIConversion :: ffi_to (obj . additional_message) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . additional_message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError_ctor (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , additional_message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { data_contract_id , additional_message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError_destroy (ffi : * mut dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError_get_data_contract_id (obj : * const dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError_get_additional_message (obj : * const dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . additional_message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError_set_data_contract_id (obj : * mut dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError_set_additional_message (obj : * mut dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError , value : * mut std :: os :: raw :: c_char) { (* obj) . additional_message = value ; } } pub mod data_contract_already_present_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::state::data_contract::data_contract_already_present_error::DataContractAlreadyPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: DataContractAlreadyPresentError > for dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError) -> dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: DataContractAlreadyPresentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: DataContractAlreadyPresentError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract_id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: DataContractAlreadyPresentError) -> * const dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract_id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError_ctor (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError_destroy (ffi : * mut dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError_get_data_contract_id (obj : * const dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError_set_data_contract_id (obj : * mut dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } } } } pub mod signature { use crate as ferment_example_platform ; pub mod invalid_state_transition_signature_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::signature::invalid_state_transition_signature_error::InvalidStateTransitionSignatureError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: InvalidStateTransitionSignatureError > for dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError) -> dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: InvalidStateTransitionSignatureError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: InvalidStateTransitionSignatureError { } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: InvalidStateTransitionSignatureError) -> * const dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError_ctor () -> * mut dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError_destroy (ffi : * mut dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod invalid_signature_public_key_security_level_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::signature::invalid_signature_public_key_security_level_error::InvalidSignaturePublicKeySecurityLevelError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { pub public_key_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub allowed_key_security_levels : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_security_level_SecurityLevel } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: InvalidSignaturePublicKeySecurityLevelError > for dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) -> dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: InvalidSignaturePublicKeySecurityLevelError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: InvalidSignaturePublicKeySecurityLevelError { public_key_security_level : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_key_security_level) , allowed_key_security_levels : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . allowed_key_security_levels) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: InvalidSignaturePublicKeySecurityLevelError) -> * const dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { public_key_security_level : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_key_security_level) , allowed_key_security_levels : ferment_interfaces :: FFIConversion :: ffi_to (obj . allowed_key_security_levels) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_security_level) ; ; ferment_interfaces :: unbox_any (ffi_ref . allowed_key_security_levels) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError_ctor (public_key_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , allowed_key_security_levels : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_security_level_SecurityLevel) -> * mut dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { public_key_security_level , allowed_key_security_levels }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError_destroy (ffi : * mut dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError_get_public_key_security_level (obj : * const dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . public_key_security_level } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError_get_allowed_key_security_levels (obj : * const dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . allowed_key_security_levels } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError_set_public_key_security_level (obj : * mut dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . public_key_security_level = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError_set_allowed_key_security_levels (obj : * mut dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError , value : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . allowed_key_security_levels = value ; } } pub mod basic_bls_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::signature::basic_bls_error::BasicBLSError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: signature :: basic_bls_error :: BasicBLSError > for dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_basic_bls_error_BasicBLSError) -> dpp :: errors :: consensus :: signature :: basic_bls_error :: BasicBLSError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: basic_bls_error :: BasicBLSError { message : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . message) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: basic_bls_error :: BasicBLSError) -> * const dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { message : ferment_interfaces :: FFIConversion :: ffi_to (obj . message) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_basic_bls_error_BasicBLSError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_bls_error_BasicBLSError_ctor (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_bls_error_BasicBLSError_destroy (ffi : * mut dpp_errors_consensus_signature_basic_bls_error_BasicBLSError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_bls_error_BasicBLSError_get_message (obj : * const dpp_errors_consensus_signature_basic_bls_error_BasicBLSError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_bls_error_BasicBLSError_set_message (obj : * mut dpp_errors_consensus_signature_basic_bls_error_BasicBLSError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod signature_should_not_be_present_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::signature::signature_should_not_be_present_error::SignatureShouldNotBePresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: SignatureShouldNotBePresentError > for dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError) -> dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: SignatureShouldNotBePresentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: SignatureShouldNotBePresentError { message : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . message) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: SignatureShouldNotBePresentError) -> * const dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { message : ferment_interfaces :: FFIConversion :: ffi_to (obj . message) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError_ctor (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError_destroy (ffi : * mut dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError_get_message (obj : * const dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError_set_message (obj : * mut dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod invalid_identity_public_key_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::signature::invalid_identity_public_key_type_error::InvalidIdentityPublicKeyTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { pub public_key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError > for dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) -> dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError { public_key_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_key_type) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError) -> * const dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { public_key_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_key_type) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_type) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_ctor (public_key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType) -> * mut dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { public_key_type }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_destroy (ffi : * mut dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_get_public_key_type (obj : * const dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType { (* obj) . public_key_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_set_public_key_type (obj : * mut dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType) { (* obj) . public_key_type = value ; } } pub mod public_key_security_level_not_met_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::signature::public_key_security_level_not_met_error::PublicKeySecurityLevelNotMetError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { pub public_key_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub required_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError > for dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError { public_key_security_level : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_key_security_level) , required_security_level : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . required_security_level) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError) -> * const dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { public_key_security_level : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_key_security_level) , required_security_level : ferment_interfaces :: FFIConversion :: ffi_to (obj . required_security_level) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_security_level) ; ; ferment_interfaces :: unbox_any (ffi_ref . required_security_level) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_ctor (public_key_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , required_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) -> * mut dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { public_key_security_level , required_security_level }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_destroy (ffi : * mut dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_get_public_key_security_level (obj : * const dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . public_key_security_level } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_get_required_security_level (obj : * const dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . required_security_level } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_set_public_key_security_level (obj : * mut dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . public_key_security_level = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_set_required_security_level (obj : * mut dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . required_security_level = value ; } } pub mod identity_not_found_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::signature::identity_not_found_error::IdentityNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: signature :: identity_not_found_error :: IdentityNotFoundError > for dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError) -> dpp :: errors :: consensus :: signature :: identity_not_found_error :: IdentityNotFoundError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: identity_not_found_error :: IdentityNotFoundError { identity_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identity_id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: identity_not_found_error :: IdentityNotFoundError) -> * const dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { identity_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . identity_id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . identity_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError_ctor (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { identity_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError_destroy (ffi : * mut dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError_get_identity_id (obj : * const dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError_set_identity_id (obj : * mut dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . identity_id = value ; } } pub mod wrong_public_key_purpose_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::signature::wrong_public_key_purpose_error::WrongPublicKeyPurposeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { pub public_key_purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , pub key_purpose_requirement : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError > for dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError { public_key_purpose : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_key_purpose) , key_purpose_requirement : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . key_purpose_requirement) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError) -> * const dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { public_key_purpose : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_key_purpose) , key_purpose_requirement : ferment_interfaces :: FFIConversion :: ffi_to (obj . key_purpose_requirement) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_purpose) ; ; ferment_interfaces :: unbox_any (ffi_ref . key_purpose_requirement) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_ctor (public_key_purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , key_purpose_requirement : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) -> * mut dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { public_key_purpose , key_purpose_requirement }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_destroy (ffi : * mut dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_get_public_key_purpose (obj : * const dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . public_key_purpose } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_get_key_purpose_requirement (obj : * const dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . key_purpose_requirement } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_set_public_key_purpose (obj : * mut dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) { (* obj) . public_key_purpose = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_set_key_purpose_requirement (obj : * mut dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) { (* obj) . key_purpose_requirement = value ; } } pub mod public_key_is_disabled_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::signature::public_key_is_disabled_error::PublicKeyIsDisabledError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { pub public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: PublicKeyIsDisabledError > for dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) -> dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: PublicKeyIsDisabledError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: PublicKeyIsDisabledError { public_key_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_key_id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: PublicKeyIsDisabledError) -> * const dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { public_key_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_key_id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError_ctor (public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { public_key_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError_destroy (ffi : * mut dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError_get_public_key_id (obj : * const dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError_set_public_key_id (obj : * mut dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . public_key_id = value ; } } pub mod signature_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::signature::signature_error::SignatureError`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_errors_consensus_signature_signature_error_SignatureError { IdentityNotFoundError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: identity_not_found_error :: dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError) , InvalidIdentityPublicKeyTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) , InvalidStateTransitionSignatureError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError) , MissingPublicKeyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: missing_public_key_error :: dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError) , InvalidSignaturePublicKeySecurityLevelError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) , WrongPublicKeyPurposeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) , PublicKeyIsDisabledError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) , PublicKeySecurityLevelNotMetError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) , SignatureShouldNotBePresentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError) , BasicECDSAError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError) , BasicBLSError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: basic_bls_error :: dpp_errors_consensus_signature_basic_bls_error_BasicBLSError) } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: signature :: signature_error :: SignatureError > for dpp_errors_consensus_signature_signature_error_SignatureError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_signature_error_SignatureError) -> dpp :: errors :: consensus :: signature :: signature_error :: SignatureError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_consensus_signature_signature_error_SignatureError :: IdentityNotFoundError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: IdentityNotFoundError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidIdentityPublicKeyTypeError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidIdentityPublicKeyTypeError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidStateTransitionSignatureError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidStateTransitionSignatureError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: MissingPublicKeyError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: MissingPublicKeyError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidSignaturePublicKeySecurityLevelError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidSignaturePublicKeySecurityLevelError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: WrongPublicKeyPurposeError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: WrongPublicKeyPurposeError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeyIsDisabledError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: PublicKeyIsDisabledError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeySecurityLevelNotMetError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: PublicKeySecurityLevelNotMetError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: SignatureShouldNotBePresentError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: SignatureShouldNotBePresentError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: BasicECDSAError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: BasicECDSAError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: BasicBLSError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: BasicBLSError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: signature_error :: SignatureError) -> * const dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (match obj { dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: IdentityNotFoundError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: IdentityNotFoundError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidIdentityPublicKeyTypeError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidIdentityPublicKeyTypeError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidStateTransitionSignatureError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidStateTransitionSignatureError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: MissingPublicKeyError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: MissingPublicKeyError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidSignaturePublicKeySecurityLevelError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidSignaturePublicKeySecurityLevelError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: WrongPublicKeyPurposeError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: WrongPublicKeyPurposeError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: PublicKeyIsDisabledError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeyIsDisabledError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: PublicKeySecurityLevelNotMetError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeySecurityLevelNotMetError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: SignatureShouldNotBePresentError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: SignatureShouldNotBePresentError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: BasicECDSAError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: BasicECDSAError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: BasicBLSError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: BasicBLSError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_signature_error_SignatureError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_errors_consensus_signature_signature_error_SignatureError { fn drop (& mut self) { unsafe { match self { dpp_errors_consensus_signature_signature_error_SignatureError :: IdentityNotFoundError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidIdentityPublicKeyTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidStateTransitionSignatureError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: MissingPublicKeyError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidSignaturePublicKeySecurityLevelError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: WrongPublicKeyPurposeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeyIsDisabledError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeySecurityLevelNotMetError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: SignatureShouldNotBePresentError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: BasicECDSAError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: BasicBLSError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_IdentityNotFoundError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: identity_not_found_error :: dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: IdentityNotFoundError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_InvalidIdentityPublicKeyTypeError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidIdentityPublicKeyTypeError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_InvalidStateTransitionSignatureError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidStateTransitionSignatureError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_MissingPublicKeyError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: missing_public_key_error :: dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: MissingPublicKeyError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_InvalidSignaturePublicKeySecurityLevelError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidSignaturePublicKeySecurityLevelError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_WrongPublicKeyPurposeError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: WrongPublicKeyPurposeError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_PublicKeyIsDisabledError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeyIsDisabledError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_PublicKeySecurityLevelNotMetError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeySecurityLevelNotMetError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_SignatureShouldNotBePresentError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: SignatureShouldNotBePresentError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_BasicECDSAError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: BasicECDSAError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_BasicBLSError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: basic_bls_error :: dpp_errors_consensus_signature_basic_bls_error_BasicBLSError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: BasicBLSError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_destroy (ffi : * mut dpp_errors_consensus_signature_signature_error_SignatureError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod basic_ecdsa_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::signature::basic_ecdsa_error::BasicECDSAError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: BasicECDSAError > for dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError) -> dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: BasicECDSAError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: BasicECDSAError { message : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . message) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: BasicECDSAError) -> * const dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { message : ferment_interfaces :: FFIConversion :: ffi_to (obj . message) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError_ctor (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError_destroy (ffi : * mut dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError_get_message (obj : * const dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError_set_message (obj : * mut dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod missing_public_key_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::signature::missing_public_key_error::MissingPublicKeyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { pub public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: signature :: missing_public_key_error :: MissingPublicKeyError > for dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError) -> dpp :: errors :: consensus :: signature :: missing_public_key_error :: MissingPublicKeyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: missing_public_key_error :: MissingPublicKeyError { public_key_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_key_id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: missing_public_key_error :: MissingPublicKeyError) -> * const dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { public_key_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_key_id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError_ctor (public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { ferment_interfaces :: boxed (dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { public_key_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError_destroy (ffi : * mut dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError_get_public_key_id (obj : * const dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError_set_public_key_id (obj : * mut dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . public_key_id = value ; } } } pub mod consensus_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::consensus_error::ConsensusError`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_errors_consensus_consensus_error_ConsensusError { DefaultError , BasicError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: basic_error :: dpp_errors_consensus_basic_basic_error_BasicError) , StateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: state_error :: dpp_errors_consensus_state_state_error_StateError) , SignatureError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: signature_error :: dpp_errors_consensus_signature_signature_error_SignatureError) , FeeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: fee :: fee_error :: dpp_errors_consensus_fee_fee_error_FeeError) } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: consensus_error :: ConsensusError > for dpp_errors_consensus_consensus_error_ConsensusError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_consensus_error_ConsensusError) -> dpp :: errors :: consensus :: consensus_error :: ConsensusError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_consensus_consensus_error_ConsensusError :: DefaultError => dpp :: errors :: consensus :: consensus_error :: ConsensusError :: DefaultError , dpp_errors_consensus_consensus_error_ConsensusError :: BasicError (o_0) => dpp :: errors :: consensus :: consensus_error :: ConsensusError :: BasicError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_consensus_error_ConsensusError :: StateError (o_0) => dpp :: errors :: consensus :: consensus_error :: ConsensusError :: StateError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_consensus_error_ConsensusError :: SignatureError (o_0) => dpp :: errors :: consensus :: consensus_error :: ConsensusError :: SignatureError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_consensus_error_ConsensusError :: FeeError (o_0) => dpp :: errors :: consensus :: consensus_error :: ConsensusError :: FeeError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: consensus_error :: ConsensusError) -> * const dpp_errors_consensus_consensus_error_ConsensusError { ferment_interfaces :: boxed (match obj { dpp :: errors :: consensus :: consensus_error :: ConsensusError :: DefaultError => dpp_errors_consensus_consensus_error_ConsensusError :: DefaultError , dpp :: errors :: consensus :: consensus_error :: ConsensusError :: BasicError (o_0) => dpp_errors_consensus_consensus_error_ConsensusError :: BasicError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: consensus_error :: ConsensusError :: StateError (o_0) => dpp_errors_consensus_consensus_error_ConsensusError :: StateError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: consensus_error :: ConsensusError :: SignatureError (o_0) => dpp_errors_consensus_consensus_error_ConsensusError :: SignatureError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: consensus_error :: ConsensusError :: FeeError (o_0) => dpp_errors_consensus_consensus_error_ConsensusError :: FeeError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_consensus_error_ConsensusError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_errors_consensus_consensus_error_ConsensusError { fn drop (& mut self) { unsafe { match self { dpp_errors_consensus_consensus_error_ConsensusError :: DefaultError => { } , dpp_errors_consensus_consensus_error_ConsensusError :: BasicError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_consensus_error_ConsensusError :: StateError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_consensus_error_ConsensusError :: SignatureError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_consensus_error_ConsensusError :: FeeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_consensus_error_ConsensusError_DefaultError_ctor () -> * mut dpp_errors_consensus_consensus_error_ConsensusError { ferment_interfaces :: boxed (dpp_errors_consensus_consensus_error_ConsensusError :: DefaultError) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_consensus_error_ConsensusError_BasicError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: basic_error :: dpp_errors_consensus_basic_basic_error_BasicError) -> * mut dpp_errors_consensus_consensus_error_ConsensusError { ferment_interfaces :: boxed (dpp_errors_consensus_consensus_error_ConsensusError :: BasicError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_consensus_error_ConsensusError_StateError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: state_error :: dpp_errors_consensus_state_state_error_StateError) -> * mut dpp_errors_consensus_consensus_error_ConsensusError { ferment_interfaces :: boxed (dpp_errors_consensus_consensus_error_ConsensusError :: StateError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_consensus_error_ConsensusError_SignatureError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: signature_error :: dpp_errors_consensus_signature_signature_error_SignatureError) -> * mut dpp_errors_consensus_consensus_error_ConsensusError { ferment_interfaces :: boxed (dpp_errors_consensus_consensus_error_ConsensusError :: SignatureError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_consensus_error_ConsensusError_FeeError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: fee :: fee_error :: dpp_errors_consensus_fee_fee_error_FeeError) -> * mut dpp_errors_consensus_consensus_error_ConsensusError { ferment_interfaces :: boxed (dpp_errors_consensus_consensus_error_ConsensusError :: FeeError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_consensus_error_ConsensusError_destroy (ffi : * mut dpp_errors_consensus_consensus_error_ConsensusError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod basic { use crate as ferment_example_platform ; pub mod json_schema_compilation_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::json_schema_compilation_error::JsonSchemaCompilationError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { pub compilation_error : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: JsonSchemaCompilationError > for dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError) -> dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: JsonSchemaCompilationError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: JsonSchemaCompilationError { compilation_error : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . compilation_error) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: JsonSchemaCompilationError) -> * const dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { compilation_error : ferment_interfaces :: FFIConversion :: ffi_to (obj . compilation_error) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . compilation_error) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError_ctor (compilation_error : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { compilation_error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError_destroy (ffi : * mut dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError_get_compilation_error (obj : * const dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError) -> * mut std :: os :: raw :: c_char { (* obj) . compilation_error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError_set_compilation_error (obj : * mut dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError , value : * mut std :: os :: raw :: c_char) { (* obj) . compilation_error = value ; } } pub mod document { use crate as ferment_example_platform ; pub mod max_documents_transitions_exceeded_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::document::max_documents_transitions_exceeded_error::MaxDocumentsTransitionsExceededError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { pub max_transitions : u32 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: MaxDocumentsTransitionsExceededError > for dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError) -> dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: MaxDocumentsTransitionsExceededError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: MaxDocumentsTransitionsExceededError { max_transitions : ffi_ref . max_transitions } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: MaxDocumentsTransitionsExceededError) -> * const dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { max_transitions : obj . max_transitions }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError_ctor (max_transitions : u32) -> * mut dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { max_transitions }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError_destroy (ffi : * mut dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError_get_max_transitions (obj : * const dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError) -> u32 { (* obj) . max_transitions } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError_set_max_transitions (obj : * mut dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError , value : u32) { (* obj) . max_transitions = value ; } } pub mod inconsistent_compound_index_data_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::document::inconsistent_compound_index_data_error::InconsistentCompoundIndexDataError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { pub document_type : * mut std :: os :: raw :: c_char , pub index_properties : * mut crate :: fermented :: generics :: Vec_String } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: InconsistentCompoundIndexDataError > for dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) -> dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: InconsistentCompoundIndexDataError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: InconsistentCompoundIndexDataError { document_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_type) , index_properties : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . index_properties) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: InconsistentCompoundIndexDataError) -> * const dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { document_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_type) , index_properties : ferment_interfaces :: FFIConversion :: ffi_to (obj . index_properties) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . document_type) ; ferment_interfaces :: unbox_any (ffi_ref . index_properties) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError_ctor (document_type : * mut std :: os :: raw :: c_char , index_properties : * mut crate :: fermented :: generics :: Vec_String) -> * mut dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { document_type , index_properties }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError_destroy (ffi : * mut dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError_get_document_type (obj : * const dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError_get_index_properties (obj : * const dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) -> * mut crate :: fermented :: generics :: Vec_String { (* obj) . index_properties } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError_set_document_type (obj : * mut dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError_set_index_properties (obj : * mut dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError , value : * mut crate :: fermented :: generics :: Vec_String) { (* obj) . index_properties = value ; } } pub mod duplicate_document_transitions_with_indices_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::document::duplicate_document_transitions_with_indices_error::DuplicateDocumentTransitionsWithIndicesError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { pub references : * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: DuplicateDocumentTransitionsWithIndicesError > for dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError) -> dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: DuplicateDocumentTransitionsWithIndicesError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: DuplicateDocumentTransitionsWithIndicesError { references : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . references) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: DuplicateDocumentTransitionsWithIndicesError) -> * const dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { references : ferment_interfaces :: FFIConversion :: ffi_to (obj . references) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . references) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError_ctor (references : * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32) -> * mut dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { references }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError_destroy (ffi : * mut dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError_get_references (obj : * const dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError) -> * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32 { (* obj) . references } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError_set_references (obj : * mut dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError , value : * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32) { (* obj) . references = value ; } } pub mod invalid_document_transition_action_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::document::invalid_document_transition_action_error::InvalidDocumentTransitionActionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { pub action : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: InvalidDocumentTransitionActionError > for dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError) -> dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: InvalidDocumentTransitionActionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: InvalidDocumentTransitionActionError { action : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . action) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: InvalidDocumentTransitionActionError) -> * const dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { action : ferment_interfaces :: FFIConversion :: ffi_to (obj . action) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . action) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError_ctor (action : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { action }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError_destroy (ffi : * mut dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError_get_action (obj : * const dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError) -> * mut std :: os :: raw :: c_char { (* obj) . action } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError_set_action (obj : * mut dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError , value : * mut std :: os :: raw :: c_char) { (* obj) . action = value ; } } pub mod document_transitions_are_absent_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::document::document_transitions_are_absent_error::DocumentTransitionsAreAbsentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: DocumentTransitionsAreAbsentError > for dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError) -> dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: DocumentTransitionsAreAbsentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: DocumentTransitionsAreAbsentError { } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: DocumentTransitionsAreAbsentError) -> * const dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError_ctor () -> * mut dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError_destroy (ffi : * mut dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod duplicate_document_transitions_with_ids_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::document::duplicate_document_transitions_with_ids_error::DuplicateDocumentTransitionsWithIdsError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { pub references : * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: DuplicateDocumentTransitionsWithIdsError > for dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError) -> dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: DuplicateDocumentTransitionsWithIdsError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: DuplicateDocumentTransitionsWithIdsError { references : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . references) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: DuplicateDocumentTransitionsWithIdsError) -> * const dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { references : ferment_interfaces :: FFIConversion :: ffi_to (obj . references) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . references) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError_ctor (references : * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32) -> * mut dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { references }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError_destroy (ffi : * mut dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError_get_references (obj : * const dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError) -> * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32 { (* obj) . references } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError_set_references (obj : * mut dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError , value : * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32) { (* obj) . references = value ; } } pub mod data_contract_not_present_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::document::data_contract_not_present_error::DataContractNotPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: DataContractNotPresentError > for dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError) -> dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: DataContractNotPresentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: DataContractNotPresentError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract_id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: DataContractNotPresentError) -> * const dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract_id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError_ctor (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError_destroy (ffi : * mut dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError_get_data_contract_id (obj : * const dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError_set_data_contract_id (obj : * mut dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } } pub mod invalid_document_transition_id_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::document::invalid_document_transition_id_error::InvalidDocumentTransitionIdError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { pub expected_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub invalid_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: InvalidDocumentTransitionIdError > for dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) -> dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: InvalidDocumentTransitionIdError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: InvalidDocumentTransitionIdError { expected_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . expected_id) , invalid_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . invalid_id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: InvalidDocumentTransitionIdError) -> * const dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { expected_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . expected_id) , invalid_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . invalid_id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . expected_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . invalid_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError_ctor (expected_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , invalid_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { expected_id , invalid_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError_destroy (ffi : * mut dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError_get_expected_id (obj : * const dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . expected_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError_get_invalid_id (obj : * const dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . invalid_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError_set_expected_id (obj : * mut dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . expected_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError_set_invalid_id (obj : * mut dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . invalid_id = value ; } } pub mod missing_document_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::document::missing_document_type_error::MissingDocumentTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: MissingDocumentTypeError > for dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError) -> dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: MissingDocumentTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: MissingDocumentTypeError { } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: MissingDocumentTypeError) -> * const dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError_ctor () -> * mut dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError_destroy (ffi : * mut dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod missing_document_transition_action_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::document::missing_document_transition_action_error::MissingDocumentTransitionActionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: MissingDocumentTransitionActionError > for dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError) -> dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: MissingDocumentTransitionActionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: MissingDocumentTransitionActionError { } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: MissingDocumentTransitionActionError) -> * const dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError_ctor () -> * mut dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError_destroy (ffi : * mut dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod invalid_document_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::document::invalid_document_type_error::InvalidDocumentTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { pub document_type : * mut std :: os :: raw :: c_char , pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: InvalidDocumentTypeError > for dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) -> dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: InvalidDocumentTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: InvalidDocumentTypeError { document_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_type) , data_contract_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract_id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: InvalidDocumentTypeError) -> * const dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { document_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_type) , data_contract_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract_id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . document_type) ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError_ctor (document_type : * mut std :: os :: raw :: c_char , data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { document_type , data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError_destroy (ffi : * mut dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError_get_document_type (obj : * const dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError_get_data_contract_id (obj : * const dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError_set_document_type (obj : * mut dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError_set_data_contract_id (obj : * mut dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } } pub mod missing_document_transition_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::document::missing_document_transition_type_error::MissingDocumentTransitionTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: MissingDocumentTransitionTypeError > for dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError) -> dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: MissingDocumentTransitionTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: MissingDocumentTransitionTypeError { } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: MissingDocumentTransitionTypeError) -> * const dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError_ctor () -> * mut dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError_destroy (ffi : * mut dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod missing_positions_in_document_type_properties_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::document::missing_positions_in_document_type_properties_error::MissingPositionsInDocumentTypePropertiesError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { pub missing_position : u32 , pub contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_type_name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: MissingPositionsInDocumentTypePropertiesError > for dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) -> dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: MissingPositionsInDocumentTypePropertiesError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: MissingPositionsInDocumentTypePropertiesError { missing_position : ffi_ref . missing_position , contract_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . contract_id) , document_type_name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_type_name) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: MissingPositionsInDocumentTypePropertiesError) -> * const dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { missing_position : obj . missing_position , contract_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . contract_id) , document_type_name : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_type_name) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment_interfaces :: unbox_any (ffi_ref . contract_id) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . document_type_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_ctor (missing_position : u32 , contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { missing_position , contract_id , document_type_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_destroy (ffi : * mut dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_get_missing_position (obj : * const dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) -> u32 { (* obj) . missing_position } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_get_contract_id (obj : * const dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_get_document_type_name (obj : * const dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_set_missing_position (obj : * mut dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError , value : u32) { (* obj) . missing_position = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_set_contract_id (obj : * mut dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_set_document_type_name (obj : * mut dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type_name = value ; } } pub mod missing_data_contract_id_basic_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::document::missing_data_contract_id_basic_error::MissingDataContractIdBasicError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: MissingDataContractIdBasicError > for dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError) -> dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: MissingDataContractIdBasicError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: MissingDataContractIdBasicError { } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: MissingDataContractIdBasicError) -> * const dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError_ctor () -> * mut dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError_destroy (ffi : * mut dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError) { ferment_interfaces :: unbox_any (ffi) ; } } } pub mod incompatible_protocol_version_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::incompatible_protocol_version_error::IncompatibleProtocolVersionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { pub parsed_protocol_version : u32 , pub minimal_protocol_version : u32 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: IncompatibleProtocolVersionError > for dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) -> dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: IncompatibleProtocolVersionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: IncompatibleProtocolVersionError { parsed_protocol_version : ffi_ref . parsed_protocol_version , minimal_protocol_version : ffi_ref . minimal_protocol_version } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: IncompatibleProtocolVersionError) -> * const dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { parsed_protocol_version : obj . parsed_protocol_version , minimal_protocol_version : obj . minimal_protocol_version }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError_ctor (parsed_protocol_version : u32 , minimal_protocol_version : u32) -> * mut dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { parsed_protocol_version , minimal_protocol_version }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError_destroy (ffi : * mut dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError_get_parsed_protocol_version (obj : * const dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) -> u32 { (* obj) . parsed_protocol_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError_get_minimal_protocol_version (obj : * const dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) -> u32 { (* obj) . minimal_protocol_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError_set_parsed_protocol_version (obj : * mut dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError , value : u32) { (* obj) . parsed_protocol_version = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError_set_minimal_protocol_version (obj : * mut dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError , value : u32) { (* obj) . minimal_protocol_version = value ; } } pub mod identity { use crate as ferment_example_platform ; pub mod invalid_asset_lock_proof_core_chain_height_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::invalid_asset_lock_proof_core_chain_height_error::InvalidAssetLockProofCoreChainHeightError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { pub proof_core_chain_locked_height : u32 , pub current_core_chain_locked_height : u32 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: InvalidAssetLockProofCoreChainHeightError > for dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: InvalidAssetLockProofCoreChainHeightError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: InvalidAssetLockProofCoreChainHeightError { proof_core_chain_locked_height : ffi_ref . proof_core_chain_locked_height , current_core_chain_locked_height : ffi_ref . current_core_chain_locked_height } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: InvalidAssetLockProofCoreChainHeightError) -> * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { proof_core_chain_locked_height : obj . proof_core_chain_locked_height , current_core_chain_locked_height : obj . current_core_chain_locked_height }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError_ctor (proof_core_chain_locked_height : u32 , current_core_chain_locked_height : u32) -> * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { proof_core_chain_locked_height , current_core_chain_locked_height }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError_get_proof_core_chain_locked_height (obj : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) -> u32 { (* obj) . proof_core_chain_locked_height } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError_get_current_core_chain_locked_height (obj : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) -> u32 { (* obj) . current_core_chain_locked_height } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError_set_proof_core_chain_locked_height (obj : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError , value : u32) { (* obj) . proof_core_chain_locked_height = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError_set_current_core_chain_locked_height (obj : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError , value : u32) { (* obj) . current_core_chain_locked_height = value ; } } pub mod invalid_identity_credit_withdrawal_transition_core_fee_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::invalid_identity_credit_withdrawal_transition_core_fee_error::InvalidIdentityCreditWithdrawalTransitionCoreFeeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { pub core_fee_per_byte : u32 , pub min_core_fee_per_byte : u32 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError { core_fee_per_byte : ffi_ref . core_fee_per_byte , min_core_fee_per_byte : ffi_ref . min_core_fee_per_byte } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { core_fee_per_byte : obj . core_fee_per_byte , min_core_fee_per_byte : obj . min_core_fee_per_byte }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError_ctor (core_fee_per_byte : u32 , min_core_fee_per_byte : u32) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { core_fee_per_byte , min_core_fee_per_byte }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError_get_core_fee_per_byte (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) -> u32 { (* obj) . core_fee_per_byte } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError_get_min_core_fee_per_byte (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) -> u32 { (* obj) . min_core_fee_per_byte } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError_set_core_fee_per_byte (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError , value : u32) { (* obj) . core_fee_per_byte = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError_set_min_core_fee_per_byte (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError , value : u32) { (* obj) . min_core_fee_per_byte = value ; } } pub mod invalid_identity_update_transition_disable_keys_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::invalid_identity_update_transition_disable_keys_error::InvalidIdentityUpdateTransitionDisableKeysError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: InvalidIdentityUpdateTransitionDisableKeysError > for dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: InvalidIdentityUpdateTransitionDisableKeysError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: InvalidIdentityUpdateTransitionDisableKeysError { } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: InvalidIdentityUpdateTransitionDisableKeysError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError_ctor () -> * mut dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod invalid_asset_lock_transaction_output_return_size { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::invalid_asset_lock_transaction_output_return_size::InvalidAssetLockTransactionOutputReturnSizeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { pub output_index : usize } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: InvalidAssetLockTransactionOutputReturnSizeError > for dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: InvalidAssetLockTransactionOutputReturnSizeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: InvalidAssetLockTransactionOutputReturnSizeError { output_index : ffi_ref . output_index } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: InvalidAssetLockTransactionOutputReturnSizeError) -> * const dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { output_index : obj . output_index }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError_ctor (output_index : usize) -> * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { output_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError_get_output_index (obj : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError) -> usize { (* obj) . output_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError_set_output_index (obj : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError , value : usize) { (* obj) . output_index = value ; } } pub mod invalid_identity_key_signature_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::invalid_identity_key_signature_error::InvalidIdentityKeySignatureError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { pub public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: InvalidIdentityKeySignatureError > for dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: InvalidIdentityKeySignatureError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: InvalidIdentityKeySignatureError { public_key_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_key_id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: InvalidIdentityKeySignatureError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { public_key_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_key_id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError_ctor (public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { public_key_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError_get_public_key_id (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError_set_public_key_id (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . public_key_id = value ; } } pub mod invalid_identity_credit_withdrawal_transition_amount_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::invalid_identity_credit_withdrawal_transition_amount_error::InvalidIdentityCreditWithdrawalTransitionAmountError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { pub amount : u64 , pub min_amount : u64 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: InvalidIdentityCreditWithdrawalTransitionAmountError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: InvalidIdentityCreditWithdrawalTransitionAmountError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: InvalidIdentityCreditWithdrawalTransitionAmountError { amount : ffi_ref . amount , min_amount : ffi_ref . min_amount } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: InvalidIdentityCreditWithdrawalTransitionAmountError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { amount : obj . amount , min_amount : obj . min_amount }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError_ctor (amount : u64 , min_amount : u64) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { amount , min_amount }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError_get_amount (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) -> u64 { (* obj) . amount } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError_get_min_amount (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) -> u64 { (* obj) . min_amount } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError_set_amount (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError , value : u64) { (* obj) . amount = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError_set_min_amount (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError , value : u64) { (* obj) . min_amount = value ; } } pub mod identity_asset_lock_transaction_is_not_found_error { use crate as ferment_example_platform ; pub mod test { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::identity_asset_lock_transaction_is_not_found_error::IdentityAssetLockTransactionIsNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { pub transaction_id : * mut crate :: fermented :: generics :: Arr_u8_32 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: IdentityAssetLockTransactionIsNotFoundError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError) -> dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: IdentityAssetLockTransactionIsNotFoundError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: IdentityAssetLockTransactionIsNotFoundError { transaction_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . transaction_id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: IdentityAssetLockTransactionIsNotFoundError) -> * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { transaction_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . transaction_id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . transaction_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError_ctor (transaction_id : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { transaction_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError_get_transaction_id (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError_set_transaction_id (obj : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError , value : * mut crate :: fermented :: generics :: Arr_u8_32) { (* obj) . transaction_id = value ; } } pub mod invalid_instant_asset_lock_proof_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::invalid_instant_asset_lock_proof_error::InvalidInstantAssetLockProofError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: InvalidInstantAssetLockProofError > for dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: InvalidInstantAssetLockProofError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: InvalidInstantAssetLockProofError { message : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . message) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: InvalidInstantAssetLockProofError) -> * const dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { message : ferment_interfaces :: FFIConversion :: ffi_to (obj . message) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError_ctor (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError_get_message (obj : * const dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError_set_message (obj : * mut dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod identity_asset_lock_transaction_output_not_found_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::identity_asset_lock_transaction_output_not_found_error::IdentityAssetLockTransactionOutputNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { pub output_index : usize } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: IdentityAssetLockTransactionOutputNotFoundError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError) -> dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: IdentityAssetLockTransactionOutputNotFoundError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: IdentityAssetLockTransactionOutputNotFoundError { output_index : ffi_ref . output_index } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: IdentityAssetLockTransactionOutputNotFoundError) -> * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { output_index : obj . output_index }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError_ctor (output_index : usize) -> * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { output_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError_get_output_index (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError) -> usize { (* obj) . output_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError_set_output_index (obj : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError , value : usize) { (* obj) . output_index = value ; } } pub mod invalid_identity_public_key_security_level_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::invalid_identity_public_key_security_level_error::InvalidIdentityPublicKeySecurityLevelError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { pub public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , pub security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub allowed_security_levels : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: InvalidIdentityPublicKeySecurityLevelError > for dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: InvalidIdentityPublicKeySecurityLevelError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: InvalidIdentityPublicKeySecurityLevelError { public_key_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_key_id) , purpose : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . purpose) , security_level : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . security_level) , allowed_security_levels : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . allowed_security_levels) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: InvalidIdentityPublicKeySecurityLevelError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { public_key_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_key_id) , purpose : ferment_interfaces :: FFIConversion :: ffi_to (obj . purpose) , security_level : ferment_interfaces :: FFIConversion :: ffi_to (obj . security_level) , allowed_security_levels : ferment_interfaces :: FFIConversion :: ffi_to (obj . allowed_security_levels) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . purpose) ; ; ferment_interfaces :: unbox_any (ffi_ref . security_level) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . allowed_security_levels) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_ctor (public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , allowed_security_levels : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { public_key_id , purpose , security_level , allowed_security_levels }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_get_public_key_id (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_get_purpose (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . purpose } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_get_security_level (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . security_level } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_get_allowed_security_levels (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> * mut std :: os :: raw :: c_char { (* obj) . allowed_security_levels } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_set_public_key_id (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . public_key_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_set_purpose (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) { (* obj) . purpose = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_set_security_level (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . security_level = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_set_allowed_security_levels (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError , value : * mut std :: os :: raw :: c_char) { (* obj) . allowed_security_levels = value ; } } pub mod duplicated_identity_public_key_basic_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::duplicated_identity_public_key_basic_error::DuplicatedIdentityPublicKeyBasicError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { pub duplicated_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: DuplicatedIdentityPublicKeyBasicError > for dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError) -> dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: DuplicatedIdentityPublicKeyBasicError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: DuplicatedIdentityPublicKeyBasicError { duplicated_ids : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . duplicated_ids) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: DuplicatedIdentityPublicKeyBasicError) -> * const dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { duplicated_ids : ferment_interfaces :: FFIConversion :: ffi_to (obj . duplicated_ids) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . duplicated_ids) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError_ctor (duplicated_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { duplicated_ids }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError_get_duplicated_ids (obj : * const dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . duplicated_ids } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError_set_duplicated_ids (obj : * mut dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError , value : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) { (* obj) . duplicated_ids = value ; } } pub mod invalid_asset_lock_proof_transaction_height_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::invalid_asset_lock_proof_transaction_height_error::InvalidAssetLockProofTransactionHeightError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { pub proof_core_chain_locked_height : u32 , pub transaction_height : u32 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: InvalidAssetLockProofTransactionHeightError > for dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: InvalidAssetLockProofTransactionHeightError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: InvalidAssetLockProofTransactionHeightError { proof_core_chain_locked_height : ffi_ref . proof_core_chain_locked_height , transaction_height : (ffi_ref . transaction_height > 0) . then (|| ffi_ref . transaction_height) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: InvalidAssetLockProofTransactionHeightError) -> * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { proof_core_chain_locked_height : obj . proof_core_chain_locked_height , transaction_height : obj . transaction_height . unwrap_or (0) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError_ctor (proof_core_chain_locked_height : u32 , transaction_height : u32) -> * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { proof_core_chain_locked_height , transaction_height }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError_get_proof_core_chain_locked_height (obj : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) -> u32 { (* obj) . proof_core_chain_locked_height } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError_get_transaction_height (obj : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) -> u32 { (* obj) . transaction_height } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError_set_proof_core_chain_locked_height (obj : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError , value : u32) { (* obj) . proof_core_chain_locked_height = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError_set_transaction_height (obj : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError , value : u32) { (* obj) . transaction_height = value ; } } pub mod identity_credit_transfer_to_self_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::identity_credit_transfer_to_self_error::IdentityCreditTransferToSelfError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: IdentityCreditTransferToSelfError > for dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError) -> dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: IdentityCreditTransferToSelfError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: IdentityCreditTransferToSelfError { } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: IdentityCreditTransferToSelfError) -> * const dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError_ctor () -> * mut dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod identity_asset_lock_proof_locked_transaction_mismatch_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::identity_asset_lock_proof_locked_transaction_mismatch_error::IdentityAssetLockProofLockedTransactionMismatchError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { pub instant_lock_transaction_id : * mut dashcore :: Txid , pub asset_lock_transaction_id : * mut dashcore :: Txid } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: IdentityAssetLockProofLockedTransactionMismatchError > for dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) -> dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: IdentityAssetLockProofLockedTransactionMismatchError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: IdentityAssetLockProofLockedTransactionMismatchError { instant_lock_transaction_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . instant_lock_transaction_id) , asset_lock_transaction_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . asset_lock_transaction_id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: IdentityAssetLockProofLockedTransactionMismatchError) -> * const dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { instant_lock_transaction_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . instant_lock_transaction_id) , asset_lock_transaction_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . asset_lock_transaction_id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . instant_lock_transaction_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . asset_lock_transaction_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError_ctor (instant_lock_transaction_id : * mut dashcore :: Txid , asset_lock_transaction_id : * mut dashcore :: Txid) -> * mut dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { instant_lock_transaction_id , asset_lock_transaction_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError_get_instant_lock_transaction_id (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) -> * mut dashcore :: Txid { (* obj) . instant_lock_transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError_get_asset_lock_transaction_id (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) -> * mut dashcore :: Txid { (* obj) . asset_lock_transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError_set_instant_lock_transaction_id (obj : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError , value : * mut dashcore :: Txid) { (* obj) . instant_lock_transaction_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError_set_asset_lock_transaction_id (obj : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError , value : * mut dashcore :: Txid) { (* obj) . asset_lock_transaction_id = value ; } } pub mod invalid_identity_update_transition_empty_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::invalid_identity_update_transition_empty_error::InvalidIdentityUpdateTransitionEmptyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: InvalidIdentityUpdateTransitionEmptyError > for dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: InvalidIdentityUpdateTransitionEmptyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: InvalidIdentityUpdateTransitionEmptyError { } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: InvalidIdentityUpdateTransitionEmptyError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError_ctor () -> * mut dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod data_contract_bounds_not_present_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::data_contract_bounds_not_present_error::DataContractBoundsNotPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: DataContractBoundsNotPresentError > for dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError) -> dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: DataContractBoundsNotPresentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: DataContractBoundsNotPresentError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract_id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: DataContractBoundsNotPresentError) -> * const dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract_id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError_ctor (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError_get_data_contract_id (obj : * const dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError_set_data_contract_id (obj : * mut dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } } pub mod invalid_identity_asset_lock_proof_chain_lock_validation_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::invalid_identity_asset_lock_proof_chain_lock_validation_error::InvalidIdentityAssetLockProofChainLockValidationError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { pub transaction_id : * mut dashcore :: Txid , pub height_reported_not_locked : u32 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: InvalidIdentityAssetLockProofChainLockValidationError > for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: InvalidIdentityAssetLockProofChainLockValidationError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: InvalidIdentityAssetLockProofChainLockValidationError { transaction_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . transaction_id) , height_reported_not_locked : ffi_ref . height_reported_not_locked } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: InvalidIdentityAssetLockProofChainLockValidationError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { transaction_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . transaction_id) , height_reported_not_locked : obj . height_reported_not_locked }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . transaction_id) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError_ctor (transaction_id : * mut dashcore :: Txid , height_reported_not_locked : u32) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { transaction_id , height_reported_not_locked }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError_get_transaction_id (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) -> * mut dashcore :: Txid { (* obj) . transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError_get_height_reported_not_locked (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) -> u32 { (* obj) . height_reported_not_locked } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError_set_transaction_id (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError , value : * mut dashcore :: Txid) { (* obj) . transaction_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError_set_height_reported_not_locked (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError , value : u32) { (* obj) . height_reported_not_locked = value ; } } pub mod invalid_identity_credit_transfer_amount_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::invalid_identity_credit_transfer_amount_error::InvalidIdentityCreditTransferAmountError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { pub amount : u64 , pub min_amount : u64 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: InvalidIdentityCreditTransferAmountError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: InvalidIdentityCreditTransferAmountError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: InvalidIdentityCreditTransferAmountError { amount : ffi_ref . amount , min_amount : ffi_ref . min_amount } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: InvalidIdentityCreditTransferAmountError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { amount : obj . amount , min_amount : obj . min_amount }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError_ctor (amount : u64 , min_amount : u64) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { amount , min_amount }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError_get_amount (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) -> u64 { (* obj) . amount } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError_get_min_amount (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) -> u64 { (* obj) . min_amount } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError_set_amount (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError , value : u64) { (* obj) . amount = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError_set_min_amount (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError , value : u64) { (* obj) . min_amount = value ; } } pub mod invalid_identity_asset_lock_transaction_output_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::invalid_identity_asset_lock_transaction_output_error::InvalidIdentityAssetLockTransactionOutputError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { pub output_index : usize } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: InvalidIdentityAssetLockTransactionOutputError > for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: InvalidIdentityAssetLockTransactionOutputError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: InvalidIdentityAssetLockTransactionOutputError { output_index : ffi_ref . output_index } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: InvalidIdentityAssetLockTransactionOutputError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { output_index : obj . output_index }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError_ctor (output_index : usize) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { output_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError_get_output_index (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError) -> usize { (* obj) . output_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError_set_output_index (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError , value : usize) { (* obj) . output_index = value ; } } pub mod missing_master_public_key_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::missing_master_public_key_error::MissingMasterPublicKeyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: MissingMasterPublicKeyError > for dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError) -> dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: MissingMasterPublicKeyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: MissingMasterPublicKeyError { } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: MissingMasterPublicKeyError) -> * const dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError_ctor () -> * mut dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod invalid_identity_public_key_data_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::invalid_identity_public_key_data_error::InvalidIdentityPublicKeyDataError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { pub public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub validation_error : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: InvalidIdentityPublicKeyDataError > for dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: InvalidIdentityPublicKeyDataError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: InvalidIdentityPublicKeyDataError { public_key_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_key_id) , validation_error : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . validation_error) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: InvalidIdentityPublicKeyDataError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { public_key_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_key_id) , validation_error : ferment_interfaces :: FFIConversion :: ffi_to (obj . validation_error) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . public_key_id) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . validation_error) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError_ctor (public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , validation_error : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { public_key_id , validation_error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError_get_public_key_id (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError_get_validation_error (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) -> * mut std :: os :: raw :: c_char { (* obj) . validation_error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError_set_public_key_id (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . public_key_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError_set_validation_error (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError , value : * mut std :: os :: raw :: c_char) { (* obj) . validation_error = value ; } } pub mod duplicated_identity_public_key_id_basic_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::duplicated_identity_public_key_id_basic_error::DuplicatedIdentityPublicKeyIdBasicError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { pub duplicated_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: DuplicatedIdentityPublicKeyIdBasicError > for dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError) -> dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: DuplicatedIdentityPublicKeyIdBasicError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: DuplicatedIdentityPublicKeyIdBasicError { duplicated_ids : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . duplicated_ids) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: DuplicatedIdentityPublicKeyIdBasicError) -> * const dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { duplicated_ids : ferment_interfaces :: FFIConversion :: ffi_to (obj . duplicated_ids) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . duplicated_ids) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError_ctor (duplicated_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { duplicated_ids }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError_get_duplicated_ids (obj : * const dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . duplicated_ids } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError_set_duplicated_ids (obj : * mut dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError , value : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) { (* obj) . duplicated_ids = value ; } } pub mod invalid_identity_asset_lock_transaction_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::invalid_identity_asset_lock_transaction_error::InvalidIdentityAssetLockTransactionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: InvalidIdentityAssetLockTransactionError > for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: InvalidIdentityAssetLockTransactionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: InvalidIdentityAssetLockTransactionError { message : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . message) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: InvalidIdentityAssetLockTransactionError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { message : ferment_interfaces :: FFIConversion :: ffi_to (obj . message) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError_ctor (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError_get_message (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError_set_message (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod invalid_instant_asset_lock_proof_signature_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::invalid_instant_asset_lock_proof_signature_error::InvalidInstantAssetLockProofSignatureError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: InvalidInstantAssetLockProofSignatureError > for dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: InvalidInstantAssetLockProofSignatureError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: InvalidInstantAssetLockProofSignatureError { } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: InvalidInstantAssetLockProofSignatureError) -> * const dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError_ctor () -> * mut dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod not_implemented_identity_credit_withdrawal_transition_pooling_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::not_implemented_identity_credit_withdrawal_transition_pooling_error::NotImplementedIdentityCreditWithdrawalTransitionPoolingError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { pub pooling : u8 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError > for dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError) -> dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError { pooling : ffi_ref . pooling } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError) -> * const dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { pooling : obj . pooling }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError_ctor (pooling : u8) -> * mut dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { pooling }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError_get_pooling (obj : * const dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError) -> u8 { (* obj) . pooling } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError_set_pooling (obj : * mut dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError , value : u8) { (* obj) . pooling = value ; } } pub mod identity_asset_lock_transaction_out_point_already_exists_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::identity_asset_lock_transaction_out_point_already_exists_error::IdentityAssetLockTransactionOutPointAlreadyExistsError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError { pub transaction_id : * mut dashcore :: Txid , pub output_index : usize } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_exists_error :: IdentityAssetLockTransactionOutPointAlreadyExistsError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError) -> dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_exists_error :: IdentityAssetLockTransactionOutPointAlreadyExistsError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_exists_error :: IdentityAssetLockTransactionOutPointAlreadyExistsError { transaction_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . transaction_id) , output_index : ffi_ref . output_index } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_exists_error :: IdentityAssetLockTransactionOutPointAlreadyExistsError) -> * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError { transaction_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . transaction_id) , output_index : obj . output_index }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . transaction_id) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError_ctor (transaction_id : * mut dashcore :: Txid , output_index : usize) -> * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError { transaction_id , output_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError_get_transaction_id (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError) -> * mut dashcore :: Txid { (* obj) . transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError_get_output_index (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError) -> usize { (* obj) . output_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError_set_transaction_id (obj : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError , value : * mut dashcore :: Txid) { (* obj) . transaction_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError_set_output_index (obj : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError , value : usize) { (* obj) . output_index = value ; } } pub mod invalid_identity_credit_withdrawal_transition_output_script_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::identity::invalid_identity_credit_withdrawal_transition_output_script_error::InvalidIdentityCreditWithdrawalTransitionOutputScriptError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { pub output_script : * mut ferment_example_platform :: custom :: CoreScriptFFI } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError { output_script : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . output_script) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { output_script : ferment_interfaces :: FFIConversion :: ffi_to (obj . output_script) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . output_script) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError_ctor (output_script : * mut ferment_example_platform :: custom :: CoreScriptFFI) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { output_script }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError_destroy (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError_get_output_script (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError) -> * mut ferment_example_platform :: custom :: CoreScriptFFI { (* obj) . output_script } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError_set_output_script (obj : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError , value : * mut ferment_example_platform :: custom :: CoreScriptFFI) { (* obj) . output_script = value ; } } } pub mod decode { use crate as ferment_example_platform ; pub mod version_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::decode::version_error::VersionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_decode_version_error_VersionError { pub error : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: decode :: version_error :: VersionError > for dpp_errors_consensus_basic_decode_version_error_VersionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_decode_version_error_VersionError) -> dpp :: errors :: consensus :: basic :: decode :: version_error :: VersionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: decode :: version_error :: VersionError { error : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . error) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: decode :: version_error :: VersionError) -> * const dpp_errors_consensus_basic_decode_version_error_VersionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_decode_version_error_VersionError { error : ferment_interfaces :: FFIConversion :: ffi_to (obj . error) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_decode_version_error_VersionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_decode_version_error_VersionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . error) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_version_error_VersionError_ctor (error : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_decode_version_error_VersionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_decode_version_error_VersionError { error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_version_error_VersionError_destroy (ffi : * mut dpp_errors_consensus_basic_decode_version_error_VersionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_version_error_VersionError_get_error (obj : * const dpp_errors_consensus_basic_decode_version_error_VersionError) -> * mut std :: os :: raw :: c_char { (* obj) . error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_version_error_VersionError_set_error (obj : * mut dpp_errors_consensus_basic_decode_version_error_VersionError , value : * mut std :: os :: raw :: c_char) { (* obj) . error = value ; } } pub mod protocol_version_parsing_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::decode::protocol_version_parsing_error::ProtocolVersionParsingError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { pub parsing_error : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: ProtocolVersionParsingError > for dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError) -> dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: ProtocolVersionParsingError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: ProtocolVersionParsingError { parsing_error : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . parsing_error) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: ProtocolVersionParsingError) -> * const dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { parsing_error : ferment_interfaces :: FFIConversion :: ffi_to (obj . parsing_error) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . parsing_error) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError_ctor (parsing_error : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { parsing_error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError_destroy (ffi : * mut dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError_get_parsing_error (obj : * const dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError) -> * mut std :: os :: raw :: c_char { (* obj) . parsing_error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError_set_parsing_error (obj : * mut dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError , value : * mut std :: os :: raw :: c_char) { (* obj) . parsing_error = value ; } } pub mod serialized_object_parsing_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::decode::serialized_object_parsing_error::SerializedObjectParsingError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { pub parsing_error : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: SerializedObjectParsingError > for dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError) -> dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: SerializedObjectParsingError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: SerializedObjectParsingError { parsing_error : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . parsing_error) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: SerializedObjectParsingError) -> * const dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { parsing_error : ferment_interfaces :: FFIConversion :: ffi_to (obj . parsing_error) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . parsing_error) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError_ctor (parsing_error : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { parsing_error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError_destroy (ffi : * mut dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError_get_parsing_error (obj : * const dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError) -> * mut std :: os :: raw :: c_char { (* obj) . parsing_error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError_set_parsing_error (obj : * mut dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError , value : * mut std :: os :: raw :: c_char) { (* obj) . parsing_error = value ; } } } pub mod unsupported_version_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::unsupported_version_error::UnsupportedVersionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { pub received_version : u16 , pub min_version : u16 , pub max_version : u16 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: unsupported_version_error :: UnsupportedVersionError > for dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) -> dpp :: errors :: consensus :: basic :: unsupported_version_error :: UnsupportedVersionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: unsupported_version_error :: UnsupportedVersionError { received_version : ffi_ref . received_version , min_version : ffi_ref . min_version , max_version : ffi_ref . max_version } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: unsupported_version_error :: UnsupportedVersionError) -> * const dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { received_version : obj . received_version , min_version : obj . min_version , max_version : obj . max_version }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_ctor (received_version : u16 , min_version : u16 , max_version : u16) -> * mut dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { received_version , min_version , max_version }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_destroy (ffi : * mut dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_get_received_version (obj : * const dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) -> u16 { (* obj) . received_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_get_min_version (obj : * const dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) -> u16 { (* obj) . min_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_get_max_version (obj : * const dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) -> u16 { (* obj) . max_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_set_received_version (obj : * mut dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError , value : u16) { (* obj) . received_version = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_set_min_version (obj : * mut dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError , value : u16) { (* obj) . min_version = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_set_max_version (obj : * mut dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError , value : u16) { (* obj) . max_version = value ; } pub mod tests { use crate as ferment_example_platform ; } } pub mod value_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::value_error::ValueError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_value_error_ValueError { pub value_error : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: value_error :: ValueError > for dpp_errors_consensus_basic_value_error_ValueError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_value_error_ValueError) -> dpp :: errors :: consensus :: basic :: value_error :: ValueError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: value_error :: ValueError { value_error : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . value_error) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: value_error :: ValueError) -> * const dpp_errors_consensus_basic_value_error_ValueError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_value_error_ValueError { value_error : ferment_interfaces :: FFIConversion :: ffi_to (obj . value_error) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_value_error_ValueError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_value_error_ValueError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . value_error) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_value_error_ValueError_ctor (value_error : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_value_error_ValueError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_value_error_ValueError { value_error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_value_error_ValueError_destroy (ffi : * mut dpp_errors_consensus_basic_value_error_ValueError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_value_error_ValueError_get_value_error (obj : * const dpp_errors_consensus_basic_value_error_ValueError) -> * mut std :: os :: raw :: c_char { (* obj) . value_error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_value_error_ValueError_set_value_error (obj : * mut dpp_errors_consensus_basic_value_error_ValueError , value : * mut std :: os :: raw :: c_char) { (* obj) . value_error = value ; } } pub mod unsupported_protocol_version_error { use crate as ferment_example_platform ; pub mod tests { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::unsupported_protocol_version_error::UnsupportedProtocolVersionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { pub parsed_protocol_version : u32 , pub latest_version : u32 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: UnsupportedProtocolVersionError > for dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) -> dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: UnsupportedProtocolVersionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: UnsupportedProtocolVersionError { parsed_protocol_version : ffi_ref . parsed_protocol_version , latest_version : ffi_ref . latest_version } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: UnsupportedProtocolVersionError) -> * const dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { parsed_protocol_version : obj . parsed_protocol_version , latest_version : obj . latest_version }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError_ctor (parsed_protocol_version : u32 , latest_version : u32) -> * mut dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { parsed_protocol_version , latest_version }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError_destroy (ffi : * mut dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError_get_parsed_protocol_version (obj : * const dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) -> u32 { (* obj) . parsed_protocol_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError_get_latest_version (obj : * const dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) -> u32 { (* obj) . latest_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError_set_parsed_protocol_version (obj : * mut dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError , value : u32) { (* obj) . parsed_protocol_version = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError_set_latest_version (obj : * mut dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError , value : u32) { (* obj) . latest_version = value ; } } pub mod state_transition { use crate as ferment_example_platform ; pub mod invalid_state_transition_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::state_transition::invalid_state_transition_type_error::InvalidStateTransitionTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { pub transition_type : u8 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: InvalidStateTransitionTypeError > for dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) -> dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: InvalidStateTransitionTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: InvalidStateTransitionTypeError { transition_type : ffi_ref . transition_type } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: InvalidStateTransitionTypeError) -> * const dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { transition_type : obj . transition_type }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError_ctor (transition_type : u8) -> * mut dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { transition_type }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError_destroy (ffi : * mut dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError_get_transition_type (obj : * const dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) -> u8 { (* obj) . transition_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError_set_transition_type (obj : * mut dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError , value : u8) { (* obj) . transition_type = value ; } } pub mod missing_state_transition_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::state_transition::missing_state_transition_type_error::MissingStateTransitionTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: MissingStateTransitionTypeError > for dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError) -> dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: MissingStateTransitionTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: MissingStateTransitionTypeError { } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: MissingStateTransitionTypeError) -> * const dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError_ctor () -> * mut dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError_destroy (ffi : * mut dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod state_transition_max_size_exceeded_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::state_transition::state_transition_max_size_exceeded_error::StateTransitionMaxSizeExceededError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { pub actual_size_kbytes : usize , pub max_size_kbytes : usize } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: StateTransitionMaxSizeExceededError > for dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) -> dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: StateTransitionMaxSizeExceededError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: StateTransitionMaxSizeExceededError { actual_size_kbytes : ffi_ref . actual_size_kbytes , max_size_kbytes : ffi_ref . max_size_kbytes } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: StateTransitionMaxSizeExceededError) -> * const dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { actual_size_kbytes : obj . actual_size_kbytes , max_size_kbytes : obj . max_size_kbytes }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError_ctor (actual_size_kbytes : usize , max_size_kbytes : usize) -> * mut dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { actual_size_kbytes , max_size_kbytes }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError_destroy (ffi : * mut dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError_get_actual_size_kbytes (obj : * const dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) -> usize { (* obj) . actual_size_kbytes } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError_get_max_size_kbytes (obj : * const dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) -> usize { (* obj) . max_size_kbytes } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError_set_actual_size_kbytes (obj : * mut dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError , value : usize) { (* obj) . actual_size_kbytes = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError_set_max_size_kbytes (obj : * mut dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError , value : usize) { (* obj) . max_size_kbytes = value ; } } } pub mod invalid_identifier_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::invalid_identifier_error::InvalidIdentifierError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { pub identifier_name : * mut std :: os :: raw :: c_char , pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: invalid_identifier_error :: InvalidIdentifierError > for dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) -> dpp :: errors :: consensus :: basic :: invalid_identifier_error :: InvalidIdentifierError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: invalid_identifier_error :: InvalidIdentifierError { identifier_name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . identifier_name) , message : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . message) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: invalid_identifier_error :: InvalidIdentifierError) -> * const dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { identifier_name : ferment_interfaces :: FFIConversion :: ffi_to (obj . identifier_name) , message : ferment_interfaces :: FFIConversion :: ffi_to (obj . message) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . identifier_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError_ctor (identifier_name : * mut std :: os :: raw :: c_char , message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { identifier_name , message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError_destroy (ffi : * mut dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError_get_identifier_name (obj : * const dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) -> * mut std :: os :: raw :: c_char { (* obj) . identifier_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError_get_message (obj : * const dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError_set_identifier_name (obj : * mut dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError , value : * mut std :: os :: raw :: c_char) { (* obj) . identifier_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError_set_message (obj : * mut dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod basic_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::basic_error::BasicError`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_errors_consensus_basic_basic_error_BasicError { ProtocolVersionParsingError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError) , VersionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: version_error :: dpp_errors_consensus_basic_decode_version_error_VersionError) , SerializedObjectParsingError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError) , UnsupportedProtocolVersionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) , UnsupportedVersionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_version_error :: dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) , IncompatibleProtocolVersionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) , JsonSchemaCompilationError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError) , JsonSchemaError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) , InvalidIdentifierError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: invalid_identifier_error :: dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) , ValueError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: value_error :: dpp_errors_consensus_basic_value_error_ValueError) , DataContractMaxDepthExceedError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError) , DuplicateIndexError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) , IncompatibleRe2PatternError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) , InvalidCompoundIndexError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) , InvalidDataContractIdError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) , InvalidIndexedPropertyConstraintError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) , InvalidIndexPropertyTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) , InvalidJsonSchemaRefError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError) , SystemPropertyIndexAlreadyPresentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) , UndefinedIndexPropertyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) , UniqueIndicesLimitReachedError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) , DuplicateIndexNameError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) , InvalidDataContractVersionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) , IncompatibleDataContractSchemaError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) , DataContractImmutablePropertiesUpdateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) , DataContractUniqueIndicesChangedError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) , DataContractInvalidIndexDefinitionUpdateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) , DataContractHaveNewUniqueIndexError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) , DataContractNotPresentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError) , DataContractBoundsNotPresentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError) , DuplicateDocumentTransitionsWithIdsError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError) , DuplicateDocumentTransitionsWithIndicesError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError) , InconsistentCompoundIndexDataError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) , InvalidDocumentTransitionActionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError) , InvalidDocumentTransitionIdError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) , InvalidDocumentTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) , MissingPositionsInDocumentTypePropertiesError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) , MissingDataContractIdBasicError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError) , MissingDocumentTransitionActionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError) , MissingDocumentTransitionTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError) , MissingDocumentTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError) , MaxDocumentsTransitionsExceededError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError) , DuplicatedIdentityPublicKeyBasicError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError) , DuplicatedIdentityPublicKeyIdBasicError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError) , IdentityAssetLockProofLockedTransactionMismatchError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) , IdentityAssetLockTransactionIsNotFoundError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError) , IdentityAssetLockTransactionOutPointAlreadyExistsError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_exists_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError) , IdentityAssetLockTransactionOutputNotFoundError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError) , InvalidAssetLockProofCoreChainHeightError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) , InvalidIdentityAssetLockProofChainLockValidationError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) , InvalidAssetLockProofTransactionHeightError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) , InvalidAssetLockTransactionOutputReturnSizeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError) , InvalidIdentityAssetLockTransactionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError) , InvalidIdentityAssetLockTransactionOutputError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError) , InvalidIdentityPublicKeyDataError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) , InvalidInstantAssetLockProofError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError) , InvalidInstantAssetLockProofSignatureError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError) , MissingMasterPublicKeyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError) , InvalidIdentityPublicKeySecurityLevelError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) , InvalidIdentityKeySignatureError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError) , InvalidIdentityCreditTransferAmountError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) , InvalidIdentityCreditWithdrawalTransitionOutputScriptError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError) , InvalidIdentityCreditWithdrawalTransitionCoreFeeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) , InvalidIdentityCreditWithdrawalTransitionAmountError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) , InvalidIdentityUpdateTransitionEmptyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError) , InvalidIdentityUpdateTransitionDisableKeysError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError) , NotImplementedIdentityCreditWithdrawalTransitionPoolingError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError) , InvalidStateTransitionTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) , MissingStateTransitionTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError) , StateTransitionMaxSizeExceededError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) , DocumentTransitionsAreAbsentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError) , IdentityCreditTransferToSelfError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError) } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: basic_error :: BasicError > for dpp_errors_consensus_basic_basic_error_BasicError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_basic_error_BasicError) -> dpp :: errors :: consensus :: basic :: basic_error :: BasicError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_consensus_basic_basic_error_BasicError :: ProtocolVersionParsingError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ProtocolVersionParsingError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: VersionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: VersionError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: SerializedObjectParsingError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: SerializedObjectParsingError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedProtocolVersionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnsupportedProtocolVersionError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedVersionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnsupportedVersionError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleProtocolVersionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleProtocolVersionError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaCompilationError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: JsonSchemaCompilationError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: JsonSchemaError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentifierError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentifierError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: ValueError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ValueError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractMaxDepthExceedError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractMaxDepthExceedError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateIndexError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleRe2PatternError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleRe2PatternError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidCompoundIndexError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidCompoundIndexError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractIdError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDataContractIdError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexedPropertyConstraintError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIndexedPropertyConstraintError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexPropertyTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIndexPropertyTypeError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidJsonSchemaRefError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidJsonSchemaRefError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: SystemPropertyIndexAlreadyPresentError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: SystemPropertyIndexAlreadyPresentError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UndefinedIndexPropertyError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UndefinedIndexPropertyError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UniqueIndicesLimitReachedError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UniqueIndicesLimitReachedError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexNameError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateIndexNameError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractVersionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDataContractVersionError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleDataContractSchemaError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleDataContractSchemaError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractImmutablePropertiesUpdateError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractImmutablePropertiesUpdateError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractUniqueIndicesChangedError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractUniqueIndicesChangedError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractInvalidIndexDefinitionUpdateError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractInvalidIndexDefinitionUpdateError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractHaveNewUniqueIndexError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractHaveNewUniqueIndexError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractNotPresentError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractNotPresentError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractBoundsNotPresentError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractBoundsNotPresentError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIdsError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateDocumentTransitionsWithIdsError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIndicesError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateDocumentTransitionsWithIndicesError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InconsistentCompoundIndexDataError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InconsistentCompoundIndexDataError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionActionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTransitionActionError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionIdError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTransitionIdError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTypeError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MissingPositionsInDocumentTypePropertiesError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingPositionsInDocumentTypePropertiesError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDataContractIdBasicError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDataContractIdBasicError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionActionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDocumentTransitionActionError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDocumentTransitionTypeError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDocumentTypeError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MaxDocumentsTransitionsExceededError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MaxDocumentsTransitionsExceededError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyBasicError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicatedIdentityPublicKeyBasicError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyIdBasicError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicatedIdentityPublicKeyIdBasicError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockProofLockedTransactionMismatchError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockProofLockedTransactionMismatchError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionIsNotFoundError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionIsNotFoundError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutPointAlreadyExistsError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionOutPointAlreadyExistsError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutputNotFoundError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionOutputNotFoundError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofCoreChainHeightError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidAssetLockProofCoreChainHeightError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockProofChainLockValidationError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityAssetLockProofChainLockValidationError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofTransactionHeightError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidAssetLockProofTransactionHeightError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockTransactionOutputReturnSizeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidAssetLockTransactionOutputReturnSizeError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityAssetLockTransactionError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionOutputError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityAssetLockTransactionOutputError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeyDataError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityPublicKeyDataError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidInstantAssetLockProofError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofSignatureError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidInstantAssetLockProofSignatureError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MissingMasterPublicKeyError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingMasterPublicKeyError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeySecurityLevelError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityPublicKeySecurityLevelError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityKeySignatureError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityKeySignatureError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditTransferAmountError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditTransferAmountError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionAmountError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditWithdrawalTransitionAmountError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionEmptyError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityUpdateTransitionEmptyError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionDisableKeysError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityUpdateTransitionDisableKeysError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidStateTransitionTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidStateTransitionTypeError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MissingStateTransitionTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingStateTransitionTypeError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: StateTransitionMaxSizeExceededError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: StateTransitionMaxSizeExceededError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DocumentTransitionsAreAbsentError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DocumentTransitionsAreAbsentError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityCreditTransferToSelfError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityCreditTransferToSelfError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: basic_error :: BasicError) -> * const dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (match obj { dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ProtocolVersionParsingError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: ProtocolVersionParsingError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: VersionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: VersionError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: SerializedObjectParsingError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: SerializedObjectParsingError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnsupportedProtocolVersionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedProtocolVersionError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnsupportedVersionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedVersionError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleProtocolVersionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleProtocolVersionError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: JsonSchemaCompilationError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaCompilationError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: JsonSchemaError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentifierError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentifierError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ValueError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: ValueError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractMaxDepthExceedError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DataContractMaxDepthExceedError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateIndexError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleRe2PatternError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleRe2PatternError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidCompoundIndexError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidCompoundIndexError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDataContractIdError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractIdError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIndexedPropertyConstraintError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexedPropertyConstraintError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIndexPropertyTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexPropertyTypeError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidJsonSchemaRefError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidJsonSchemaRefError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: SystemPropertyIndexAlreadyPresentError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: SystemPropertyIndexAlreadyPresentError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UndefinedIndexPropertyError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UndefinedIndexPropertyError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UniqueIndicesLimitReachedError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UniqueIndicesLimitReachedError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateIndexNameError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexNameError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDataContractVersionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractVersionError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleDataContractSchemaError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleDataContractSchemaError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractImmutablePropertiesUpdateError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DataContractImmutablePropertiesUpdateError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractUniqueIndicesChangedError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DataContractUniqueIndicesChangedError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractInvalidIndexDefinitionUpdateError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DataContractInvalidIndexDefinitionUpdateError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractHaveNewUniqueIndexError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DataContractHaveNewUniqueIndexError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractNotPresentError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DataContractNotPresentError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractBoundsNotPresentError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DataContractBoundsNotPresentError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateDocumentTransitionsWithIdsError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIdsError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateDocumentTransitionsWithIndicesError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIndicesError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InconsistentCompoundIndexDataError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InconsistentCompoundIndexDataError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTransitionActionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionActionError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTransitionIdError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionIdError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingPositionsInDocumentTypePropertiesError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MissingPositionsInDocumentTypePropertiesError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDataContractIdBasicError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MissingDataContractIdBasicError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDocumentTransitionActionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionActionError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDocumentTransitionTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionTypeError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDocumentTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTypeError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MaxDocumentsTransitionsExceededError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MaxDocumentsTransitionsExceededError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicatedIdentityPublicKeyBasicError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyBasicError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicatedIdentityPublicKeyIdBasicError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyIdBasicError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockProofLockedTransactionMismatchError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockProofLockedTransactionMismatchError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionIsNotFoundError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionIsNotFoundError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionOutPointAlreadyExistsError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutPointAlreadyExistsError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionOutputNotFoundError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutputNotFoundError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidAssetLockProofCoreChainHeightError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofCoreChainHeightError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityAssetLockProofChainLockValidationError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockProofChainLockValidationError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidAssetLockProofTransactionHeightError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofTransactionHeightError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidAssetLockTransactionOutputReturnSizeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockTransactionOutputReturnSizeError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityAssetLockTransactionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityAssetLockTransactionOutputError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionOutputError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityPublicKeyDataError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeyDataError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidInstantAssetLockProofError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidInstantAssetLockProofSignatureError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofSignatureError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingMasterPublicKeyError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MissingMasterPublicKeyError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityPublicKeySecurityLevelError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeySecurityLevelError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityKeySignatureError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityKeySignatureError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditTransferAmountError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditTransferAmountError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditWithdrawalTransitionAmountError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionAmountError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityUpdateTransitionEmptyError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionEmptyError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityUpdateTransitionDisableKeysError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionDisableKeysError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidStateTransitionTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidStateTransitionTypeError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingStateTransitionTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MissingStateTransitionTypeError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: StateTransitionMaxSizeExceededError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: StateTransitionMaxSizeExceededError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DocumentTransitionsAreAbsentError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DocumentTransitionsAreAbsentError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityCreditTransferToSelfError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IdentityCreditTransferToSelfError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_basic_error_BasicError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_errors_consensus_basic_basic_error_BasicError { fn drop (& mut self) { unsafe { match self { dpp_errors_consensus_basic_basic_error_BasicError :: ProtocolVersionParsingError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: VersionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: SerializedObjectParsingError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedProtocolVersionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedVersionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleProtocolVersionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaCompilationError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentifierError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: ValueError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractMaxDepthExceedError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleRe2PatternError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidCompoundIndexError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractIdError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexedPropertyConstraintError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexPropertyTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidJsonSchemaRefError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: SystemPropertyIndexAlreadyPresentError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UndefinedIndexPropertyError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UniqueIndicesLimitReachedError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexNameError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractVersionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleDataContractSchemaError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractImmutablePropertiesUpdateError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractUniqueIndicesChangedError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractInvalidIndexDefinitionUpdateError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractHaveNewUniqueIndexError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractNotPresentError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractBoundsNotPresentError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIdsError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIndicesError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InconsistentCompoundIndexDataError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionActionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionIdError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MissingPositionsInDocumentTypePropertiesError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDataContractIdBasicError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionActionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MaxDocumentsTransitionsExceededError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyBasicError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyIdBasicError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockProofLockedTransactionMismatchError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionIsNotFoundError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutPointAlreadyExistsError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutputNotFoundError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofCoreChainHeightError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockProofChainLockValidationError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofTransactionHeightError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockTransactionOutputReturnSizeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionOutputError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeyDataError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofSignatureError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MissingMasterPublicKeyError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeySecurityLevelError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityKeySignatureError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditTransferAmountError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionAmountError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionEmptyError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionDisableKeysError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidStateTransitionTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MissingStateTransitionTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: StateTransitionMaxSizeExceededError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DocumentTransitionsAreAbsentError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityCreditTransferToSelfError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_ProtocolVersionParsingError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: ProtocolVersionParsingError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_VersionError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: version_error :: dpp_errors_consensus_basic_decode_version_error_VersionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: VersionError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_SerializedObjectParsingError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: SerializedObjectParsingError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UnsupportedProtocolVersionError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedProtocolVersionError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UnsupportedVersionError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_version_error :: dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedVersionError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IncompatibleProtocolVersionError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleProtocolVersionError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_JsonSchemaCompilationError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaCompilationError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_JsonSchemaError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentifierError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: invalid_identifier_error :: dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentifierError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_ValueError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: value_error :: dpp_errors_consensus_basic_value_error_ValueError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: ValueError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DataContractMaxDepthExceedError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DataContractMaxDepthExceedError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DuplicateIndexError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IncompatibleRe2PatternError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleRe2PatternError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidCompoundIndexError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidCompoundIndexError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidDataContractIdError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractIdError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIndexedPropertyConstraintError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexedPropertyConstraintError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIndexPropertyTypeError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexPropertyTypeError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidJsonSchemaRefError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidJsonSchemaRefError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_SystemPropertyIndexAlreadyPresentError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: SystemPropertyIndexAlreadyPresentError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UndefinedIndexPropertyError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UndefinedIndexPropertyError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UniqueIndicesLimitReachedError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UniqueIndicesLimitReachedError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DuplicateIndexNameError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexNameError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidDataContractVersionError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractVersionError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IncompatibleDataContractSchemaError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleDataContractSchemaError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DataContractImmutablePropertiesUpdateError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DataContractImmutablePropertiesUpdateError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DataContractUniqueIndicesChangedError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DataContractUniqueIndicesChangedError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DataContractInvalidIndexDefinitionUpdateError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DataContractInvalidIndexDefinitionUpdateError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DataContractHaveNewUniqueIndexError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DataContractHaveNewUniqueIndexError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DataContractNotPresentError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DataContractNotPresentError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DataContractBoundsNotPresentError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DataContractBoundsNotPresentError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DuplicateDocumentTransitionsWithIdsError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIdsError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DuplicateDocumentTransitionsWithIndicesError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIndicesError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InconsistentCompoundIndexDataError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InconsistentCompoundIndexDataError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidDocumentTransitionActionError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionActionError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidDocumentTransitionIdError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionIdError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidDocumentTypeError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MissingPositionsInDocumentTypePropertiesError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MissingPositionsInDocumentTypePropertiesError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MissingDataContractIdBasicError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MissingDataContractIdBasicError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MissingDocumentTransitionActionError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionActionError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MissingDocumentTransitionTypeError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionTypeError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MissingDocumentTypeError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTypeError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MaxDocumentsTransitionsExceededError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MaxDocumentsTransitionsExceededError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DuplicatedIdentityPublicKeyBasicError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyBasicError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DuplicatedIdentityPublicKeyIdBasicError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyIdBasicError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IdentityAssetLockProofLockedTransactionMismatchError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockProofLockedTransactionMismatchError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IdentityAssetLockTransactionIsNotFoundError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionIsNotFoundError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IdentityAssetLockTransactionOutPointAlreadyExistsError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_exists_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_exists_error_IdentityAssetLockTransactionOutPointAlreadyExistsError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutPointAlreadyExistsError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IdentityAssetLockTransactionOutputNotFoundError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutputNotFoundError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidAssetLockProofCoreChainHeightError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofCoreChainHeightError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityAssetLockProofChainLockValidationError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockProofChainLockValidationError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidAssetLockProofTransactionHeightError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofTransactionHeightError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidAssetLockTransactionOutputReturnSizeError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockTransactionOutputReturnSizeError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityAssetLockTransactionError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityAssetLockTransactionOutputError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionOutputError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityPublicKeyDataError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeyDataError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidInstantAssetLockProofError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidInstantAssetLockProofSignatureError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofSignatureError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MissingMasterPublicKeyError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MissingMasterPublicKeyError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityPublicKeySecurityLevelError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeySecurityLevelError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityKeySignatureError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityKeySignatureError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityCreditTransferAmountError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditTransferAmountError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityCreditWithdrawalTransitionOutputScriptError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityCreditWithdrawalTransitionCoreFeeError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityCreditWithdrawalTransitionAmountError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionAmountError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityUpdateTransitionEmptyError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionEmptyError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityUpdateTransitionDisableKeysError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionDisableKeysError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_NotImplementedIdentityCreditWithdrawalTransitionPoolingError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidStateTransitionTypeError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidStateTransitionTypeError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MissingStateTransitionTypeError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MissingStateTransitionTypeError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_StateTransitionMaxSizeExceededError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: StateTransitionMaxSizeExceededError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DocumentTransitionsAreAbsentError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DocumentTransitionsAreAbsentError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IdentityCreditTransferToSelfError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IdentityCreditTransferToSelfError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_destroy (ffi : * mut dpp_errors_consensus_basic_basic_error_BasicError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod json_schema_error { use crate as ferment_example_platform ; pub mod json_schema_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::json_schema_error::json_schema_error::JsonSchemaError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { pub error_summary : * mut std :: os :: raw :: c_char , pub keyword : * mut std :: os :: raw :: c_char , pub instance_path : * mut std :: os :: raw :: c_char , pub schema_path : * mut std :: os :: raw :: c_char , pub params : * mut ferment_example_platform :: custom :: platform_value_Value , pub property_name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: JsonSchemaError > for dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: JsonSchemaError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: JsonSchemaError { error_summary : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . error_summary) , keyword : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . keyword) , instance_path : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . instance_path) , schema_path : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . schema_path) , params : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . params) , property_name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . property_name) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: JsonSchemaError) -> * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { error_summary : ferment_interfaces :: FFIConversion :: ffi_to (obj . error_summary) , keyword : ferment_interfaces :: FFIConversion :: ffi_to (obj . keyword) , instance_path : ferment_interfaces :: FFIConversion :: ffi_to (obj . instance_path) , schema_path : ferment_interfaces :: FFIConversion :: ffi_to (obj . schema_path) , params : ferment_interfaces :: FFIConversion :: ffi_to (obj . params) , property_name : ferment_interfaces :: FFIConversion :: ffi_to (obj . property_name) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . error_summary) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . keyword) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . instance_path) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . schema_path) ; ferment_interfaces :: unbox_any (ffi_ref . params) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . property_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_ctor (error_summary : * mut std :: os :: raw :: c_char , keyword : * mut std :: os :: raw :: c_char , instance_path : * mut std :: os :: raw :: c_char , schema_path : * mut std :: os :: raw :: c_char , params : * mut ferment_example_platform :: custom :: platform_value_Value , property_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { error_summary , keyword , instance_path , schema_path , params , property_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_destroy (ffi : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_get_error_summary (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . error_summary } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_get_keyword (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . keyword } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_get_instance_path (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . instance_path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_get_schema_path (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . schema_path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_get_params (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut ferment_example_platform :: custom :: platform_value_Value { (* obj) . params } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_get_property_name (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_set_error_summary (obj : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError , value : * mut std :: os :: raw :: c_char) { (* obj) . error_summary = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_set_keyword (obj : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError , value : * mut std :: os :: raw :: c_char) { (* obj) . keyword = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_set_instance_path (obj : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError , value : * mut std :: os :: raw :: c_char) { (* obj) . instance_path = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_set_schema_path (obj : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError , value : * mut std :: os :: raw :: c_char) { (* obj) . schema_path = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_set_params (obj : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError , value : * mut ferment_example_platform :: custom :: platform_value_Value) { (* obj) . params = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_set_property_name (obj : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError , value : * mut std :: os :: raw :: c_char) { (* obj) . property_name = value ; } } pub mod json_schema_error_data { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::json_schema_error::json_schema_error_data::JsonSchemaErrorData`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { pub keyword : * mut std :: os :: raw :: c_char , pub params : * mut serde_json :: Map , pub property_name : * mut std :: os :: raw :: c_char , pub error_message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error_data :: JsonSchemaErrorData > for dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) -> dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error_data :: JsonSchemaErrorData { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error_data :: JsonSchemaErrorData { keyword : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . keyword) , params : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . params) , property_name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . property_name) , error_message : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . error_message) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error_data :: JsonSchemaErrorData) -> * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { ferment_interfaces :: boxed (dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { keyword : ferment_interfaces :: FFIConversion :: ffi_to (obj . keyword) , params : ferment_interfaces :: FFIConversion :: ffi_to (obj . params) , property_name : ferment_interfaces :: FFIConversion :: ffi_to (obj . property_name) , error_message : ferment_interfaces :: FFIConversion :: ffi_to (obj . error_message) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . keyword) ; ferment_interfaces :: unbox_any (ffi_ref . params) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . property_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . error_message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_ctor (keyword : * mut std :: os :: raw :: c_char , params : * mut serde_json :: Map , property_name : * mut std :: os :: raw :: c_char , error_message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { ferment_interfaces :: boxed (dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { keyword , params , property_name , error_message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_destroy (ffi : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_get_keyword (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) -> * mut std :: os :: raw :: c_char { (* obj) . keyword } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_get_params (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) -> * mut serde_json :: Map { (* obj) . params } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_get_property_name (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_get_error_message (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) -> * mut std :: os :: raw :: c_char { (* obj) . error_message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_set_keyword (obj : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData , value : * mut std :: os :: raw :: c_char) { (* obj) . keyword = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_set_params (obj : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData , value : * mut serde_json :: Map) { (* obj) . params = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_set_property_name (obj : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData , value : * mut std :: os :: raw :: c_char) { (* obj) . property_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_set_error_message (obj : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData , value : * mut std :: os :: raw :: c_char) { (* obj) . error_message = value ; } } } pub mod data_contract { use crate as ferment_example_platform ; pub mod duplicate_index_name_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::data_contract::duplicate_index_name_error::DuplicateIndexNameError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { pub document_type : * mut std :: os :: raw :: c_char , pub duplicate_index_name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: DuplicateIndexNameError > for dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) -> dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: DuplicateIndexNameError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: DuplicateIndexNameError { document_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_type) , duplicate_index_name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . duplicate_index_name) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: DuplicateIndexNameError) -> * const dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { document_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_type) , duplicate_index_name : ferment_interfaces :: FFIConversion :: ffi_to (obj . duplicate_index_name) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . duplicate_index_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError_ctor (document_type : * mut std :: os :: raw :: c_char , duplicate_index_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { document_type , duplicate_index_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError_destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError_get_document_type (obj : * const dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError_get_duplicate_index_name (obj : * const dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) -> * mut std :: os :: raw :: c_char { (* obj) . duplicate_index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError_set_document_type (obj : * mut dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError_set_duplicate_index_name (obj : * mut dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError , value : * mut std :: os :: raw :: c_char) { (* obj) . duplicate_index_name = value ; } } pub mod unique_indices_limit_reached_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::data_contract::unique_indices_limit_reached_error::UniqueIndicesLimitReachedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { pub document_type : * mut std :: os :: raw :: c_char , pub index_limit : usize } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: UniqueIndicesLimitReachedError > for dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) -> dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: UniqueIndicesLimitReachedError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: UniqueIndicesLimitReachedError { document_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_type) , index_limit : ffi_ref . index_limit } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: UniqueIndicesLimitReachedError) -> * const dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { document_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_type) , index_limit : obj . index_limit }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . document_type) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_ctor (document_type : * mut std :: os :: raw :: c_char , index_limit : usize) -> * mut dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { document_type , index_limit }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_get_document_type (obj : * const dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_get_index_limit (obj : * const dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) -> usize { (* obj) . index_limit } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_set_document_type (obj : * mut dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_set_index_limit (obj : * mut dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError , value : usize) { (* obj) . index_limit = value ; } } pub mod data_contract_unique_indices_changed_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::data_contract::data_contract_unique_indices_changed_error::DataContractUniqueIndicesChangedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: DataContractUniqueIndicesChangedError > for dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) -> dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: DataContractUniqueIndicesChangedError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: DataContractUniqueIndicesChangedError { document_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_type) , index_name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . index_name) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: DataContractUniqueIndicesChangedError) -> * const dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { document_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_type) , index_name : ferment_interfaces :: FFIConversion :: ffi_to (obj . index_name) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . index_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError_ctor (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { document_type , index_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError_destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError_get_document_type (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError_get_index_name (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError_set_document_type (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError_set_index_name (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError , value : * mut std :: os :: raw :: c_char) { (* obj) . index_name = value ; } } pub mod data_contract_max_depth_exceed_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::data_contract::data_contract_max_depth_exceed_error::DataContractMaxDepthExceedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { pub schema_depth : usize , pub max_depth : usize } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: DataContractMaxDepthExceedError > for dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError) -> dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: DataContractMaxDepthExceedError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: DataContractMaxDepthExceedError { schema_depth : ffi_ref . schema_depth , max_depth : ffi_ref . max_depth } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: DataContractMaxDepthExceedError) -> * const dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { schema_depth : obj . schema_depth , max_depth : obj . max_depth }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError_ctor (schema_depth : usize , max_depth : usize) -> * mut dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { schema_depth , max_depth }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError_destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError_get_schema_depth (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError) -> usize { (* obj) . schema_depth } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError_get_max_depth (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError) -> usize { (* obj) . max_depth } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError_set_schema_depth (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError , value : usize) { (* obj) . schema_depth = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError_set_max_depth (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError , value : usize) { (* obj) . max_depth = value ; } } pub mod invalid_index_property_type_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::data_contract::invalid_index_property_type_error::InvalidIndexPropertyTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char , pub property_name : * mut std :: os :: raw :: c_char , pub property_type : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: InvalidIndexPropertyTypeError > for dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: InvalidIndexPropertyTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: InvalidIndexPropertyTypeError { document_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_type) , index_name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . index_name) , property_name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . property_name) , property_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . property_type) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: InvalidIndexPropertyTypeError) -> * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { document_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_type) , index_name : ferment_interfaces :: FFIConversion :: ffi_to (obj . index_name) , property_name : ferment_interfaces :: FFIConversion :: ffi_to (obj . property_name) , property_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . property_type) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . index_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . property_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . property_type) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_ctor (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char , property_name : * mut std :: os :: raw :: c_char , property_type : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { document_type , index_name , property_name , property_type }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_get_document_type (obj : * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_get_index_name (obj : * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_get_property_name (obj : * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_get_property_type (obj : * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . property_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_set_document_type (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_set_index_name (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError , value : * mut std :: os :: raw :: c_char) { (* obj) . index_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_set_property_name (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError , value : * mut std :: os :: raw :: c_char) { (* obj) . property_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_set_property_type (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError , value : * mut std :: os :: raw :: c_char) { (* obj) . property_type = value ; } } pub mod invalid_compound_index_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::data_contract::invalid_compound_index_error::InvalidCompoundIndexError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: InvalidCompoundIndexError > for dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: InvalidCompoundIndexError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: InvalidCompoundIndexError { document_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_type) , index_name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . index_name) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: InvalidCompoundIndexError) -> * const dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { document_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_type) , index_name : ferment_interfaces :: FFIConversion :: ffi_to (obj . index_name) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . index_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError_ctor (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { document_type , index_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError_destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError_get_document_type (obj : * const dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError_get_index_name (obj : * const dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError_set_document_type (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError_set_index_name (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError , value : * mut std :: os :: raw :: c_char) { (* obj) . index_name = value ; } } pub mod data_contract_immutable_properties_update_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::data_contract::data_contract_immutable_properties_update_error::DataContractImmutablePropertiesUpdateError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { pub operation : * mut std :: os :: raw :: c_char , pub field_path : * mut std :: os :: raw :: c_char , pub old_value : * mut ferment_example_platform :: custom :: platform_value_Value , pub new_value : * mut ferment_example_platform :: custom :: platform_value_Value } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: DataContractImmutablePropertiesUpdateError > for dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: DataContractImmutablePropertiesUpdateError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: DataContractImmutablePropertiesUpdateError { operation : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . operation) , field_path : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . field_path) , old_value : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . old_value) , new_value : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . new_value) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: DataContractImmutablePropertiesUpdateError) -> * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { operation : ferment_interfaces :: FFIConversion :: ffi_to (obj . operation) , field_path : ferment_interfaces :: FFIConversion :: ffi_to (obj . field_path) , old_value : ferment_interfaces :: FFIConversion :: ffi_to (obj . old_value) , new_value : ferment_interfaces :: FFIConversion :: ffi_to (obj . new_value) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . operation) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . field_path) ; ferment_interfaces :: unbox_any (ffi_ref . old_value) ; ; ferment_interfaces :: unbox_any (ffi_ref . new_value) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_ctor (operation : * mut std :: os :: raw :: c_char , field_path : * mut std :: os :: raw :: c_char , old_value : * mut ferment_example_platform :: custom :: platform_value_Value , new_value : * mut ferment_example_platform :: custom :: platform_value_Value) -> * mut dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { operation , field_path , old_value , new_value }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_get_operation (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . operation } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_get_field_path (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . field_path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_get_old_value (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> * mut ferment_example_platform :: custom :: platform_value_Value { (* obj) . old_value } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_get_new_value (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> * mut ferment_example_platform :: custom :: platform_value_Value { (* obj) . new_value } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_set_operation (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError , value : * mut std :: os :: raw :: c_char) { (* obj) . operation = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_set_field_path (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError , value : * mut std :: os :: raw :: c_char) { (* obj) . field_path = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_set_old_value (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError , value : * mut ferment_example_platform :: custom :: platform_value_Value) { (* obj) . old_value = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_set_new_value (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError , value : * mut ferment_example_platform :: custom :: platform_value_Value) { (* obj) . new_value = value ; } } pub mod invalid_json_schema_ref_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::data_contract::invalid_json_schema_ref_error::InvalidJsonSchemaRefError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: InvalidJsonSchemaRefError > for dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: InvalidJsonSchemaRefError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: InvalidJsonSchemaRefError { message : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . message) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: InvalidJsonSchemaRefError) -> * const dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { message : ferment_interfaces :: FFIConversion :: ffi_to (obj . message) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError_ctor (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError_destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError_get_message (obj : * const dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError_set_message (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod duplicate_index_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::data_contract::duplicate_index_error::DuplicateIndexError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: DuplicateIndexError > for dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) -> dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: DuplicateIndexError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: DuplicateIndexError { document_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_type) , index_name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . index_name) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: DuplicateIndexError) -> * const dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { document_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_type) , index_name : ferment_interfaces :: FFIConversion :: ffi_to (obj . index_name) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . index_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError_ctor (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { document_type , index_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError_destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError_get_document_type (obj : * const dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError_get_index_name (obj : * const dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError_set_document_type (obj : * mut dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError_set_index_name (obj : * mut dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError , value : * mut std :: os :: raw :: c_char) { (* obj) . index_name = value ; } } pub mod data_contract_invalid_index_definition_update_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::data_contract::data_contract_invalid_index_definition_update_error::DataContractInvalidIndexDefinitionUpdateError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { pub document_type : * mut std :: os :: raw :: c_char , pub index_path : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: DataContractInvalidIndexDefinitionUpdateError > for dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) -> dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: DataContractInvalidIndexDefinitionUpdateError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: DataContractInvalidIndexDefinitionUpdateError { document_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_type) , index_path : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . index_path) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: DataContractInvalidIndexDefinitionUpdateError) -> * const dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { document_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_type) , index_path : ferment_interfaces :: FFIConversion :: ffi_to (obj . index_path) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . index_path) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError_ctor (document_type : * mut std :: os :: raw :: c_char , index_path : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { document_type , index_path }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError_destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError_get_document_type (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError_get_index_path (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . index_path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError_set_document_type (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError_set_index_path (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError , value : * mut std :: os :: raw :: c_char) { (* obj) . index_path = value ; } } pub mod incompatible_re2_pattern_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::data_contract::incompatible_re2_pattern_error::IncompatibleRe2PatternError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { pub pattern : * mut std :: os :: raw :: c_char , pub path : * mut std :: os :: raw :: c_char , pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: IncompatibleRe2PatternError > for dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) -> dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: IncompatibleRe2PatternError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: IncompatibleRe2PatternError { pattern : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . pattern) , path : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . path) , message : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . message) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: IncompatibleRe2PatternError) -> * const dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { pattern : ferment_interfaces :: FFIConversion :: ffi_to (obj . pattern) , path : ferment_interfaces :: FFIConversion :: ffi_to (obj . path) , message : ferment_interfaces :: FFIConversion :: ffi_to (obj . message) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . pattern) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . path) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_ctor (pattern : * mut std :: os :: raw :: c_char , path : * mut std :: os :: raw :: c_char , message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { pattern , path , message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_get_pattern (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) -> * mut std :: os :: raw :: c_char { (* obj) . pattern } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_get_path (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) -> * mut std :: os :: raw :: c_char { (* obj) . path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_get_message (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_set_pattern (obj : * mut dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError , value : * mut std :: os :: raw :: c_char) { (* obj) . pattern = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_set_path (obj : * mut dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError , value : * mut std :: os :: raw :: c_char) { (* obj) . path = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_set_message (obj : * mut dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod undefined_index_property_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::data_contract::undefined_index_property_error::UndefinedIndexPropertyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char , pub property_name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: UndefinedIndexPropertyError > for dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) -> dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: UndefinedIndexPropertyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: UndefinedIndexPropertyError { document_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_type) , index_name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . index_name) , property_name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . property_name) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: UndefinedIndexPropertyError) -> * const dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { document_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_type) , index_name : ferment_interfaces :: FFIConversion :: ffi_to (obj . index_name) , property_name : ferment_interfaces :: FFIConversion :: ffi_to (obj . property_name) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . index_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . property_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_ctor (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char , property_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { document_type , index_name , property_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_get_document_type (obj : * const dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_get_index_name (obj : * const dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_get_property_name (obj : * const dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_set_document_type (obj : * mut dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_set_index_name (obj : * mut dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError , value : * mut std :: os :: raw :: c_char) { (* obj) . index_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_set_property_name (obj : * mut dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError , value : * mut std :: os :: raw :: c_char) { (* obj) . property_name = value ; } } pub mod data_contract_have_new_unique_index_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::data_contract::data_contract_have_new_unique_index_error::DataContractHaveNewUniqueIndexError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: DataContractHaveNewUniqueIndexError > for dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) -> dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: DataContractHaveNewUniqueIndexError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: DataContractHaveNewUniqueIndexError { document_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_type) , index_name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . index_name) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: DataContractHaveNewUniqueIndexError) -> * const dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { document_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_type) , index_name : ferment_interfaces :: FFIConversion :: ffi_to (obj . index_name) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . index_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError_ctor (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { document_type , index_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError_destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError_get_document_type (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError_get_index_name (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError_set_document_type (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError_set_index_name (obj : * mut dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError , value : * mut std :: os :: raw :: c_char) { (* obj) . index_name = value ; } } pub mod system_property_index_already_present_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::data_contract::system_property_index_already_present_error::SystemPropertyIndexAlreadyPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char , pub property_name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: SystemPropertyIndexAlreadyPresentError > for dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) -> dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: SystemPropertyIndexAlreadyPresentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: SystemPropertyIndexAlreadyPresentError { document_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_type) , index_name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . index_name) , property_name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . property_name) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: SystemPropertyIndexAlreadyPresentError) -> * const dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { document_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_type) , index_name : ferment_interfaces :: FFIConversion :: ffi_to (obj . index_name) , property_name : ferment_interfaces :: FFIConversion :: ffi_to (obj . property_name) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . index_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . property_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_ctor (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char , property_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { document_type , index_name , property_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_get_document_type (obj : * const dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_get_index_name (obj : * const dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_get_property_name (obj : * const dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_set_document_type (obj : * mut dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_set_index_name (obj : * mut dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError , value : * mut std :: os :: raw :: c_char) { (* obj) . index_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_set_property_name (obj : * mut dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError , value : * mut std :: os :: raw :: c_char) { (* obj) . property_name = value ; } } pub mod invalid_indexed_property_constraint_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::data_contract::invalid_indexed_property_constraint_error::InvalidIndexedPropertyConstraintError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char , pub property_name : * mut std :: os :: raw :: c_char , pub constraint_name : * mut std :: os :: raw :: c_char , pub reason : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: InvalidIndexedPropertyConstraintError > for dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: InvalidIndexedPropertyConstraintError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: InvalidIndexedPropertyConstraintError { document_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . document_type) , index_name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . index_name) , property_name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . property_name) , constraint_name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . constraint_name) , reason : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . reason) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: InvalidIndexedPropertyConstraintError) -> * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { document_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . document_type) , index_name : ferment_interfaces :: FFIConversion :: ffi_to (obj . index_name) , property_name : ferment_interfaces :: FFIConversion :: ffi_to (obj . property_name) , constraint_name : ferment_interfaces :: FFIConversion :: ffi_to (obj . constraint_name) , reason : ferment_interfaces :: FFIConversion :: ffi_to (obj . reason) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . document_type) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . index_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . property_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . constraint_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . reason) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_ctor (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char , property_name : * mut std :: os :: raw :: c_char , constraint_name : * mut std :: os :: raw :: c_char , reason : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { document_type , index_name , property_name , constraint_name , reason }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_get_document_type (obj : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_get_index_name (obj : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_get_property_name (obj : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_get_constraint_name (obj : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut std :: os :: raw :: c_char { (* obj) . constraint_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_get_reason (obj : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut std :: os :: raw :: c_char { (* obj) . reason } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_set_document_type (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError , value : * mut std :: os :: raw :: c_char) { (* obj) . document_type = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_set_index_name (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError , value : * mut std :: os :: raw :: c_char) { (* obj) . index_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_set_property_name (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError , value : * mut std :: os :: raw :: c_char) { (* obj) . property_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_set_constraint_name (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError , value : * mut std :: os :: raw :: c_char) { (* obj) . constraint_name = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_set_reason (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError , value : * mut std :: os :: raw :: c_char) { (* obj) . reason = value ; } } pub mod incompatible_data_contract_schema_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::data_contract::incompatible_data_contract_schema_error::IncompatibleDataContractSchemaError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub operation : * mut std :: os :: raw :: c_char , pub field_path : * mut std :: os :: raw :: c_char , pub old_schema : * mut ferment_example_platform :: custom :: platform_value_Value , pub new_schema : * mut ferment_example_platform :: custom :: platform_value_Value } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: IncompatibleDataContractSchemaError > for dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) -> dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: IncompatibleDataContractSchemaError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: IncompatibleDataContractSchemaError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data_contract_id) , operation : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . operation) , field_path : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . field_path) , old_schema : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . old_schema) , new_schema : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . new_schema) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: IncompatibleDataContractSchemaError) -> * const dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { data_contract_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . data_contract_id) , operation : ferment_interfaces :: FFIConversion :: ffi_to (obj . operation) , field_path : ferment_interfaces :: FFIConversion :: ffi_to (obj . field_path) , old_schema : ferment_interfaces :: FFIConversion :: ffi_to (obj . old_schema) , new_schema : ferment_interfaces :: FFIConversion :: ffi_to (obj . new_schema) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data_contract_id) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . operation) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . field_path) ; ferment_interfaces :: unbox_any (ffi_ref . old_schema) ; ; ferment_interfaces :: unbox_any (ffi_ref . new_schema) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_ctor (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , operation : * mut std :: os :: raw :: c_char , field_path : * mut std :: os :: raw :: c_char , old_schema : * mut ferment_example_platform :: custom :: platform_value_Value , new_schema : * mut ferment_example_platform :: custom :: platform_value_Value) -> * mut dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { data_contract_id , operation , field_path , old_schema , new_schema }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_get_data_contract_id (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_get_operation (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . operation } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_get_field_path (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . field_path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_get_old_schema (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) -> * mut ferment_example_platform :: custom :: platform_value_Value { (* obj) . old_schema } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_get_new_schema (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) -> * mut ferment_example_platform :: custom :: platform_value_Value { (* obj) . new_schema } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_set_data_contract_id (obj : * mut dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . data_contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_set_operation (obj : * mut dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError , value : * mut std :: os :: raw :: c_char) { (* obj) . operation = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_set_field_path (obj : * mut dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError , value : * mut std :: os :: raw :: c_char) { (* obj) . field_path = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_set_old_schema (obj : * mut dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError , value : * mut ferment_example_platform :: custom :: platform_value_Value) { (* obj) . old_schema = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_set_new_schema (obj : * mut dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError , value : * mut ferment_example_platform :: custom :: platform_value_Value) { (* obj) . new_schema = value ; } } pub mod invalid_data_contract_version_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::data_contract::invalid_data_contract_version_error::InvalidDataContractVersionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { pub expected_version : u32 , pub version : u32 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: InvalidDataContractVersionError > for dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: InvalidDataContractVersionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: InvalidDataContractVersionError { expected_version : ffi_ref . expected_version , version : ffi_ref . version } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: InvalidDataContractVersionError) -> * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { expected_version : obj . expected_version , version : obj . version }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError_ctor (expected_version : u32 , version : u32) -> * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { expected_version , version }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError_destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError_get_expected_version (obj : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) -> u32 { (* obj) . expected_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError_get_version (obj : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) -> u32 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError_set_expected_version (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError , value : u32) { (* obj) . expected_version = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError_set_version (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError , value : u32) { (* obj) . version = value ; } } pub mod invalid_data_contract_id_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::basic::data_contract::invalid_data_contract_id_error::InvalidDataContractIdError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { pub expected_id : * mut crate :: fermented :: generics :: Vec_u8 , pub invalid_id : * mut crate :: fermented :: generics :: Vec_u8 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: InvalidDataContractIdError > for dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: InvalidDataContractIdError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: InvalidDataContractIdError { expected_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . expected_id) , invalid_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . invalid_id) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: InvalidDataContractIdError) -> * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { expected_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . expected_id) , invalid_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . invalid_id) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . expected_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . invalid_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError_ctor (expected_id : * mut crate :: fermented :: generics :: Vec_u8 , invalid_id : * mut crate :: fermented :: generics :: Vec_u8) -> * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { ferment_interfaces :: boxed (dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { expected_id , invalid_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError_destroy (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError_get_expected_id (obj : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . expected_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError_get_invalid_id (obj : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . invalid_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError_set_expected_id (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . expected_id = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError_set_invalid_id (obj : * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . invalid_id = value ; } } } } pub mod fee { use crate as ferment_example_platform ; pub mod fee_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::fee::fee_error::FeeError`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_errors_consensus_fee_fee_error_FeeError { BalanceIsNotEnoughError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: fee :: fee_error :: FeeError > for dpp_errors_consensus_fee_fee_error_FeeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_fee_fee_error_FeeError) -> dpp :: errors :: consensus :: fee :: fee_error :: FeeError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_consensus_fee_fee_error_FeeError :: BalanceIsNotEnoughError (o_0) => dpp :: errors :: consensus :: fee :: fee_error :: FeeError :: BalanceIsNotEnoughError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: fee :: fee_error :: FeeError) -> * const dpp_errors_consensus_fee_fee_error_FeeError { ferment_interfaces :: boxed (match obj { dpp :: errors :: consensus :: fee :: fee_error :: FeeError :: BalanceIsNotEnoughError (o_0) => dpp_errors_consensus_fee_fee_error_FeeError :: BalanceIsNotEnoughError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_fee_fee_error_FeeError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_errors_consensus_fee_fee_error_FeeError { fn drop (& mut self) { unsafe { match self { dpp_errors_consensus_fee_fee_error_FeeError :: BalanceIsNotEnoughError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_fee_error_FeeError_BalanceIsNotEnoughError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) -> * mut dpp_errors_consensus_fee_fee_error_FeeError { ferment_interfaces :: boxed (dpp_errors_consensus_fee_fee_error_FeeError :: BalanceIsNotEnoughError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_fee_error_FeeError_destroy (ffi : * mut dpp_errors_consensus_fee_fee_error_FeeError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod balance_is_not_enough_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::consensus::fee::balance_is_not_enough_error::BalanceIsNotEnoughError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { pub balance : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , pub fee : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits } impl ferment_interfaces :: FFIConversion < dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: BalanceIsNotEnoughError > for dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) -> dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: BalanceIsNotEnoughError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: BalanceIsNotEnoughError { balance : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . balance) , fee : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . fee) } } unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: BalanceIsNotEnoughError) -> * const dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { ferment_interfaces :: boxed (dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { balance : ferment_interfaces :: FFIConversion :: ffi_to (obj . balance) , fee : ferment_interfaces :: FFIConversion :: ffi_to (obj . fee) }) } unsafe fn destroy (ffi : * mut dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . balance) ; ; ferment_interfaces :: unbox_any (ffi_ref . fee) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError_ctor (balance : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , fee : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) -> * mut dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { ferment_interfaces :: boxed (dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { balance , fee }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError_destroy (ffi : * mut dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError_get_balance (obj : * const dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError_get_fee (obj : * const dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . fee } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError_set_balance (obj : * mut dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError , value : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) { (* obj) . balance = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError_set_fee (obj : * mut dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError , value : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) { (* obj) . fee = value ; } } } } pub mod dpp_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::dpp_error::DPPError`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_errors_dpp_error_DPPError { AssetLockOutputNotFoundError (* mut crate :: fermented :: types :: dpp :: identity :: errors :: asset_lock_output_not_found_error :: dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError) , AssetLockTransactionIsNotFoundError (* mut crate :: fermented :: types :: dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError) , WrongPublicKeyHashSize , WrongBurnOutputType , InvalidAssetLockTransaction , CoreMessageCorruption (* mut std :: os :: raw :: c_char) } impl ferment_interfaces :: FFIConversion < dpp :: errors :: dpp_error :: DPPError > for dpp_errors_dpp_error_DPPError { unsafe fn ffi_from_const (ffi : * const dpp_errors_dpp_error_DPPError) -> dpp :: errors :: dpp_error :: DPPError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_dpp_error_DPPError :: AssetLockOutputNotFoundError (o_0) => dpp :: errors :: dpp_error :: DPPError :: AssetLockOutputNotFoundError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_dpp_error_DPPError :: AssetLockTransactionIsNotFoundError (o_0) => dpp :: errors :: dpp_error :: DPPError :: AssetLockTransactionIsNotFoundError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_dpp_error_DPPError :: WrongPublicKeyHashSize => dpp :: errors :: dpp_error :: DPPError :: WrongPublicKeyHashSize , dpp_errors_dpp_error_DPPError :: WrongBurnOutputType => dpp :: errors :: dpp_error :: DPPError :: WrongBurnOutputType , dpp_errors_dpp_error_DPPError :: InvalidAssetLockTransaction => dpp :: errors :: dpp_error :: DPPError :: InvalidAssetLockTransaction , dpp_errors_dpp_error_DPPError :: CoreMessageCorruption (o_0) => dpp :: errors :: dpp_error :: DPPError :: CoreMessageCorruption (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: errors :: dpp_error :: DPPError) -> * const dpp_errors_dpp_error_DPPError { ferment_interfaces :: boxed (match obj { dpp :: errors :: dpp_error :: DPPError :: AssetLockOutputNotFoundError (o_0) => dpp_errors_dpp_error_DPPError :: AssetLockOutputNotFoundError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: dpp_error :: DPPError :: AssetLockTransactionIsNotFoundError (o_0) => dpp_errors_dpp_error_DPPError :: AssetLockTransactionIsNotFoundError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: dpp_error :: DPPError :: WrongPublicKeyHashSize => dpp_errors_dpp_error_DPPError :: WrongPublicKeyHashSize , dpp :: errors :: dpp_error :: DPPError :: WrongBurnOutputType => dpp_errors_dpp_error_DPPError :: WrongBurnOutputType , dpp :: errors :: dpp_error :: DPPError :: InvalidAssetLockTransaction => dpp_errors_dpp_error_DPPError :: InvalidAssetLockTransaction , dpp :: errors :: dpp_error :: DPPError :: CoreMessageCorruption (o_0) => dpp_errors_dpp_error_DPPError :: CoreMessageCorruption (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_errors_dpp_error_DPPError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_errors_dpp_error_DPPError { fn drop (& mut self) { unsafe { match self { dpp_errors_dpp_error_DPPError :: AssetLockOutputNotFoundError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_dpp_error_DPPError :: AssetLockTransactionIsNotFoundError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_dpp_error_DPPError :: WrongPublicKeyHashSize => { } , dpp_errors_dpp_error_DPPError :: WrongBurnOutputType => { } , dpp_errors_dpp_error_DPPError :: InvalidAssetLockTransaction => { } , dpp_errors_dpp_error_DPPError :: CoreMessageCorruption (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_error_DPPError_AssetLockOutputNotFoundError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: identity :: errors :: asset_lock_output_not_found_error :: dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError) -> * mut dpp_errors_dpp_error_DPPError { ferment_interfaces :: boxed (dpp_errors_dpp_error_DPPError :: AssetLockOutputNotFoundError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_error_DPPError_AssetLockTransactionIsNotFoundError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError) -> * mut dpp_errors_dpp_error_DPPError { ferment_interfaces :: boxed (dpp_errors_dpp_error_DPPError :: AssetLockTransactionIsNotFoundError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_error_DPPError_WrongPublicKeyHashSize_ctor () -> * mut dpp_errors_dpp_error_DPPError { ferment_interfaces :: boxed (dpp_errors_dpp_error_DPPError :: WrongPublicKeyHashSize) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_error_DPPError_WrongBurnOutputType_ctor () -> * mut dpp_errors_dpp_error_DPPError { ferment_interfaces :: boxed (dpp_errors_dpp_error_DPPError :: WrongBurnOutputType) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_error_DPPError_InvalidAssetLockTransaction_ctor () -> * mut dpp_errors_dpp_error_DPPError { ferment_interfaces :: boxed (dpp_errors_dpp_error_DPPError :: InvalidAssetLockTransaction) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_error_DPPError_CoreMessageCorruption_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_dpp_error_DPPError { ferment_interfaces :: boxed (dpp_errors_dpp_error_DPPError :: CoreMessageCorruption (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_error_DPPError_destroy (ffi : * mut dpp_errors_dpp_error_DPPError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod invalid_vector_size_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::invalid_vector_size_error::InvalidVectorSizeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { pub expected_size : usize , pub actual_size : usize } impl ferment_interfaces :: FFIConversion < dpp :: errors :: invalid_vector_size_error :: InvalidVectorSizeError > for dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) -> dpp :: errors :: invalid_vector_size_error :: InvalidVectorSizeError { let ffi_ref = & * ffi ; dpp :: errors :: invalid_vector_size_error :: InvalidVectorSizeError { expected_size : ffi_ref . expected_size , actual_size : ffi_ref . actual_size } } unsafe fn ffi_to_const (obj : dpp :: errors :: invalid_vector_size_error :: InvalidVectorSizeError) -> * const dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { ferment_interfaces :: boxed (dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { expected_size : obj . expected_size , actual_size : obj . actual_size }) } unsafe fn destroy (ffi : * mut dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_invalid_vector_size_error_InvalidVectorSizeError_ctor (expected_size : usize , actual_size : usize) -> * mut dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { ferment_interfaces :: boxed (dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { expected_size , actual_size }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_invalid_vector_size_error_InvalidVectorSizeError_destroy (ffi : * mut dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_invalid_vector_size_error_InvalidVectorSizeError_get_expected_size (obj : * const dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) -> usize { (* obj) . expected_size } # [no_mangle] pub unsafe extern "C" fn dpp_errors_invalid_vector_size_error_InvalidVectorSizeError_get_actual_size (obj : * const dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) -> usize { (* obj) . actual_size } # [no_mangle] pub unsafe extern "C" fn dpp_errors_invalid_vector_size_error_InvalidVectorSizeError_set_expected_size (obj : * mut dpp_errors_invalid_vector_size_error_InvalidVectorSizeError , value : usize) { (* obj) . expected_size = value ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_invalid_vector_size_error_InvalidVectorSizeError_set_actual_size (obj : * mut dpp_errors_invalid_vector_size_error_InvalidVectorSizeError , value : usize) { (* obj) . actual_size = value ; } } pub mod serde_parsing_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::serde_parsing_error::SerdeParsingError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_serde_parsing_error_SerdeParsingError { pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: serde_parsing_error :: SerdeParsingError > for dpp_errors_serde_parsing_error_SerdeParsingError { unsafe fn ffi_from_const (ffi : * const dpp_errors_serde_parsing_error_SerdeParsingError) -> dpp :: errors :: serde_parsing_error :: SerdeParsingError { let ffi_ref = & * ffi ; dpp :: errors :: serde_parsing_error :: SerdeParsingError { message : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . message) } } unsafe fn ffi_to_const (obj : dpp :: errors :: serde_parsing_error :: SerdeParsingError) -> * const dpp_errors_serde_parsing_error_SerdeParsingError { ferment_interfaces :: boxed (dpp_errors_serde_parsing_error_SerdeParsingError { message : ferment_interfaces :: FFIConversion :: ffi_to (obj . message) }) } unsafe fn destroy (ffi : * mut dpp_errors_serde_parsing_error_SerdeParsingError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_serde_parsing_error_SerdeParsingError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_serde_parsing_error_SerdeParsingError_ctor (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_serde_parsing_error_SerdeParsingError { ferment_interfaces :: boxed (dpp_errors_serde_parsing_error_SerdeParsingError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_serde_parsing_error_SerdeParsingError_destroy (ffi : * mut dpp_errors_serde_parsing_error_SerdeParsingError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_serde_parsing_error_SerdeParsingError_get_message (obj : * const dpp_errors_serde_parsing_error_SerdeParsingError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_serde_parsing_error_SerdeParsingError_set_message (obj : * mut dpp_errors_serde_parsing_error_SerdeParsingError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod compatible_protocol_version_is_not_defined_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::compatible_protocol_version_is_not_defined_error::CompatibleProtocolVersionIsNotDefinedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { pub current_protocol_version : u32 } impl ferment_interfaces :: FFIConversion < dpp :: errors :: compatible_protocol_version_is_not_defined_error :: CompatibleProtocolVersionIsNotDefinedError > for dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) -> dpp :: errors :: compatible_protocol_version_is_not_defined_error :: CompatibleProtocolVersionIsNotDefinedError { let ffi_ref = & * ffi ; dpp :: errors :: compatible_protocol_version_is_not_defined_error :: CompatibleProtocolVersionIsNotDefinedError { current_protocol_version : ffi_ref . current_protocol_version } } unsafe fn ffi_to_const (obj : dpp :: errors :: compatible_protocol_version_is_not_defined_error :: CompatibleProtocolVersionIsNotDefinedError) -> * const dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { ferment_interfaces :: boxed (dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { current_protocol_version : obj . current_protocol_version }) } unsafe fn destroy (ffi : * mut dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError_ctor (current_protocol_version : u32) -> * mut dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { ferment_interfaces :: boxed (dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { current_protocol_version }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError_destroy (ffi : * mut dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError_get_current_protocol_version (obj : * const dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) -> u32 { (* obj) . current_protocol_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError_set_current_protocol_version (obj : * mut dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError , value : u32) { (* obj) . current_protocol_version = value ; } } pub mod public_key_validation_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::public_key_validation_error::PublicKeyValidationError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_public_key_validation_error_PublicKeyValidationError { pub message : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dpp :: errors :: public_key_validation_error :: PublicKeyValidationError > for dpp_errors_public_key_validation_error_PublicKeyValidationError { unsafe fn ffi_from_const (ffi : * const dpp_errors_public_key_validation_error_PublicKeyValidationError) -> dpp :: errors :: public_key_validation_error :: PublicKeyValidationError { let ffi_ref = & * ffi ; dpp :: errors :: public_key_validation_error :: PublicKeyValidationError { message : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . message) } } unsafe fn ffi_to_const (obj : dpp :: errors :: public_key_validation_error :: PublicKeyValidationError) -> * const dpp_errors_public_key_validation_error_PublicKeyValidationError { ferment_interfaces :: boxed (dpp_errors_public_key_validation_error_PublicKeyValidationError { message : ferment_interfaces :: FFIConversion :: ffi_to (obj . message) }) } unsafe fn destroy (ffi : * mut dpp_errors_public_key_validation_error_PublicKeyValidationError) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_errors_public_key_validation_error_PublicKeyValidationError { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_public_key_validation_error_PublicKeyValidationError_ctor (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_public_key_validation_error_PublicKeyValidationError { ferment_interfaces :: boxed (dpp_errors_public_key_validation_error_PublicKeyValidationError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_public_key_validation_error_PublicKeyValidationError_destroy (ffi : * mut dpp_errors_public_key_validation_error_PublicKeyValidationError) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_public_key_validation_error_PublicKeyValidationError_get_message (obj : * const dpp_errors_public_key_validation_error_PublicKeyValidationError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_public_key_validation_error_PublicKeyValidationError_set_message (obj : * mut dpp_errors_public_key_validation_error_PublicKeyValidationError , value : * mut std :: os :: raw :: c_char) { (* obj) . message = value ; } } pub mod non_consensus_error { use crate as ferment_example_platform ; pub mod object_names { use crate as ferment_example_platform ; } # [doc = "FFI-representation of the [`dpp::errors::non_consensus_error::NonConsensusError`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_errors_non_consensus_error_NonConsensusError { ValueError (* mut crate :: fermented :: types :: platform_value :: platform_value_PlatformValueError) , UnknownVersionMismatch { method : * mut std :: os :: raw :: c_char , known_versions : * mut crate :: fermented :: generics :: Vec_platform_version_version_protocol_version_FeatureVersion , received : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } , SerdeParsingError (* mut crate :: fermented :: types :: dpp :: errors :: serde_parsing_error :: dpp_errors_serde_parsing_error_SerdeParsingError) , CompatibleProtocolVersionIsNotDefinedError (* mut crate :: fermented :: types :: dpp :: errors :: compatible_protocol_version_is_not_defined_error :: dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) , SerdeJsonError (* mut std :: os :: raw :: c_char) , InvalidVectorSizeError (* mut crate :: fermented :: types :: dpp :: errors :: invalid_vector_size_error :: dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) , StateRepositoryFetchError (* mut std :: os :: raw :: c_char) , WithdrawalError (* mut std :: os :: raw :: c_char) , IdentifierCreateError (* mut std :: os :: raw :: c_char) , StateTransitionCreationError (* mut std :: os :: raw :: c_char) , IdentityPublicKeyCreateError (* mut std :: os :: raw :: c_char) , RequiredPropertyError { property_name : * mut std :: os :: raw :: c_char } , InvalidDataProcessedError (* mut std :: os :: raw :: c_char) , ObjectCreationError { object_name : * mut std :: os :: raw :: c_char , details : * mut std :: os :: raw :: c_char } , DPPError (* mut crate :: fermented :: types :: dpp :: errors :: dpp_error :: dpp_errors_dpp_error_DPPError) , Error (* mut ferment_example_platform :: custom :: anyhow_Error) , Overflow (* mut std :: os :: raw :: c_char) } impl ferment_interfaces :: FFIConversion < dpp :: errors :: non_consensus_error :: NonConsensusError > for dpp_errors_non_consensus_error_NonConsensusError { unsafe fn ffi_from_const (ffi : * const dpp_errors_non_consensus_error_NonConsensusError) -> dpp :: errors :: non_consensus_error :: NonConsensusError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_non_consensus_error_NonConsensusError :: ValueError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: ValueError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: UnknownVersionMismatch { method , known_versions , received } => dpp :: errors :: non_consensus_error :: NonConsensusError :: UnknownVersionMismatch { method : ferment_interfaces :: FFIConversion :: ffi_from (* method) , known_versions : ferment_interfaces :: FFIConversion :: ffi_from (* known_versions) , received : ferment_interfaces :: FFIConversion :: ffi_from (* received) } , dpp_errors_non_consensus_error_NonConsensusError :: SerdeParsingError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: SerdeParsingError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: CompatibleProtocolVersionIsNotDefinedError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: CompatibleProtocolVersionIsNotDefinedError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: SerdeJsonError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: SerdeJsonError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: InvalidVectorSizeError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: InvalidVectorSizeError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: StateRepositoryFetchError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: StateRepositoryFetchError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: WithdrawalError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: WithdrawalError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: IdentifierCreateError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: IdentifierCreateError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: StateTransitionCreationError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: StateTransitionCreationError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: IdentityPublicKeyCreateError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: IdentityPublicKeyCreateError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: RequiredPropertyError { property_name } => dpp :: errors :: non_consensus_error :: NonConsensusError :: RequiredPropertyError { property_name : ferment_interfaces :: FFIConversion :: ffi_from (* property_name) } , dpp_errors_non_consensus_error_NonConsensusError :: InvalidDataProcessedError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: InvalidDataProcessedError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: ObjectCreationError { object_name , details } => dpp :: errors :: non_consensus_error :: NonConsensusError :: ObjectCreationError { object_name : ferment_interfaces :: FFIConversion :: ffi_from (* object_name) , details : ferment_interfaces :: FFIConversion :: ffi_from (* details) } , dpp_errors_non_consensus_error_NonConsensusError :: DPPError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: DPPError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: Error (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: Error (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: Overflow (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: Overflow (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: errors :: non_consensus_error :: NonConsensusError) -> * const dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (match obj { dpp :: errors :: non_consensus_error :: NonConsensusError :: ValueError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: ValueError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: UnknownVersionMismatch { method , known_versions , received } => dpp_errors_non_consensus_error_NonConsensusError :: UnknownVersionMismatch { method : ferment_interfaces :: FFIConversion :: ffi_to (method) , known_versions : ferment_interfaces :: FFIConversion :: ffi_to (known_versions) , received : ferment_interfaces :: FFIConversion :: ffi_to (received) } , dpp :: errors :: non_consensus_error :: NonConsensusError :: SerdeParsingError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: SerdeParsingError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: CompatibleProtocolVersionIsNotDefinedError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: CompatibleProtocolVersionIsNotDefinedError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: SerdeJsonError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: SerdeJsonError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: InvalidVectorSizeError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: InvalidVectorSizeError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: StateRepositoryFetchError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: StateRepositoryFetchError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: WithdrawalError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: WithdrawalError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: IdentifierCreateError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: IdentifierCreateError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: StateTransitionCreationError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: StateTransitionCreationError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: IdentityPublicKeyCreateError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: IdentityPublicKeyCreateError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: RequiredPropertyError { property_name } => dpp_errors_non_consensus_error_NonConsensusError :: RequiredPropertyError { property_name : ferment_interfaces :: FFIConversion :: ffi_to (property_name) } , dpp :: errors :: non_consensus_error :: NonConsensusError :: InvalidDataProcessedError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: InvalidDataProcessedError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: ObjectCreationError { object_name , details } => dpp_errors_non_consensus_error_NonConsensusError :: ObjectCreationError { object_name : ferment_interfaces :: FFIConversion :: ffi_to (object_name) , details : ferment_interfaces :: FFIConversion :: ffi_to (details) } , dpp :: errors :: non_consensus_error :: NonConsensusError :: DPPError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: DPPError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: Error (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: Error (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: Overflow (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: Overflow (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_errors_non_consensus_error_NonConsensusError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_errors_non_consensus_error_NonConsensusError { fn drop (& mut self) { unsafe { match self { dpp_errors_non_consensus_error_NonConsensusError :: ValueError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: UnknownVersionMismatch { method , known_versions , received } => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* method) ; ferment_interfaces :: unbox_any (* known_versions) ; ; ferment_interfaces :: unbox_any (* received) ; } , dpp_errors_non_consensus_error_NonConsensusError :: SerdeParsingError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: CompatibleProtocolVersionIsNotDefinedError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: SerdeJsonError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_non_consensus_error_NonConsensusError :: InvalidVectorSizeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: StateRepositoryFetchError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_non_consensus_error_NonConsensusError :: WithdrawalError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_non_consensus_error_NonConsensusError :: IdentifierCreateError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_non_consensus_error_NonConsensusError :: StateTransitionCreationError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_non_consensus_error_NonConsensusError :: IdentityPublicKeyCreateError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_non_consensus_error_NonConsensusError :: RequiredPropertyError { property_name } => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* property_name) } , dpp_errors_non_consensus_error_NonConsensusError :: InvalidDataProcessedError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_non_consensus_error_NonConsensusError :: ObjectCreationError { object_name , details } => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* object_name) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* details) } , dpp_errors_non_consensus_error_NonConsensusError :: DPPError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: Error (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: Overflow (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_ValueError_ctor (o_0 : * mut crate :: fermented :: types :: platform_value :: platform_value_PlatformValueError) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: ValueError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_UnknownVersionMismatch_ctor (method : * mut std :: os :: raw :: c_char , known_versions : * mut crate :: fermented :: generics :: Vec_platform_version_version_protocol_version_FeatureVersion , received : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: UnknownVersionMismatch { method , known_versions , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_SerdeParsingError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: serde_parsing_error :: dpp_errors_serde_parsing_error_SerdeParsingError) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: SerdeParsingError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_CompatibleProtocolVersionIsNotDefinedError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: compatible_protocol_version_is_not_defined_error :: dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: CompatibleProtocolVersionIsNotDefinedError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_SerdeJsonError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: SerdeJsonError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_InvalidVectorSizeError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: invalid_vector_size_error :: dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: InvalidVectorSizeError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_StateRepositoryFetchError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: StateRepositoryFetchError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_WithdrawalError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: WithdrawalError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_IdentifierCreateError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: IdentifierCreateError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_StateTransitionCreationError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: StateTransitionCreationError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_IdentityPublicKeyCreateError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: IdentityPublicKeyCreateError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_RequiredPropertyError_ctor (property_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: RequiredPropertyError { property_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_InvalidDataProcessedError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: InvalidDataProcessedError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_ObjectCreationError_ctor (object_name : * mut std :: os :: raw :: c_char , details : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: ObjectCreationError { object_name , details }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_DPPError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: dpp_error :: dpp_errors_dpp_error_DPPError) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: DPPError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_Error_ctor (o_0 : * mut ferment_example_platform :: custom :: anyhow_Error) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: Error (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_Overflow_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment_interfaces :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: Overflow (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_destroy (ffi : * mut dpp_errors_non_consensus_error_NonConsensusError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod protocol_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::protocol_error::ProtocolError`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_errors_protocol_error_ProtocolError { IdentifierError (* mut std :: os :: raw :: c_char) , StringDecodeError (* mut std :: os :: raw :: c_char) , EmptyPublicKeyDataError , MaxEncodedBytesReachedError { max_size_kbytes : usize , size_hit : usize } , EncodingError (* mut std :: os :: raw :: c_char) , DecodingError (* mut std :: os :: raw :: c_char) , FileNotFound (* mut std :: os :: raw :: c_char) , UnsupportedVersionMismatch { method : * mut std :: os :: raw :: c_char , allowed_versions : * mut crate :: fermented :: generics :: Vec_platform_version_version_protocol_version_FeatureVersion , received : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } , UnknownVersionMismatch { method : * mut std :: os :: raw :: c_char , known_versions : * mut crate :: fermented :: generics :: Vec_platform_version_version_protocol_version_FeatureVersion , received : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } , CurrentProtocolVersionNotInitialized , UnknownVersionError (* mut std :: os :: raw :: c_char) , UnknownProtocolVersionError (* mut std :: os :: raw :: c_char) , NoProtocolVersionError , ParsingError (* mut std :: os :: raw :: c_char) , ParsingJsonError (* mut ferment_example_platform :: custom :: serde_json_Error) , Error (* mut ferment_example_platform :: custom :: anyhow_Error) , InvalidKeyContractBoundsError (* mut std :: os :: raw :: c_char) , UnknownStorageKeyRequirements (* mut std :: os :: raw :: c_char) , DataContractError (* mut crate :: fermented :: types :: dpp :: data_contract :: errors :: contract :: dpp_data_contract_errors_contract_DataContractError) , StateTransitionError (* mut crate :: fermented :: types :: dpp :: state_transition :: errors :: state_transition_error :: dpp_state_transition_errors_state_transition_error_StateTransitionError) , StructureError (* mut crate :: fermented :: types :: dpp :: data_contract :: errors :: structure :: dpp_data_contract_errors_structure_StructureError) , PlatformVersionError (* mut crate :: fermented :: types :: platform_version :: error :: platform_version_error_PlatformVersionError) , ConsensusError (* mut Box) , Document (* mut Box) , Generic (* mut std :: os :: raw :: c_char) , InvalidSigningKeyTypeError (* mut std :: os :: raw :: c_char) , InvalidIdentityPublicKeyTypeError (* mut crate :: fermented :: types :: dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) , StateTransitionIsNotSignedError (* mut crate :: fermented :: types :: dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError) , PublicKeySecurityLevelNotMetError (* mut crate :: fermented :: types :: dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) , WrongPublicKeyPurposeError (* mut crate :: fermented :: types :: dpp :: state_transition :: errors :: wrong_public_key_purpose_error :: dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) , PublicKeyMismatchError (* mut crate :: fermented :: types :: dpp :: state_transition :: errors :: public_key_mismatch_error :: dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError) , InvalidSignaturePublicKeyError (* mut crate :: fermented :: types :: dpp :: state_transition :: errors :: invalid_signature_public_key_error :: dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError) , NonConsensusError (* mut crate :: fermented :: types :: dpp :: errors :: non_consensus_error :: dpp_errors_non_consensus_error_NonConsensusError) , CompatibleProtocolVersionIsNotDefinedError (* mut crate :: fermented :: types :: dpp :: errors :: compatible_protocol_version_is_not_defined_error :: dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) , DataContractAlreadyExistsError , InvalidDataContractError (* mut crate :: fermented :: types :: dpp :: data_contract :: errors :: invalid_data_contract_error :: dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError) , InvalidDocumentTypeError (* mut crate :: fermented :: types :: dpp :: data_contract :: errors :: invalid_document_type_error :: dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) , DataContractNotPresentError (* mut crate :: fermented :: types :: dpp :: data_contract :: errors :: data_contract_not_present_error :: dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError) , InvalidSignaturePublicKeySecurityLevelError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) , InvalidStateTransitionTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) , PublicKeyIsDisabledError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) , IdentityNotPresentError (* mut crate :: fermented :: types :: dpp :: data_contract :: errors :: identity_not_present_error :: dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError) , Overflow (* mut std :: os :: raw :: c_char) , DesiredKeyWithTypePurposeSecurityLevelMissing (* mut std :: os :: raw :: c_char) , ValueError (* mut crate :: fermented :: types :: platform_value :: platform_value_ValueError) , PlatformSerializationError (* mut std :: os :: raw :: c_char) , PlatformDeserializationError (* mut std :: os :: raw :: c_char) , DashCoreError (* mut ferment_example_platform :: custom :: dashcore_consensus_encode_Error) , InvalidIdentityError { errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , raw_identity : * mut ferment_example_platform :: custom :: platform_value_Value } , PublicKeyGenerationError (* mut std :: os :: raw :: c_char) , CorruptedCodeExecution (* mut std :: os :: raw :: c_char) , CorruptedSerialization (* mut std :: os :: raw :: c_char) , CriticalCorruptedCreditsCodeExecution (* mut std :: os :: raw :: c_char) , InvalidVectorSizeError (* mut crate :: fermented :: types :: dpp :: errors :: invalid_vector_size_error :: dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) } impl ferment_interfaces :: FFIConversion < dpp :: errors :: protocol_error :: ProtocolError > for dpp_errors_protocol_error_ProtocolError { unsafe fn ffi_from_const (ffi : * const dpp_errors_protocol_error_ProtocolError) -> dpp :: errors :: protocol_error :: ProtocolError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_protocol_error_ProtocolError :: IdentifierError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: IdentifierError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: StringDecodeError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: StringDecodeError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: EmptyPublicKeyDataError => dpp :: errors :: protocol_error :: ProtocolError :: EmptyPublicKeyDataError , dpp_errors_protocol_error_ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes , size_hit } => dpp :: errors :: protocol_error :: ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes : * max_size_kbytes , size_hit : * size_hit } , dpp_errors_protocol_error_ProtocolError :: EncodingError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: EncodingError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: DecodingError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: DecodingError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: FileNotFound (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: FileNotFound (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: UnsupportedVersionMismatch { method , allowed_versions , received } => dpp :: errors :: protocol_error :: ProtocolError :: UnsupportedVersionMismatch { method : ferment_interfaces :: FFIConversion :: ffi_from (* method) , allowed_versions : ferment_interfaces :: FFIConversion :: ffi_from (* allowed_versions) , received : ferment_interfaces :: FFIConversion :: ffi_from (* received) } , dpp_errors_protocol_error_ProtocolError :: UnknownVersionMismatch { method , known_versions , received } => dpp :: errors :: protocol_error :: ProtocolError :: UnknownVersionMismatch { method : ferment_interfaces :: FFIConversion :: ffi_from (* method) , known_versions : ferment_interfaces :: FFIConversion :: ffi_from (* known_versions) , received : ferment_interfaces :: FFIConversion :: ffi_from (* received) } , dpp_errors_protocol_error_ProtocolError :: CurrentProtocolVersionNotInitialized => dpp :: errors :: protocol_error :: ProtocolError :: CurrentProtocolVersionNotInitialized , dpp_errors_protocol_error_ProtocolError :: UnknownVersionError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: UnknownVersionError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: UnknownProtocolVersionError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: UnknownProtocolVersionError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: NoProtocolVersionError => dpp :: errors :: protocol_error :: ProtocolError :: NoProtocolVersionError , dpp_errors_protocol_error_ProtocolError :: ParsingError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: ParsingError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: ParsingJsonError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: ParsingJsonError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: Error (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: Error (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidKeyContractBoundsError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidKeyContractBoundsError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: UnknownStorageKeyRequirements (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: UnknownStorageKeyRequirements (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: DataContractError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: DataContractError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: StateTransitionError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: StateTransitionError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: StructureError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: StructureError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: PlatformVersionError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: PlatformVersionError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: ConsensusError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: ConsensusError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: Document (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: Document (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: Generic (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: Generic (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidSigningKeyTypeError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidSigningKeyTypeError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidIdentityPublicKeyTypeError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidIdentityPublicKeyTypeError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: StateTransitionIsNotSignedError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: StateTransitionIsNotSignedError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: PublicKeySecurityLevelNotMetError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: PublicKeySecurityLevelNotMetError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: WrongPublicKeyPurposeError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: WrongPublicKeyPurposeError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: PublicKeyMismatchError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: PublicKeyMismatchError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeyError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidSignaturePublicKeyError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: NonConsensusError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: NonConsensusError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: CompatibleProtocolVersionIsNotDefinedError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: CompatibleProtocolVersionIsNotDefinedError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: DataContractAlreadyExistsError => dpp :: errors :: protocol_error :: ProtocolError :: DataContractAlreadyExistsError , dpp_errors_protocol_error_ProtocolError :: InvalidDataContractError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidDataContractError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidDocumentTypeError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidDocumentTypeError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: DataContractNotPresentError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: DataContractNotPresentError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeySecurityLevelError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidSignaturePublicKeySecurityLevelError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidStateTransitionTypeError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidStateTransitionTypeError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: PublicKeyIsDisabledError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: PublicKeyIsDisabledError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: IdentityNotPresentError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: IdentityNotPresentError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: Overflow (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: Overflow (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: DesiredKeyWithTypePurposeSecurityLevelMissing (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: DesiredKeyWithTypePurposeSecurityLevelMissing (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: ValueError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: ValueError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: PlatformSerializationError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: PlatformSerializationError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: PlatformDeserializationError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: PlatformDeserializationError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: DashCoreError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: DashCoreError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidIdentityError { errors , raw_identity } => dpp :: errors :: protocol_error :: ProtocolError :: InvalidIdentityError { errors : ferment_interfaces :: FFIConversion :: ffi_from (* errors) , raw_identity : ferment_interfaces :: FFIConversion :: ffi_from (* raw_identity) } , dpp_errors_protocol_error_ProtocolError :: PublicKeyGenerationError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: PublicKeyGenerationError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: CorruptedCodeExecution (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: CorruptedCodeExecution (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: CorruptedSerialization (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: CorruptedSerialization (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: CriticalCorruptedCreditsCodeExecution (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: CriticalCorruptedCreditsCodeExecution (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidVectorSizeError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidVectorSizeError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: errors :: protocol_error :: ProtocolError) -> * const dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (match obj { dpp :: errors :: protocol_error :: ProtocolError :: IdentifierError (o_0) => dpp_errors_protocol_error_ProtocolError :: IdentifierError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: StringDecodeError (o_0) => dpp_errors_protocol_error_ProtocolError :: StringDecodeError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: EmptyPublicKeyDataError => dpp_errors_protocol_error_ProtocolError :: EmptyPublicKeyDataError , dpp :: errors :: protocol_error :: ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes , size_hit } => dpp_errors_protocol_error_ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes : max_size_kbytes , size_hit : size_hit } , dpp :: errors :: protocol_error :: ProtocolError :: EncodingError (o_0) => dpp_errors_protocol_error_ProtocolError :: EncodingError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: DecodingError (o_0) => dpp_errors_protocol_error_ProtocolError :: DecodingError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: FileNotFound (o_0) => dpp_errors_protocol_error_ProtocolError :: FileNotFound (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: UnsupportedVersionMismatch { method , allowed_versions , received } => dpp_errors_protocol_error_ProtocolError :: UnsupportedVersionMismatch { method : ferment_interfaces :: FFIConversion :: ffi_to (method) , allowed_versions : ferment_interfaces :: FFIConversion :: ffi_to (allowed_versions) , received : ferment_interfaces :: FFIConversion :: ffi_to (received) } , dpp :: errors :: protocol_error :: ProtocolError :: UnknownVersionMismatch { method , known_versions , received } => dpp_errors_protocol_error_ProtocolError :: UnknownVersionMismatch { method : ferment_interfaces :: FFIConversion :: ffi_to (method) , known_versions : ferment_interfaces :: FFIConversion :: ffi_to (known_versions) , received : ferment_interfaces :: FFIConversion :: ffi_to (received) } , dpp :: errors :: protocol_error :: ProtocolError :: CurrentProtocolVersionNotInitialized => dpp_errors_protocol_error_ProtocolError :: CurrentProtocolVersionNotInitialized , dpp :: errors :: protocol_error :: ProtocolError :: UnknownVersionError (o_0) => dpp_errors_protocol_error_ProtocolError :: UnknownVersionError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: UnknownProtocolVersionError (o_0) => dpp_errors_protocol_error_ProtocolError :: UnknownProtocolVersionError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: NoProtocolVersionError => dpp_errors_protocol_error_ProtocolError :: NoProtocolVersionError , dpp :: errors :: protocol_error :: ProtocolError :: ParsingError (o_0) => dpp_errors_protocol_error_ProtocolError :: ParsingError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: ParsingJsonError (o_0) => dpp_errors_protocol_error_ProtocolError :: ParsingJsonError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: Error (o_0) => dpp_errors_protocol_error_ProtocolError :: Error (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidKeyContractBoundsError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidKeyContractBoundsError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: UnknownStorageKeyRequirements (o_0) => dpp_errors_protocol_error_ProtocolError :: UnknownStorageKeyRequirements (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: DataContractError (o_0) => dpp_errors_protocol_error_ProtocolError :: DataContractError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: StateTransitionError (o_0) => dpp_errors_protocol_error_ProtocolError :: StateTransitionError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: StructureError (o_0) => dpp_errors_protocol_error_ProtocolError :: StructureError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: PlatformVersionError (o_0) => dpp_errors_protocol_error_ProtocolError :: PlatformVersionError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: ConsensusError (o_0) => dpp_errors_protocol_error_ProtocolError :: ConsensusError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: Document (o_0) => dpp_errors_protocol_error_ProtocolError :: Document (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: Generic (o_0) => dpp_errors_protocol_error_ProtocolError :: Generic (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidSigningKeyTypeError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidSigningKeyTypeError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidIdentityPublicKeyTypeError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidIdentityPublicKeyTypeError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: StateTransitionIsNotSignedError (o_0) => dpp_errors_protocol_error_ProtocolError :: StateTransitionIsNotSignedError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: PublicKeySecurityLevelNotMetError (o_0) => dpp_errors_protocol_error_ProtocolError :: PublicKeySecurityLevelNotMetError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: WrongPublicKeyPurposeError (o_0) => dpp_errors_protocol_error_ProtocolError :: WrongPublicKeyPurposeError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: PublicKeyMismatchError (o_0) => dpp_errors_protocol_error_ProtocolError :: PublicKeyMismatchError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidSignaturePublicKeyError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeyError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: NonConsensusError (o_0) => dpp_errors_protocol_error_ProtocolError :: NonConsensusError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: CompatibleProtocolVersionIsNotDefinedError (o_0) => dpp_errors_protocol_error_ProtocolError :: CompatibleProtocolVersionIsNotDefinedError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: DataContractAlreadyExistsError => dpp_errors_protocol_error_ProtocolError :: DataContractAlreadyExistsError , dpp :: errors :: protocol_error :: ProtocolError :: InvalidDataContractError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidDataContractError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidDocumentTypeError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidDocumentTypeError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: DataContractNotPresentError (o_0) => dpp_errors_protocol_error_ProtocolError :: DataContractNotPresentError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidSignaturePublicKeySecurityLevelError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeySecurityLevelError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidStateTransitionTypeError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidStateTransitionTypeError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: PublicKeyIsDisabledError (o_0) => dpp_errors_protocol_error_ProtocolError :: PublicKeyIsDisabledError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: IdentityNotPresentError (o_0) => dpp_errors_protocol_error_ProtocolError :: IdentityNotPresentError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: Overflow (o_0) => dpp_errors_protocol_error_ProtocolError :: Overflow (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: DesiredKeyWithTypePurposeSecurityLevelMissing (o_0) => dpp_errors_protocol_error_ProtocolError :: DesiredKeyWithTypePurposeSecurityLevelMissing (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: ValueError (o_0) => dpp_errors_protocol_error_ProtocolError :: ValueError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: PlatformSerializationError (o_0) => dpp_errors_protocol_error_ProtocolError :: PlatformSerializationError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: PlatformDeserializationError (o_0) => dpp_errors_protocol_error_ProtocolError :: PlatformDeserializationError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: DashCoreError (o_0) => dpp_errors_protocol_error_ProtocolError :: DashCoreError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidIdentityError { errors , raw_identity } => dpp_errors_protocol_error_ProtocolError :: InvalidIdentityError { errors : ferment_interfaces :: FFIConversion :: ffi_to (errors) , raw_identity : ferment_interfaces :: FFIConversion :: ffi_to (raw_identity) } , dpp :: errors :: protocol_error :: ProtocolError :: PublicKeyGenerationError (o_0) => dpp_errors_protocol_error_ProtocolError :: PublicKeyGenerationError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: CorruptedCodeExecution (o_0) => dpp_errors_protocol_error_ProtocolError :: CorruptedCodeExecution (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: CorruptedSerialization (o_0) => dpp_errors_protocol_error_ProtocolError :: CorruptedSerialization (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: CriticalCorruptedCreditsCodeExecution (o_0) => dpp_errors_protocol_error_ProtocolError :: CriticalCorruptedCreditsCodeExecution (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidVectorSizeError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidVectorSizeError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_errors_protocol_error_ProtocolError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_errors_protocol_error_ProtocolError { fn drop (& mut self) { unsafe { match self { dpp_errors_protocol_error_ProtocolError :: IdentifierError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_protocol_error_ProtocolError :: StringDecodeError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_protocol_error_ProtocolError :: EmptyPublicKeyDataError => { } , dpp_errors_protocol_error_ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes , size_hit } => { ; } , dpp_errors_protocol_error_ProtocolError :: EncodingError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_protocol_error_ProtocolError :: DecodingError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_protocol_error_ProtocolError :: FileNotFound (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_protocol_error_ProtocolError :: UnsupportedVersionMismatch { method , allowed_versions , received } => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* method) ; ferment_interfaces :: unbox_any (* allowed_versions) ; ; ferment_interfaces :: unbox_any (* received) ; } , dpp_errors_protocol_error_ProtocolError :: UnknownVersionMismatch { method , known_versions , received } => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* method) ; ferment_interfaces :: unbox_any (* known_versions) ; ; ferment_interfaces :: unbox_any (* received) ; } , dpp_errors_protocol_error_ProtocolError :: CurrentProtocolVersionNotInitialized => { } , dpp_errors_protocol_error_ProtocolError :: UnknownVersionError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_protocol_error_ProtocolError :: UnknownProtocolVersionError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_protocol_error_ProtocolError :: NoProtocolVersionError => { } , dpp_errors_protocol_error_ProtocolError :: ParsingError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_protocol_error_ProtocolError :: ParsingJsonError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: Error (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: InvalidKeyContractBoundsError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_protocol_error_ProtocolError :: UnknownStorageKeyRequirements (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_protocol_error_ProtocolError :: DataContractError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: StateTransitionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: StructureError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: PlatformVersionError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: ConsensusError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: Document (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: Generic (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_protocol_error_ProtocolError :: InvalidSigningKeyTypeError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_protocol_error_ProtocolError :: InvalidIdentityPublicKeyTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: StateTransitionIsNotSignedError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: PublicKeySecurityLevelNotMetError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: WrongPublicKeyPurposeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: PublicKeyMismatchError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeyError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: NonConsensusError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: CompatibleProtocolVersionIsNotDefinedError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: DataContractAlreadyExistsError => { } , dpp_errors_protocol_error_ProtocolError :: InvalidDataContractError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: InvalidDocumentTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: DataContractNotPresentError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeySecurityLevelError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: InvalidStateTransitionTypeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: PublicKeyIsDisabledError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: IdentityNotPresentError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: Overflow (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } , dpp_errors_protocol_error_ProtocolError :: DesiredKeyWithTypePurposeSecurityLevelMissing (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_protocol_error_ProtocolError :: ValueError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: PlatformSerializationError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_protocol_error_ProtocolError :: PlatformDeserializationError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_protocol_error_ProtocolError :: DashCoreError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: InvalidIdentityError { errors , raw_identity } => { ferment_interfaces :: unbox_any (* errors) ; ; ferment_interfaces :: unbox_any (* raw_identity) ; } , dpp_errors_protocol_error_ProtocolError :: PublicKeyGenerationError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_protocol_error_ProtocolError :: CorruptedCodeExecution (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_protocol_error_ProtocolError :: CorruptedSerialization (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_protocol_error_ProtocolError :: CriticalCorruptedCreditsCodeExecution (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* o_0) } , dpp_errors_protocol_error_ProtocolError :: InvalidVectorSizeError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_IdentifierError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: IdentifierError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_StringDecodeError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: StringDecodeError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_EmptyPublicKeyDataError_ctor () -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: EmptyPublicKeyDataError) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_MaxEncodedBytesReachedError_ctor (max_size_kbytes : usize , size_hit : usize) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes , size_hit }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_EncodingError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: EncodingError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_DecodingError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: DecodingError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_FileNotFound_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: FileNotFound (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_UnsupportedVersionMismatch_ctor (method : * mut std :: os :: raw :: c_char , allowed_versions : * mut crate :: fermented :: generics :: Vec_platform_version_version_protocol_version_FeatureVersion , received : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: UnsupportedVersionMismatch { method , allowed_versions , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_UnknownVersionMismatch_ctor (method : * mut std :: os :: raw :: c_char , known_versions : * mut crate :: fermented :: generics :: Vec_platform_version_version_protocol_version_FeatureVersion , received : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: UnknownVersionMismatch { method , known_versions , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_CurrentProtocolVersionNotInitialized_ctor () -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: CurrentProtocolVersionNotInitialized) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_UnknownVersionError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: UnknownVersionError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_UnknownProtocolVersionError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: UnknownProtocolVersionError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_NoProtocolVersionError_ctor () -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: NoProtocolVersionError) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_ParsingError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: ParsingError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_ParsingJsonError_ctor (o_0 : * mut ferment_example_platform :: custom :: serde_json_Error) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: ParsingJsonError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_Error_ctor (o_0 : * mut ferment_example_platform :: custom :: anyhow_Error) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: Error (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidKeyContractBoundsError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidKeyContractBoundsError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_UnknownStorageKeyRequirements_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: UnknownStorageKeyRequirements (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_DataContractError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: errors :: contract :: dpp_data_contract_errors_contract_DataContractError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: DataContractError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_StateTransitionError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: errors :: state_transition_error :: dpp_state_transition_errors_state_transition_error_StateTransitionError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: StateTransitionError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_StructureError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: errors :: structure :: dpp_data_contract_errors_structure_StructureError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: StructureError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PlatformVersionError_ctor (o_0 : * mut crate :: fermented :: types :: platform_version :: error :: platform_version_error_PlatformVersionError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: PlatformVersionError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_ConsensusError_ctor (o_0 : * mut Box) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: ConsensusError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_Document_ctor (o_0 : * mut Box) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: Document (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_Generic_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: Generic (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidSigningKeyTypeError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidSigningKeyTypeError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidIdentityPublicKeyTypeError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidIdentityPublicKeyTypeError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_StateTransitionIsNotSignedError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: StateTransitionIsNotSignedError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PublicKeySecurityLevelNotMetError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: PublicKeySecurityLevelNotMetError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_WrongPublicKeyPurposeError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: errors :: wrong_public_key_purpose_error :: dpp_state_transition_errors_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: WrongPublicKeyPurposeError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PublicKeyMismatchError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: errors :: public_key_mismatch_error :: dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: PublicKeyMismatchError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidSignaturePublicKeyError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: errors :: invalid_signature_public_key_error :: dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeyError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_NonConsensusError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: non_consensus_error :: dpp_errors_non_consensus_error_NonConsensusError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: NonConsensusError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_CompatibleProtocolVersionIsNotDefinedError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: compatible_protocol_version_is_not_defined_error :: dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: CompatibleProtocolVersionIsNotDefinedError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_DataContractAlreadyExistsError_ctor () -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: DataContractAlreadyExistsError) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidDataContractError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: errors :: invalid_data_contract_error :: dpp_data_contract_errors_invalid_data_contract_error_InvalidDataContractError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidDataContractError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidDocumentTypeError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: errors :: invalid_document_type_error :: dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidDocumentTypeError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_DataContractNotPresentError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: errors :: data_contract_not_present_error :: dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: DataContractNotPresentError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidSignaturePublicKeySecurityLevelError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeySecurityLevelError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidStateTransitionTypeError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidStateTransitionTypeError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PublicKeyIsDisabledError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: PublicKeyIsDisabledError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_IdentityNotPresentError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: errors :: identity_not_present_error :: dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: IdentityNotPresentError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_Overflow_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: Overflow (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_DesiredKeyWithTypePurposeSecurityLevelMissing_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: DesiredKeyWithTypePurposeSecurityLevelMissing (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_ValueError_ctor (o_0 : * mut crate :: fermented :: types :: platform_value :: platform_value_ValueError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: ValueError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PlatformSerializationError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: PlatformSerializationError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PlatformDeserializationError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: PlatformDeserializationError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_DashCoreError_ctor (o_0 : * mut ferment_example_platform :: custom :: dashcore_consensus_encode_Error) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: DashCoreError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidIdentityError_ctor (errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , raw_identity : * mut ferment_example_platform :: custom :: platform_value_Value) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidIdentityError { errors , raw_identity }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PublicKeyGenerationError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: PublicKeyGenerationError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_CorruptedCodeExecution_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: CorruptedCodeExecution (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_CorruptedSerialization_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: CorruptedSerialization (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_CriticalCorruptedCreditsCodeExecution_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: CriticalCorruptedCreditsCodeExecution (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidVectorSizeError_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: errors :: invalid_vector_size_error :: dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidVectorSizeError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_destroy (ffi : * mut dpp_errors_protocol_error_ProtocolError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod dpp_init_error { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`dpp::errors::dpp_init_error::DashPlatformProtocolInitError`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_errors_dpp_init_error_DashPlatformProtocolInitError { SchemaDeserializationError (* mut ferment_example_platform :: custom :: serde_json_Error) , ValidationError (* mut ferment_example_platform :: custom :: jsonschema_ValidationError) , InvalidSchemaError (* mut std :: os :: raw :: c_char) , UnknownVersionMismatch { method : * mut std :: os :: raw :: c_char , known_versions : * mut crate :: fermented :: generics :: Vec_platform_version_version_protocol_version_FeatureVersion , received : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } } impl ferment_interfaces :: FFIConversion < dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError > for dpp_errors_dpp_init_error_DashPlatformProtocolInitError { unsafe fn ffi_from_const (ffi : * const dpp_errors_dpp_init_error_DashPlatformProtocolInitError) -> dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: SchemaDeserializationError (o_0) => dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError :: SchemaDeserializationError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: ValidationError (o_0) => dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError :: ValidationError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: InvalidSchemaError (o_0) => dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError :: InvalidSchemaError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: UnknownVersionMismatch { method , known_versions , received } => dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError :: UnknownVersionMismatch { method : ferment_interfaces :: FFIConversion :: ffi_from (* method) , known_versions : ferment_interfaces :: FFIConversion :: ffi_from (* known_versions) , received : ferment_interfaces :: FFIConversion :: ffi_from (* received) } } } unsafe fn ffi_to_const (obj : dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError) -> * const dpp_errors_dpp_init_error_DashPlatformProtocolInitError { ferment_interfaces :: boxed (match obj { dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError :: SchemaDeserializationError (o_0) => dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: SchemaDeserializationError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError :: ValidationError (o_0) => dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: ValidationError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError :: InvalidSchemaError (o_0) => dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: InvalidSchemaError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError :: UnknownVersionMismatch { method , known_versions , received } => dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: UnknownVersionMismatch { method : ferment_interfaces :: FFIConversion :: ffi_to (method) , known_versions : ferment_interfaces :: FFIConversion :: ffi_to (known_versions) , received : ferment_interfaces :: FFIConversion :: ffi_to (received) } }) } unsafe fn destroy (ffi : * mut dpp_errors_dpp_init_error_DashPlatformProtocolInitError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_errors_dpp_init_error_DashPlatformProtocolInitError { fn drop (& mut self) { unsafe { match self { dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: SchemaDeserializationError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: ValidationError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } , dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: InvalidSchemaError (o_0) => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (* o_0) } , dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: UnknownVersionMismatch { method , known_versions , received } => { < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* method) ; ferment_interfaces :: unbox_any (* known_versions) ; ; ferment_interfaces :: unbox_any (* received) ; } } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_init_error_DashPlatformProtocolInitError_SchemaDeserializationError_ctor (o_0 : * mut ferment_example_platform :: custom :: serde_json_Error) -> * mut dpp_errors_dpp_init_error_DashPlatformProtocolInitError { ferment_interfaces :: boxed (dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: SchemaDeserializationError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_init_error_DashPlatformProtocolInitError_ValidationError_ctor (o_0 : * mut ferment_example_platform :: custom :: jsonschema_ValidationError) -> * mut dpp_errors_dpp_init_error_DashPlatformProtocolInitError { ferment_interfaces :: boxed (dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: ValidationError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_init_error_DashPlatformProtocolInitError_InvalidSchemaError_ctor (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_dpp_init_error_DashPlatformProtocolInitError { ferment_interfaces :: boxed (dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: InvalidSchemaError (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_init_error_DashPlatformProtocolInitError_UnknownVersionMismatch_ctor (method : * mut std :: os :: raw :: c_char , known_versions : * mut crate :: fermented :: generics :: Vec_platform_version_version_protocol_version_FeatureVersion , received : * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut dpp_errors_dpp_init_error_DashPlatformProtocolInitError { ferment_interfaces :: boxed (dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: UnknownVersionMismatch { method , known_versions , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_init_error_DashPlatformProtocolInitError_destroy (ffi : * mut dpp_errors_dpp_init_error_DashPlatformProtocolInitError) { ferment_interfaces :: unbox_any (ffi) ; } } } } pub mod ferment_example_platform { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`ferment_example_platform::SPV`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_platform_SPV { pub version : u32 } impl ferment_interfaces :: FFIConversion < ferment_example_platform :: SPV > for ferment_example_platform_SPV { unsafe fn ffi_from_const (ffi : * const ferment_example_platform_SPV) -> ferment_example_platform :: SPV { let ffi_ref = & * ffi ; ferment_example_platform :: SPV { version : ffi_ref . version } } unsafe fn ffi_to_const (obj : ferment_example_platform :: SPV) -> * const ferment_example_platform_SPV { ferment_interfaces :: boxed (ferment_example_platform_SPV { version : obj . version }) } unsafe fn destroy (ffi : * mut ferment_example_platform_SPV) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_platform_SPV { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn ferment_example_platform_SPV_ctor (version : u32) -> * mut ferment_example_platform_SPV { ferment_interfaces :: boxed (ferment_example_platform_SPV { version }) } # [no_mangle] pub unsafe extern "C" fn ferment_example_platform_SPV_destroy (ffi : * mut ferment_example_platform_SPV) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn ferment_example_platform_SPV_get_version (obj : * const ferment_example_platform_SPV) -> u32 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn ferment_example_platform_SPV_set_version (obj : * mut ferment_example_platform_SPV , value : u32) { (* obj) . version = value ; } pub mod spv { use crate as ferment_example_platform ; # [doc = "FFI-representation of the [`ferment_example_platform::spv::fetch_identity`]"] # [no_mangle] pub unsafe extern "C" fn ferment_example_platform_spv_fetch_identity (identifier : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut crate :: fermented :: generics :: Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError { let obj = ferment_example_platform :: spv :: fetch_identity (ferment_interfaces :: FFIConversion :: ffi_from (identifier)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } } } } # [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unused_braces , unused_imports , unused_unsafe , unused_variables , unused_qualifications)] pub mod generics { use crate as ferment_example_platform ; # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel } impl ferment_interfaces :: FFIConversion < Vec < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel > > for Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { unsafe fn ffi_from_const (ffi : * const Vec_dpp_identity_identity_public_key_security_level_SecurityLevel) -> Vec < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >) -> * const Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_dpp_identity_identity_public_key_security_level_SecurityLevel) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { type Value = Vec < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_vec (obj . into_iter ()) }) } } impl Drop for Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_identity_identity_public_key_security_level_SecurityLevel_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) -> * mut Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { ferment_interfaces :: boxed (Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_identity_identity_public_key_security_level_SecurityLevel_destroy (ffi : * mut Vec_dpp_identity_identity_public_key_security_level_SecurityLevel) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Tuple_Value_Value { pub o_0 : * mut Value , pub o_1 : * mut Value } impl ferment_interfaces :: FFIConversion < (Value , Value) > for Tuple_Value_Value { unsafe fn ffi_from_const (ffi : * const Tuple_Value_Value) -> (Value , Value) { let ffi_ref = & * ffi ; (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . o_0) , ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . o_1)) } unsafe fn ffi_to_const (obj : (Value , Value)) -> * const Tuple_Value_Value { ferment_interfaces :: boxed (Self { o_0 : ferment_interfaces :: FFIConversion :: ffi_to (obj . 0) , o_1 : ferment_interfaces :: FFIConversion :: ffi_to (obj . 1) }) } unsafe fn destroy (ffi : * mut Tuple_Value_Value) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Tuple_Value_Value { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any (self . o_0) ; ferment_interfaces :: unbox_any (self . o_1) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Tuple_Value_Value_ctor (o_0 : * mut Value , o_1 : * mut Value) -> * mut Tuple_Value_Value { ferment_interfaces :: boxed (Tuple_Value_Value { o_0 , o_1 }) } # [no_mangle] pub unsafe extern "C" fn Tuple_Value_Value_destroy (ffi : * mut Tuple_Value_Value) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DocumentName , pub values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , platform_value :: Value > > for std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value) -> std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , platform_value :: Value > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , platform_value :: Value >) -> * const std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_vec (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_vec (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DocumentName , values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value) -> * mut std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { ferment_interfaces :: boxed (std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value_destroy (ffi : * mut std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_document_Document { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document } impl ferment_interfaces :: FFIConversion < Vec < dpp :: document :: Document > > for Vec_dpp_document_Document { unsafe fn ffi_from_const (ffi : * const Vec_dpp_document_Document) -> Vec < dpp :: document :: Document > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < dpp :: document :: Document >) -> * const Vec_dpp_document_Document { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_dpp_document_Document) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dpp_document_Document { type Value = Vec < dpp :: document :: Document > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_vec (obj . into_iter ()) }) } } impl Drop for Vec_dpp_document_Document { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_document_Document_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document) -> * mut Vec_dpp_document_Document { ferment_interfaces :: boxed (Vec_dpp_document_Document { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_document_Document_destroy (ffi : * mut Vec_dpp_document_Document) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_Tuple_String_Arr_u8_32 { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Tuple_String_Arr_u8_32 } impl ferment_interfaces :: FFIConversion < Vec < (String , [u8 ; 32]) > > for Vec_Tuple_String_Arr_u8_32 { unsafe fn ffi_from_const (ffi : * const Vec_Tuple_String_Arr_u8_32) -> Vec < (String , [u8 ; 32]) > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < (String , [u8 ; 32]) >) -> * const Vec_Tuple_String_Arr_u8_32 { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_Tuple_String_Arr_u8_32) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_Tuple_String_Arr_u8_32 { type Value = Vec < (String , [u8 ; 32]) > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_vec (obj . into_iter ()) }) } } impl Drop for Vec_Tuple_String_Arr_u8_32 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_String_Arr_u8_32_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Tuple_String_Arr_u8_32) -> * mut Vec_Tuple_String_Arr_u8_32 { ferment_interfaces :: boxed (Vec_Tuple_String_Arr_u8_32 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_String_Arr_u8_32_destroy (ffi : * mut Vec_Tuple_String_Arr_u8_32) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_data_contract_document_type_index_IndexProperty { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_IndexProperty } impl ferment_interfaces :: FFIConversion < Vec < dpp :: data_contract :: document_type :: index :: IndexProperty > > for Vec_dpp_data_contract_document_type_index_IndexProperty { unsafe fn ffi_from_const (ffi : * const Vec_dpp_data_contract_document_type_index_IndexProperty) -> Vec < dpp :: data_contract :: document_type :: index :: IndexProperty > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < dpp :: data_contract :: document_type :: index :: IndexProperty >) -> * const Vec_dpp_data_contract_document_type_index_IndexProperty { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_dpp_data_contract_document_type_index_IndexProperty) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dpp_data_contract_document_type_index_IndexProperty { type Value = Vec < dpp :: data_contract :: document_type :: index :: IndexProperty > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_vec (obj . into_iter ()) }) } } impl Drop for Vec_dpp_data_contract_document_type_index_IndexProperty { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_data_contract_document_type_index_IndexProperty_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_IndexProperty) -> * mut Vec_dpp_data_contract_document_type_index_IndexProperty { ferment_interfaces :: boxed (Vec_dpp_data_contract_document_type_index_IndexProperty { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_data_contract_document_type_index_IndexProperty_destroy (ffi : * mut Vec_dpp_data_contract_document_type_index_IndexProperty) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_errors_consensus_consensus_error_ConsensusError { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: errors :: consensus :: consensus_error :: dpp_errors_consensus_consensus_error_ConsensusError } impl ferment_interfaces :: FFIConversion < Vec < dpp :: errors :: consensus :: consensus_error :: ConsensusError > > for Vec_dpp_errors_consensus_consensus_error_ConsensusError { unsafe fn ffi_from_const (ffi : * const Vec_dpp_errors_consensus_consensus_error_ConsensusError) -> Vec < dpp :: errors :: consensus :: consensus_error :: ConsensusError > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < dpp :: errors :: consensus :: consensus_error :: ConsensusError >) -> * const Vec_dpp_errors_consensus_consensus_error_ConsensusError { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_dpp_errors_consensus_consensus_error_ConsensusError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dpp_errors_consensus_consensus_error_ConsensusError { type Value = Vec < dpp :: errors :: consensus :: consensus_error :: ConsensusError > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_vec (obj . into_iter ()) }) } } impl Drop for Vec_dpp_errors_consensus_consensus_error_ConsensusError { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_errors_consensus_consensus_error_ConsensusError_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: errors :: consensus :: consensus_error :: dpp_errors_consensus_consensus_error_ConsensusError) -> * mut Vec_dpp_errors_consensus_consensus_error_ConsensusError { ferment_interfaces :: boxed (Vec_dpp_errors_consensus_consensus_error_ConsensusError { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_errors_consensus_consensus_error_ConsensusError_destroy (ffi : * mut Vec_dpp_errors_consensus_consensus_error_ConsensusError) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < dpp :: identity :: identity_public_key :: KeyID , dpp :: identity :: identity_public_key :: IdentityPublicKey > > for std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey) -> std :: collections :: BTreeMap < dpp :: identity :: identity_public_key :: KeyID , dpp :: identity :: identity_public_key :: IdentityPublicKey > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dpp :: identity :: identity_public_key :: KeyID , dpp :: identity :: identity_public_key :: IdentityPublicKey >) -> * const std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_vec (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_vec (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey) -> * mut std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { ferment_interfaces :: boxed (std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey_destroy (ffi : * mut std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_Tuple_Value_Value { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Tuple_Value_Value } impl ferment_interfaces :: FFIConversion < Vec < (Value , Value) > > for Vec_Tuple_Value_Value { unsafe fn ffi_from_const (ffi : * const Vec_Tuple_Value_Value) -> Vec < (Value , Value) > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < (Value , Value) >) -> * const Vec_Tuple_Value_Value { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_Tuple_Value_Value) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_Tuple_Value_Value { type Value = Vec < (Value , Value) > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_vec (obj . into_iter ()) }) } } impl Drop for Vec_Tuple_Value_Value { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_Value_Value_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Tuple_Value_Value) -> * mut Vec_Tuple_Value_Value { ferment_interfaces :: boxed (Vec_Tuple_Value_Value { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_Value_Value_destroy (ffi : * mut Vec_Tuple_Value_Value) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DefinitionName , pub values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , platform_value :: Value > > for std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value) -> std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , platform_value :: Value > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , platform_value :: Value >) -> * const std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_vec (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_vec (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DefinitionName , values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value) -> * mut std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { ferment_interfaces :: boxed (std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value_destroy (ffi : * mut std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Tuple_String_Arr_u8_32 { pub o_0 : * mut std :: os :: raw :: c_char , pub o_1 : * mut crate :: fermented :: generics :: Arr_u8_32 } impl ferment_interfaces :: FFIConversion < (String , [u8 ; 32]) > for Tuple_String_Arr_u8_32 { unsafe fn ffi_from_const (ffi : * const Tuple_String_Arr_u8_32) -> (String , [u8 ; 32]) { let ffi_ref = & * ffi ; (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . o_0) , ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . o_1)) } unsafe fn ffi_to_const (obj : (String , [u8 ; 32])) -> * const Tuple_String_Arr_u8_32 { ferment_interfaces :: boxed (Self { o_0 : ferment_interfaces :: FFIConversion :: ffi_to (obj . 0) , o_1 : ferment_interfaces :: FFIConversion :: ffi_to (obj . 1) }) } unsafe fn destroy (ffi : * mut Tuple_String_Arr_u8_32) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Tuple_String_Arr_u8_32 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any (self . o_0) ; ferment_interfaces :: unbox_any (self . o_1) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Tuple_String_Arr_u8_32_ctor (o_0 : * mut std :: os :: raw :: c_char , o_1 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut Tuple_String_Arr_u8_32 { ferment_interfaces :: boxed (Tuple_String_Arr_u8_32 { o_0 , o_1 }) } # [no_mangle] pub unsafe extern "C" fn Tuple_String_Arr_u8_32_destroy (ffi : * mut Tuple_String_Arr_u8_32) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeSet < dpp :: identity :: identity_public_key :: KeyID > > for std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { unsafe fn ffi_from_const (ffi : * const std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID) -> std :: collections :: BTreeSet < dpp :: identity :: identity_public_key :: KeyID > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeSet < dpp :: identity :: identity_public_key :: KeyID >) -> * const std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { type Value = std :: collections :: BTreeSet < dpp :: identity :: identity_public_key :: KeyID > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_btree_set (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_vec (obj . into_iter ()) }) } } impl Drop for std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { ferment_interfaces :: boxed (std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { count , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID_destroy (ffi : * mut std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_data_contract_document_type_index_Index { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_Index } impl ferment_interfaces :: FFIConversion < Vec < dpp :: data_contract :: document_type :: index :: Index > > for Vec_dpp_data_contract_document_type_index_Index { unsafe fn ffi_from_const (ffi : * const Vec_dpp_data_contract_document_type_index_Index) -> Vec < dpp :: data_contract :: document_type :: index :: Index > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < dpp :: data_contract :: document_type :: index :: Index >) -> * const Vec_dpp_data_contract_document_type_index_Index { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_dpp_data_contract_document_type_index_Index) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dpp_data_contract_document_type_index_Index { type Value = Vec < dpp :: data_contract :: document_type :: index :: Index > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_vec (obj . into_iter ()) }) } } impl Drop for Vec_dpp_data_contract_document_type_index_Index { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_data_contract_document_type_index_Index_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_Index) -> * mut Vec_dpp_data_contract_document_type_index_Index { ferment_interfaces :: boxed (Vec_dpp_data_contract_document_type_index_Index { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_data_contract_document_type_index_Index_destroy (ffi : * mut Vec_dpp_data_contract_document_type_index_Index) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_32 { pub count : usize , pub values : * mut u8 } impl ferment_interfaces :: FFIConversion < [u8 ; 32] > for Arr_u8_32 { unsafe fn ffi_from_const (ffi : * const Arr_u8_32) -> [u8 ; 32] { let ffi_ref = & * ffi ; std :: slice :: from_raw_parts (ffi_ref . values , ffi_ref . count) . try_into () . expect ("Array Length mismatch") } unsafe fn ffi_to_const (obj : [u8 ; 32]) -> * const Arr_u8_32 { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: boxed_vec (obj . to_vec ()) }) } unsafe fn destroy (ffi : * mut Arr_u8_32) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Arr_u8_32 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_32_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_32 { ferment_interfaces :: boxed (Arr_u8_32 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_32_destroy (ffi : * mut Arr_u8_32) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_data_contract_document_type_property_array_ArrayItemType { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: array :: dpp_data_contract_document_type_property_array_ArrayItemType } impl ferment_interfaces :: FFIConversion < Vec < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType > > for Vec_dpp_data_contract_document_type_property_array_ArrayItemType { unsafe fn ffi_from_const (ffi : * const Vec_dpp_data_contract_document_type_property_array_ArrayItemType) -> Vec < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType >) -> * const Vec_dpp_data_contract_document_type_property_array_ArrayItemType { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_dpp_data_contract_document_type_property_array_ArrayItemType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dpp_data_contract_document_type_property_array_ArrayItemType { type Value = Vec < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_vec (obj . into_iter ()) }) } } impl Drop for Vec_dpp_data_contract_document_type_property_array_ArrayItemType { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_data_contract_document_type_property_array_ArrayItemType_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: array :: dpp_data_contract_document_type_property_array_ArrayItemType) -> * mut Vec_dpp_data_contract_document_type_property_array_ArrayItemType { ferment_interfaces :: boxed (Vec_dpp_data_contract_document_type_property_array_ArrayItemType { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_data_contract_document_type_property_array_ArrayItemType_destroy (ffi : * mut Vec_dpp_data_contract_document_type_property_array_ArrayItemType) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_String_values_platform_value_Value { pub count : usize , pub keys : * mut * mut std :: os :: raw :: c_char , pub values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < String , platform_value :: Value > > for std_collections_Map_keys_String_values_platform_value_Value { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_String_values_platform_value_Value) -> std :: collections :: BTreeMap < String , platform_value :: Value > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < String , platform_value :: Value >) -> * const std_collections_Map_keys_String_values_platform_value_Value { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_vec (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_vec (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_String_values_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_String_values_platform_value_Value { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_platform_value_Value_ctor (count : usize , keys : * mut * mut std :: os :: raw :: c_char , values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value) -> * mut std_collections_Map_keys_String_values_platform_value_Value { ferment_interfaces :: boxed (std_collections_Map_keys_String_values_platform_value_Value { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_platform_value_Value_destroy (ffi : * mut std_collections_Map_keys_String_values_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_u8 { pub count : usize , pub values : * mut u8 } impl ferment_interfaces :: FFIConversion < Vec < u8 > > for Vec_u8 { unsafe fn ffi_from_const (ffi : * const Vec_u8) -> Vec < u8 > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < u8 >) -> * const Vec_u8 { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_u8) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_u8 { type Value = Vec < u8 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_primitive_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: boxed_vec (obj) }) } } impl Drop for Vec_u8 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_u8_ctor (count : usize , values : * mut u8) -> * mut Vec_u8 { ferment_interfaces :: boxed (Vec_u8 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_u8_destroy (ffi : * mut Vec_u8) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_platform_value_Identifier_values_Option_dpp_document_Document { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Identifier , pub values : * mut * mut Option < dpp :: document :: Document > } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < platform_value :: Identifier , Option < dpp :: document :: Document > > > for std_collections_Map_keys_platform_value_Identifier_values_Option_dpp_document_Document { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_platform_value_Identifier_values_Option_dpp_document_Document) -> std :: collections :: BTreeMap < platform_value :: Identifier , Option < dpp :: document :: Document > > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < platform_value :: Identifier , Option < dpp :: document :: Document > >) -> * const std_collections_Map_keys_platform_value_Identifier_values_Option_dpp_document_Document { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_vec (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_vec (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_platform_value_Identifier_values_Option_dpp_document_Document) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_platform_value_Identifier_values_Option_dpp_document_Document { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_platform_value_Identifier_values_Option_dpp_document_Document_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Identifier , values : * mut * mut Option < dpp :: document :: Document >) -> * mut std_collections_Map_keys_platform_value_Identifier_values_Option_dpp_document_Document { ferment_interfaces :: boxed (std_collections_Map_keys_platform_value_Identifier_values_Option_dpp_document_Document { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_platform_value_Identifier_values_Option_dpp_document_Document_destroy (ffi : * mut std_collections_Map_keys_platform_value_Identifier_values_Option_dpp_document_Document) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_BTreeSet_String { pub count : usize , pub values : * mut * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeSet < String > > for std_collections_BTreeSet_String { unsafe fn ffi_from_const (ffi : * const std_collections_BTreeSet_String) -> std :: collections :: BTreeSet < String > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeSet < String >) -> * const std_collections_BTreeSet_String { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut std_collections_BTreeSet_String) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for std_collections_BTreeSet_String { type Value = std :: collections :: BTreeSet < String > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_btree_set (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_vec (obj . into_iter ()) }) } } impl Drop for std_collections_BTreeSet_String { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_BTreeSet_String_ctor (count : usize , values : * mut * mut std :: os :: raw :: c_char) -> * mut std_collections_BTreeSet_String { ferment_interfaces :: boxed (std_collections_BTreeSet_String { count , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_BTreeSet_String_destroy (ffi : * mut std_collections_BTreeSet_String) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DocumentName , pub values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: dpp_data_contract_document_type_DocumentType } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , dpp :: data_contract :: document_type :: DocumentType > > for std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType) -> std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , dpp :: data_contract :: document_type :: DocumentType > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , dpp :: data_contract :: document_type :: DocumentType >) -> * const std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_vec (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_vec (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DocumentName , values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: dpp_data_contract_document_type_DocumentType) -> * mut std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { ferment_interfaces :: boxed (std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType_destroy (ffi : * mut std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { pub count : usize , pub keys : * mut * mut std :: os :: raw :: c_char , pub values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_DocumentProperty } impl ferment_interfaces :: FFIConversion < indexmap :: IndexMap < String , dpp :: data_contract :: document_type :: property :: DocumentProperty > > for indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { unsafe fn ffi_from_const (ffi : * const indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty) -> indexmap :: IndexMap < String , dpp :: data_contract :: document_type :: property :: DocumentProperty > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : indexmap :: IndexMap < String , dpp :: data_contract :: document_type :: property :: DocumentProperty >) -> * const indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_vec (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_vec (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty_ctor (count : usize , keys : * mut * mut std :: os :: raw :: c_char , values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_DocumentProperty) -> * mut indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { ferment_interfaces :: boxed (indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty_destroy (ffi : * mut indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_Tuple_platform_value_Value_platform_value_Value { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Tuple_platform_value_Value_platform_value_Value } impl ferment_interfaces :: FFIConversion < Vec < (platform_value :: Value , platform_value :: Value) > > for Vec_Tuple_platform_value_Value_platform_value_Value { unsafe fn ffi_from_const (ffi : * const Vec_Tuple_platform_value_Value_platform_value_Value) -> Vec < (platform_value :: Value , platform_value :: Value) > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < (platform_value :: Value , platform_value :: Value) >) -> * const Vec_Tuple_platform_value_Value_platform_value_Value { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_Tuple_platform_value_Value_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_Tuple_platform_value_Value_platform_value_Value { type Value = Vec < (platform_value :: Value , platform_value :: Value) > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_vec (obj . into_iter ()) }) } } impl Drop for Vec_Tuple_platform_value_Value_platform_value_Value { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_platform_value_Value_platform_value_Value_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Tuple_platform_value_Value_platform_value_Value) -> * mut Vec_Tuple_platform_value_Value_platform_value_Value { ferment_interfaces :: boxed (Vec_Tuple_platform_value_Value_platform_value_Value { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_platform_value_Value_platform_value_Value_destroy (ffi : * mut Vec_Tuple_platform_value_Value_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation } impl ferment_interfaces :: FFIConversion < Vec < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > > for Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { unsafe fn ffi_from_const (ffi : * const Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) -> Vec < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation >) -> * const Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { type Value = Vec < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_vec (obj . into_iter ()) }) } } impl Drop for Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) -> * mut Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { ferment_interfaces :: boxed (Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation_destroy (ffi : * mut Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition } impl ferment_interfaces :: FFIConversion < Vec < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition > > for Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { unsafe fn ffi_from_const (ffi : * const Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) -> Vec < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition >) -> * const Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { type Value = Vec < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_vec (obj . into_iter ()) }) } } impl Drop for Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) -> * mut Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment_interfaces :: boxed (Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_destroy (ffi : * mut Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError { pub ok : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity , pub error : * mut crate :: fermented :: types :: dpp :: errors :: protocol_error :: dpp_errors_protocol_error_ProtocolError } impl ferment_interfaces :: FFIConversion < Result < dpp :: identity :: identity :: Identity , dpp :: errors :: protocol_error :: ProtocolError > > for Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError { unsafe fn ffi_from_const (ffi : * const Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError) -> Result < dpp :: identity :: identity :: Identity , dpp :: errors :: protocol_error :: ProtocolError > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_result (ffi_ref . ok , ffi_ref . error , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : Result < dpp :: identity :: identity :: Identity , dpp :: errors :: protocol_error :: ProtocolError >) -> * const Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed ({ let (ok , error) = match obj { Ok (o) => (ferment_interfaces :: FFIConversion :: ffi_to (o) , std :: ptr :: null_mut ()) , Err (o) => (std :: ptr :: null_mut () , ferment_interfaces :: FFIConversion :: ffi_to (o)) } ; Self { ok , error } }) } unsafe fn destroy (ffi : * mut Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError { fn drop (& mut self) { unsafe { if ! (self . ok) . is_null () { ferment_interfaces :: unbox_any (self . ok) ; } if ! (self . error) . is_null () { ferment_interfaces :: unbox_any (self . error) ; } ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError_ctor (ok : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity , error : * mut crate :: fermented :: types :: dpp :: errors :: protocol_error :: dpp_errors_protocol_error_ProtocolError) -> * mut Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError { ferment_interfaces :: boxed (Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError_destroy (ffi : * mut Result_ok_dpp_identity_identity_Identity_err_dpp_errors_protocol_error_ProtocolError) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_String { pub count : usize , pub values : * mut * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < Vec < String > > for Vec_String { unsafe fn ffi_from_const (ffi : * const Vec_String) -> Vec < String > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < String >) -> * const Vec_String { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_String) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_String { type Value = Vec < String > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_vec (obj . into_iter ()) }) } } impl Drop for Vec_String { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_String_ctor (count : usize , values : * mut * mut std :: os :: raw :: c_char) -> * mut Vec_String { ferment_interfaces :: boxed (Vec_String { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_String_destroy (ffi : * mut Vec_String) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_platform_version_version_protocol_version_FeatureVersion { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion } impl ferment_interfaces :: FFIConversion < Vec < platform_version :: version :: protocol_version :: FeatureVersion > > for Vec_platform_version_version_protocol_version_FeatureVersion { unsafe fn ffi_from_const (ffi : * const Vec_platform_version_version_protocol_version_FeatureVersion) -> Vec < platform_version :: version :: protocol_version :: FeatureVersion > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < platform_version :: version :: protocol_version :: FeatureVersion >) -> * const Vec_platform_version_version_protocol_version_FeatureVersion { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_platform_version_version_protocol_version_FeatureVersion) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_platform_version_version_protocol_version_FeatureVersion { type Value = Vec < platform_version :: version :: protocol_version :: FeatureVersion > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_vec (obj . into_iter ()) }) } } impl Drop for Vec_platform_version_version_protocol_version_FeatureVersion { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_platform_version_version_protocol_version_FeatureVersion_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: platform_version :: version :: protocol_version :: platform_version_version_protocol_version_FeatureVersion) -> * mut Vec_platform_version_version_protocol_version_FeatureVersion { ferment_interfaces :: boxed (Vec_platform_version_version_protocol_version_FeatureVersion { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_platform_version_version_protocol_version_FeatureVersion_destroy (ffi : * mut Vec_platform_version_version_protocol_version_FeatureVersion) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_identity_identity_public_key_KeyID { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment_interfaces :: FFIConversion < Vec < dpp :: identity :: identity_public_key :: KeyID > > for Vec_dpp_identity_identity_public_key_KeyID { unsafe fn ffi_from_const (ffi : * const Vec_dpp_identity_identity_public_key_KeyID) -> Vec < dpp :: identity :: identity_public_key :: KeyID > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < dpp :: identity :: identity_public_key :: KeyID >) -> * const Vec_dpp_identity_identity_public_key_KeyID { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_dpp_identity_identity_public_key_KeyID) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dpp_identity_identity_public_key_KeyID { type Value = Vec < dpp :: identity :: identity_public_key :: KeyID > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_vec (obj . into_iter ()) }) } } impl Drop for Vec_dpp_identity_identity_public_key_KeyID { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_identity_identity_public_key_KeyID_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut Vec_dpp_identity_identity_public_key_KeyID { ferment_interfaces :: boxed (Vec_dpp_identity_identity_public_key_KeyID { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_identity_identity_public_key_KeyID_destroy (ffi : * mut Vec_dpp_identity_identity_public_key_KeyID) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { pub count : usize , pub keys : * mut * mut std :: os :: raw :: c_char , pub values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevel } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index_level :: IndexLevel > > for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel) -> std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index_level :: IndexLevel > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index_level :: IndexLevel >) -> * const std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_vec (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_vec (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel_ctor (count : usize , keys : * mut * mut std :: os :: raw :: c_char , values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevel) -> * mut std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { ferment_interfaces :: boxed (std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel_destroy (ffi : * mut std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Tuple_platform_value_Value_platform_value_Value { pub o_0 : * mut ferment_example_platform :: custom :: platform_value_Value , pub o_1 : * mut ferment_example_platform :: custom :: platform_value_Value } impl ferment_interfaces :: FFIConversion < (platform_value :: Value , platform_value :: Value) > for Tuple_platform_value_Value_platform_value_Value { unsafe fn ffi_from_const (ffi : * const Tuple_platform_value_Value_platform_value_Value) -> (platform_value :: Value , platform_value :: Value) { let ffi_ref = & * ffi ; (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . o_0) , ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . o_1)) } unsafe fn ffi_to_const (obj : (platform_value :: Value , platform_value :: Value)) -> * const Tuple_platform_value_Value_platform_value_Value { ferment_interfaces :: boxed (Self { o_0 : ferment_interfaces :: FFIConversion :: ffi_to (obj . 0) , o_1 : ferment_interfaces :: FFIConversion :: ffi_to (obj . 1) }) } unsafe fn destroy (ffi : * mut Tuple_platform_value_Value_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Tuple_platform_value_Value_platform_value_Value { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any (self . o_0) ; ferment_interfaces :: unbox_any (self . o_1) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Tuple_platform_value_Value_platform_value_Value_ctor (o_0 : * mut ferment_example_platform :: custom :: platform_value_Value , o_1 : * mut ferment_example_platform :: custom :: platform_value_Value) -> * mut Tuple_platform_value_Value_platform_value_Value { ferment_interfaces :: boxed (Tuple_platform_value_Value_platform_value_Value { o_0 , o_1 }) } # [no_mangle] pub unsafe extern "C" fn Tuple_platform_value_Value_platform_value_Value_destroy (ffi : * mut Tuple_platform_value_Value_platform_value_Value) { ferment_interfaces :: unbox_any (ffi) ; } }